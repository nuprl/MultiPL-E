name: HumanEval_85_add
language: py
results:
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vx1v11w.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp0vx1v11w.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp0vx1v11w.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2se7k9_c.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp2se7k9_c.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp2se7k9_c.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9juopn_d.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9juopn_d.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp9juopn_d.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1wh0mcy.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpy1wh0mcy.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpy1wh0mcy.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv2mtcnx.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdv2mtcnx.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpdv2mtcnx.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(1, len(lst), 2) if lst[i] % 2 == 0)\n\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudn7x0lr.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpudn7x0lr.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpudn7x0lr.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz_wha3v.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzz_wha3v.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpzz_wha3v.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsf8v1c50.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpsf8v1c50.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpsf8v1c50.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplo31tu68.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmplo31tu68.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmplo31tu68.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe526si0z.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpe526si0z.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpe526si0z.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8w8f3tg.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpf8w8f3tg.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpf8w8f3tg.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpverfpx80.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpverfpx80.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpverfpx80.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbykg2zvf.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpbykg2zvf.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpbykg2zvf.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjiudto_k.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpjiudto_k.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpjiudto_k.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl1hloqrs.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpl1hloqrs.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpl1hloqrs.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkk2zx886.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpkk2zx886.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpkk2zx886.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnulvnot.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpbnulvnot.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpbnulvnot.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62ccbuo2.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp62ccbuo2.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp62ccbuo2.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0jd9v8u.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpa0jd9v8u.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpa0jd9v8u.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp366yoj6l.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp366yoj6l.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp366yoj6l.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(1,\
    \ len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5c56mqv5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5c56mqv5.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5c56mqv5.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkngxyht.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppkngxyht.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmppkngxyht.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmple3pa7bu.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmple3pa7bu.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmple3pa7bu.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0t7w3c3.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpn0t7w3c3.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpn0t7w3c3.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    print(add([1,2,3,4,5,6,7,8,9,10]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "30\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzq8rjghx.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpzq8rjghx.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpzq8rjghx.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kpw710i.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5kpw710i.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5kpw710i.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mh5j1wx.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp4mh5j1wx.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp4mh5j1wx.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_d1e2ujc.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp_d1e2ujc.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp_d1e2ujc.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcv46s21k.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpcv46s21k.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpcv46s21k.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpal88zukb.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpal88zukb.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpal88zukb.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouskiuwg.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpouskiuwg.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpouskiuwg.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps0y61kr0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmps0y61kr0.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmps0y61kr0.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez3edrz8.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpez3edrz8.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpez3edrz8.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(add([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "30\n110\n240\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdc78tuni.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdc78tuni.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpdc78tuni.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwywry312.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwywry312.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpwywry312.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjv3uvd2.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpmjv3uvd2.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpmjv3uvd2.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw92spxn6.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpw92spxn6.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpw92spxn6.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdz8y2pwv.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdz8y2pwv.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpdz8y2pwv.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplyyaehew.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmplyyaehew.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmplyyaehew.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09100u8e.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp09100u8e.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp09100u8e.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(1,\
    \ len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuoho7see.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpuoho7see.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpuoho7see.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5v_sezei.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5v_sezei.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5v_sezei.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    print(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: "30\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvggif1fx.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvggif1fx.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpvggif1fx.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mawmesb.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp7mawmesb.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp7mawmesb.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqedtjjbg.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpqedtjjbg.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpqedtjjbg.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7qhdrlwx.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp7qhdrlwx.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp7qhdrlwx.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42et4sdh.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp42et4sdh.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp42et4sdh.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasosvj5k.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpasosvj5k.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpasosvj5k.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaolw7yvb.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpaolw7yvb.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpaolw7yvb.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpun_fpz1a.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpun_fpz1a.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpun_fpz1a.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(1,\
    \ len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpueyy09es.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpueyy09es.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpueyy09es.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxjw21v4.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpcxjw21v4.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpcxjw21v4.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzznwk58n.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzznwk58n.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpzznwk58n.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(add([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(add([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30]))\ndef check(candidate):\n    assert candidate([4,\
    \ 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4,\
    \ 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: "30\n110\n240\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdnqdjn5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwdnqdjn5.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpwdnqdjn5.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fq6dj88.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp6fq6dj88.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp6fq6dj88.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d3f__ye.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp3d3f__ye.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp3d3f__ye.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bg4svpo.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp0bg4svpo.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp0bg4svpo.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7xvxp8_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpk7xvxp8_.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpk7xvxp8_.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp013goe8d.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp013goe8d.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp013goe8d.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uh1qt9_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp2uh1qt9_.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp2uh1qt9_.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2lojsy6.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpk2lojsy6.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpk2lojsy6.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4jtd3tc.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpg4jtd3tc.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpg4jtd3tc.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz1jmz4n.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwz1jmz4n.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpwz1jmz4n.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cqz_p96.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp1cqz_p96.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp1cqz_p96.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5_3tob9.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpy5_3tob9.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpy5_3tob9.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuoe8x2sa.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpuoe8x2sa.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpuoe8x2sa.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbg1d2tkp.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpbg1d2tkp.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpbg1d2tkp.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17cw8kp5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp17cw8kp5.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp17cw8kp5.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_nn173md.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp_nn173md.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp_nn173md.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t2bd6ps.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9t2bd6ps.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp9t2bd6ps.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpraw8xzaq.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpraw8xzaq.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpraw8xzaq.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojtqe0o7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpojtqe0o7.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpojtqe0o7.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2hhcv3p.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmph2hhcv3p.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmph2hhcv3p.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10s87as1.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp10s87as1.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp10s87as1.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp06dofcse.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp06dofcse.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp06dofcse.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyq3cyywc.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpyq3cyywc.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpyq3cyywc.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozxwxtdq.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpozxwxtdq.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpozxwxtdq.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmbr1cn6c.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpmbr1cn6c.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpmbr1cn6c.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lc4iwjo.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp8lc4iwjo.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp8lc4iwjo.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfom4gon.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdfom4gon.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpdfom4gon.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz6kbv7c.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpyz6kbv7c.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpyz6kbv7c.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(1,\
    \ len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63tii6zt.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp63tii6zt.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp63tii6zt.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(1, len(lst), 2) if lst[i] % 2 == 0)\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cge11w2.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp6cge11w2.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp6cge11w2.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2oe23nb.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpr2oe23nb.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpr2oe23nb.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6eu9tlg7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp6eu9tlg7.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp6eu9tlg7.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ue_buhe.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_ue_buhe.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp_ue_buhe.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppagbxz_y.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppagbxz_y.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmppagbxz_y.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb582uzvd.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpb582uzvd.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpb582uzvd.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyx5ci0g.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpoyx5ci0g.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpoyx5ci0g.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[::2])\n\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu6k0582.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzu6k0582.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpzu6k0582.py\", line 12, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5r0cclqt.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5r0cclqt.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5r0cclqt.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq862wxrw.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpq862wxrw.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpq862wxrw.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjv8xakr.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwjv8xakr.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpwjv8xakr.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_50a0h0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp2_50a0h0.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp2_50a0h0.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfqk794g.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzfqk794g.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpzfqk794g.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvr4uke9g.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpvr4uke9g.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpvr4uke9g.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcf5sax43.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpcf5sax43.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpcf5sax43.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5f253_t.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv5f253_t.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpv5f253_t.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_0j2vzc.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpe_0j2vzc.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpe_0j2vzc.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2k99twtd.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2k99twtd.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp2k99twtd.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmzarfc4k.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpmzarfc4k.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpmzarfc4k.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05sl7kjj.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp05sl7kjj.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp05sl7kjj.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9aeinv4w.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9aeinv4w.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp9aeinv4w.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvu5d174.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpmvu5d174.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpmvu5d174.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8f2eld3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpp8f2eld3.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpp8f2eld3.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl5llc434.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpl5llc434.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpl5llc434.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(1,\
    \ len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgc30yzx.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmphgc30yzx.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmphgc30yzx.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6imixoks.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp6imixoks.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp6imixoks.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiu4smjzp.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpiu4smjzp.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpiu4smjzp.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uyhnrcd.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp_uyhnrcd.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp_uyhnrcd.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3b_ivtjv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3b_ivtjv.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp3b_ivtjv.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zw87ni_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp_zw87ni_.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp_zw87ni_.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeqmab97e.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpeqmab97e.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpeqmab97e.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb631u054.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpb631u054.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpb631u054.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89a5s5_f.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp89a5s5_f.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp89a5s5_f.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\ndef check(candidate):\n\
    \    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122])\
    \ == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4,\
    \ 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[i] for i in\
    \ range(1, len(lst), 2) if lst[i] % 2 == 0)\ndef check(candidate):\n    assert\
    \ candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n\
    \    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) ==\
    \ 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2sq5h6p.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpl2sq5h6p.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpl2sq5h6p.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjb1f_qov.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpjb1f_qov.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpjb1f_qov.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjrg4iax.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzjrg4iax.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpzjrg4iax.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ub5vkjd.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp6ub5vkjd.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp6ub5vkjd.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsawnxjj9.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpsawnxjj9.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpsawnxjj9.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8pfrurdi.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp8pfrurdi.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp8pfrurdi.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzcktrg0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppzcktrg0.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmppzcktrg0.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqlo8n2o.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpwqlo8n2o.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpwqlo8n2o.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfu0rcgt.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmplfu0rcgt.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmplfu0rcgt.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprnnn56uv.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmprnnn56uv.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmprnnn56uv.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3y6a534_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp3y6a534_.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp3y6a534_.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50egir2r.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp50egir2r.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp50egir2r.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ug31r2n.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp5ug31r2n.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5ug31r2n.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    total = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n   \
    \ return total\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0,\
    \ 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n\
    \    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vchjdh7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp2vchjdh7.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp2vchjdh7.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\ndef\
    \ check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph05kxaz0.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmph05kxaz0.py\", line 17,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmph05kxaz0.py\", line 12, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(1,\
    \ len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjj5ulibr.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpjj5ulibr.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpjj5ulibr.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9iih7cj.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpw9iih7cj.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpw9iih7cj.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc48c8g3y.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpc48c8g3y.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpc48c8g3y.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dyf8bjt.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp0dyf8bjt.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp0dyf8bjt.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckozy7d8.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpckozy7d8.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpckozy7d8.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rc84jls.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5rc84jls.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmp5rc84jls.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohvn79tc.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpohvn79tc.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpohvn79tc.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeiwcsiuu.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpeiwcsiuu.py\", line 18,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpeiwcsiuu.py\", line 13, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    # Your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgorwyfru.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgorwyfru.py\", line 20,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpgorwyfru.py\", line 14, in check\n\
    \    assert candidate([4, 88]) == 88\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    return sum(lst[1::2])\n\n\n\
    def check(candidate):\n    assert candidate([4, 88]) == 88\n    assert candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert\
    \ candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc5qwn6l.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpgc5qwn6l.py\", line 19,\
    \ in test_check\n    check(add)\n  File \"/tmp/tmpgc5qwn6l.py\", line 14, in check\n\
    \    assert candidate([4, 5, 6, 7, 2, 122]) == 122\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef add(lst: List[int]) -> int:\n    \"\"\"\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\n\n\n    Examples:\n        \"\"\"\n    sum = 0\n    for i in range(len(lst)):\n\
    \        if i % 2 == 1 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return\
    \ sum\n\ndef check(candidate):\n    assert candidate([4, 88]) == 88\n    assert\
    \ candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) ==\
    \ 0\n    assert candidate([4, 4, 6, 8]) == 12\n\ndef test_check():\n    check(add)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
