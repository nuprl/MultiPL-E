name: HumanEval_47_median
language: py
prompt: "from typing import List\n\ndef median(l: List[int]) -> float:\n    \"\"\"\
  Return median of elements in the list l.\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
  \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
  \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7])\
  \ == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
completions: ["    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    n = len(l)\n    if n == 0:\n        raise ValueError(\"median()\
    \ arg is an empty sequence\")\n    s = sorted(l)\n    if n % 2 == 1:\n       \
    \ return s[n // 2]\n    else:\n        i = n // 2\n        return (s[i - 1] +\
    \ s[i]) / 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 1:\n        return sorted_l[len(sorted_l)\
    \ // 2]\n    else:\n        return (sorted_l[len(sorted_l) // 2 - 1] + sorted_l[len(sorted_l)\
    \ // 2]) / 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n\
    \ // 2 - 1]) / 2\n    else:\n        return l[n // 2]\n", "    l.sort()\n    if\
    \ len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\
    \    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2\
    \ == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n       \
    \ return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2) - 1]) / 2\n  \
    \  else:\n        return l[int(len(l)/2)]\n", "    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    n = len(l)\n    if n\
    \ == 0:\n        raise ValueError(\"Empty list\")\n    elif n == 1:\n        return\
    \ l[0]\n    else:\n        l.sort()\n        if n % 2 == 0:\n            return\
    \ (l[n // 2 - 1] + l[n // 2]) / 2\n        else:\n            return l[n // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    n = len(l)\n\
    \    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n\
    \        return l[n // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    sorted_l = sorted(l)\n\
    \    n = len(l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n\
    \        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2 - 1)]) / 2\n  \
    \  else:\n        return l[int(len(l)/2)]\n", "    l.sort()\n    if len(l) % 2\
    \ == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n\nassert median([1, 2, 3, 4, 5]) == 3\nassert\
    \ median([1, 2, 3, 4, 5, 6]) == 3.5\nassert median([1, 2, 3, 4, 5, 6, 7]) == 4\n\
    assert median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    n = len(l)\n    if n == 0:\n        raise ValueError('median()\
    \ arg is an empty sequence')\n    s = sorted(l)\n    if n % 2 == 1:\n        return\
    \ s[n // 2]\n    else:\n        i = n // 2\n        return (s[i - 1] + s[i]) /\
    \ 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2]\
    \ + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "  \
    \  l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    # Sort the list\n   \
    \ l.sort()\n    # Find the middle element\n    mid = len(l) // 2\n    # Return\
    \ the median\n    if len(l) % 2 == 0:\n        return (l[mid] + l[mid-1]) / 2\n\
    \    else:\n        return l[mid]\n", "    l.sort()\n    if len(l) % 2 == 0:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n       \
    \ return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n\
    \ // 2 - 1]) / 2\n    else:\n        return l[n // 2]\n", "    if len(l) == 0:\n\
    \        raise ValueError('median() arg is an empty sequence')\n    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n    if\
    \ len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\
    \    else:\n        return l[len(l) // 2]\n", "    if len(l) == 0:\n        raise\
    \ ValueError('median() arg is an empty sequence')\n    l = sorted(l)\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    n = len(l)\n\
    \    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n\
    \        return l[n // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n       \
    \ return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n    n\
    \ = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return\
    \ (l[n // 2 - 1] + l[n // 2]) / 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n       \
    \ return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    n = len(l)\n    if n == 0:\n        raise ValueError(\"Cannot\
    \ compute median of empty list\")\n    if n % 2 == 1:\n        return sorted(l)[n\
    \ // 2]\n    else:\n        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2\n",
  "    n = len(l)\n    if n == 0:\n        raise ValueError(\"median() arg is an empty\
    \ sequence\")\n    s = sorted(l)\n    if n % 2 == 1:\n        return s[n // 2]\n\
    \    else:\n        return (s[n // 2 - 1] + s[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    n = len(l)\n    if n % 2\
    \ == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return\
    \ l[n // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n    if\
    \ len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\
    \    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2\
    \ == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    sorted_l =\
    \ sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return sorted_l[n //\
    \ 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n",
  "    n = len(l)\n    if n == 0:\n        raise ValueError(\"Cannot compute median\
    \ of empty list\")\n    if n % 2 == 1:\n        return sorted(l)[n // 2]\n   \
    \ else:\n        return sum(sorted(l)[n // 2 - 1:n // 2 + 1]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    sorted_l =\
    \ sorted(l)\n    if len(sorted_l) % 2 == 1:\n        return sorted_l[len(sorted_l)\
    \ // 2]\n    else:\n        return (sorted_l[len(sorted_l) // 2 - 1] + sorted_l[len(sorted_l)\
    \ // 2]) / 2\n", "    sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 1:\n \
    \       return sorted_l[len(sorted_l) // 2]\n    else:\n        return (sorted_l[len(sorted_l)\
    \ // 2 - 1] + sorted_l[len(sorted_l) // 2]) / 2\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 ==\
    \ 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n  \
    \      return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n    \
    \    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n\
    \        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2])\
    \ / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    sorted_l =\
    \ sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return sorted_l[n //\
    \ 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n\
    \        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n       \
    \ return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    sorted_l =\
    \ sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return sorted_l[n //\
    \ 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n    if\
    \ len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\
    \    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    n = len(l)\n\
    \    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n\
    \        return l[n // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n       \
    \ return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n",
  "    s = sorted(l)\n    n = len(s)\n    if n % 2 == 1:\n        return s[n // 2]\n\
    \    else:\n        return (s[n // 2 - 1] + s[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l = sorted(l)\n    if\
    \ len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\
    \    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2\
    \ == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 1:\n        return sorted_l[len(sorted_l)\
    \ // 2]\n    else:\n        return (sorted_l[len(sorted_l) // 2 - 1] + sorted_l[len(sorted_l)\
    \ // 2]) / 2\n", "    sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n\
    \        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 -\
    \ 1] + sorted_l[n // 2]) / 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n    \
    \    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) //\
    \ 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", " \
    \   l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    if len(l)\
    \ == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n   \
    \ l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] +\
    \ l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n\
    \        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2])\
    \ / 2\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    n = len(l)\n\
    \    if n == 0:\n        raise ValueError(\"Empty list\")\n    elif n == 1:\n\
    \        return l[0]\n    else:\n        l.sort()\n        if n % 2 == 0:\n  \
    \          return (l[n // 2 - 1] + l[n // 2]) / 2\n        else:\n           \
    \ return l[n // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    n = len(l)\n    if n == 0:\n        raise ValueError('median()\
    \ arg is an empty sequence')\n    s = sorted(l)\n    if n % 2 == 1:\n        return\
    \ s[n // 2]\n    else:\n        i = n // 2\n        return (s[i - 1] + s[i]) /\
    \ 2\n", "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n\
    \ // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
