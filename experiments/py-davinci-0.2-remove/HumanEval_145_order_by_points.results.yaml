name: HumanEval_145_order_by_points
language: py
results:
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1nwye2xq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1nwye2xq.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp1nwye2xq.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp1nwye2xq.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp1nwye2xq.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy4cw2hqf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpy4cw2hqf.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpy4cw2hqf.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpy4cw2hqf.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpy4cw2hqf.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkukyqvtk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkukyqvtk.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpkukyqvtk.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpkukyqvtk.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpkukyqvtk.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa60ajxx3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpa60ajxx3.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpa60ajxx3.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpa60ajxx3.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpa60ajxx3.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnj244wbb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnj244wbb.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnj244wbb.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnj244wbb.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpnj244wbb.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbhyxm9c.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpcbhyxm9c.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpcbhyxm9c.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpcbhyxm9c.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpcbhyxm9c.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcmj5xuk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqcmj5xuk.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqcmj5xuk.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqcmj5xuk.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpqcmj5xuk.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rktyka2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0rktyka2.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0rktyka2.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0rktyka2.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp0rktyka2.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5g90mkk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpj5g90mkk.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpj5g90mkk.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpj5g90mkk.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpj5g90mkk.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3g4a2pg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpw3g4a2pg.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpw3g4a2pg.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpw3g4a2pg.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpw3g4a2pg.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo157c4zj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpo157c4zj.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo157c4zj.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo157c4zj.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmpo157c4zj.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmpo157c4zj.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nxzj364.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5nxzj364.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp5nxzj364.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp5nxzj364.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp5nxzj364.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxlpa68r.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdxlpa68r.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdxlpa68r.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdxlpa68r.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdxlpa68r.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncwwytv6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpncwwytv6.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpncwwytv6.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpncwwytv6.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpncwwytv6.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pjji0aq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7pjji0aq.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp7pjji0aq.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp7pjji0aq.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp7pjji0aq.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv158lt2b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv158lt2b.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpv158lt2b.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpv158lt2b.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpv158lt2b.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpea52et8i.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpea52et8i.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpea52et8i.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpea52et8i.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpea52et8i.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg151zs6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdg151zs6.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdg151zs6.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdg151zs6.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdg151zs6.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0i1thql.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpu0i1thql.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpu0i1thql.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpu0i1thql.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpu0i1thql.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0fydnch.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpl0fydnch.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpl0fydnch.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpl0fydnch.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpl0fydnch.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsbswnfo.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxsbswnfo.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpxsbswnfo.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpxsbswnfo.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpxsbswnfo.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6f96adcu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6f96adcu.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6f96adcu.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6f96adcu.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp6f96adcu.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl1ixl5d4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpl1ixl5d4.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpl1ixl5d4.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpl1ixl5d4.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpl1ixl5d4.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwg88wq_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnwg88wq_.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnwg88wq_.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnwg88wq_.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpnwg88wq_.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    #\
    \ nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # order_by_points(nums)\n    # [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # order_by_points(nums)\n    # [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # nums\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    # order_by_points(nums)\n    #\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\
    \ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    # nums = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\ndef check(candidate):\n   \
    \ assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9xdvre8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpe9xdvre8.py\", line 31,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpe9xdvre8.py\", line\
    \ 23, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((sum([int(digit)\
    \ for digit in str(num)]), i, num))\n    nums_with_points.sort()\n    return [num\
    \ for _, _, num in nums_with_points]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4tyk3kr6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4tyk3kr6.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp4tyk3kr6.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp4tyk3kr6.py\", line 14, in order_by_points\n    nums_with_points.append((sum([int(digit)\
    \ for digit in str(num)]), i, num))\n  File \"/tmp/tmp4tyk3kr6.py\", line 14,\
    \ in <listcomp>\n    nums_with_points.append((sum([int(digit) for digit in str(num)]),\
    \ i, num))\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv4lxp_zz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv4lxp_zz.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpv4lxp_zz.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpv4lxp_zz.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpv4lxp_zz.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyfw9sah.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqyfw9sah.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqyfw9sah.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqyfw9sah.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpqyfw9sah.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuyqkct7z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuyqkct7z.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpuyqkct7z.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpuyqkct7z.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpuyqkct7z.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphb2erb41.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphb2erb41.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphb2erb41.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphb2erb41.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmphb2erb41.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwl2zu6lt.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwl2zu6lt.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwl2zu6lt.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwl2zu6lt.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpwl2zu6lt.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4k99dh6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpn4k99dh6.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpn4k99dh6.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpn4k99dh6.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpn4k99dh6.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vx8r4f2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6vx8r4f2.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6vx8r4f2.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6vx8r4f2.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp6vx8r4f2.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiuayz9lb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiuayz9lb.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpiuayz9lb.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpiuayz9lb.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpiuayz9lb.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvwd78ni.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdvwd78ni.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdvwd78ni.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdvwd78ni.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdvwd78ni.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6246qjt.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpb6246qjt.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpb6246qjt.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpb6246qjt.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpb6246qjt.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdskow1sw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdskow1sw.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdskow1sw.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdskow1sw.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdskow1sw.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb671oyi6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpb671oyi6.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpb671oyi6.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpb671oyi6.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpb671oyi6.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcln3r6x.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvcln3r6x.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvcln3r6x.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvcln3r6x.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpvcln3r6x.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_sum\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_sum.append((num,\
    \ sum(int(digit) for digit in str(num)), i))\n    nums_with_sum.sort(key=lambda\
    \ x: (x[1], x[2]))\n    return [x[0] for x in nums_with_sum]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_hk4mcm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0_hk4mcm.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0_hk4mcm.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0_hk4mcm.py\", line 14, in order_by_points\n    nums_with_sum.append((num,\
    \ sum(int(digit) for digit in str(num)), i))\n  File \"/tmp/tmp0_hk4mcm.py\",\
    \ line 14, in <genexpr>\n    nums_with_sum.append((num, sum(int(digit) for digit\
    \ in str(num)), i))\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpon918bif.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpon918bif.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpon918bif.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpon918bif.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpon918bif.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzu2g1ar.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuzu2g1ar.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpuzu2g1ar.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpuzu2g1ar.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpuzu2g1ar.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9ikig61.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg9ikig61.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg9ikig61.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg9ikig61.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmpg9ikig61.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmpg9ikig61.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_dict\
    \ = {}\n    for i, num in enumerate(nums):\n        nums_dict[i] = sum(map(int,\
    \ str(num)))\n    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdcqkg17s.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpdcqkg17s.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdcqkg17s.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdcqkg17s.py\", line 14, in order_by_points\n    nums_dict[i]\
    \ = sum(map(int, str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        points = sum(int(digit) for\
    \ digit in str(num))\n        nums_with_points.append((num, points, i))\n    nums_with_points.sort(key=lambda\
    \ x: (x[1], x[2]))\n    return [num for num, _, _ in nums_with_points]\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgzyx3y1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphgzyx3y1.py\", line 29,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmphgzyx3y1.py\", line\
    \ 21, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmphgzyx3y1.py\", line 14, in order_by_points\n    points\
    \ = sum(int(digit) for digit in str(num))\n  File \"/tmp/tmphgzyx3y1.py\", line\
    \ 14, in <genexpr>\n    points = sum(int(digit) for digit in str(num))\nValueError:\
    \ invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc8l68u4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoc8l68u4.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpoc8l68u4.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpoc8l68u4.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpoc8l68u4.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfkm_0iw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptfkm_0iw.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptfkm_0iw.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmptfkm_0iw.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmptfkm_0iw.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg_r326z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdg_r326z.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdg_r326z.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdg_r326z.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdg_r326z.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpedqw_4ao.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpedqw_4ao.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpedqw_4ao.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpedqw_4ao.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpedqw_4ao.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnd5ftiz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgnd5ftiz.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpgnd5ftiz.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpgnd5ftiz.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpgnd5ftiz.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkwbls6t5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkwbls6t5.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpkwbls6t5.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpkwbls6t5.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmpkwbls6t5.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmpkwbls6t5.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02rkv_1j.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp02rkv_1j.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp02rkv_1j.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp02rkv_1j.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp02rkv_1j.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrgt4b8f.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbrgt4b8f.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbrgt4b8f.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpbrgt4b8f.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpbrgt4b8f.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0tu9u_q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz0tu9u_q.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpz0tu9u_q.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpz0tu9u_q.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpz0tu9u_q.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjjz5sk77.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjjz5sk77.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpjjz5sk77.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpjjz5sk77.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpjjz5sk77.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    #\
    \ your code here\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))),\
    \ nums.index(x)))\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1gh_ai3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpn1gh_ai3.py\", line 25,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpn1gh_ai3.py\", line\
    \ 17, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpn1gh_ai3.py\", line 13, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpn1gh_ai3.py\", line 13, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajq0t4v7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpajq0t4v7.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpajq0t4v7.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpajq0t4v7.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpajq0t4v7.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft1l4zp5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpft1l4zp5.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpft1l4zp5.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpft1l4zp5.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpft1l4zp5.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_dict\
    \ = {}\n    for i, num in enumerate(nums):\n        nums_dict[i] = sum(int(digit)\
    \ for digit in str(num))\n    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoxmm47fn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpoxmm47fn.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpoxmm47fn.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpoxmm47fn.py\", line 14, in order_by_points\n    nums_dict[i]\
    \ = sum(int(digit) for digit in str(num))\n  File \"/tmp/tmpoxmm47fn.py\", line\
    \ 14, in <genexpr>\n    nums_dict[i] = sum(int(digit) for digit in str(num))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_dict\
    \ = {}\n    for index, num in enumerate(nums):\n        nums_dict[num] = sum(int(digit)\
    \ for digit in str(num))\n    return [key for key, value in sorted(nums_dict.items(),\
    \ key=lambda item: (item[1], item[0]))]\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7whgzbg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps7whgzbg.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmps7whgzbg.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmps7whgzbg.py\", line 14, in order_by_points\n    nums_dict[num]\
    \ = sum(int(digit) for digit in str(num))\n  File \"/tmp/tmps7whgzbg.py\", line\
    \ 14, in <genexpr>\n    nums_dict[num] = sum(int(digit) for digit in str(num))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnjopz3oo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnjopz3oo.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnjopz3oo.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnjopz3oo.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpnjopz3oo.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk8gaq47.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplk8gaq47.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmplk8gaq47.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmplk8gaq47.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmplk8gaq47.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg09qe1vi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg09qe1vi.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg09qe1vi.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg09qe1vi.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpg09qe1vi.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8ibcq0f.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps8ibcq0f.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmps8ibcq0f.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmps8ibcq0f.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmps8ibcq0f.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzy2loeq1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzy2loeq1.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzy2loeq1.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpzy2loeq1.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpzy2loeq1.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwaomo2vj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwaomo2vj.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwaomo2vj.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwaomo2vj.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpwaomo2vj.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5fn0rvi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi5fn0rvi.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpi5fn0rvi.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpi5fn0rvi.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmpi5fn0rvi.py\"\
    , line 12, in <lambda>\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rrxlccg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8rrxlccg.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp8rrxlccg.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp8rrxlccg.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp8rrxlccg.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((num,\
    \ sum(map(int, str(num))), i))\n    nums_with_points.sort(key=lambda x: (x[1],\
    \ x[2]))\n    return [x[0] for x in nums_with_points]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptns2dmra.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptns2dmra.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptns2dmra.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmptns2dmra.py\", line 14, in order_by_points\n    nums_with_points.append((num,\
    \ sum(map(int, str(num))), i))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksd8qiei.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpksd8qiei.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpksd8qiei.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpksd8qiei.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpksd8qiei.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0a75z_c.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf0a75z_c.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpf0a75z_c.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpf0a75z_c.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpf0a75z_c.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnftqclf7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpnftqclf7.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpnftqclf7.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpnftqclf7.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpnftqclf7.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((num,\
    \ sum(int(digit) for digit in str(num)), i))\n    nums_with_points.sort(key=lambda\
    \ x: (x[1], x[2]))\n    return [x[0] for x in nums_with_points]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp53xe2_zu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp53xe2_zu.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp53xe2_zu.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp53xe2_zu.py\", line 14, in order_by_points\n    nums_with_points.append((num,\
    \ sum(int(digit) for digit in str(num)), i))\n  File \"/tmp/tmp53xe2_zu.py\",\
    \ line 14, in <genexpr>\n    nums_with_points.append((num, sum(int(digit) for\
    \ digit in str(num)), i))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6m6qyf82.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6m6qyf82.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6m6qyf82.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6m6qyf82.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp6m6qyf82.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpik8zstxb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpik8zstxb.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpik8zstxb.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpik8zstxb.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpik8zstxb.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4pz5ljz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpx4pz5ljz.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpx4pz5ljz.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpx4pz5ljz.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpx4pz5ljz.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqoa2niex.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqoa2niex.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqoa2niex.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqoa2niex.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpqoa2niex.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgn7_f2xg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgn7_f2xg.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpgn7_f2xg.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpgn7_f2xg.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpgn7_f2xg.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1to7kg2r.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1to7kg2r.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp1to7kg2r.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp1to7kg2r.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp1to7kg2r.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3k9lyxoe.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp3k9lyxoe.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp3k9lyxoe.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp3k9lyxoe.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp3k9lyxoe.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2uch_py.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpy2uch_py.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpy2uch_py.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpy2uch_py.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpy2uch_py.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0rjbdx7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpj0rjbdx7.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpj0rjbdx7.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpj0rjbdx7.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpj0rjbdx7.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptquygwj7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptquygwj7.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptquygwj7.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmptquygwj7.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmptquygwj7.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppt3gusyo.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppt3gusyo.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmppt3gusyo.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmppt3gusyo.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmppt3gusyo.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jym6sdj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0jym6sdj.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0jym6sdj.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0jym6sdj.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp0jym6sdj.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbz78pztq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbz78pztq.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbz78pztq.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpbz78pztq.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpbz78pztq.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpviwdm3jv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpviwdm3jv.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpviwdm3jv.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpviwdm3jv.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpviwdm3jv.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dmyt0iy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9dmyt0iy.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp9dmyt0iy.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp9dmyt0iy.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp9dmyt0iy.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe70rww0b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpe70rww0b.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpe70rww0b.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpe70rww0b.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpe70rww0b.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfjmirp86.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfjmirp86.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfjmirp86.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfjmirp86.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpfjmirp86.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvr22aa9m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvr22aa9m.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvr22aa9m.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvr22aa9m.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpvr22aa9m.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3by4mh_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpg3by4mh_.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpg3by4mh_.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpg3by4mh_.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpg3by4mh_.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vtbp778.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7vtbp778.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp7vtbp778.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp7vtbp778.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n\
    \  File \"/tmp/tmp7vtbp778.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n  File\
    \ \"/tmp/tmp7vtbp778.py\", line 12, in <genexpr>\n    return sorted(nums, key=lambda\
    \ x: (sum(int(digit) for digit in str(x)), nums.index(x)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2z0nb8vg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2z0nb8vg.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp2z0nb8vg.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp2z0nb8vg.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp2z0nb8vg.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwzu7otv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqwzu7otv.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqwzu7otv.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqwzu7otv.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpqwzu7otv.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhze1bi8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwhze1bi8.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwhze1bi8.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwhze1bi8.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpwhze1bi8.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpok4i7lwh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpok4i7lwh.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpok4i7lwh.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpok4i7lwh.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpok4i7lwh.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvezft3m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdvezft3m.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdvezft3m.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdvezft3m.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdvezft3m.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjotojutx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjotojutx.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpjotojutx.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpjotojutx.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpjotojutx.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmj5023xu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmj5023xu.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpmj5023xu.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpmj5023xu.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpmj5023xu.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((i,\
    \ sum(map(int, str(num))), num))\n    nums_with_points.sort(key=lambda x: (x[1],\
    \ x[0]))\n    return [x[2] for x in nums_with_points]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9r8w_k1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc9r8w_k1.py\", line 28,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpc9r8w_k1.py\", line\
    \ 20, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpc9r8w_k1.py\", line 14, in order_by_points\n    nums_with_points.append((i,\
    \ sum(map(int, str(num))), num))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_dict\
    \ = {}\n    for i, num in enumerate(nums):\n        nums_dict[i] = sum(int(digit)\
    \ for digit in str(num))\n    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt51tmn6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvt51tmn6.py\", line 26,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvt51tmn6.py\", line\
    \ 18, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvt51tmn6.py\", line 14, in order_by_points\n    nums_dict[i]\
    \ = sum(int(digit) for digit in str(num))\n  File \"/tmp/tmpvt51tmn6.py\", line\
    \ 14, in <genexpr>\n    nums_dict[i] = sum(int(digit) for digit in str(num))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7sfqpxru.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7sfqpxru.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp7sfqpxru.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp7sfqpxru.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp7sfqpxru.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzq57h1dx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzq57h1dx.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzq57h1dx.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpzq57h1dx.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpzq57h1dx.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75vaw4z7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp75vaw4z7.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp75vaw4z7.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp75vaw4z7.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp75vaw4z7.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    #\
    \ your code here\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)),\
    \ nums.index(x)))\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmouxf9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyrmouxf9.py\", line 25,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyrmouxf9.py\", line\
    \ 17, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpyrmouxf9.py\", line 13, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmpyrmouxf9.py\", line 13, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmpyrmouxf9.py\"\
    , line 13, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdiaahddi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdiaahddi.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdiaahddi.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdiaahddi.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmpdiaahddi.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmpdiaahddi.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpket0dreg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpket0dreg.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpket0dreg.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpket0dreg.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpket0dreg.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpginvt7ff.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpginvt7ff.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpginvt7ff.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpginvt7ff.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpginvt7ff.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdupy8v48.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdupy8v48.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdupy8v48.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdupy8v48.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdupy8v48.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89d7l4kn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp89d7l4kn.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp89d7l4kn.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp89d7l4kn.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp89d7l4kn.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsekrtuyx.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsekrtuyx.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpsekrtuyx.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpsekrtuyx.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpsekrtuyx.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp32zq7p9m.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp32zq7p9m.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp32zq7p9m.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp32zq7p9m.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp32zq7p9m.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul29izd2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpul29izd2.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpul29izd2.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpul29izd2.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpul29izd2.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_dict\
    \ = {}\n    for i, num in enumerate(nums):\n        nums_dict[i] = sum(map(int,\
    \ str(num)))\n    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptuxlmea3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptuxlmea3.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptuxlmea3.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmptuxlmea3.py\", line 14, in order_by_points\n    nums_dict[i]\
    \ = sum(map(int, str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhbjcp8j.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpuhbjcp8j.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpuhbjcp8j.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpuhbjcp8j.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpuhbjcp8j.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptanaj445.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptanaj445.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptanaj445.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmptanaj445.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmptanaj445.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7w694gj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpb7w694gj.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpb7w694gj.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpb7w694gj.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpb7w694gj.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93q8f28k.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp93q8f28k.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp93q8f28k.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp93q8f28k.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp93q8f28k.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0gqs8twm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0gqs8twm.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0gqs8twm.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0gqs8twm.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp0gqs8twm.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw44284py.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpw44284py.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpw44284py.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpw44284py.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpw44284py.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi11ig__.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqi11ig__.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqi11ig__.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqi11ig__.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpqi11ig__.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni11orjr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpni11orjr.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpni11orjr.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpni11orjr.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpni11orjr.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp536cuy80.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp536cuy80.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp536cuy80.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp536cuy80.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp536cuy80.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpism8nqkl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpism8nqkl.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpism8nqkl.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpism8nqkl.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpism8nqkl.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((i,\
    \ sum(map(int, str(num))), num))\n    return [num for i, points, num in sorted(nums_with_points)]\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpep4cnb84.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpep4cnb84.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpep4cnb84.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpep4cnb84.py\", line 14, in order_by_points\n    nums_with_points.append((i,\
    \ sum(map(int, str(num))), num))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4an7_ho.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpn4an7_ho.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpn4an7_ho.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpn4an7_ho.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpn4an7_ho.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoytc09us.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpoytc09us.py\", line 23,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpoytc09us.py\", line\
    \ 15, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpoytc09us.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmpoytc09us.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmpoytc09us.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvwlsoyp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwvwlsoyp.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwvwlsoyp.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwvwlsoyp.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpwvwlsoyp.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt9nc1req.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpt9nc1req.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpt9nc1req.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpt9nc1req.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpt9nc1req.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfocwwrvy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfocwwrvy.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfocwwrvy.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfocwwrvy.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpfocwwrvy.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdbhdx4e6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdbhdx4e6.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdbhdx4e6.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdbhdx4e6.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdbhdx4e6.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyajomfwu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyajomfwu.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyajomfwu.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpyajomfwu.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpyajomfwu.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxxvvgn1i.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxxvvgn1i.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpxxvvgn1i.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpxxvvgn1i.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpxxvvgn1i.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjvcu6fh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqjvcu6fh.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpqjvcu6fh.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpqjvcu6fh.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpqjvcu6fh.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39ynkvku.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp39ynkvku.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp39ynkvku.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp39ynkvku.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp39ynkvku.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5we7by_t.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5we7by_t.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp5we7by_t.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp5we7by_t.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp5we7by_t.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxphxappm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxphxappm.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpxphxappm.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpxphxappm.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpxphxappm.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv55l7ziv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv55l7ziv.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpv55l7ziv.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpv55l7ziv.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpv55l7ziv.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_dict\
    \ = {}\n    for i, num in enumerate(nums):\n        nums_dict[num] = sum(map(int,\
    \ str(num)))\n    return [k for k, v in sorted(nums_dict.items(), key=lambda item:\
    \ (item[1], item[0]))]\n\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6jxzn7ww.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6jxzn7ww.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6jxzn7ww.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6jxzn7ww.py\", line 14, in order_by_points\n    nums_dict[num]\
    \ = sum(map(int, str(num)))\nValueError: invalid literal for int() with base 10:\
    \ '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpur899aew.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpur899aew.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpur899aew.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpur899aew.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpur899aew.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81gisf8a.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp81gisf8a.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp81gisf8a.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp81gisf8a.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp81gisf8a.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qmt0w2j.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2qmt0w2j.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp2qmt0w2j.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp2qmt0w2j.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp2qmt0w2j.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sq1xmg3.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp_sq1xmg3.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp_sq1xmg3.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp_sq1xmg3.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp_sq1xmg3.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wmprnnz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3wmprnnz.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp3wmprnnz.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp3wmprnnz.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmp3wmprnnz.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmp3wmprnnz.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5b3ujcr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpd5b3ujcr.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpd5b3ujcr.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpd5b3ujcr.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpd5b3ujcr.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkni136t2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkni136t2.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpkni136t2.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpkni136t2.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpkni136t2.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlxz6kz_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdlxz6kz_.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdlxz6kz_.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdlxz6kz_.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdlxz6kz_.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xllvbnw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3xllvbnw.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp3xllvbnw.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp3xllvbnw.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp3xllvbnw.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    #\
    \ your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_83oxg4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz_83oxg4.py\", line 25,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpz_83oxg4.py\", line\
    \ 17, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpz_83oxg4.py\", line 13, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(x))))\n  File \"/tmp/tmpz_83oxg4.py\"\
    , line 13, in <lambda>\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\
    ValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    def\
    \ sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n \
    \   return sorted(nums, key=lambda num: (sum_digits(num), nums.index(num)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1up2dioq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1up2dioq.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp1up2dioq.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp1up2dioq.py\", line 15, in order_by_points\n    return\
    \ sorted(nums, key=lambda num: (sum_digits(num), nums.index(num)))\n  File \"\
    /tmp/tmp1up2dioq.py\", line 15, in <lambda>\n    return sorted(nums, key=lambda\
    \ num: (sum_digits(num), nums.index(num)))\n  File \"/tmp/tmp1up2dioq.py\", line\
    \ 13, in sum_digits\n    return sum(int(digit) for digit in str(num))\n  File\
    \ \"/tmp/tmp1up2dioq.py\", line 13, in <genexpr>\n    return sum(int(digit) for\
    \ digit in str(num))\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdh251mia.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdh251mia.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpdh251mia.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpdh251mia.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpdh251mia.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfxzy8y0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyfxzy8y0.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyfxzy8y0.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpyfxzy8y0.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpyfxzy8y0.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae1xleg4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpae1xleg4.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpae1xleg4.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpae1xleg4.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpae1xleg4.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2h3gx4y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpo2h3gx4y.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpo2h3gx4y.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpo2h3gx4y.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpo2h3gx4y.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiwldged1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiwldged1.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpiwldged1.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpiwldged1.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpiwldged1.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24bf8492.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp24bf8492.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp24bf8492.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp24bf8492.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp24bf8492.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_sh68uz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmph_sh68uz.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmph_sh68uz.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmph_sh68uz.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmph_sh68uz.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_sum\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_sum.append((i, sum(int(digit)\
    \ for digit in str(num)), num))\n    return [num for _, _, num in sorted(nums_with_sum)]\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp862a26gu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp862a26gu.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp862a26gu.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp862a26gu.py\", line 14, in order_by_points\n    nums_with_sum.append((i,\
    \ sum(int(digit) for digit in str(num)), num))\n  File \"/tmp/tmp862a26gu.py\"\
    , line 14, in <genexpr>\n    nums_with_sum.append((i, sum(int(digit) for digit\
    \ in str(num)), num))\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptha92sa5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptha92sa5.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmptha92sa5.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmptha92sa5.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmptha92sa5.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdio2_nn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwdio2_nn.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwdio2_nn.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwdio2_nn.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpwdio2_nn.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u2njkh8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5u2njkh8.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp5u2njkh8.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp5u2njkh8.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp5u2njkh8.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopmmu9kf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpopmmu9kf.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpopmmu9kf.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpopmmu9kf.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpopmmu9kf.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprcrl2y2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpprcrl2y2.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpprcrl2y2.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpprcrl2y2.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpprcrl2y2.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4zsxy42.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpu4zsxy42.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpu4zsxy42.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpu4zsxy42.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpu4zsxy42.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6w8ere9t.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6w8ere9t.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6w8ere9t.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6w8ere9t.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp6w8ere9t.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4a2mep_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpu4a2mep_.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpu4a2mep_.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpu4a2mep_.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpu4a2mep_.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz_aryeh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyz_aryeh.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpyz_aryeh.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpyz_aryeh.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpyz_aryeh.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjlt8gh0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpkjlt8gh0.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpkjlt8gh0.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpkjlt8gh0.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpkjlt8gh0.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp997ko12z.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp997ko12z.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp997ko12z.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp997ko12z.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp997ko12z.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6_h4vcq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpp6_h4vcq.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpp6_h4vcq.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpp6_h4vcq.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpp6_h4vcq.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_ndba5v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpu_ndba5v.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpu_ndba5v.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpu_ndba5v.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpu_ndba5v.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr6lm5p8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplr6lm5p8.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmplr6lm5p8.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmplr6lm5p8.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmplr6lm5p8.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsh856lyb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsh856lyb.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpsh856lyb.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpsh856lyb.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpsh856lyb.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5qc2s1r.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpf5qc2s1r.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpf5qc2s1r.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpf5qc2s1r.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpf5qc2s1r.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporpqv47a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmporpqv47a.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmporpqv47a.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmporpqv47a.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmporpqv47a.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_sum\
    \ = []\n    for i in nums:\n        nums_sum.append(sum(int(digit) for digit in\
    \ str(i)))\n    return [x for _, x in sorted(zip(nums_sum, nums))]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pc_ynu1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6pc_ynu1.py\", line 27,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp6pc_ynu1.py\", line\
    \ 19, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp6pc_ynu1.py\", line 14, in order_by_points\n    nums_sum.append(sum(int(digit)\
    \ for digit in str(i)))\n  File \"/tmp/tmp6pc_ynu1.py\", line 14, in <genexpr>\n\
    \    nums_sum.append(sum(int(digit) for digit in str(i)))\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_d2je46.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpt_d2je46.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpt_d2je46.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpt_d2je46.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpt_d2je46.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zhdpcpj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_zhdpcpj.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp_zhdpcpj.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp_zhdpcpj.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp_zhdpcpj.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojla66rs.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpojla66rs.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpojla66rs.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpojla66rs.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpojla66rs.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpauey37s9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpauey37s9.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpauey37s9.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpauey37s9.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpauey37s9.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpruc4f0ge.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpruc4f0ge.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpruc4f0ge.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpruc4f0ge.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpruc4f0ge.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8b9jtr4.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpn8b9jtr4.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpn8b9jtr4.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpn8b9jtr4.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpn8b9jtr4.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeobr7y3_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpeobr7y3_.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpeobr7y3_.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpeobr7y3_.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpeobr7y3_.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7x7hh9sw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7x7hh9sw.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp7x7hh9sw.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp7x7hh9sw.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp7x7hh9sw.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprof1nc3p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprof1nc3p.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmprof1nc3p.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmprof1nc3p.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n \
    \ File \"/tmp/tmprof1nc3p.py\", line 12, in <lambda>\n    return sorted(nums,\
    \ key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n  File \"/tmp/tmprof1nc3p.py\"\
    , line 12, in <genexpr>\n    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(x)), nums.index(x)))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwk5fdbav.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwk5fdbav.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpwk5fdbav.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpwk5fdbav.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpwk5fdbav.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvea4j2os.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvea4j2os.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpvea4j2os.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpvea4j2os.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpvea4j2os.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzcaefve1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzcaefve1.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzcaefve1.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpzcaefve1.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpzcaefve1.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymm46974.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpymm46974.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpymm46974.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpymm46974.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpymm46974.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums_with_sum\
    \ = [(num, sum(map(int, str(num)))) for num in nums]\n    nums_with_sum.sort(key=lambda\
    \ x: (x[1], x[0]))\n    return [num for num, _ in nums_with_sum]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzj9m61bc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzj9m61bc.py\", line 26,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpzj9m61bc.py\", line\
    \ 18, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpzj9m61bc.py\", line 12, in order_by_points\n    nums_with_sum\
    \ = [(num, sum(map(int, str(num)))) for num in nums]\n  File \"/tmp/tmpzj9m61bc.py\"\
    , line 12, in <listcomp>\n    nums_with_sum = [(num, sum(map(int, str(num))))\
    \ for num in nums]\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxniyk7l1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxniyk7l1.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpxniyk7l1.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpxniyk7l1.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpxniyk7l1.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01eykp4b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp01eykp4b.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp01eykp4b.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp01eykp4b.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp01eykp4b.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd1tue89.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbd1tue89.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpbd1tue89.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpbd1tue89.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpbd1tue89.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfps_3bjb.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfps_3bjb.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpfps_3bjb.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpfps_3bjb.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpfps_3bjb.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpej1rpn9i.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpej1rpn9i.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpej1rpn9i.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpej1rpn9i.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpej1rpn9i.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ya6le71.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1ya6le71.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp1ya6le71.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp1ya6le71.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp1ya6le71.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpotwnbvmh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpotwnbvmh.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpotwnbvmh.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpotwnbvmh.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpotwnbvmh.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8z7q8jy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpf8z7q8jy.py\", line 24,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmpf8z7q8jy.py\", line\
    \ 16, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmpf8z7q8jy.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmpf8z7q8jy.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cwnzxv6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp0cwnzxv6.py\", line 22,\
    \ in test_check\n    check(order_by_points)\n  File \"/tmp/tmp0cwnzxv6.py\", line\
    \ 14, in check\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\n  File \"/tmp/tmp0cwnzxv6.py\", line 12, in order_by_points\n    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n  File \"\
    /tmp/tmp0cwnzxv6.py\", line 12, in <lambda>\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
