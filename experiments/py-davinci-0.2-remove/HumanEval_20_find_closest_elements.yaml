name: HumanEval_20_find_closest_elements
language: py
prompt: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
  \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
  \ at least two) select and return two that are the closest to each\n    other and\
  \ return them in order (smaller number, larger number).\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
  \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
  \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
  \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
  \ntest_check()\n"
completions: ["    numbers.sort()\n    closest = numbers[1] - numbers[0]\n    closest_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i + 1]\
    \ - numbers[i]\n            closest_pair = (numbers[i], numbers[i + 1])\n    return\
    \ closest_pair\n", "    # TODO: implement this function\n    pass\n", "    numbers.sort()\n\
    \    closest = abs(numbers[0] - numbers[1])\n    closest_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < closest:\n            closest = abs(numbers[i] - numbers[i + 1])\n \
    \           closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n",
  "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n    closest_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1]\
    \ - numbers[i] < closest:\n            closest = numbers[i + 1] - numbers[i]\n\
    \            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n",
  "    # YOUR CODE HERE\n    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n   \
    \         min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n\
    \    return min_pair\n", "    # TODO: Implement this function\n    pass\n", " \
    \   numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    # TODO: Implement this function\n    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n\
    \            min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    # TODO: Implement this function\n    pass\n",
  "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    # TODO: Write function body\n    pass\n", "    numbers.sort()\n    min_diff\
    \ = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n\
    \            min_diff = numbers[i + 1] - numbers[i]\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    # TODO: Implement this function\n\
    \    pass\n\n", "    # TODO: implement this function\n    #raise NotImplementedError()\n\
    \    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    # TODO: Implement this function\n    pass\n\n", "    # TODO: Implement this\
    \ function\n    pass\n", "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n\
    \    closest_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n            closest\
    \ = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n    return closest_pair\n", "    closest = numbers[0]\n    closest_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(len(numbers)):\n        for j\
    \ in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <\
    \ closest:\n                closest = abs(numbers[i] - numbers[j])\n         \
    \       closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n", " \
    \   numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n\n", "    # TODO: implement this function\n    pass\n\
    \n", "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n     \
    \   diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n   \
    \         min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n\
    \    return min_pair\n", "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n\
    \    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n            closest\
    \ = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n    return closest_pair\n\n", "    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n\n", "    # TODO: implement this function\n\
    \    pass\n", "    # TODO: Implement this function\n    pass\n", "    # TODO:\
    \ Implement this function\n    pass\n\n", "    numbers.sort()\n    closest = numbers[1]\
    \ - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n    \
    \        closest = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n    return closest_pair\n", "    # TODO: Implement this function\n\
    \    pass\n", "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n   \
    \ closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        if numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i\
    \ + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i + 1])\n\
    \    return closest_pair\n", "    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    # TODO: Implement this function\n\
    \    pass\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n  \
    \  min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n\
    \        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n   \
    \         min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n\
    \    return min_pair\n", "    # TODO: implement this function\n    pass\n", " \
    \   numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n\
    \    closest_distance = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < closest_distance:\n   \
    \         closest_pair = (numbers[i], numbers[i + 1])\n            closest_distance\
    \ = abs(numbers[i] - numbers[i + 1])\n    return closest_pair\n\n", "    # TODO:\
    \ implement this function\n    #raise NotImplementedError()\n    numbers.sort()\n\
    \    diff = numbers[1] - numbers[0]\n    for i in range(len(numbers)-1):\n   \
    \     if numbers[i+1] - numbers[i] < diff:\n            diff = numbers[i+1] -\
    \ numbers[i]\n            result = (numbers[i], numbers[i+1])\n    return result\n",
  "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    closest_distance\
    \ = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers) - 1):\n    \
    \    for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance:\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n    return closest_pair\n",
  "    numbers.sort()\n    min_diff = float('inf')\n    min_pair = None\n    for i\
    \ in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n  \
    \      if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Write\
    \ your code here\n    numbers.sort()\n    min_diff = float('inf')\n    min_pair\
    \ = (0, 0)\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] -\
    \ numbers[i] < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n",
  "    # TODO: Implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    #raise NotImplementedError()\n    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n            min_diff\
    \ = numbers[i + 1] - numbers[i]\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n", "    numbers.sort()\n    closest = numbers[1]\
    \ - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i\
    \ + 1] - numbers[i] < closest:\n            closest = numbers[i + 1] - numbers[i]\n\
    \            closest_numbers = (numbers[i], numbers[i + 1])\n    return closest_numbers\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    # TODO: Implement this function\n    pass\n", "   \
    \ # TODO: Implement this function\n    pass\n\n", "    numbers.sort()\n    min_diff\
    \ = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n  \
    \  for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff:\n            min_diff = diff\n          \
    \  min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"List must have at least two elements\")\n \
    \   numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    closest_distance\
    \ = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers) - 1):\n    \
    \    for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance:\n               \
    \ closest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\
    \    return closest_pair\n", "    # TODO: Implement this function\n    pass\n",
  "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n    closest_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1]\
    \ - numbers[i] < closest:\n            closest = numbers[i + 1] - numbers[i]\n\
    \            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n",
  "    # TODO: Implement this function\n    pass\n\n", "    # TODO: Implement me!\n\
    \    pass\n", "    numbers.sort()\n    closest_pair = numbers[0], numbers[1]\n\
    \    closest_distance = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i]\
    \ - numbers[j]) < closest_distance:\n                closest_pair = numbers[i],\
    \ numbers[j]\n                closest_distance = abs(numbers[i] - numbers[j])\n\
    \    return closest_pair\n\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n\n", "    numbers.sort()\n    closest\
    \ = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n      \
    \  if numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i\
    \ + 1] - numbers[i]\n            closest_numbers = (numbers[i], numbers[i + 1])\n\
    \    return closest_numbers\n\n", "    numbers.sort()\n    closest = numbers[1]\
    \ - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n    \
    \        closest = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n    return closest_pair\n", "    # TODO: implement this function\n\
    \    pass\n", "    # TODO: Implement this function\n    #raise NotImplementedError()\n\
    \    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    min_diff = float('inf')\n    min_pair = (0, 0)\n    for\
    \ i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        for j in range(i\
    \ + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < closest_distance:\n\
    \                closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    return closest_pair\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    # TODO: Implement this function\n    pass\n",
  "    # TODO: Implement this function\n    pass\n", "    # TODO: Implement this function\n\
    \    pass\n", "    # TODO: Implement this function\n    pass\n\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    # TODO: Implement this function\n    pass\n",
  "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n",
  "    # TODO: Implement me\n    pass\n", "    # TODO: implement this function\n \
    \   pass\n\n", "    # TODO: Implement this function\n    numbers.sort()\n    min_diff\
    \ = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n  \
    \  for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i +\
    \ 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n \
    \           min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n", " \
    \   numbers.sort()\n    closest = numbers[1] - numbers[0]\n    closest_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n       \
    \ if numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i +\
    \ 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i + 1])\n \
    \   return closest_pair\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n            min_diff\
    \ = numbers[i + 1] - numbers[i]\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n", "    numbers.sort()\n    closest = numbers[1]\
    \ - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n    \
    \        closest = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n    return closest_pair\n", "    numbers.sort()\n    closest\
    \ = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n   \
    \ for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <\
    \ closest:\n            closest = numbers[i + 1] - numbers[i]\n            closest_pair\
    \ = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n", "    # TODO: Write\
    \ function body\n    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n    min_diff =\
    \ numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i\
    \ in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n  \
    \      if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < closest_distance:\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n            closest_distance = abs(numbers[i] - numbers[i +\
    \ 1])\n    return closest_pair\n\n", "    # TODO: Implement this function\n  \
    \  pass\n", "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < closest_distance:\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n            closest_distance = abs(numbers[i] - numbers[i +\
    \ 1])\n    return closest_pair\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    # TODO: implement this function\n\
    \    #raise NotImplementedError()\n    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    # TODO: Implement this function\n\
    \    pass\n", "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        for j in range(i\
    \ + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < closest_distance:\n\
    \                closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    return closest_pair\n\n", "    numbers.sort()\n\
    \    closest = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i]\
    \ < closest:\n            closest = numbers[i + 1] - numbers[i]\n            closest_pair\
    \ = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\
    \    numbers.sort()\n    closest = numbers[1] - numbers[0]\n    closest_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i + 1]\
    \ - numbers[i]\n            closest_pair = (numbers[i], numbers[i + 1])\n    return\
    \ closest_pair\n", "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n\
    \    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n            closest\
    \ = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n    return closest_pair\n", "    # TODO: Implement this function\n  \
    \  #raise NotImplementedError()\n    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement this function\n\
    \    pass\n", "    # TODO: Implement this function.\n    #raise NotImplementedError()\n\
    \    numbers.sort()\n    closest = numbers[1] - numbers[0]\n    result = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i\
    \ + 1] - numbers[i] < closest:\n            closest = numbers[i + 1] - numbers[i]\n\
    \            result = (numbers[i], numbers[i + 1])\n    return result\n", "  \
    \  numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < closest[1] - closest[0]:\n \
    \           closest = (numbers[i], numbers[i + 1])\n    return closest\n", " \
    \   # TODO: Implement this function\n    #raise NotImplementedError()\n    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n       \
    \ if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n\
    \            min_diff = diff\n            min_pair = (numbers[i], numbers[i +\
    \ 1])\n    return min_pair\n", "    numbers.sort()\n    closest_pair = (numbers[0],\
    \ numbers[1])\n    closest_distance = abs(numbers[0] - numbers[1])\n    for i\
    \ in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n\
    \            if abs(numbers[i] - numbers[j]) < closest_distance:\n           \
    \     closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    return closest_pair\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_diff_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i\
    \ + 1])\n            min_diff_pair = (numbers[i], numbers[i + 1])\n    return\
    \ min_diff_pair\n\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n\
    \            min_diff = diff\n            min_pair = (numbers[i], numbers[i +\
    \ 1])\n    return min_pair\n", "    # TODO: implement this function\n    pass\n",
  "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n    closest_pair\
    \ = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0] - numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n\
    \            if abs(numbers[i] - numbers[j]) < closest_distance:\n           \
    \     closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    return closest_pair\n\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n    min_diff =\
    \ float('inf')\n    for i in range(len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n    min_diff\
    \ = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        for j in range(i\
    \ + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < closest_distance:\n\
    \                closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    return closest_pair\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_distance = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < closest_distance:\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n            closest_distance = abs(numbers[i] - numbers[i +\
    \ 1])\n    return closest_pair\n\n", "    numbers.sort()\n    closest_pair = (numbers[0],\
    \ numbers[1])\n    closest_distance = abs(numbers[0] - numbers[1])\n    for i\
    \ in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n\
    \            if abs(numbers[i] - numbers[j]) < closest_distance:\n           \
    \     closest_pair = (numbers[i], numbers[j])\n                closest_distance\
    \ = abs(numbers[i] - numbers[j])\n    return closest_pair\n\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n\
    \    for i in range(2, len(numbers)):\n        if numbers[i] - numbers[i-1] <\
    \ closest:\n            closest = numbers[i] - numbers[i-1]\n            closest_pair\
    \ = (numbers[i-1], numbers[i])\n    return closest_pair\n", "    numbers.sort()\n\
    \    diff = numbers[1] - numbers[0]\n    for i in range(len(numbers) - 1):\n \
    \       if numbers[i + 1] - numbers[i] < diff:\n            diff = numbers[i +\
    \ 1] - numbers[i]\n            closest = (numbers[i], numbers[i + 1])\n    return\
    \ closest\n\n", "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i]\
    \ < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n          \
    \  min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    # TODO:\
    \ Write a function that finds the two closest numbers in a list of numbers and\
    \ returns them in order\n    # (smaller number, larger number)\n    #\n    # HINT:\
    \ You can use the abs() function to get the absolute value of a number.\n    #\n\
    \    # HINT: You can use the min() function to find the smallest number in a list.\n\
    \    #\n    # HINT: You can use the index() function to find the index of a number\
    \ in a list.\n    #\n    # HINT: You can use the len() function to find the length\
    \ of a list.\n    #\n    # HINT: You can use the range() function to create a\
    \ list of numbers.\n    #\n    # HINT: You can use the zip() function to create\
    \ a list of tuples from two lists.\n    #\n    # HINT: You can use the sort()\
    \ function to sort a list.\n    #\n    # HINT: You can use the sorted() function\
    \ to sort a list.\n    #\n    # HINT: You can use the enumerate() function to\
    \ get the index and value of each element in a list.\n    #\n    # HINT: You can\
    \ use the reversed() function to reverse a list.\n    #\n    # HINT: You can use\
    \ the reversed() function to reverse a list.\n    #\n    # HINT: You can use the\
    \ reversed() function to reverse a list.\n    #\n    # HINT: You can use the reversed()\
    \ function to reverse a list.\n    #\n    # HINT: You can use the reversed() function\
    \ to reverse a list.\n    #\n    # HINT: You can use the reversed() function to\
    \ reverse a list.\n    #\n    # HINT: You can use the reversed() function to reverse\
    \ a list.\n    #\n    # HINT: You can use the reversed() function to reverse a\
    \ list.\n    #\n    # HINT: You can use the reversed() function to reverse a list.\n\
    \    #\n    # HINT: You can use the reversed() function to reverse a list.\n \
    \   #\n    # HINT: You can use the reversed() function to reverse a list.\n  \
    \  #\n    # HINT: You can use the reversed() function to reverse a list.\n", " \
    \   # TODO: Implement this function\n    #raise NotImplementedError()\n    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n\
    \            min_diff = diff\n            min_pair = (numbers[i], numbers[i +\
    \ 1])\n    return min_pair\n", "    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement this function\n\
    \    pass\n", "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n", "    # TODO: Implement this function\n    pass\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff\
    \ = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n          \
    \  min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return\
    \ min_pair\n", "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i]\
    \ < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n          \
    \  min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    numbers.sort()\n\
    \    closest = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i]\
    \ < closest:\n            closest = numbers[i + 1] - numbers[i]\n            closest_pair\
    \ = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff:\n            min_diff = diff\n          \
    \  min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    closest_distance\
    \ = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers) - 1):\n    \
    \    for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance:\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n    return closest_pair\n",
  "    # TODO: Implement this function\n    pass\n", "    numbers.sort()\n    min_diff\
    \ = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n\
    \            min_diff = numbers[i + 1] - numbers[i]\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement this function\n\
    \    pass\n", "    closest_pair = (numbers[0], numbers[1])\n    closest_distance\
    \ = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n        for\
    \ j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance:\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n    return closest_pair\n\
    \n", "    # TODO: Implement this function\n    numbers.sort()\n    min_diff =\
    \ abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <\
    \ min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n       \
    \     min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "   \
    \ numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n\
    print(find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n",
  "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i\
    \ + 1] - numbers[i] < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n",
  "    # TODO: Implement this function\n    pass\n", "    closest_pair = (numbers[0],\
    \ numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n\
    \        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] -\
    \ numbers[j]) < min_diff:\n                min_diff = abs(numbers[i] - numbers[j])\n\
    \                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n\
    \n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n     \
    \   diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n        \
    \    min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n  \
    \  return min_pair\n", "    numbers.sort()\n    min_diff = float('inf')\n    min_pair\
    \ = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1]\
    \ - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n   \
    \         min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\nprint(find_closest_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_closest_elements([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(find_closest_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30]))\nprint(find_closest_elements([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]))\nprint(find_closest_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50]))\nprint(find_closest_elements([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21", "    numbers.sort()\n\
    \    closest = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n\
    \        if numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i\
    \ + 1] - numbers[i]\n            closest_numbers = (numbers[i], numbers[i + 1])\n\
    \    return closest_numbers\n\n", "    # TODO: Implement this function\n    #raise\
    \ NotImplementedError()\n    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n\
    \        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff\
    \ = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n", "    numbers.sort()\n    closest = numbers[1]\
    \ - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n            closest\
    \ = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n    return closest_pair\n\n", "    # TODO: Implement this function\n\
    \    pass\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n  \
    \  min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n\
    \        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n   \
    \         min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n\
    \    return min_pair\n", "    # TODO: Implement this function\n    pass\n", " \
    \   # TODO: Implement this function\n    pass\n", "    numbers.sort()\n    diff\
    \ = numbers[1] - numbers[0]\n    for i in range(len(numbers) - 1):\n        if\
    \ numbers[i + 1] - numbers[i] < diff:\n            diff = numbers[i + 1] - numbers[i]\n\
    \            closest_numbers = (numbers[i], numbers[i + 1])\n    return closest_numbers\n\
    \n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n     \
    \   diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n        \
    \    min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n  \
    \  return min_pair\n\n", "    numbers.sort()\n    min_diff = abs(numbers[0] -\
    \ numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    # TODO: Implement this function\n\
    \    pass\n\n", "    # TODO: Implement this function\n    pass\n\n", "    # TODO:\
    \ implement this function\n    numbers.sort()\n    min_diff = abs(numbers[0] -\
    \ numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n\
    \            min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    numbers.sort()\n    min_diff = numbers[1] -\
    \ numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)\
    \ - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n\
    \            min_diff = diff\n            min_pair = (numbers[i], numbers[i +\
    \ 1])\n    return min_pair\n", "    numbers.sort()\n    closest = numbers[1] -\
    \ numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i +\
    \ 1] - numbers[i] < closest:\n            closest = numbers[i + 1] - numbers[i]\n\
    \            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n\
    \n", "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n    closest_pair\
    \ = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ numbers[i + 1] - numbers[i] < closest:\n            closest = numbers[i + 1]\
    \ - numbers[i]\n            closest_pair = (numbers[i], numbers[i + 1])\n    return\
    \ closest_pair\n", "    # TODO: implement this function\n    pass\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0],\
    \ numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i\
    \ + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n\n", "    numbers.sort()\n    closest = numbers[1] - numbers[0]\n\
    \    closest_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers)\
    \ - 1):\n        if numbers[i + 1] - numbers[i] < closest:\n            closest\
    \ = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n    return closest_pair\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n   \
    \         min_diff = numbers[i + 1] - numbers[i]\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    # TODO: Implement this function.\n\
    \    #raise NotImplementedError()\n    numbers.sort()\n    min_diff = float('inf')\n\
    \    min_pair = (0,0)\n    for i in range(len(numbers)-1):\n        diff = numbers[i+1]\
    \ - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n   \
    \         min_pair = (numbers[i], numbers[i+1])\n    return min_pair\n", "   \
    \ numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n\
    \            min_diff = diff\n            min_pair = (numbers[i], numbers[i +\
    \ 1])\n    return min_pair\n\n", "    # TODO: Implement this function\n    pass\n\
    \n", "    # TODO: implement this function\n    numbers.sort()\n    min_diff =\
    \ abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i\
    \ + 1])\n        if diff < min_diff:\n            min_diff = diff\n          \
    \  min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n",
  "    numbers.sort()\n    min_diff = abs(numbers[0] - numbers[1])\n    min_pair =\
    \ (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if\
    \ abs(numbers[i] - numbers[i + 1]) < min_diff:\n            min_diff = abs(numbers[i]\
    \ - numbers[i + 1])\n            min_pair = (numbers[i], numbers[i + 1])\n   \
    \ return min_pair\n", "    numbers.sort()\n    min_diff = numbers[1] - numbers[0]\n\
    \    min_pair = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) -\
    \ 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n            min_diff\
    \ = numbers[i + 1] - numbers[i]\n            min_pair = (numbers[i], numbers[i\
    \ + 1])\n    return min_pair\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n", "    if len(numbers) < 2:\n       \
    \ raise ValueError(\"List must contain at least two numbers\")\n    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    numbers.sort()\n    min_diff = abs(numbers[0]\
    \ - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)\
    \ - 1):\n        if abs(numbers[i] - numbers[i + 1]) < min_diff:\n           \
    \ min_diff = abs(numbers[i] - numbers[i + 1])\n            min_pair = (numbers[i],\
    \ numbers[i + 1])\n    return min_pair\n\n", "    numbers.sort()\n    min_diff\
    \ = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest = numbers[1] - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i]\
    \ < closest:\n            closest = numbers[i + 1] - numbers[i]\n            closest_pair\
    \ = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n", "    numbers.sort()\n\
    \    closest_pair = (numbers[0], numbers[1])\n    closest_diff = abs(numbers[0]\
    \ - numbers[1])\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < closest_diff:\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n            closest_diff = abs(numbers[i] - numbers[i + 1])\n    return\
    \ closest_pair\n\n", "    # TODO: Implement this function\n    pass\n\n", "  \
    \  # TODO: Implement this function\n    #raise NotImplementedError()\n    numbers.sort()\n\
    \    min_diff = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i\
    \ + 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n\
    \            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n\n",
  "    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    closest_distance\
    \ = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n      \
    \  distance = numbers[i + 1] - numbers[i]\n        if distance < closest_distance:\n\
    \            closest_distance = distance\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n    return closest_pair\n", "    numbers.sort()\n    min_diff\
    \ = abs(numbers[0] - numbers[1])\n    min_pair = (numbers[0], numbers[1])\n  \
    \  for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i +\
    \ 1]) < min_diff:\n            min_diff = abs(numbers[i] - numbers[i + 1])\n \
    \           min_pair = (numbers[i], numbers[i + 1])\n    return min_pair\n", " \
    \   # TODO: Write code here\n    #raise NotImplementedError()\n    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n", "    numbers.sort()\n\
    \    closest_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)\
    \ - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < closest_diff:\n\
    \            closest_diff = diff\n            closest_pair = (numbers[i], numbers[i\
    \ + 1])\n    return closest_pair\n\n", "    numbers.sort()\n    min_diff = numbers[1]\
    \ - numbers[0]\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(1,\
    \ len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff\
    \ < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i],\
    \ numbers[i + 1])\n    return closest_pair\n", "    numbers.sort()\n    min_diff\
    \ = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n    for\
    \ i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    # TODO: Implement\
    \ this function\n    pass\n", "    numbers.sort()\n    closest_pair = (numbers[0],\
    \ numbers[1])\n    closest_distance = abs(numbers[0] - numbers[1])\n    for i\
    \ in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < closest_distance:\n\
    \            closest_pair = (numbers[i], numbers[i + 1])\n            closest_distance\
    \ = abs(numbers[i] - numbers[i + 1])\n    return closest_pair\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\n", "    numbers.sort()\n\
    \    min_diff = numbers[1] - numbers[0]\n    min_pair = (numbers[0], numbers[1])\n\
    \    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n\
    \        if diff < min_diff:\n            min_diff = diff\n            min_pair\
    \ = (numbers[i], numbers[i + 1])\n    return min_pair\n\nprint(find_closest_elements([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
