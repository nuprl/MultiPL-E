name: HumanEval_60_sum_to_n
language: py
prompt: "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums\
  \ numbers from 1 to n.\n                        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6)\
  \ == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert\
  \ candidate(100) == 5050\n\ndef test_check():\n    check(sum_to_n)\n\ntest_check()\n"
completions: ["    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n\
    \ < 1:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    total\
    \ = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\n",
  "    return n * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n\
    \        return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n\
    \        return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n\
    \ < 1:\n        return 0\n    return n + sum_to_n(n - 1)\n\n", "    return n *\
    \ (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1)\
    \ // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\
    \n", "    return n * (n + 1) // 2\n\n", "    return sum(range(1, n + 1))\n\n",
  "    return (n * (n + 1)) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n\
    \ - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    total = 0\n    for i in range(1,\
    \ n + 1):\n        total += i\n    return total\n\n", "    return n * (n + 1)\
    \ // 2\n\n", "    if n == 1:\n        return 1\n    else:\n        return n +\
    \ sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n\
    \ == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n",
  "    return n * (n + 1) // 2\n\n", "    if n < 1:\n        return 0\n    else:\n\
    \        return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n == 1:\n\
    \        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n      \
    \  return n + sum_to_n(n - 1)\n\n", "    if n == 1:\n        return 1\n    else:\n\
    \        return n + sum_to_n(n - 1)\n\n", "    if n < 1:\n        return 0\n \
    \   else:\n        return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\
    \n", "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n\
    \ - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    if n == 1:\n        return\
    \ 1\n    else:\n        return n + sum_to_n(n - 1)\n\n", "    return n * (n +\
    \ 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n        return\
    \ n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    return (n\
    \ * (n + 1)) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return\
    \ sum\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n        return\
    \ n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    return sum(range(1,\
    \ n + 1))\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return (n * (n + 1)) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n*(n+1)//2\n\
    \n", "    return (n * (n + 1)) // 2\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return (n * (n\
    \ + 1)) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1)\
    \ // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\
    \n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n\
    \        return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   if n < 1:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n\
    \n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\
    \n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n\
    \ == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n",
  "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n\
    \n", "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n\
    \ - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\
    \n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", " \
    \   return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n\
    \ == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n == 1:\n       \
    \ return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n", "    return n\
    \ * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n        return\
    \ n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", "    return n *\
    \ (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n    else:\n        return\
    \ n + sum_to_n(n - 1)\n\n", "    if n == 1:\n        return 1\n    else:\n   \
    \     return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", "  \
    \  return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n\
    \ == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n",
  "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return\
    \ n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n\
    \ + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n", "    return n * (n + 1) //\
    \ 2\n\n", "    return n * (n + 1) // 2\n\n", "    if n == 1:\n        return 1\n\
    \    return n + sum_to_n(n - 1)\n\n", "    return n * (n + 1) // 2\n\n", "   \
    \ return n * (n + 1) // 2\n\n", "    return n * (n + 1) // 2\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
