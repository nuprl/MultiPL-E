name: HumanEval_148_bf
language: py
prompt: "from typing import Tuple\n\ndef bf(planet1: str, planet2: str) -> Tuple[str,\
  \ ...]:\n    \"\"\"\n    There are eight planets in our solar system: the closerst\
  \ to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names\
  \ as strings planet1 and planet2. \n    The function should return a tuple containing\
  \ all planets whose orbits are \n    located between the orbit of planet1 and the\
  \ orbit of planet2, sorted by \n    the proximity to the sun. \n    The function\
  \ should return an empty tuple if planet1 or planet2\n    are not correct planet\
  \ names. \n    Examples\n                \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Jupiter', 'Neptune') == ('Saturn',\
  \ 'Uranus')\n    assert candidate('Earth', 'Mercury') == ('Venus',)\n    assert\
  \ candidate('Mercury', 'Uranus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\
  \    assert candidate('Neptune', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn',\
  \ 'Uranus')\n    assert candidate('Earth', 'Earth') == ()\n    assert candidate('Mars',\
  \ 'Earth') == ()\n    assert candidate('Jupiter', 'Makemake') == ()\n\ndef test_check():\n\
  \    check(bf)\n\ntest_check()\n"
completions: ["    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n\
    \            return planets[planet2_index:planet1_index]\n        else:\n    \
    \        return planets[planet1_index:planet2_index]\n", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Jupiter\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\",\
    \ \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Saturn\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Mars\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Uran", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf('Earth',\
    \ 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Earth',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Pluto', 'Pluto'))", "    planets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n\
    \        if start > end:\n            return tuple(planets[end:start])\n     \
    \   else:\n            return tuple(planets[start:end])\n\nprint(bf('Earth', 'Mars'))\n\
    print(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars', 'Mars'))\n\
    print(bf('Earth', 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Pluto', 'Pluto'))",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Neptune\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"\
    Saturn\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Neptune\", \"Mars\"\
    ))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Neptune\", \"Venus\"))\nprint(bf(\"\
    Neptune\", \"Mercury\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Uranus\"\
    , \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Jupiter\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Mars\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\n\
    print(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Mercury\"\
    , \"Earth\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Pluto\", \"Earth\"\
    ))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mercury', 'Neptune'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Neptune'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Jupiter',\
    \ 'Saturn'))\nprint(bf('Uranus', 'Neptune'))\nprint(bf('Saturn', 'Jupiter'))\n\
    print(bf('Earth', 'Pluto'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Venus', 'Mercury'))\n\
    print(bf('Neptune', 'Uranus'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Neptune',\
    \ 'Mercury'))\nprint(bf('Uranus', 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\n\
    print(bf('Mercury', 'Neptune'))\nprint(bf('Jupiter', 'Neptune'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Uranus',\
    \ 'Neptune'))\nprint(bf('Saturn', 'Jupiter'))\nprint(bf('Earth', 'Pluto'))\nprint(bf('Mars',\
    \ 'Earth'))\nprint(bf('Venus', 'Mercury'))\nprint(bf('Neptune', 'Uranus'))\nprint(bf('Pluto',\
    \ 'Earth'))\nprint(bf('Neptune', 'Mercury'))\nprint(bf('Uranus', 'Saturn'))\n\
    print(bf('Saturn', 'Uranus'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Jupiter\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ in planets and planet2 in planets:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \    else:\n        return ()\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\"\
    , \"Jupiter\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Mars\", \"\
    Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Neptune\"\
    ))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\n\
    print(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Neptune\"\
    ))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"\
    Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Merc",
  "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n     \
    \   return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mars', 'Earth'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn', 'Mars'))\nprint(",
  "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n     \
    \   return ()\n    planet1_index = planets.index(planet1)\n    planet2_index =\
    \ planets.index(planet2)\n    if planet1_index < planet2_index:\n        return\
    \ planets[planet1_index+1:planet2_index]\n    else:\n        return planets[planet2_index+1:planet1_index]\n",
  "    # your code here\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n\
    \        end = planets.index(planet2)\n        if start > end:\n            start,\
    \ end = end, start\n        return tuple(planets[start+1:end])\n", "    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\n\
    print(bf('Saturn', 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Saturn'))\nprint(bf('Uranus', 'Uranus'))\nprint(bf('Uranus', 'Neptune'))\n\
    print(bf('Neptune', 'Uranus'))\nprint(bf('Neptune', 'Neptune'))\nprint(bf('Neptune',\
    \ 'Mercury'))\nprint(bf('Mercury', 'Neptune'))\nprint(bf('Mercury', 'Mercury'))\n\
    print(bf('Mercury', 'Venus'))\nprint(bf('Venus', 'Mercury'))\nprint(bf('Venus',\
    \ 'Venus'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Mars',\
    \ 'Mars'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\n\
    print(bf('Saturn', 'Saturn'))\n", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"\
    Saturn\", \"Mars\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Saturn\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Uranus\"\
    , \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Neptune\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Merc",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Earth\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\n\
    print(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\"\
    , \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"\
    ))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))\n\
    print(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Pluto\", \"Pluto\"))\n\
    print(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Neptune\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Saturn", "    planets = (\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return planets[planets.index(planet1):planets.index(planet2)+1]\n\
    \nprint(bf(\"Mars\", \"Earth\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        i1 = planets.index(planet1)\n\
    \        i2 = planets.index(planet2)\n        if i1 < i2:\n            return\
    \ planets[i1+1:i2]\n        else:\n            return planets[i2+1:i1]\n\nprint(bf('Mercury',\
    \ 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mercury', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Pluto'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Venus', 'Mercury'))\nprint(bf('Venus',\
    \ 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars',\
    \ 'Earth'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\nprint(bf('Saturn', 'Uranus'))\n\
    print(bf('Uranus', 'Saturn'))\nprint(bf('Uranus', 'Neptune'))\nprint(bf('Neptune',\
    \ 'Uranus'))\nprint(bf('Neptune', 'Pluto'))\nprint(bf('Pluto', 'Neptune'))\nprint(bf('Pluto',\
    \ 'Mercury'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Mars\", \"Jupiter\"))", "    planets = ('Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n\
    \        if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Earth', 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Earth', 'Venus'))\n\
    print(bf('Venus', 'Earth'))\nprint(bf('Earth', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Earth'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter', 'Earth'))\nprint(bf('Earth',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Earth', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Earth'))\nprint(bf('Earth', 'Neptune'))\nprint(bf('Neptune', 'Earth'))", " \
    \   planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n     \
    \   return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Mars', 'Mars'))\n\
    print(bf('Mars', 'Jupiter'))\nprint(bf('Mars', 'Saturn'))\nprint(bf('Mars', 'Uranus'))\n\
    print(bf('Mars', 'Neptune'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mars', 'Venus'))\n\
    print(bf('Mars', 'Pluto'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Pluto', 'Pluto'))\n\
    print(bf('Earth', 'Earth'))\nprint(bf('Earth', 'Pluto'))\nprint(bf('Pluto', 'Earth'))\n\
    print(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter', 'Earth'))\nprint(bf('Earth',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Earth', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Earth'))\nprint(bf('Earth', 'Neptune'))\nprint(bf('Neptune', 'Earth'))\nprint(bf('Earth',\
    \ 'Mercury'))\nprint(bf('Mercury', 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Venus',\
    \ 'Earth'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Venus', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Venus'))\nprint(bf('Venus', 'Jupiter'))\nprint(bf('Jupiter', 'Venus'))\nprint(bf('Venus',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Venus'))\nprint(bf", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        if planets.index(planet1) < planets.index(planet2):\n    \
    \        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\",\
    \ \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"\
    ))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Earth\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Earth\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Pluto\"))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or\
    \ planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mars', 'Venus'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "   \
    \ planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Earth\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Earth\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\n\
    print(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Earth\"))\nprint(bf(\"Earth", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Saturn\"))\n\
    print(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\"\
    , \"Earth\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\"\
    , \"Jupiter\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Venus\"\
    ))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Uranus\"\
    , \"Mars\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Earth\"\
    ))\nprint(bf(\"Uranus\",", "    planets = (\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\",\
    \ \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\", \"Saturn\"))\nprint(bf(\"Pluto\",\
    \ \"Uranus\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"\
    ))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\"\
    , \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"\
    Pluto\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Mars\"))\n\
    print(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"\
    Saturn\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Pluto\"))\nprint(bf(\"Uranus\"\
    , \"Earth\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Uranus\", \"Jupiter\"\
    ))\nprint(bf(\"Uranus\", \"Saturn\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mars', 'Mars'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    planet1_index\
    \ = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if\
    \ planet1_index < planet2_index:\n        return planets[planet1_index+1:planet2_index]\n\
    \    else:\n        return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\"\
    , \"Mars\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\",\
    \ \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\",\
    \ \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\",\
    \ \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\n\
    print(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"\
    Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\"\
    , \"Neptune\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Mars\"\
    ))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Neptune\"\
    , \"Mars\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Neptune\", \"Saturn\"\
    ))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = ('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if\
    \ planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n\
    \        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n\
    \        if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf('Mars', 'Earth'))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or\
    \ planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Mars', 'Mars'))\nprint(bf('Mars', 'Pluto'))\nprint(bf('Pluto', 'Mars'))\n\
    print(bf('Pluto', 'Pluto'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\n\
    print(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\",\
    \ \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"))\n\
    print(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Mercury\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Venus\"))\nprint(bf(\"Venus\",", "    planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        planet1_index = planets.index(planet1)\n        planet2_index\
    \ = planets.index(planet2)\n        if planet1_index < planet2_index:\n      \
    \      return tuple(planets[planet1_index+1:planet2_index])\n        else:\n \
    \           return tuple(planets[planet2_index+1:planet1_index])\n\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Mars\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Venus\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\n\
    print(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"\
    Mercury\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))", "    planets = {\n     \
    \   'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n\
    \        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune':\
    \ 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n       \
    \ return ()\n    if planets[planet1] > planets[planet2]:\n        planet1, planet2\
    \ = planet2, planet1\n    return tuple(sorted(planets.keys(), key=lambda x: planets[x]))[planets[planet1]:planets[planet2]]\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index\
    \ = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return\
    \ planets[planet1_index + 1: planet2_index]\n    else:\n        return planets[planet2_index\
    \ + 1: planet1_index]\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 in planets and planet2 in planets:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \    else:\n        return ()\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Jupiter\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\", \"\
    Neptune\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Mars\"\
    , \"Sun\"))\nprint(bf(\"Sun\", \"Mars\"))\nprint(bf(\"Sun\", \"Sun\"))\nprint(bf(\"\
    Sun\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Sun\"))\nprint(bf(\"Jupiter\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        planet1_index = planets.index(planet1)\n        planet2_index\
    \ = planets.index(planet2)\n        if planet1_index < planet2_index:\n      \
    \      return planets[planet1_index+1:planet2_index]\n        else:\n        \
    \    return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Earth\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"\
    Pluto\"))", "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return tuple(planets[planet1_index + 1: planet2_index])\n       \
    \ else:\n            return tuple(planets[planet2_index + 1: planet1_index])\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Mars', 'Mars'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter',\
    \ 'Earth'))\nprint(bf('Earth', 'Saturn'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Earth',\
    \ 'Uranus'))\nprint(bf('Uranus', 'Earth'))\nprint(bf('Earth', 'Neptune'))\nprint(bf('Neptune',\
    \ 'Earth'))\nprint(bf('Earth', 'Mercury'))\nprint(bf('Mercury', 'Earth'))\nprint(bf('Mars',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Mars', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Mars'))\nprint(bf('Mars', 'Uranus'))\nprint(bf('Uranus', 'Mars'))\nprint(bf('Mars',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Mars'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\nprint(bf('Jupiter',\
    \ 'Uranus'))\nprint(bf('Uranus', 'Jupiter'))\nprint(bf('Jupiter', 'Neptune'))\n\
    print(bf('Nept", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mars', 'Jupiter'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"\
    Saturn\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Venus\", \"Mercury\"\
    ))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\"\
    , \"Venus\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Jupiter\"\
    ))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"\
    Saturn\", \"Venus\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Uranus\"\
    , \"Saturn\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Mars\"\
    ))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"\
    Uranus\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\"\
    , \"Saturn\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Neptune\", \"\
    Mars\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Neptune\", \"Venus\"))\n\
    print(bf(\"Neptune", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Mars\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Mars\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mars", " \
    \   planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"\
    ))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"\
    Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = ('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    planets_dict\
    \ = {planets[i]: i for i in range(len(planets))}\n    if planet1 not in planets_dict\
    \ or planet2 not in planets_dict:\n        return ()\n    if planets_dict[planet1]\
    \ > planets_dict[planet2]:\n        planet1, planet2 = planet2, planet1\n    return\
    \ tuple(planets[planets_dict[planet1] + 1: planets_dict[planet2]])\n", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]", "    planets = (\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n   \
    \     return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    if planets.index(planet1) > planets.index(planet2):\n\
    \        planet1, planet2 = planet2, planet1\n    return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"\
    Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Neptune\", \"\
    Neptune\"))\nprint(bf(\"Neptune\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Neptune\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"\
    ))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\"\
    , \"Pluto", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\n\
    print(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"))\n\
    print(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Venus\"))\n\
    print(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\"\
    , \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"\
    ))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Neptune\", \"Mars\"))\n", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Saturn\"))\n\
    print(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\"\
    , \"Earth\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Jupiter\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Venus\"))\n\
    print(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\",\
    \ \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Venus\"\
    ))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter", "    planets = ('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if\
    \ planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_index\
    \ = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if\
    \ planet1_index < planet2_index:\n        return planets[planet1_index + 1: planet2_index]\n\
    \    else:\n        return planets[planet2_index + 1: planet1_index]\n\nprint(bf('Earth',\
    \ 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars',\
    \ 'Mars'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter', 'Earth'))\nprint(bf('Earth',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Earth', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Earth'))\nprint(bf('Earth', 'Neptune'))\nprint(bf('Neptune', 'Earth'))\nprint(bf('Earth',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Mars',\
    \ 'Pluto'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\n\
    print(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\"\
    , \"Earth\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Earth\", \"Saturn\"\
    ))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\"\
    , \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"\
    ))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Jupiter\"\
    , \"Mercury\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Uranus\", \"Mercury\"\
    ))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"\
    Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Uranus\", \"\
    Jupiter\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Uranus\"\
    ))\nprint(bf(\"Neptune\", \"Uranus\"))\n", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\"\
    , \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"\
    ))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"\
    ))\nprint(bf(\"Uranus", "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    else:\n        planets_between = planets[planets.index(planet1)+1:planets.index(planet2)]\n\
    \        return tuple(planets_between)\n\nprint(bf('Mars', 'Venus'))", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\",\
    \ \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf('Earth',\
    \ 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars',\
    \ 'Mars'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter', 'Earth'))\nprint(bf('Earth',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Earth', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Earth'))\nprint(bf('Earth', 'Neptune'))\nprint(bf('Neptune', 'Earth'))\nprint(bf('Earth',\
    \ 'Mercury'))\nprint(bf('Mercury', 'Earth'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter',\
    \ 'Mars'))\nprint(bf('Mars', 'Saturn'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Mars',\
    \ 'Uranus'))\nprint(bf('Uranus', 'Mars'))\nprint(bf('Mars', 'Neptune'))\nprint(bf('Neptune',\
    \ 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mercury', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\nprint(bf('Jupiter', 'Uranus'))\n\
    print(bf('Uranus', 'Jupiter'))\nprint(bf('Jupiter', 'Neptune'))\nprint(bf('Neptune',\
    \ 'Jupiter'", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Earth\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\nprint(bf('Uranus', 'Neptune'))\n\
    print(bf('Neptune', 'Mercury'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Venus',\
    \ 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Jupiter'))\nprint(bf('Saturn', 'Saturn'))\nprint(bf('Uranus', 'Uranus'))\n\
    print(bf('Neptune', 'Neptune'))\nprint(bf('Mercury', 'Mercury'))\nprint(bf('Venus',\
    \ 'Venus'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Mars', 'Venus'))\nprint(bf('Jupiter',\
    \ 'Venus'))\nprint(bf('Saturn', 'Venus'))\nprint(bf('Uranus', 'Venus'))\nprint(bf('Neptune',\
    \ 'Venus'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Earth',\
    \ 'Mercury'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Jupiter', 'Mercury'))\n\
    print(bf('Saturn', 'Mercury'))\nprint(bf('Uranus', 'Mercury'))\nprint(bf('Neptune',\
    \ 'Mercury'))\nprint(bf('Mercury', 'Mercury'))\nprint(bf('Venus', 'Mercury'))\n\
    print(bf('Earth", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Earth'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\n\
    print(bf('Jupiter', 'Neptune'))\nprint(bf('Jupiter', 'Mercury'))\nprint(bf('Jupiter',\
    \ 'Venus'))\nprint(bf('Jupiter', 'Pluto'))\nprint(bf('Pluto', 'Jupiter'))\nprint(bf('Pluto',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Venus'))\nprint(bf('Pluto', 'Mercury'))\nprint(bf('Pluto',\
    \ 'Neptune'))\nprint(bf('Pluto', 'Saturn'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Pluto',\
    \ 'Mars'))\nprint(bf('Venus', 'Mars'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Venus',\
    \ 'Jupiter'))\nprint(bf('Venus', 'Saturn'))\nprint(bf('Venus', 'Neptune'))\nprint(bf('Venus',\
    \ 'Mercury'))\nprint(bf('Venus', 'Pluto'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Mercury',\
    \ 'Mars'))\nprint(bf('Mercury', 'Earth'))\nprint(bf('Mercury', 'Jupiter'))\nprint(bf('Mercury',\
    \ 'Saturn'))\nprint(bf('Mercury', 'Neptune'))\nprint(bf('Mercury', 'Venus'))\n\
    print(bf('Mercury', 'Pluto'))\nprint(bf('Mercury', 'Mercury'", "    planets =\
    \ (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n   \
    \     return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\"\
    , \"Mercury\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Saturn\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Neptune\"\
    , \"Neptune\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Venus\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Venus\"\
    ))\nprint(bf(\"Venus", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf('Earth', 'Mars'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars',\
    \ 'Earth'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Venus', 'Mars'))\nprint(bf('Venus',\
    \ 'Jupiter'))\nprint(bf('Venus', 'Neptune'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Venus',\
    \ 'Mercury'))\nprint(bf('Venus', 'Pluto'))\nprint(bf('Pluto', 'Venus'))\nprint(bf('Pluto',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Mercury'))\nprint(bf('Pluto', 'Neptune'))\nprint(bf('Pluto',\
    \ 'Jupiter'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Pluto',\
    \ 'Venus'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Mercury', 'Jupiter'))\n\
    print(bf('Mercury', 'Neptune'))\nprint(bf('Mercury', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Pluto'))\nprint(bf('Mercury', 'Mars'))\nprint(bf('Mercury', 'Earth'))\nprint(bf('Neptune',\
    \ 'Venus'))\nprint(bf('Neptune', 'Jupiter'))\nprint(bf('Neptune', 'Neptune'))\n\
    print(bf('Neptune', 'Mercury'))\nprint(bf('Neptune', 'Pluto'))\nprint(bf('Neptune',\
    \ 'Mars'))\nprint(bf('Neptune', 'Earth'))\nprint(bf('Jupiter', '", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\"\
    , \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"\
    ))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"\
    ))\nprint(bf(\"Uranus", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n\
    \        if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"\
    ))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"\
    ))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"\
    ))\n", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"\
    Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"\
    ))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\",\
    \ \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mars\"\
    ))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"\
    Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\n\
    print(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"\
    Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Saturn\"\
    , \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"\
    ))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\n\
    print(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\"\
    , \"Uranus\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Pluto\"\
    ))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"\
    ))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"\
    Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"\
    Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Venus\", \"Earth\"\
    ))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Saturn\"\
    ))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Mercury", "    planets = ('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if\
    \ planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n\
    \        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf('Earth', 'Mars'))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index + 1: planet2_index]\n        else:\n\
    \            return planets[planet2_index + 1: planet1_index]\n\nprint(bf(\"Mercury\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Earth\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Uranus\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"\
    ))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"\
    Mars\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"\
    Neptune\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\n\
    print(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"\
    Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Venus\"\
    , \"Mercury\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"\
    Neptune\", \"Mercury\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Earth\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"\
    ))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Venus\", \"Pluto\"))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    if planets.index(planet1) > planets.index(planet2):\n\
    \        planet1, planet2 = planet2, planet1\n    return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index\
    \ = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index,\
    \ planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index+1:planet2_index])\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Mars\",\
    \ \"Venus\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Venus\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Saturn\"\
    , \"Jupiter\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"\
    Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Earth\", \"\
    Mars\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mercury\"))\n\
    print(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Venus\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Saturn\",\
    \ \"Venus\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mercury\"))\nprint(bf(\"Saturn\", \"Mercury", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\",\
    \ \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"\
    ))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"\
    ))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\n\
    print(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\", \"\
    Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"\
    ))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"\
    Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Uranus\", \"\
    Jupiter\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Neptune\"\
    ))\nprint(bf(\"Neptune", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\",\
    \ \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index + 1: planet2_index]\n        else:\n\
    \            return planets[planet2_index + 1: planet1_index]\n\nprint(bf(\"Mercury\"\
    , \"Mars\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"\
    ))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"\
    Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Pluto\"))\nprint(bf(\"Pluto\"\
    , \"Neptune\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\n\
    print(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"\
    Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\",\
    \ \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"\
    Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\"\
    , \"Neptune\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\",\
    \ \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\",", "    planets = (\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        planet1_index = planets.index(planet1)\n        planet2_index\
    \ = planets.index(planet2)\n        if planet1_index < planet2_index:\n      \
    \      return planets[planet1_index+1:planet2_index]\n        else:\n        \
    \    return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Earth\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Jupiter\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\n\
    print(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Mercury\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\n\
    print(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\"\
    , \"Saturn\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"Venus", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\
    \    if index1 > index2:\n        return planets[index2+1:index1]\n    else:\n\
    \        return planets[index1+1:index2]\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"\
    Earth\", \"Neptune\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"\
    Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"\
    ))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\"\
    , \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\"\
    , \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Uranus\"\
    ))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Pluto\"))", " \
    \   planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n     \
    \   return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Mars', 'Mars'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\n\
    print(bf('Jupiter', 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Jupiter'))\nprint(bf('Saturn', 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\n\
    print(bf('Uranus', 'Saturn'))\nprint(bf('Uranus', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Uranus'))\nprint(bf('Neptune', 'Neptune'))\n\
    print(bf('Neptune', 'Mercury'))\nprint(bf('Mercury', 'Neptune'))\nprint(bf('Mercury',\
    \ 'Mercury'))\nprint(bf('Mercury', 'Venus'))\nprint(bf('Venus', 'Mercury'))\n\
    print(bf('Venus', 'Venus'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Earth', 'Venus'))\n\
    print(bf('Earth', 'Earth'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\n\
    print(bf('Mars', 'Mars'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\n\
    print(bf('Jupiter', 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Jupiter'))\nprint(", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Saturn\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n\
    \        if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"\
    ))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Venus\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Mercury\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Mars\"))\n\
    print(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\", \"Saturn\"))\nprint(bf(\"\
    Pluto\", \"Uranus\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"Mercury\"\
    , \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"\
    Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Earth\",", "    planets = ('Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mercury', 'Mars'))\nprint(bf('Mercury',\
    \ 'Jupiter'))\nprint(bf('Mercury', 'Neptune'))\nprint(bf('Mercury', 'Mercury'))\n\
    print(bf('Earth', 'Earth'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Jupiter',\
    \ 'Mercury'))\nprint(bf('Neptune', 'Mercury'))\nprint(bf('Mercury', 'Pluto'))\n\
    print(bf('Pluto', 'Mercury'))\nprint(bf('Pluto', 'Pluto'))", "    planets = (\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n   \
    \     return ()\n    if planets.index(planet1) > planets.index(planet2):\n   \
    \     planet1, planet2 = planet2, planet1\n    return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Earth\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\",\
    \ \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"))\n\
    print(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mercury\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Neptune\", \"Venus\"))", "    planets = (\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Earth\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"\
    Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\n\
    print(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Uranus\"\
    , \"Mercury\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"\
    Mercury\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Earth\", \"Mercury\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\n", "    planets = ('Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2) +\
    \ 1]))\n\nprint(bf('Earth', 'Mars'))", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Earth\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Earth\", \"Neptune\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"\
    Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"\
    ))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Mars\", \"\
    Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\n\
    print(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Mercury\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"\
    Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mars\"\
    ))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"\
    Saturn\", \"Mercury\"))\nprint(bf", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index\
    \ + 1: planet2_index]\n        else:\n            return planets[planet2_index\
    \ + 1: planet1_index]\n\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\n\
    print(bf('Jupiter', 'Neptune'))\nprint(bf('Neptune', 'Jupiter'))\nprint(bf('Mercury',\
    \ 'Venus'))\nprint(bf('Venus', 'Mercury'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars',\
    \ 'Mars'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Saturn', 'Saturn'))\nprint(bf('Uranus',\
    \ 'Uranus'))\nprint(bf('Neptune', 'Neptune'))\nprint(bf('Mercury', 'Neptune'))\n\
    print(bf('Neptune', 'Mercury'))\nprint(bf('Mercury', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Mercury'))\nprint(bf('Pluto', 'Neptune'))\nprint(bf('Neptune', 'Pluto'))",
  "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n     \
    \   return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth', 'Mercury'))\nprint(bf('Earth',\
    \ 'Neptune'))\nprint(bf('Earth', 'Uranus'))\nprint(bf('Earth', 'Saturn'))\nprint(bf('Earth',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Jupiter',\
    \ 'Earth'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Mercury', 'Earth'))\nprint(bf('Neptune',\
    \ 'Earth'))\nprint(bf('Uranus', 'Earth'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Pluto',\
    \ 'Earth'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Pluto',\
    \ 'Jupiter'))\nprint(bf('Pluto', 'Venus'))\nprint(bf('Pluto', 'Mercury'))\nprint(bf('Pluto',\
    \ 'Neptune'))\nprint(bf('Pluto', 'Uranus'))\nprint(bf('Pluto', 'Saturn'))\nprint(bf('Pluto',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Pluto'))\nprint(bf('Pluto', '", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\n\
    print(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"\
    Neptune\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"\
    Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\"\
    , \"Uranus\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Ne", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"\
    ))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Uranus\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"Venus\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Venus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"\
    ))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Saturn\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    planet1_index\
    \ = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if\
    \ planet1_index > planet2_index:\n        return planets[planet2_index+1:planet1_index]\n\
    \    else:\n        return planets[planet1_index+1:planet2_index]\n\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"\
    ))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Uranus\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"\
    Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"\
    ))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"\
    Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\"\
    , \"Saturn\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"\
    ))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\",\
    \ \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Venus\", \"Pluto\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"\
    Pluto\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"\
    ))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"\
    Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Saturn\"\
    , \"Pluto\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Pluto\"\
    ))\nprint(bf(\"", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets\
    \ and planet2 in planets:\n        if planets.index(planet1) < planets.index(planet2):\n\
    \            return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \    else:\n        return ()\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Mars\", \"Uranus\"))\n\
    print(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\n\
    print(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\"\
    , \"Uranus\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Mars\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Neptune\"\
    ))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\n\
    print(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Neptune\"\
    ))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"\
    Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury", "   \
    \ planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"\
    Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"\
    ))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"\
    Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"\
    Venus\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\n\
    print(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"\
    Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\"\
    , \"Mercury\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Saturn\", \"Earth\"\
    ))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"\
    Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\",", "    planets = (\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"\
    Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"\
    ))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"\
    Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"\
    Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"\
    Neptune\", \"Mars\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Neptune\"\
    , \"Saturn\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Neptune\", \"Venus\"))\nprint(bf(\"\
    Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Uranus\", \"\
    Jupiter\"))\n", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n\
    \    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n\
    \        return planets[planet1_index+1:planet2_index]\n    else:\n        return\
    \ planets[planet2_index+1:planet1_index]", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Earth\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"))\n\
    print(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\",\
    \ \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Venus\"))\nprint(bf(\"Earth\"\
    , \"Mars\"))\nprint(bf", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"\
    Saturn\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Earth\"))\n\
    print(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\"\
    , \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"\
    Saturn\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Venus\", \"Earth\"))\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Saturn\"\
    ))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Mercury\",", "    planets = (\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n   \
    \     return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        if planets.index(planet1) < planets.index(planet2):\n\
    \            return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2) + 1:planets.index(planet1)])\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Mercury\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Pluto\"\
    , \"Pluto\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\",\
    \ \"Saturn\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Saturn\"))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))", "    planets = (\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n   \
    \     return ()\n    else:\n        if planets.index(planet1) > planets.index(planet2):\n\
    \            return tuple(planets[planets.index(planet2):planets.index(planet1)])\n\
    \        else:\n            return tuple(planets[planets.index(planet1):planets.index(planet2)])\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Venus\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"Venus\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Venus\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or\
    \ planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mars', 'Venus'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Venus\", \"\
    Earth\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Uranus\", \"Earth\"))\n\
    print(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Pluto\", \"Earth\"))", "    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        planet1_index = planets.index(planet1)\n        planet2_index\
    \ = planets.index(planet2)\n        if planet1_index < planet2_index:\n      \
    \      return planets[planet1_index+1:planet2_index]\n        else:\n        \
    \    return planets[planet2_index+1:planet1_index]\n\nprint(bf('Earth', 'Mars'))\n\
    print(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars', 'Mars'))\n\
    print(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Mercury'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Mars',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Mars', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Mars'))\nprint(bf('Mars', 'Neptune'))\nprint(bf('Neptune', 'Mars'))\nprint(bf('Mars',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Earth'))\nprint(bf('Earth', 'Pluto'))\nprint(bf('Pluto', 'Venus'))\nprint(bf('Venus',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Mercury'))\nprint(bf('Mercury', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Pluto'))\nprint(bf('Pluto', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Uranus'))\nprint(bf('Uranus', 'Pluto'", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Neptune\", \"\
    Jupiter\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"\
    Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mercury\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\",\
    \ \"Jupiter\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"\
    Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\",\
    \ \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"\
    ))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\",\
    \ \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"\
    Saturn\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Earth\"))\n\
    print(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\"\
    , \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"\
    Saturn\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Venus\", \"Earth\"))\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Saturn\"\
    ))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Mercury\",", "    planets = (\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n   \
    \     return ()\n    else:\n        planet1_index = planets.index(planet1)\n \
    \       planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Mercury\"\
    , \"Jupiter\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets\
    \ and planet2 in planets:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n    else:\n        return ()\n", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\
    \    if planet1_index < planet2_index:\n        return planets[planet1_index+1:planet2_index]\n\
    \    else:\n        return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"\
    Earth\", \"Mars\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index\
    \ + 1: planet2_index]\n        else:\n            return planets[planet2_index\
    \ + 1: planet1_index]\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"\
    Jupiter\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\n\
    print(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"\
    Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Saturn\"\
    ))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"\
    Jupiter\", \"Neptune\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\"\
    , \"Mars\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"\
    Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\",\
    \ \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"\
    ))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Earth\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Mercury\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Venus\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Venus\"))\nprint", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or\
    \ planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mercury', 'Mars'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Earth',\
    \ 'Mars'))\nprint(bf('Mercury', 'Jupiter'))\nprint(bf('Jupiter', 'Neptune'))\n\
    print(bf('Saturn', 'Uranus'))\nprint(bf('Saturn', 'Pluto'))\nprint(bf('Uranus',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Uranus'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Pluto',\
    \ 'Mars'))\nprint(bf('Mars', 'Pluto'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Jupiter'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Mercury',\
    \ 'Mercury'))\nprint(bf('Neptune', 'Neptune'))\nprint(bf('Uranus', 'Uranus'))\n\
    print(bf('Saturn', 'Saturn'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Mercury',\
    \ 'Mercury'))\nprint(bf('Neptune', 'Neptune'))\nprint(bf('Uranus', 'Uranus'))\n\
    print(bf('Saturn', 'Saturn'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Venus', 'Venus'))\nprint(bf('Mercury',\
    \ 'Merc", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mars\"))\n\
    print(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mars', 'Jupiter'))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index\
    \ + 1: planet2_index]\n        else:\n            return planets[planet2_index\
    \ + 1: planet1_index]\n\nprint(bf('Mercury', 'Earth'))\nprint(bf('Earth', 'Mercury'))\n\
    print(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Jupiter',\
    \ 'Mars'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Jupiter',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Jupiter'))\nprint(bf('Pluto', 'Pluto'))", "  \
    \  planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    if planets.index(planet1) > planets.index(planet2):\n\
    \        planet1, planet2 = planet2, planet1\n    return tuple(planets[planets.index(planet1)\
    \ + 1: planets.index(planet2)])\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Venus\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Venus\"\
    ))\nprint", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Venus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Earth\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"\
    ))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"\
    Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\"\
    , \"Pluto\"))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    if planets.index(planet1) > planets.index(planet2):\n\
    \        planet1, planet2 = planet2, planet1\n    return tuple(planets[planets.index(planet1)\
    \ + 1: planets.index(planet2)])\n\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth',\
    \ 'Mars'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Earth', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Earth'))\nprint(bf('Pluto', 'Pluto'))", "    planets = ('Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2) +\
    \ 1]))\n\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Mars', 'Venus'))\nprint(bf('Venus',\
    \ 'Mars'))\nprint(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Mercury'))\nprint(bf('Jupiter', 'Neptune'))\n\
    print(bf('Neptune', 'Jupiter'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Neptune',\
    \ 'Neptune'))\nprint(bf('Mercury', 'Neptune'))\nprint(bf('Neptune', 'Mercury'))\n\
    print(bf('Mercury', 'Uranus'))\nprint(bf('Uranus', 'Mercury'))\nprint(bf('Uranus',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Uranus'))\nprint(bf('Uranus', 'Uranus'))\n\
    print(bf('Neptune', 'Saturn'))\nprint(bf('Saturn', 'Neptune'))\nprint(bf('Saturn',\
    \ 'Uranus'))\nprint(bf('Uranus', 'Saturn'))\nprint(bf('Saturn', 'Saturn'))\nprint(bf('Uranus',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Uranus'))\nprint(bf('Jupiter', 'Saturn'))\n\
    print(bf('Saturn', 'Jupiter'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Saturn',\
    \ 'Sat", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"\
    ))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(", "    planets =\
    \ ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Earth', 'Mars'))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\",\
    \ \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Earth\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\",\
    \ \"Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Saturn\"\
    ))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\n\
    print(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"\
    Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\"\
    , \"Neptune\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Mars\"\
    ))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Neptune\"\
    , \"Mars\"))\nprint(bf(\"Neptune\", \"Jupiter\"))\nprint(bf(\"Neptune\", \"Saturn\"\
    ))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        if planets.index(planet1) < planets.index(planet2):\n      \
    \      return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"Venus\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Venus\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Earth\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\n\
    print(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Jupiter\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Neptune\"\
    , \"Neptune\"))\nprint(bf(\"Neptune\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Neptune\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pl",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Earth\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\n\
    print(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n\
    \        if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"\
    Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Saturn\"\
    , \"Earth\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Neptune\", \"Earth\"\
    ))\nprint(bf(\"Pluto\", \"Earth\"))", "    planets = (\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\",\
    \ \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index\
    \ = planets.index(planet2)\n    if planet1_index < planet2_index:\n        return\
    \ planets[planet1_index+1:planet2_index]\n    else:\n        return planets[planet2_index+1:planet1_index]\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Mars', 'Mars'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Venus', 'Earth'))\n\
    print(bf('Venus', 'Venus'))\nprint(bf('Earth', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Earth'))\nprint(bf('Mercury', 'Mercury'))\nprint(bf('Earth', 'Jupiter'))\n\
    print(bf('Jupiter', 'Earth'))\nprint(bf('Jupiter', 'Jupiter'))\nprint(bf('Earth',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Saturn', 'Saturn'))\nprint(bf('Earth',\
    \ 'Uranus'))\nprint(bf('Uranus', 'Earth'))\nprint(bf('Uranus', 'Uranus'))\nprint(bf('Earth',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Earth'))\nprint(bf('Neptune', 'Neptune'))\n\
    print(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Venus'))\nprint(bf('Venus', 'Mercury'))\nprint(bf('Mercury', 'Jupiter'))\n\
    print(bf('Jupiter', 'Mercury'))\nprint(bf('Mercury', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Mercury'))\n", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\",\
    \ \"Venus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Neptune\"))\n", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n\
    \        if start < end:\n            return planets[start+1:end]\n        else:\n\
    \            return planets[end+1:start]\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Earth\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"\
    ))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Earth\", \"\
    Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Earth\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"\
    ))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\"\
    , \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\n\
    print(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Uranus\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\n\
    print(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"Venus\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Venus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Venus\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 in planets and\
    \ planet2 in planets:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \    else:\n        return ()\n", "    planets = (\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ in planets and planet2 in planets:\n        if planets.index(planet1) < planets.index(planet2):\n\
    \            return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \    else:\n        return ()\n\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"Venus\"\
    , \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\n\
    print(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Jupiter\", \"Mars\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mercury\", \"Venus\"))\n\
    print(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Venus\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"", "    planets = ('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if\
    \ planet1 not in planets or planet2 not in planets:\n        return ()\n    start\
    \ = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n\
    \        start, end = end, start\n    return tuple(planets[start + 1:end])\n\n\
    print(bf('Venus', 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Earth', 'Mars'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Earth', 'Saturn'))\n\
    print(bf('Earth', 'Uranus'))\nprint(bf('Earth', 'Neptune'))\nprint(bf('Earth',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Mars', 'Pluto'))\nprint(bf('Jupiter',\
    \ 'Pluto'))\nprint(bf('Saturn', 'Pluto'))\nprint(bf('Uranus', 'Pluto'))\nprint(bf('Neptune',\
    \ 'Pluto'))\nprint(bf('Mercury', 'Pluto'))\nprint(bf('Venus', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Mercury'))\nprint(bf('Pluto', 'Venus'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Pluto',\
    \ 'Jupiter'))\nprint(bf('Pluto', 'Saturn'))\nprint(bf('Pluto', 'Uranus'))\nprint(bf('Pluto',\
    \ 'Neptune'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Mercury', 'Mercury'))\n\
    print(bf('Venus', 'Venus'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Jupiter', 'Jupiter'))\n\
    print(bf('Saturn', 'Saturn'))\nprint(bf('Uranus', 'Uranus'))\nprint(bf('Neptune',",
  "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n     \
    \   return ()\n    else:\n        if planets.index(planet1) < planets.index(planet2):\n\
    \            return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \nprint(bf('Mars', 'Earth'))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or\
    \ planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\",\
    \ \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Earth\"\
    ))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Earth\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Earth\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\"\
    , \"Saturn\"))\nprint(bf(\"Saturn\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Pluto\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Uranus", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not\
    \ in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf('Earth',\
    \ 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Mars',\
    \ 'Mars'))\nprint(bf('Mars', 'Pluto'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Pluto',\
    \ 'Pluto'))", "    planets = (\n        \"Mercury\",\n        \"Venus\",\n   \
    \     \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n\
    \    planet2_index = planets.index(planet2)\n    if planet1_index < planet2_index:\n\
    \        return planets[planet1_index + 1 : planet2_index]\n    else:\n      \
    \  return planets[planet2_index + 1 : planet1_index]\n\n\nprint(bf(\"Mercury\"\
    , \"Mars\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Earth\"))\n\
    print(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\"\
    , \"Earth\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"\
    ))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Earth\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Jupiter\", \"Earth\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Neptune\"\
    , \"Earth\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Saturn\", \"Earth\"\
    ))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\n\
    print(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\"\
    , \"Jupiter\"))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Pluto\", \"Mercury\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Venus\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n\
    \        end = planets.index(planet2)\n        if start > end:\n            start,\
    \ end = end, start\n        return planets[start+1:end]\n\nprint(bf('Earth', 'Mars'))\n\
    print(bf('Mars', 'Earth'))\nprint(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\n\
    print(bf('Mercury', 'Jupiter'))\nprint(bf('Jupiter', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Mercury'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Mars', 'Mars'))\nprint(bf('Mercury', 'Mercury'))\nprint(bf('Jupiter',\
    \ 'Jupiter'))\nprint(bf('Saturn', 'Saturn'))\nprint(bf('Uranus', 'Uranus'))\n\
    print(bf('Neptune', 'Neptune'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Mars',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Earth',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Mercury'))\nprint(bf('Mercury', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Pluto'))\nprint(bf('Pluto', 'Saturn'))\nprint(bf('Saturn',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Uranus'))\nprint(bf('Uranus', 'Pluto'))\nprint(bf('Pluto',\
    \ 'Neptune'))\nprint(bf('Neptune', 'Pluto'))\nprint(bf('Pluto', 'Pluto'))\nprint(bf",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\", \"\
    Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mars\"))\n\
    print(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Neptune\", \"Mars\"))\nprint(bf(\"Neptune\", \"Neptune\"))\nprint(bf(\"Mars\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"))\n\
    print(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Venus\", \"\
    Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Venus\"\
    ))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\n\
    print(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"\
    Saturn\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 in planets and planet2 in planets:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)\
    \ + 1]))\n    else:\n        return ()\n\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"\
    Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"\
    ))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Pluto\", \"\
    Mercury\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\", \"Saturn\"\
    ))\nprint(bf(\"Pluto\", \"Uranus\"))\nprint(bf(\"Pluto\", \"Neptune\"))\nprint(bf(\"\
    Pluto\", \"Pluto\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Venus\"\
    ))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"\
    Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"\
    Neptune\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Mercury\", \"Mars\"))\n\
    print(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Mercury\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\"\
    , \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Mercury\", \"\
    Pluto\"))\nprint(bf(\"Jupiter\", \"Mars\"))", "    planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not\
    \ in planets or planet2 not in planets:\n        return ()\n    else:\n      \
    \  if planets.index(planet1) > planets.index(planet2):\n            return tuple(planets[planets.index(planet2)+1:planets.index(planet1)])\n\
    \        else:\n            return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Jupiter\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Jupiter\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mars', 'Mars'))\n\
    print(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Earth', 'Earth'))\n\
    print(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter', 'Earth'))\nprint(bf('Jupiter',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\n\
    print(bf('Saturn', 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\nprint(bf('Uranus',\
    \ 'Saturn'))\nprint(bf('Uranus', 'Uranus'))\nprint(bf('Uranus', 'Neptune'))\n\
    print(bf('Neptune', 'Uranus'))\nprint(bf('Neptune', 'Neptune'))\nprint(bf('Neptune',\
    \ 'Mercury'))\nprint(bf('Mercury', 'Neptune'))\nprint(bf('Mercury', 'Mercury'))\n\
    print(bf('Mercury', 'Venus'))\nprint(bf('Venus', 'Mercury'))\nprint(bf('Venus',\
    \ 'Venus'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"\
    ))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"\
    Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"\
    Earth\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Jupiter\"\
    ))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Jupiter\", \"Mercury\"))\nprint(bf(\"\
    Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\"\
    , \"Saturn\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Mercury\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Venus\"\
    , \"Uranus\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Earth\"\
    ))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"\
    Mercury\", \"Venus\"))\nprint(bf(\"Mercury\",", "    planets = (\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Mars\", \"Mars\"))\nprint(bf(\"Mercury\", \"\
    Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Mercury\"\
    ))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\"\
    , \"Mars\"))\nprint(bf(\"Saturn\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"\
    ))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Uranus\", \"Uranus\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Neptune\"\
    , \"Neptune\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"\
    ))\nprint(bf(\"Pluto\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Uranus\"))\nprint(bf(\"Uranus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Pluto\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    p1, p2 = planets.index(planet1),\
    \ planets.index(planet2)\n    if p1 > p2:\n        p1, p2 = p2, p1\n    return\
    \ tuple(planets[p1+1:p2])\n\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\n\
    print(bf('Earth', 'Earth'))\nprint(bf('Mars', 'Mars'))\nprint(bf('Mars', 'Pluto'))\n\
    print(bf('Pluto', 'Mars'))\nprint(bf('Pluto', 'Pluto'))", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\
    \    if planet1_index > planet2_index:\n        return planets[planet2_index +\
    \ 1: planet1_index]\n    else:\n        return planets[planet1_index + 1: planet2_index]\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"\
    Mars\", \"Mars\"))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Mars\", \"Jupiter\"\
    ))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"\
    Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"\
    Mars\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1)+1:planets.index(planet2)]))\n\
    \nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"\
    Earth\", \"Jupiter\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\",\
    \ \"Neptune\"))\nprint(bf(\"Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Pluto\"\
    ))\nprint(bf(\"Pluto\", \"Earth\"))\nprint(bf(\"Pluto\", \"Pluto\"))", "    planets\
    \ = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n\
    \    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf('Mercury', 'Mars'))\nprint(bf('Mars', 'Mercury'))\nprint(bf('Mars',\
    \ 'Jupiter'))\nprint(bf('Jupiter', 'Mars'))\nprint(bf('Jupiter', 'Jupiter'))\n\
    print(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn', 'Jupiter'))\nprint(bf('Saturn',\
    \ 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\nprint(bf('Uranus', 'Saturn'))\nprint(bf('Uranus',\
    \ 'Uranus'))\nprint(bf('Uranus', 'Neptune'))\nprint(bf('Neptune', 'Uranus'))\n\
    print(bf('Neptune', 'Neptune'))\nprint(bf('Neptune', 'Mercury'))\nprint(bf('Mercury',\
    \ 'Neptune'))\nprint(bf('Mercury', 'Pluto'))\nprint(bf('Pluto', 'Mercury'))\n\
    print(bf('Pluto', 'Pluto'))", "    planets = ('Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or\
    \ planet2 not in planets:\n        return ()\n    planet1_index = planets.index(planet1)\n\
    \    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n\
    \        return planets[planet2_index+1:planet1_index]\n    return planets[planet1_index+1:planet2_index]\n\
    \nprint(bf('Earth', 'Mars'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Earth',\
    \ 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth', 'Mercury'))\nprint(bf('Earth',\
    \ 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Pluto', 'Pluto'))", "    planets\
    \ = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n",
  "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        if planets.index(planet1) < planets.index(planet2):\n\
    \            return tuple(planets[planets.index(planet1) + 1:planets.index(planet2)])\n\
    \        else:\n            return tuple(planets[planets.index(planet2) + 1:planets.index(planet1)])\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"\
    Earth\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Earth\", \"\
    Mercury\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Pluto\"))\nprint(bf(\"\
    Pluto\", \"Earth\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Jupiter\", \"\
    Earth\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Mercury\", \"Earth\"))\n\
    print(bf(\"Neptune\", \"Earth\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"\
    Saturn\", \"Earth\"))\nprint(bf(\"Pluto\", \"Earth\"))", "    planets = (\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\
    \    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Venus\", \"Earth\"))", "    planets = (\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1\
    \ not in planets or planet2 not in planets:\n        return ()\n    else:\n  \
    \      return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Mars\", \"Jupiter\"))", "    planets = ('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        return tuple(planets[planets.index(planet1):planets.index(planet2)+1])\n\
    \nprint(bf('Mercury', 'Mars'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Earth',\
    \ 'Jupiter'))\nprint(bf('Earth', 'Earth'))\nprint(bf('Earth', 'Venus'))\nprint(bf('Earth',\
    \ 'Mercury'))\nprint(bf('Earth', 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Mars',\
    \ 'Mercury'))\nprint(bf('Mars', 'Venus'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Mars',\
    \ 'Jupiter'))\nprint(bf('Mars', 'Saturn'))\nprint(bf('Mars', 'Uranus'))\nprint(bf('Mars',\
    \ 'Neptune'))\nprint(bf('Mars', 'Pluto'))\nprint(bf('Pluto', 'Mars'))\nprint(bf('Jupiter',\
    \ 'Mercury'))\nprint(bf('Jupiter', 'Venus'))\nprint(bf('Jupiter', 'Earth'))\n\
    print(bf('Jupiter', 'Mars'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Jupiter',\
    \ 'Uranus'))\nprint(bf('Jupiter', 'Neptune'))\nprint(bf('Jupiter', 'Pluto'))\n\
    print(bf('Pluto', 'Jupiter'))\nprint(bf('Saturn', 'Mercury'))\nprint(bf('Saturn',\
    \ 'Venus'))\nprint(bf('Saturn', 'Earth'))\nprint(bf('Saturn', 'Mars'))\nprint(bf('Saturn',\
    \ 'Jupiter'))\nprint(bf('Saturn', 'Uranus'))\nprint(bf('Saturn', 'Neptune'))\n\
    print(bf('Saturn', 'Pluto'))\nprint", "    planets = (\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\
    \    if planet1_index > planet2_index:\n        planet1_index, planet2_index =\
    \ planet2_index, planet1_index\n    return tuple(planets[planet1_index + 1:planet2_index])\n\
    \nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Mercury\"))\nprint(bf(\"\
    Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Jupiter\", \"\
    Saturn\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Neptune\"\
    ))\nprint(bf(\"Neptune\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Neptune\"\
    , \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n\
    \        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n\
    \            return planets[planet1_index+1:planet2_index]\n        else:\n  \
    \          return planets[planet2_index+1:planet1_index]\n\nprint(bf(\"Mercury\"\
    , \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"Mars\", \"Mars\"))\n\
    print(bf(\"Mars\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Mars\"))\nprint(bf(\"Pluto\"\
    , \"Pluto\"))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets\
    \ or planet2 not in planets:\n        return ()\n    else:\n        planet1_index\
    \ = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n \
    \       if planet1_index < planet2_index:\n            return planets[planet1_index+1:planet2_index]\n\
    \        else:\n            return planets[planet2_index+1:planet1_index]\n\n\
    print(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mars\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Earth\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"\
    Mercury\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Neptune\"))\nprint(bf(\"Neptune\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Mercury\"))\nprint(bf(\"Venus\", \"Mars\"\
    ))\nprint(bf(\"Mars\", \"Venus\"))\nprint(bf(\"Venus\", \"Venus\"))\nprint(bf(\"\
    Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Venus\"))\nprint(bf(\"Venus\", \"\
    Jupiter\"))\nprint(bf(\"Jupiter\", \"Venus\"))\nprint(bf(\"Venus\", \"Saturn\"\
    ))\nprint(bf(\"Saturn\", \"Venus\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"\
    Uranus\", \"Venus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Neptune\"\
    , \"Venus\"))\nprint(bf(\"Venus\", \"Pluto\"))\nprint(bf(\"Pluto\", \"Venus\"\
    ))\nprint(bf(\"Earth\", \"Mars\"))\nprint(", "    planets = (\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n   \
    \ if planet1 not in planets or planet2 not in planets:\n        return ()\n  \
    \  else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n\
    \        if start < end:\n            return planets[start+1:end]\n        else:\n\
    \            return planets[end+1:start]\n\nprint(bf(\"Earth\", \"Mars\"))", " \
    \   planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n\
    \        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n\
    \nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"\
    Jupiter\", \"Jupiter\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Jupiter\"\
    , \"Pluto\"))\nprint(bf(\"Pluto\", \"Jupiter\"))\nprint(bf(\"Pluto\", \"Pluto\"\
    ))", "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2\
    \ not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets[planets.index(planet1):planets.index(planet2)+1]))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
