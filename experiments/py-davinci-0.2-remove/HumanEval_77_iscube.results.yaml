name: HumanEval_77_iscube
language: py
results:
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12_a05mo.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp12_a05mo.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp12_a05mo.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp12_a05mo.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_b9ak4v5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_b9ak4v5.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_b9ak4v5.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxr7orewr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxr7orewr.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxr7orewr.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7w7dm2zk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7w7dm2zk.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7w7dm2zk.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4676ulfz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp4676ulfz.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4676ulfz.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp4676ulfz.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo928m8xy.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpo928m8xy.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpo928m8xy.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy103eqrq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpy103eqrq.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpy103eqrq.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 2:\n        return False\n    if a == 3:\n        return True\n    if a\
    \ == 4:\n        return True\n    if a == 5:\n        return False\n    if a ==\
    \ 6:\n        return False\n    if a == 7:\n        return False\n    if a ==\
    \ 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n\
    \        return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a == 45\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkhasncjw.py\", line 100\n    if a == 45\n            \
    \  ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1104czrh.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1104czrh.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1104czrh.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and a ** (1 /\
    \ 3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9n9ak3st.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9n9ak3st.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9n9ak3st.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd94k07av.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpd94k07av.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpd94k07av.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqt5gcj4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmqt5gcj4.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmqt5gcj4.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzbcugtm.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfzbcugtm.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfzbcugtm.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpfzbcugtm.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_cgzrlc.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0_cgzrlc.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0_cgzrlc.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvuxwhy7b.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvuxwhy7b.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvuxwhy7b.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpvuxwhy7b.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35rczlu_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp35rczlu_.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp35rczlu_.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgj6ka9i7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgj6ka9i7.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgj6ka9i7.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1btcawf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpk1btcawf.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk1btcawf.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxq7uxll0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxq7uxll0.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxq7uxll0.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7e9kce7i.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7e9kce7i.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7e9kce7i.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp7e9kce7i.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a**(1/3) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiiw_e2rv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpiiw_e2rv.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpiiw_e2rv.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ return a == round(a ** (1 / 3)) ** 3\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_cxgt9l.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpv_cxgt9l.py\", line 23,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpv_cxgt9l.py\", line 15, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5hrax9w.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpf5hrax9w.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf5hrax9w.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsdbrlqty.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpsdbrlqty.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsdbrlqty.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpsdbrlqty.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydqq_u1t.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpydqq_u1t.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpydqq_u1t.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 2:\n        return False\n    if a == 3:\n        return True\n    if a\
    \ == 4:\n        return True\n    if a == 5:\n        return False\n    if a ==\
    \ 6:\n        return False\n    if a == 7:\n        return False\n    if a ==\
    \ 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n\
    \        return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return True\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a == 45\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpcsax0tkq.py\", line 100\n    if a == 45\n            \
    \  ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7xq3hjb.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmps7xq3hjb.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps7xq3hjb.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmps7xq3hjb.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzxb5kf2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppzxb5kf2.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppzxb5kf2.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmppzxb5kf2.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxalxkwvq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpxalxkwvq.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxalxkwvq.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpxalxkwvq.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gqxnbak.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1gqxnbak.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1gqxnbak.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp1gqxnbak.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4xo91wj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpa4xo91wj.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa4xo91wj.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7kb5vzt.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpp7kb5vzt.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp7kb5vzt.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return int(round(a ** (1. / 3))) ** 3\
    \ == a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_caa0e8.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpg_caa0e8.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg_caa0e8.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpg_caa0e8.py\", line\
    \ 8, in iscube\n    return int(round(a ** (1. / 3))) ** 3 == a\nTypeError: type\
    \ complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe87bcm68.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpe87bcm68.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpe87bcm68.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1irij_0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb1irij_0.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb1irij_0.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7s4t3rhr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7s4t3rhr.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7s4t3rhr.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfoi9uorc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfoi9uorc.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfoi9uorc.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpfoi9uorc.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnt2mmtmd.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnt2mmtmd.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnt2mmtmd.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rl7alxq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp6rl7alxq.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6rl7alxq.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1o4vogpu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1o4vogpu.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1o4vogpu.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ (a ** (1 / 3)) % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxm5_qi87.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxm5_qi87.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpxm5_qi87.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphots8tnr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmphots8tnr.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphots8tnr.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmphots8tnr.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplg9vhm2e.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplg9vhm2e.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplg9vhm2e.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmkuohth.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpcmkuohth.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpcmkuohth.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpcmkuohth.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwt53cob9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwt53cob9.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwt53cob9.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ a ** (1/3) % 1 == 0)\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91gged0z.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp91gged0z.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp91gged0z.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy91xcpa7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpy91xcpa7.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpy91xcpa7.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1b1lpr6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpg1b1lpr6.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg1b1lpr6.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(round(a ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplm8jew70.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplm8jew70.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplm8jew70.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6cnezi86.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6cnezi86.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6cnezi86.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp6cnezi86.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb_v308t.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpsb_v308t.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpsb_v308t.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(a**(1/3))**3\
    \ == a)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1b4keqs.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr1b4keqs.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr1b4keqs.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrv19b15.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqrv19b15.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqrv19b15.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp5i8apmn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpp5i8apmn.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpp5i8apmn.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvqzh_okj.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvqzh_okj.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvqzh_okj.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return (a ** (1/3)).is_integer()\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphozw95u_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmphozw95u_.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmphozw95u_.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmphozw95u_.py\", line\
    \ 8, in iscube\n    return (a ** (1/3)).is_integer()\nAttributeError: 'complex'\
    \ object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqdnj103m.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpqdnj103m.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqdnj103m.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and a**(1/3)\
    \ % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmponi3og28.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmponi3og28.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmponi3og28.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw462o5x9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpw462o5x9.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw462o5x9.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpw462o5x9.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 2:\n        return False\n    if a == 3:\n        return True\n    if a\
    \ == 4:\n        return True\n    if a == 5:\n        return False\n    if a ==\
    \ 6:\n        return False\n    if a == 7:\n        return False\n    if a ==\
    \ 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n\
    \        return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a == 45\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmplto9kl13.py\", line 100\n    if a == 45\n            \
    \  ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpruf6mrt1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpruf6mrt1.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpruf6mrt1.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpruf6mrt1.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91io12g5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp91io12g5.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp91io12g5.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_hrc15t.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpj_hrc15t.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpj_hrc15t.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 2:\n        return False\n    if a == 3:\n        return True\n    if a\
    \ == 4:\n        return True\n    if a == 5:\n        return False\n    if a ==\
    \ 6:\n        return False\n    if a == 7:\n        return False\n    if a ==\
    \ 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n\
    \        return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return True\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a == 45\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp77qzhlyn.py\", line 100\n    if a == 45\n            \
    \  ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a == 0:\n        return True\n   \
    \ if a < 0:\n        a = -a\n    for i in range(1, a + 1):\n        if i ** 3\
    \ == a:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(round(a ** (1.0 / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgobds_a1.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpgobds_a1.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgobds_a1.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7opbd1z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpg7opbd1z.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg7opbd1z.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqu784odp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqu784odp.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqu784odp.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ncg_prz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3ncg_prz.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3ncg_prz.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpksbt5mzh.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpksbt5mzh.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpksbt5mzh.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0y6czjk0.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0y6czjk0.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp0y6czjk0.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzx087rp1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzx087rp1.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzx087rp1.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpup48dbwo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpup48dbwo.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpup48dbwo.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplusdpxnx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplusdpxnx.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplusdpxnx.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmplusdpxnx.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwkgb8fr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplwkgb8fr.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplwkgb8fr.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmplwkgb8fr.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and pow(a, 1/3) % 1 == 0\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwshrupm9.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpwshrupm9.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwshrupm9.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps65fzylg.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmps65fzylg.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps65fzylg.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr38iufyt.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr38iufyt.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr38iufyt.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpr38iufyt.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5032wnbs.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5032wnbs.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5032wnbs.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp5032wnbs.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubetyz14.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpubetyz14.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpubetyz14.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpubetyz14.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ return a == round(a ** (1 / 3)) ** 3\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7f895wl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpg7f895wl.py\", line 23,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg7f895wl.py\", line 15, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 8:\n        return True\n    if a == 27:\n        return True\n    if a\
    \ == 64:\n        return True\n    if a == 125:\n        return True\n    if a\
    \ == 216:\n        return True\n    if a == 343:\n        return True\n    if\
    \ a == 512:\n        return True\n    if a == 729:\n        return True\n    if\
    \ a == 1000:\n        return True\n    if a == 1331:\n        return True\n  \
    \  if a == 1728:\n        return True\n    if a == 2197:\n        return True\n\
    \    if a == 2744:\n        return True\n    if a == 3375:\n        return True\n\
    \    if a == 4096:\n        return True\n    if a == 4913:\n        return True\n\
    \    if a == 5832:\n        return True\n    if a == 6859:\n        return True\n\
    \    if a == 8000:\n        return True\n    if a == 9261:\n        return True\n\
    \    if a == 10648:\n        return True\n    if a == 12167:\n        return True\n\
    \    if a == 13824:\n        return True\n    if a == 15625:\n        return True\n\
    \    if a == 17576:\n        return True\n    if a == 19683:\n        return True\n\
    \    if a == 21952:\n        return True\n    if a == 24389:\n        return True\n\
    \    if a == 27000:\n        return True\n    if a == 29791:\n        return True\n\
    \    if a == 32768:\n        return True\n    if a == 35937:\n        return True\n\
    \    if a == 39304:\n        return True\n    if a == 42875:\n        return True\n\
    \    if a == 46656:\n        return True\n    if a == 50653:\n        return True\n\
    \    if a == 54872:\n        return True\n    if a == 59319:\n        return True\n\
    \    if a == 64000:\n        return True\n    if a == 68921:\n        return True\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppjw_go81.py\", line 94\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbf_b8pn.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplbf_b8pn.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplbf_b8pn.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmplbf_b8pn.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx69k8gdx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpx69k8gdx.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpx69k8gdx.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and (a ** (1\
    \ / 3)).is_integer())\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb9hgbzgr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb9hgbzgr.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpb9hgbzgr.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69p9gqwn.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp69p9gqwn.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp69p9gqwn.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptulv38bz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmptulv38bz.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmptulv38bz.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\nprint(iscube(8))\nprint(iscube(27))\nprint(iscube(64))\nprint(iscube(125))\n\
    print(iscube(216))\nprint(iscube(343))\nprint(iscube(512))\nprint(iscube(729))\n\
    print(iscube(1000))\nprint(iscube(1331))\nprint(iscube(1728))\nprint(iscube(2197))\n\
    print(iscube(2744))\nprint(iscube(3375))\nprint(iscube(4096))\nprint(iscube(4913))\n\
    print(iscube(5832))\nprint(iscube(6859))\nprint(iscube(8000))\nprint(iscube(9261))\n\
    print(iscube(10648))\nprint(iscube(12167))\nprint(iscube(13824))\nprint(iscube(15625))\n\
    print(iscube(17576))\nprint(iscube(19683))\nprint(iscube(21952))\nprint(iscube(24389))\n\
    print(iscube(27000))\nprint(iscube(29791))\nprint(iscube(32768))\nprint(iscube(35937))\n\
    print(iscube(39304))\nprint(iscube(42875))\nprint(iscube(46656))\nprint(iscube(50653))\n\
    print(iscube(54872))\nprint(iscube(59319))\nprint(iscube(64000))\nprint(iscube(68921))\n\
    print(iscube(74088))\nprint(iscube(79507))\nprint(iscube(85184))\nprint(iscube(91125))\n\
    print(iscube(97336))\nprint(iscube(103823))\nprint(iscube(110592))\nprint(iscube(117649))\n\
    print(iscube(125000))\nprint(iscube(132651))\nprint(iscube(140608))\nprint(iscube(148877))\n\
    print(iscube(157464))\nprint(iscube(166375))\nprint(iscube(\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsaeiyi_o.py\", line 64\n    print(iscube(\n          \
    \      ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9oyikb8.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpa9oyikb8.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa9oyikb8.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpa9oyikb8.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_p1rw_n_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_p1rw_n_.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_p1rw_n_.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn7mz27l_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn7mz27l_.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpn7mz27l_.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoos6cm5a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoos6cm5a.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoos6cm5a.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpodbek3b6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpodbek3b6.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpodbek3b6.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoy8pwq1y.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoy8pwq1y.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpoy8pwq1y.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a == 0:\n        return True\n   \
    \ elif a < 0:\n        return False\n    else:\n        return round(a ** (1 /\
    \ 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0omz1pt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa0omz1pt.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa0omz1pt.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog9pdpkr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpog9pdpkr.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpog9pdpkr.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvodrtb37.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvodrtb37.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvodrtb37.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnfj3hkr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppnfj3hkr.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppnfj3hkr.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffiqvxcs.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpffiqvxcs.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpffiqvxcs.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobv656uz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpobv656uz.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpobv656uz.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1kgqcna.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpt1kgqcna.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpt1kgqcna.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjjlegysc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjjlegysc.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjjlegysc.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uu6l725.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp2uu6l725.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2uu6l725.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 2:\n        return False\n    if a == 3:\n        return True\n    if a\
    \ == 4:\n        return True\n    if a == 5:\n        return False\n    if a ==\
    \ 6:\n        return False\n    if a == 7:\n        return False\n    if a ==\
    \ 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n\
    \        return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return True\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a == 45\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpq0_kjl5a.py\", line 100\n    if a == 45\n            \
    \  ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7ijsexn.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr7ijsexn.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr7ijsexn.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpr7ijsexn.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnckwjkj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvnckwjkj.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvnckwjkj.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h8ve4p1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6h8ve4p1.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6h8ve4p1.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp6h8ve4p1.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(round(a ** (1.0 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpwruern.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqpwruern.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqpwruern.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6md1tka0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6md1tka0.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6md1tka0.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp6md1tka0.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7qyejuy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi7qyejuy.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpi7qyejuy.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_qfhdj9.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpt_qfhdj9.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpt_qfhdj9.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5jozom5r.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp5jozom5r.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp5jozom5r.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 8:\n        return False\n    if a == 27:\n        return True\n    if\
    \ a == 64:\n        return True\n    if a == 125:\n        return True\n    if\
    \ a == 216:\n        return True\n    if a == 343:\n        return True\n    if\
    \ a == 512:\n        return True\n    if a == 729:\n        return True\n    if\
    \ a == 1000:\n        return True\n    if a == 1331:\n        return True\n  \
    \  if a == 1728:\n        return True\n    if a == 2197:\n        return True\n\
    \    if a == 2744:\n        return True\n    if a == 3375:\n        return True\n\
    \    if a == 4096:\n        return True\n    if a == 4913:\n        return True\n\
    \    if a == 5832:\n        return True\n    if a == 6859:\n        return True\n\
    \    if a == 8000:\n        return True\n    if a == 9261:\n        return True\n\
    \    if a == 10648:\n        return True\n    if a == 12167:\n        return True\n\
    \    if a == 13824:\n        return True\n    if a == 15625:\n        return True\n\
    \    if a == 17576:\n        return True\n    if a == 19683:\n        return True\n\
    \    if a == 21952:\n        return True\n    if a == 24389:\n        return True\n\
    \    if a == 27000:\n        return True\n    if a == 29791:\n        return True\n\
    \    if a == 32768:\n        return True\n    if a == 35937:\n        return True\n\
    \    if a == 39304:\n        return True\n    if a == 42875:\n        return True\n\
    \    if a == 46656:\n        return True\n    if a == 50653:\n        return True\n\
    \    if a == 54872:\n        return True\n    if a == 59319:\n        return True\n\
    \    if a == 64000:\n        return True\n    if a == 68921:\n        return True\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_23s6dfe.py\", line 94\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\n\
    \ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xagn4po.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7xagn4po.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7xagn4po.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgyvdesbb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgyvdesbb.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgyvdesbb.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmkps439.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpnmkps439.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnmkps439.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr04t20lx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr04t20lx.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr04t20lx.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpr04t20lx.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk3osa5rv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpk3osa5rv.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpk3osa5rv.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbci4ld56.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpbci4ld56.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbci4ld56.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpbci4ld56.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjtiqq9vc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjtiqq9vc.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjtiqq9vc.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpjtiqq9vc.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a in [i**3 for i in range(1, a+1)]\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkwf4s57.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmkwf4s57.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmkwf4s57.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7jbzw1u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_7jbzw1u.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_7jbzw1u.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return (a**(1/3)).is_integer()\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ngtbd3g.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8ngtbd3g.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8ngtbd3g.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp8ngtbd3g.py\", line\
    \ 8, in iscube\n    return (a**(1/3)).is_integer()\nAttributeError: 'complex'\
    \ object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8ggispq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpa8ggispq.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa8ggispq.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97cplaay.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp97cplaay.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp97cplaay.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6yr7w7mq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6yr7w7mq.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6yr7w7mq.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhy90pr8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwhy90pr8.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwhy90pr8.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxrcy6c4.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpwxrcy6c4.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwxrcy6c4.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvovim25e.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvovim25e.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvovim25e.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mis5xzi.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8mis5xzi.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp8mis5xzi.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp8mis5xzi.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(a ** (1 / 3)) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy21oafy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppy21oafy.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppy21oafy.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29w7f42k.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp29w7f42k.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp29w7f42k.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzp65aicx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzp65aicx.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzp65aicx.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpzp65aicx.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbg156w6j.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbg156w6j.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbg156w6j.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkamxxkq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppkamxxkq.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppkamxxkq.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkj06o5c4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkj06o5c4.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpkj06o5c4.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpkj06o5c4.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptr6x1jc0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptr6x1jc0.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmptr6x1jc0.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmptr6x1jc0.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuyc2kzi.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmuyc2kzi.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmuyc2kzi.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwm4l9woh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwm4l9woh.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwm4l9woh.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a == 0:\n        return True\n   \
    \ elif a < 0:\n        return False\n    else:\n        return a**(1/3) % 1 ==\
    \ 0\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0_cz2iz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_0_cz2iz.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_0_cz2iz.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_kzevlh.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1_kzevlh.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1_kzevlh.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6yf4t6yx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp6yf4t6yx.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp6yf4t6yx.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplszgrxmk.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplszgrxmk.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplszgrxmk.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\nprint(iscube(0))\nprint(iscube(8))\nprint(iscube(27))\n\
    print(iscube(64))\nprint(iscube(1))\nprint(iscube(125))\nprint(iscube(216))\n\
    print(iscube(1000))\nprint(iscube(729))\nprint(iscube(512))\nprint(iscube(343))\n\
    print(iscube(125))\nprint(iscube(1))\nprint(iscube(0))\nprint(iscube(216))\nprint(iscube(729))\n\
    print(iscube(1000))\nprint(iscube(1))\nprint(iscube(343))\nprint(iscube(125))\n\
    print(iscube(64))\nprint(iscube(216))\nprint(iscube(729))\nprint(iscube(1000))\n\
    print(iscube(1))\nprint(iscube(343))\nprint(iscube(125))\nprint(iscube(64))\n\
    print(iscube(216))\nprint(iscube(729))\nprint(iscube(1000))\nprint(iscube(1))\n\
    print(iscube(343))\nprint(iscube(125))\nprint(iscube(64))\nprint(iscube(216))\n\
    print(iscube(729))\nprint(iscube(1000))\nprint(iscube(1))\nprint(iscube(343))\n\
    print(iscube(125))\nprint(iscube(64))\nprint(iscube(216))\nprint(iscube(729))\n\
    print(iscube(1000))\nprint(iscube(1))\nprint(iscube(343))\nprint(iscube(125))\n\
    print(iscube(64))\nprint(iscube(216))\nprint(iscube(729))\nprint(iscube(1000))\n\
    print(iscube(1))\nprint(iscube(343))\nprint(iscube(125))\nprint(iscube(64))\n\
    print(iscube(216))\nprint(iscube(729))\nprint(iscube(1000))\nprint(iscube(1))\n\
    print\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\
    True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\
    True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\
    True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\
    True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1b_j9bu.py\", line\
    \ 85, in <module>\n    test_check()\n  File \"/tmp/tmpg1b_j9bu.py\", line 83,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpg1b_j9bu.py\", line 75, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a**(1/3) % 1 == 0\n\ndef check(candidate):\n\
    \    assert candidate(1) == True\n    assert candidate(2) == False\n    assert\
    \ candidate(-1) == True\n    assert candidate(64) == True\n    assert candidate(180)\
    \ == False\n    assert candidate(1000) == True\n    assert candidate(0) == True\n\
    \    assert candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwepas6mm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpwepas6mm.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpwepas6mm.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpwepas6mm.py\", line\
    \ 8, in iscube\n    return a**(1/3) % 1 == 0\nTypeError: unsupported operand type(s)\
    \ for %: 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeqsdrj6b.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpeqsdrj6b.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpeqsdrj6b.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_4nupwp.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1_4nupwp.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp1_4nupwp.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjvpm0qca.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjvpm0qca.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjvpm0qca.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpjvpm0qca.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmp8le1w.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzmp8le1w.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzmp8le1w.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjqnq7uf.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpqjqnq7uf.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpqjqnq7uf.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83xdqp6p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp83xdqp6p.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp83xdqp6p.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp83xdqp6p.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrg80oaz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpbrg80oaz.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbrg80oaz.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpne09h1y9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpne09h1y9.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpne09h1y9.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgp8cmy3f.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgp8cmy3f.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgp8cmy3f.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ return a == round(a ** (1 / 3)) ** 3\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmh3mjwl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvmh3mjwl.py\", line 24,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvmh3mjwl.py\", line 16, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a in [i**3 for i in range(1, a+1)]\n\
    \n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmwy7rbfg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmwy7rbfg.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpmwy7rbfg.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfc584qn3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfc584qn3.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpfc584qn3.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprcfo0nw3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmprcfo0nw3.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprcfo0nw3.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2pb5chu.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpz2pb5chu.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpz2pb5chu.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa46ntxpg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpa46ntxpg.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpa46ntxpg.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpa46ntxpg.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr4m8pv5y.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr4m8pv5y.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpr4m8pv5y.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpr4m8pv5y.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2giyas37.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2giyas37.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2giyas37.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73qvhocv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp73qvhocv.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp73qvhocv.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp73qvhocv.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_4co0bv.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpu_4co0bv.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpu_4co0bv.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpu_4co0bv.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpex0b8hz_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpex0b8hz_.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpex0b8hz_.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7w_q37e6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7w_q37e6.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7w_q37e6.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp7w_q37e6.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppvzcgidx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppvzcgidx.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmppvzcgidx.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4j_411x0.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp4j_411x0.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4j_411x0.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz23a8shm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpz23a8shm.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpz23a8shm.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ridmzsu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4ridmzsu.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp4ridmzsu.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 2:\n        return False\n    if a == 3:\n        return True\n    if a\
    \ == 4:\n        return True\n    if a == 5:\n        return False\n    if a ==\
    \ 6:\n        return False\n    if a == 7:\n        return False\n    if a ==\
    \ 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n\
    \        return False\n    if a == 11:\n        return False\n    if a == 12:\n\
    \        return False\n    if a == 13:\n        return False\n    if a == 14:\n\
    \        return False\n    if a == 15:\n        return False\n    if a == 16:\n\
    \        return True\n    if a == 17:\n        return False\n    if a == 18:\n\
    \        return False\n    if a == 19:\n        return False\n    if a == 20:\n\
    \        return False\n    if a == 21:\n        return False\n    if a == 22:\n\
    \        return False\n    if a == 23:\n        return False\n    if a == 24:\n\
    \        return False\n    if a == 25:\n        return True\n    if a == 26:\n\
    \        return False\n    if a == 27:\n        return True\n    if a == 28:\n\
    \        return False\n    if a == 29:\n        return False\n    if a == 30:\n\
    \        return False\n    if a == 31:\n        return False\n    if a == 32:\n\
    \        return True\n    if a == 33:\n        return False\n    if a == 34:\n\
    \        return False\n    if a == 35:\n        return False\n    if a == 36:\n\
    \        return False\n    if a == 37:\n        return False\n    if a == 38:\n\
    \        return False\n    if a == 39:\n        return False\n    if a == 40:\n\
    \        return False\n    if a == 41:\n        return False\n    if a == 42:\n\
    \        return False\n    if a == 43:\n        return False\n    if a == 44:\n\
    \        return False\n    if a == 45\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0vb63sg8.py\", line 100\n    if a == 45\n            \
    \  ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2bx6fbo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpq2bx6fbo.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpq2bx6fbo.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw83eaufz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpw83eaufz.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpw83eaufz.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(a**(1/3))**3\
    \ == a)\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9mdhihnd.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp9mdhihnd.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp9mdhihnd.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a == 0:\n        return True\n   \
    \ elif a < 0:\n        return False\n    else:\n        return round(a ** (1 /\
    \ 3)) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp701qytav.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp701qytav.py\", line 27,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp701qytav.py\", line 19, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvc2roz6v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvc2roz6v.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpvc2roz6v.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpvc2roz6v.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzuwpi3es.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzuwpi3es.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzuwpi3es.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmsj8p2p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjmsj8p2p.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpjmsj8p2p.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a == 0:\n        return True\n   \
    \ elif a < 0:\n        return False\n    else:\n        return int(a**(1/3))**3\
    \ == a\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dls_we2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2dls_we2.py\", line 26,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp2dls_we2.py\", line 18, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or round(a ** (1 / 3))\
    \ ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jy5q24a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp3jy5q24a.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp3jy5q24a.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmp3jy5q24a.py\", line\
    \ 8, in iscube\n    return a == 0 or round(a ** (1 / 3)) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5a3614j.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpn5a3614j.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpn5a3614j.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or a == 8 or\
    \ a == 27 or a == 64 or a == 125 or a == 216 or a == 343 or a == 512 or a == 729\
    \ or a == 1000 or a == 1331 or a == 1728 or a == 2197 or a == 2744 or a == 3375\
    \ or a == 4096 or a == 4913 or a == 5832 or a == 6859 or a == 8000 or a == 9261\
    \ or a == 10648 or a == 12167 or a == 13824 or a == 15625 or a == 17576 or a ==\
    \ 19683 or a == 21952 or a == 24389 or a == 27000 or a == 29791 or a == 32768\
    \ or a == 35937 or a == 39304 or a == 42875 or a == 46656 or a == 50653 or a ==\
    \ 54872 or a == 59319 or a == 64000 or a == 68921 or a == 74088 or a == 79507\
    \ or a == 85184 or a == 91125 or a == 97336 or a == 103823 or a == 110592 or a\
    \ == 117649 or a == 125000 or a == 132651 or a == 140608 or a == 148877 or a ==\
    \ 157464 or a == 166375 or a == 175616 or a == 185193 or a == 195112 or a == 205379\
    \ or a == 216000 or a == 226981 or a == 238328 or a == 250047 or a == 262144 or\
    \ a == 274625 or a == 287496 or a == 300763 or a == 314432 or a == 328509 or a\
    \ == 343000 or a == 357911 or a == 373248 or a == 389017 or a == 405224 or a ==\
    \ 421875 or a == 438976 or a == 456533 or a == 474552 or a == 493039 or a == 512000\
    \ or a == 531441 or a == 551368 or a == 571787 or a == 592704 or a == 614125 or\
    \ a == 636056 or a == 658503 or a == 681472 or a == 704969 or a == 729000 or a\
    \ == 753571 or a == 778688 or a == 804357 or a == 830584 or a == 857375 or a ==\
    \ 88\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7bd21t6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpf7bd21t6.py\", line 20,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpf7bd21t6.py\", line 12, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei16v3di.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpei16v3di.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpei16v3di.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpei16v3di.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return (a ** (1/3)).is_integer()\n\n\
    def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5f6ltbz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmps5f6ltbz.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmps5f6ltbz.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmps5f6ltbz.py\", line\
    \ 8, in iscube\n    return (a ** (1/3)).is_integer()\nAttributeError: 'complex'\
    \ object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_z8gky52.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_z8gky52.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_z8gky52.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabpp2cpo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpabpp2cpo.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpabpp2cpo.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or a == 1 or (a > 0 and\
    \ int(round(a ** (1.0 / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert\
    \ candidate(1) == True\n    assert candidate(2) == False\n    assert candidate(-1)\
    \ == True\n    assert candidate(64) == True\n    assert candidate(180) == False\n\
    \    assert candidate(1000) == True\n    assert candidate(0) == True\n    assert\
    \ candidate(1729) == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdc0146o7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdc0146o7.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpdc0146o7.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv831ew0.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplv831ew0.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplv831ew0.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmplv831ew0.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ if a == 0:\n        return True\n    if a == 1:\n        return True\n    if\
    \ a == 8:\n        return True\n    if a == 27:\n        return True\n    if a\
    \ == 64:\n        return True\n    if a == 125:\n        return True\n    if a\
    \ == 216:\n        return True\n    if a == 343:\n        return True\n    if\
    \ a == 512:\n        return True\n    if a == 729:\n        return True\n    if\
    \ a == 1000:\n        return True\n    if a == 1331:\n        return True\n  \
    \  if a == 1728:\n        return True\n    if a == 2197:\n        return True\n\
    \    if a == 2744:\n        return True\n    if a == 3375:\n        return True\n\
    \    if a == 4096:\n        return True\n    if a == 4913:\n        return True\n\
    \    if a == 5832:\n        return True\n    if a == 6859:\n        return True\n\
    \    if a == 8000:\n        return True\n    if a == 9261:\n        return True\n\
    \    if a == 10648:\n        return True\n    if a == 12167:\n        return True\n\
    \    if a == 13824:\n        return True\n    if a == 15625:\n        return True\n\
    \    if a == 17576:\n        return True\n    if a == 19683:\n        return True\n\
    \    if a == 21952:\n        return True\n    if a == 24389:\n        return True\n\
    \    if a == 27000:\n        return True\n    if a == 29791:\n        return True\n\
    \    if a == 32768:\n        return True\n    if a == 35937:\n        return True\n\
    \    if a == 39304:\n        return True\n    if a == 42875:\n        return True\n\
    \    if a == 46656:\n        return True\n    if a == 50653:\n        return True\n\
    \    if a == 54872:\n        return True\n    if a == 59319:\n        return True\n\
    \    if a == 64000:\n        return True\n    if a == 68921:\n        return True\n\
    \    if a\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpdqvd73ct.py\", line 94\n    if a\n        ^\nSyntaxError:\
    \ expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return int(a**(1/3))**3 == a\n\n\ndef\
    \ check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfyko6wa.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmprfyko6wa.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmprfyko6wa.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmprfyko6wa.py\", line\
    \ 8, in iscube\n    return int(a**(1/3))**3 == a\nTypeError: int() argument must\
    \ be a string, a bytes-like object or a real number, not 'complex'\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\n\ndef check(candidate):\n    assert candidate(1) == True\n\
    \    assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbp4o_xfc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpbp4o_xfc.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpbp4o_xfc.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1 /\
    \ 3)) ** 3\n\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert\
    \ candidate(2) == False\n    assert candidate(-1) == True\n    assert candidate(64)\
    \ == True\n    assert candidate(180) == False\n    assert candidate(1000) == True\n\
    \    assert candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp465_8lw7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp465_8lw7.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp465_8lw7.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or int(round(a ** (1. /\
    \ 3))) ** 3 == a\n\ndef check(candidate):\n    assert candidate(1) == True\n \
    \   assert candidate(2) == False\n    assert candidate(-1) == True\n    assert\
    \ candidate(64) == True\n    assert candidate(180) == False\n    assert candidate(1000)\
    \ == True\n    assert candidate(0) == True\n    assert candidate(1729) == False\n\
    \ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexbrnvb_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpexbrnvb_.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpexbrnvb_.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\n  File \"/tmp/tmpexbrnvb_.py\", line\
    \ 8, in iscube\n    return a == 0 or int(round(a ** (1. / 3))) ** 3 == a\nTypeError:\
    \ type complex doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprhr3iof.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpprhr3iof.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpprhr3iof.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_vyx337g.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_vyx337g.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp_vyx337g.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    if a < 0:\n        return False\n   \
    \ return int(a**(1/3))**3 == a\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzcw3l66b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzcw3l66b.py\", line 24,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpzcw3l66b.py\", line 16, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7eaqgmyf.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7eaqgmyf.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmp7eaqgmyf.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\n\ndef check(candidate):\n    assert candidate(1)\
    \ == True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n\
    \    assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgtz9oih1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgtz9oih1.py\", line 22,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpgtz9oih1.py\", line 14, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a > 0 and a == round(a ** (1/3))\
    \ ** 3\n\ndef check(candidate):\n    assert candidate(1) == True\n    assert candidate(2)\
    \ == False\n    assert candidate(-1) == True\n    assert candidate(64) == True\n\
    \    assert candidate(180) == False\n    assert candidate(1000) == True\n    assert\
    \ candidate(0) == True\n    assert candidate(1729) == False\n\ndef test_check():\n\
    \    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhyt2gyh.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpnhyt2gyh.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmpnhyt2gyh.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def iscube(a: int) -> bool:\n    \"\"\"\n    Write a function that takes\
    \ an integer a and returns True \n    if this ingeger is a cube of some integer\
    \ number.\n    Note: you may assume the input is always valid.\n    Examples:\n\
    \                            \"\"\"\n    return a == 0 or (a > 0 and int(round(a\
    \ ** (1. / 3))) ** 3 == a)\n\ndef check(candidate):\n    assert candidate(1) ==\
    \ True\n    assert candidate(2) == False\n    assert candidate(-1) == True\n \
    \   assert candidate(64) == True\n    assert candidate(180) == False\n    assert\
    \ candidate(1000) == True\n    assert candidate(0) == True\n    assert candidate(1729)\
    \ == False\n\ndef test_check():\n    check(iscube)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqg861gv.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplqg861gv.py\", line 21,\
    \ in test_check\n    check(iscube)\n  File \"/tmp/tmplqg861gv.py\", line 13, in\
    \ check\n    assert candidate(-1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
