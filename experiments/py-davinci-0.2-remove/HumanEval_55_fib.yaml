name: HumanEval_55_fib
language: py
prompt: "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n      \
  \          \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1)\
  \ == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert\
  \ candidate(12) == 144\n\ndef test_check():\n    check(fib)\n\ntest_check()\n"
completions: ["    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return\
    \ _fib(n)[0]\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n\
    \        return 0\n    elif n == 1:\n        return 1\n    else:\n        return\
    \ fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must\
    \ be non-negative\")\n    return _fib(n)[0]\n\n", "    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    return _fib(n)[0]\n\n", "    if n < 2:\n      \
    \  return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n\
    \    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n \
    \   return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n  \
    \  return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    return fib_iter(1, 0, n)\n\n", "    if n < 0:\n\
    \        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n      \
    \  return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n \
    \       return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n \
    \       return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n <= 1:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) +\
    \ fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    return _fib(n)[0]\n\n", "    if n < 2:\n        return n\n    return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    return _fib(n)[0]\n\n", "    if n < 0:\n        raise ValueError(\"n must\
    \ be non-negative\")\n    return fib_iter(1, 0, n)\n\n", "    if n < 2:\n    \
    \    return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n     \
    \   return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n\
    \    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n \
    \   return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n  \
    \  return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n   \
    \ return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return 1\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n \
    \       return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n  \
    \      return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n   \
    \     raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\n",
  "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n in\
    \ (0, 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n \
    \       return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n  \
    \      return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n   \
    \     return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n    \
    \    return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n     \
    \   return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n      \
    \  return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n       \
    \ raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\n", " \
    \   if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "  \
    \  if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return\
    \ _fib(n)[0]\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    return _fib(n)[0]\n\n", "    if n < 2:\n        return n\n    return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) +\
    \ fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    return _fib(n)[0]\n", "    if n <= 1:\n        return n\n    return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) +\
    \ fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    a, b = 0, 1\n\
    \    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n \
    \       return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n  \
    \      return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n   \
    \     raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n in (0,\
    \ 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n\
    \        raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(10))\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 0:\n        raise ValueError(\"n must be non-negative\")\n    if n in (0, 1):\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n \
    \       return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n  \
    \      return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n   \
    \     return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n    \
    \    raise ValueError(\"n must be non-negative\")\n    return fib_iter(1, 0, n)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return\
    \ _fib(n)[0]\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n \
    \       return n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n    \
    \    return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n     \
    \   return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n      \
    \  raise ValueError(\"n must be non-negative\")\n    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    return fib_iter(1, 0, n)\n\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n \
    \       raise ValueError(\"n must be non-negative\")\n    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    return _fib(n)[0]\n\n", "    return fib_rec(n,\
    \ 0, 1)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    return _fib(n)[0]\n\n", "    if n < 2:\n        return n\n    return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) +\
    \ fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return\
    \ _fib(n)[0]\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    if n in (0, 1):\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n\
    \ < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n <\
    \ 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n\
    \        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n \
    \       raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if\
    \ n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return _fib(n)[0]\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n", "   \
    \ if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return\
    \ fib_iter(1, 0, n)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) +\
    \ fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n -\
    \ 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\
    \n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n",
  "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return\
    \ fib_iter(1, 0, n)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    return _fib(n)[0]\n\n", "    if n < 0:\n        raise ValueError(\"n must\
    \ be non-negative\")\n    return _fib(n)[0]\n\n", "    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    return _fib(n)[0]\n\n", "    if n < 2:\n      \
    \  return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n       \
    \ return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return\
    \ n\n    return fib(n - 1) + fib(n - 2)\n", "    if n < 2:\n        return n\n\
    \    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 0:\n        raise ValueError(\"\
    n must be non-negative\")\n    if n in (0, 1):\n        return n\n    return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    return fib_list(n)[-1]\n\n", "    if n < 2:\n \
    \       return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n  \
    \      return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n   \
    \     return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n    \
    \    return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n < 2:\n     \
    \   return n\n    return fib(n - 1) + fib(n - 2)\n\n", "    if n == 0:\n     \
    \   return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n\
    \ - 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n -\
    \ 1) + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1)\
    \ + fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) +\
    \ fib(n - 2)\n\n", "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n\
    \ - 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
