name: HumanEval_9_rolling_max
language: py
results:
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_so_far = numbers[0]\n    result\
    \ = [max_so_far]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        result.append(max_element)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zm3p8rz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6zm3p8rz.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6zm3p8rz.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6zm3p8rz.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2y89_bb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_2y89_bb.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_2y89_bb.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_2y89_bb.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwapefp8.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptwapefp8.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptwapefp8.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptwapefp8.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pxhgy_7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6pxhgy_7.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp6pxhgy_7.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp6pxhgy_7.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    max_number = numbers[0]\n    for number in numbers:\n\
    \        if number > max_number:\n            max_number = number\n        max_numbers.append(max_number)\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy81eyaeq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpy81eyaeq.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpy81eyaeq.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpy81eyaeq.py\"\
    , line 8, in rolling_max\n    max_number = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa167ma4k.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpa167ma4k.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpa167ma4k.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpa167ma4k.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    if len(numbers) == 1:\n        return\
    \ [numbers[0]]\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for\
    \ i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n\
    \        result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1npgso8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmph1npgso8.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmph1npgso8.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmph1npgso8.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcgsgg0o.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmphcgsgg0o.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmphcgsgg0o.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmphcgsgg0o.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cd6lrcn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5cd6lrcn.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5cd6lrcn.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5cd6lrcn.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7wix7ym_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp7wix7ym_.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7wix7ym_.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7wix7ym_.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fjtvzth.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9fjtvzth.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9fjtvzth.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9fjtvzth.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = 0\n    for i in range(len(numbers)):\n      \
    \  if numbers[i] > max_element:\n            max_element = numbers[i]\n      \
    \  result.append(max_element)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_elements = [numbers[0]]\n    for\
    \ i in range(1, len(numbers)):\n        max_elements.append(max(max_elements[i-1],\
    \ numbers[i]))\n    return max_elements\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgrq75oy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplgrq75oy.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmplgrq75oy.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmplgrq75oy.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjca1_n2w.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjca1_n2w.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjca1_n2w.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjca1_n2w.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfebwn34.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjfebwn34.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjfebwn34.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjfebwn34.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for number in numbers:\n    \
    \    if number > max_value:\n            max_value = number\n        max_list.append(max_value)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3h8h9xs.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpg3h8h9xs.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpg3h8h9xs.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpg3h8h9xs.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvy3_v7i.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbvy3_v7i.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbvy3_v7i.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpbvy3_v7i.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in\
    \ range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      max_list.append(max_so_far)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperthch3_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmperthch3_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmperthch3_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmperthch3_.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = -1\n    for number in numbers:\n        if number\
    \ > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5dstr9bg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5dstr9bg.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5dstr9bg.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5dstr9bg.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n    \
    \    return [numbers[0]]\n    else:\n        return [max(numbers[:i+1]) for i\
    \ in range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5jozkrj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpe5jozkrj.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpe5jozkrj.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpe5jozkrj.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzjwbo5j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgzjwbo5j.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgzjwbo5j.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgzjwbo5j.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4wyw82o.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn4wyw82o.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpn4wyw82o.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpn4wyw82o.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqx11c7um.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqx11c7um.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqx11c7um.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqx11c7um.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qpzuzxf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_qpzuzxf.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_qpzuzxf.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_qpzuzxf.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i\
    \ + 1]))\n    return result\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for n in numbers:\n        max_so_far\
    \ = max(max_so_far, n)\n        result.append(max_so_far)\n    return result\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18zh608h.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp18zh608h.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp18zh608h.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp18zh608h.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        max_list.append(max(max_list[i-1], numbers[i]))\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdoyklhg_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpdoyklhg_.py\", line 20,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdoyklhg_.py\", line\
    \ 14, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdoyklhg_.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp960c24c5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp960c24c5.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp960c24c5.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp960c24c5.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_so_far = numbers[0]\n    max_so_far_list\
    \ = [max_so_far]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > max_so_far:\n            max_so_far = numbers[i]\n        max_so_far_list.append(max_so_far)\n\
    \    return max_so_far_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwrv9kc3r.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwrv9kc3r.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwrv9kc3r.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwrv9kc3r.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_number = 0\n    for number in numbers:\n        if number\
    \ > max_number:\n            max_number = number\n        max_list.append(max_number)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_uj5ihk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9_uj5ihk.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp9_uj5ihk.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp9_uj5ihk.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    max_element = numbers[0]\n    rolling_max.append(max_element)\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > max_element:\n\
    \            max_element = numbers[i]\n        rolling_max.append(max_element)\n\
    \    return rolling_max\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexb_ft83.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpexb_ft83.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpexb_ft83.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpexb_ft83.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        if\
    \ num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4bch94g.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpa4bch94g.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpa4bch94g.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpa4bch94g.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    result = []\n    max_so_far = numbers[0]\n\
    \    for i in range(len(numbers)):\n        if numbers[i] > max_so_far:\n    \
    \        max_so_far = numbers[i]\n        result.append(max_so_far)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\
    \ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n\
    \        else:\n            result.append(result[-1])\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvr724u5z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvr724u5z.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvr724u5z.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvr724u5z.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_elements = []\n    max_element = numbers[0]\n    for number in numbers:\n\
    \        if number > max_element:\n            max_element = number\n        max_elements.append(max_element)\n\
    \    return max_elements\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpff0ramuz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpff0ramuz.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpff0ramuz.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpff0ramuz.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_num = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_num:\n            max_num = numbers[i]\n        max_list.append(max_num)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz3s8f6l.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmphz3s8f6l.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmphz3s8f6l.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmphz3s8f6l.py\"\
    , line 8, in rolling_max\n    max_num = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptye_sb0a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmptye_sb0a.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmptye_sb0a.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmptye_sb0a.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi90oc278.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpi90oc278.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpi90oc278.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpi90oc278.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    max_value = numbers[0]\n    for number in numbers:\n\
    \        if number > max_value:\n            max_value = number\n        rolling_max_list.append(max_value)\n\
    \    return rolling_max_list\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_b849y0l.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_b849y0l.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_b849y0l.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_b849y0l.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8puaoql.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn8puaoql.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpn8puaoql.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpn8puaoql.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        result.append(max_element)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqtgy5xx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqqtgy5xx.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqqtgy5xx.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqqtgy5xx.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n    \
    \    return [numbers[0]]\n    else:\n        return [max(numbers[:i+1]) for i\
    \ in range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7m5u5446.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7m5u5446.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp7m5u5446.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp7m5u5446.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_num = 0\n    for num in numbers:\n        if num > max_num:\n\
    \            max_num = num\n        max_list.append(max_num)\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvku9ecf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpuvku9ecf.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpuvku9ecf.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpuvku9ecf.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5q9m6_5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpj5q9m6_5.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpj5q9m6_5.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpj5q9m6_5.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ # TODO: implement\n    pass\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36gkg40d.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp36gkg40d.py\", line 17,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp36gkg40d.py\", line\
    \ 11, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zvdl7g4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1zvdl7g4.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1zvdl7g4.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1zvdl7g4.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqf4z656z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqf4z656z.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpqf4z656z.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpqf4z656z.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaj5n7cdc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpaj5n7cdc.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpaj5n7cdc.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpaj5n7cdc.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    if len(numbers) == 1:\n        return\
    \ [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = -1\n    for num in numbers:\n        if num >\
    \ max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ofje1cw.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_ofje1cw.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_ofje1cw.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_ofje1cw.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    if len(numbers) == 1:\n        return\
    \ [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    max_so_far = -1\n    for number in numbers:\n        if\
    \ number > max_so_far:\n            max_so_far = number\n        rolling_max.append(max_so_far)\n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        max_list.append(max(max_list[i-1], numbers[i]))\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjj42wok.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphjj42wok.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmphjj42wok.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmphjj42wok.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft8da0c8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpft8da0c8.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpft8da0c8.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpft8da0c8.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = 0\n    for i in range(len(numbers)):\n      \
    \  if numbers[i] > max_value:\n            max_value = numbers[i]\n        max_list.append(max_value)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      max_list.append(max_so_far)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp562w8dbi.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp562w8dbi.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp562w8dbi.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp562w8dbi.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxmjvicc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbxmjvicc.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpbxmjvicc.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpbxmjvicc.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        max_list.append(max(max_list[i-1], numbers[i]))\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = 0\n    for number in numbers:\n        if number\
    \ > max_value:\n            max_value = number\n        max_list.append(max_value)\n\
    \    return max_list\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnqz3c9z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwnqz3c9z.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwnqz3c9z.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwnqz3c9z.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6x3xp1v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr6x3xp1v.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpr6x3xp1v.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpr6x3xp1v.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = numbers[0]\n    for element in numbers:\n \
    \       if element > max_element:\n            max_element = element\n       \
    \ max_list.append(max_element)\n    return max_list\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7fy5mgo.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpg7fy5mgo.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpg7fy5mgo.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpg7fy5mgo.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpke7e_qcq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpke7e_qcq.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpke7e_qcq.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpke7e_qcq.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_so_far = numbers[0]\n    max_list\
    \ = [max_so_far]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > max_so_far:\n            max_so_far = numbers[i]\n        max_list.append(max_so_far)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    current_max = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > current_max:\n            current_max = numbers[i]\n\
    \        result.append(current_max)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z49koo_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4z49koo_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4z49koo_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4z49koo_.py\"\
    , line 8, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnut6zh_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpcnut6zh_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpcnut6zh_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpcnut6zh_.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        max_list.append(max_element)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3rnuch9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn3rnuch9.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpn3rnuch9.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpn3rnuch9.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = None\n    for number in numbers:\n        if max_so_far\
    \ is None or number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprnc0hvd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpprnc0hvd.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpprnc0hvd.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpprnc0hvd.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpromchmr2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpromchmr2.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpromchmr2.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpromchmr2.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        result.append(max_element)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02ff38af.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp02ff38af.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp02ff38af.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp02ff38af.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_number = numbers[0]\n    for number in numbers:\n   \
    \     if number > max_number:\n            max_number = number\n        max_list.append(max_number)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuoe833gh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpuoe833gh.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpuoe833gh.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpuoe833gh.py\"\
    , line 8, in rolling_max\n    max_number = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    current_max = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > current_max:\n            current_max = numbers[i]\n\
    \        result.append(current_max)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_k34uu8r.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_k34uu8r.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_k34uu8r.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_k34uu8r.py\"\
    , line 8, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_list = [numbers[0]]\n    for i in\
    \ range(1, len(numbers)):\n        max_list.append(max(max_list[i-1], numbers[i]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        rolling_max_list.append(max_element)\n    return rolling_max_list\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsrshozo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxsrshozo.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxsrshozo.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxsrshozo.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = 0\n    for element in numbers:\n        if\
    \ element > max_element:\n            max_element = element\n        max_list.append(max_element)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq29w1mov.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpq29w1mov.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpq29w1mov.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpq29w1mov.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = -1\n    for number in numbers:\n        if number\
    \ > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpob7m860v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpob7m860v.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpob7m860v.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpob7m860v.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1uj_ncu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpe1uj_ncu.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpe1uj_ncu.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpe1uj_ncu.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    current_max = numbers[0]\n    for number in numbers:\n    \
    \    if number > current_max:\n            current_max = number\n        result.append(current_max)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmponbb5wo3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmponbb5wo3.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmponbb5wo3.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmponbb5wo3.py\"\
    , line 8, in rolling_max\n    current_max = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in\
    \ range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = 0\n    for number in numbers:\n        if number\
    \ > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = numbers[0]\n    for element in numbers:\n \
    \       if element > max_element:\n            max_element = element\n       \
    \ max_list.append(max_element)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgo67pw5g.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgo67pw5g.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgo67pw5g.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgo67pw5g.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        result.append(max_element)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygnn6bkk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpygnn6bkk.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpygnn6bkk.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpygnn6bkk.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for n in numbers:\n        if\
    \ n > max_so_far:\n            max_so_far = n\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_h07msy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmps_h07msy.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmps_h07msy.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmps_h07msy.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0hrhclh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn0hrhclh.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpn0hrhclh.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpn0hrhclh.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9rdzbhz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpe9rdzbhz.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpe9rdzbhz.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpe9rdzbhz.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkq9uzh1_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpkq9uzh1_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpkq9uzh1_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpkq9uzh1_.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0707rr1t.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0707rr1t.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp0707rr1t.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp0707rr1t.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        max_list.append(max_element)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_nvecyb.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpd_nvecyb.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpd_nvecyb.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpd_nvecyb.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpce4hoih9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpce4hoih9.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpce4hoih9.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpce4hoih9.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = 0\n    for number in numbers:\n        if number\
    \ > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiu_hiyab.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpiu_hiyab.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpiu_hiyab.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpiu_hiyab.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3o0wvrw.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpg3o0wvrw.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpg3o0wvrw.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpg3o0wvrw.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47_5b00v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp47_5b00v.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp47_5b00v.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp47_5b00v.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = None\n    for n in numbers:\n        if max_so_far\
    \ is None or n > max_so_far:\n            max_so_far = n\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n    \
    \    return [numbers[0]]\n    else:\n        return [max(numbers[0:i+1]) for i\
    \ in range(len(numbers))]\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    if len(numbers) == 1:\n        return\
    \ [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_so_far = numbers[0]\n    result\
    \ = [max_so_far]\n    for i in range(1, len(numbers)):\n        if numbers[i]\
    \ > max_so_far:\n            max_so_far = numbers[i]\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3dramg9z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp3dramg9z.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp3dramg9z.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp3dramg9z.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    max_element = numbers[0]\n    rolling_max_list.append(max_element)\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > max_element:\n\
    \            max_element = numbers[i]\n        rolling_max_list.append(max_element)\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61k0ngsj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp61k0ngsj.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp61k0ngsj.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp61k0ngsj.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8016mx29.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8016mx29.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp8016mx29.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp8016mx29.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        max_list.append(max_element)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8vn107e.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr8vn107e.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpr8vn107e.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpr8vn107e.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5six9p7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpz5six9p7.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpz5six9p7.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpz5six9p7.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for number in numbers:\n    \
    \    if number > max_value:\n            max_value = number\n        max_list.append(max_value)\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdla21xif.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdla21xif.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpdla21xif.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpdla21xif.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmabltpg4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmabltpg4.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpmabltpg4.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpmabltpg4.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_fnfppr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm_fnfppr.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpm_fnfppr.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpm_fnfppr.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        max_list.append(max_element)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kq45sk6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5kq45sk6.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp5kq45sk6.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp5kq45sk6.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n1sphab.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1n1sphab.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1n1sphab.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1n1sphab.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpu415ra.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjpu415ra.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpjpu415ra.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpjpu415ra.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n    \
    \    return [numbers[0]]\n    else:\n        return [max(numbers[0:i+1]) for i\
    \ in range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2opq8101.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2opq8101.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp2opq8101.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp2opq8101.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ # TODO: implement me\n    pass\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxudp7_wa.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpxudp7_wa.py\", line 16,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxudp7_wa.py\", line\
    \ 10, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwrqkyicr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwrqkyicr.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpwrqkyicr.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpwrqkyicr.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    else:\n        return [max(numbers[:i+1]) for i in\
    \ range(len(numbers))]\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3je0e51i.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp3je0e51i.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp3je0e51i.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp3je0e51i.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvx9042jw.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvx9042jw.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpvx9042jw.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpvx9042jw.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[:i+1]))\n\
    \    return rolling_max_list\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qpt3lda.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_qpt3lda.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp_qpt3lda.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp_qpt3lda.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    max_list.append(max_value)\n    return max_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegapfgag.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpegapfgag.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpegapfgag.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpegapfgag.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for number in numbers:\n      \
    \  if number > max_value:\n            max_value = number\n        result.append(max_value)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vyk2xdz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4vyk2xdz.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4vyk2xdz.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4vyk2xdz.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuia5i7o6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpuia5i7o6.py\", line 24,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpuia5i7o6.py\", line\
    \ 18, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpuia5i7o6.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8u8ydtl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpp8u8ydtl.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpp8u8ydtl.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpp8u8ydtl.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for number in numbers:\n    \
    \    if number > max_element:\n            max_element = number\n        result.append(max_element)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaaxgn01d.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpaaxgn01d.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpaaxgn01d.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpaaxgn01d.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu91xa7xj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpu91xa7xj.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpu91xa7xj.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpu91xa7xj.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        result.append(max_element)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0t_8yl9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpp0t_8yl9.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpp0t_8yl9.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpp0t_8yl9.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpusrhzp57.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpusrhzp57.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpusrhzp57.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpusrhzp57.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsv9g9kjn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsv9g9kjn.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpsv9g9kjn.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpsv9g9kjn.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_num = 0\n    for num in numbers:\n        if num > max_num:\n\
    \            max_num = num\n        max_list.append(max_num)\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_number = numbers[0]\n    for number in numbers:\n     \
    \   if number > max_number:\n            max_number = number\n        result.append(max_number)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyzx6lg15.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyzx6lg15.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpyzx6lg15.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpyzx6lg15.py\"\
    , line 8, in rolling_max\n    max_number = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2chdr6e.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi2chdr6e.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpi2chdr6e.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpi2chdr6e.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n      \
    \  return [numbers[0]]\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n\
    \        result.append(max(result[i-1], numbers[i]))\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy45nen7k.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpy45nen7k.py\", line 21,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpy45nen7k.py\", line\
    \ 15, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpy45nen7k.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnqo2vjk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmppnqo2vjk.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmppnqo2vjk.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmppnqo2vjk.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpumk5nbo9.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpumk5nbo9.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpumk5nbo9.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpumk5nbo9.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ if not numbers:\n        return []\n    max_numbers = []\n    max_number = numbers[0]\n\
    \    for number in numbers:\n        if number > max_number:\n            max_number\
    \ = number\n        max_numbers.append(max_number)\n    return max_numbers\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkfoh5ij.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxkfoh5ij.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpxkfoh5ij.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpxkfoh5ij.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_value:\n            max_value = numbers[i]\n    \
    \    result.append(max_value)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3,\
    \ 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf84g23cg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf84g23cg.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpf84g23cg.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpf84g23cg.py\"\
    , line 8, in rolling_max\n    max_value = numbers[0]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      rolling_max_list.append(max_so_far)\n    return rolling_max_list\n\ndef\
    \ check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ynfsece.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1ynfsece.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp1ynfsece.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp1ynfsece.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = None\n    for number in numbers:\n        if max_so_far\
    \ is None or number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_list = []\n    max_list.append(numbers[0])\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_list[i-1]:\n            max_list.append(numbers[i])\n\
    \        else:\n            max_list.append(max_list[i-1])\n    return max_list\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4pwss1sr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4pwss1sr.py\", line 23,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmp4pwss1sr.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmp4pwss1sr.py\"\
    , line 8, in rolling_max\n    max_list.append(numbers[0])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      result.append(max_so_far)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6v4hvj7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpp6v4hvj7.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpp6v4hvj7.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpp6v4hvj7.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_number = numbers[0]\n    for number in numbers:\n     \
    \   if number > max_number:\n            max_number = number\n        result.append(max_number)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpveghp50u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpveghp50u.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpveghp50u.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpveghp50u.py\"\
    , line 8, in rolling_max\n    max_number = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        result.append(max_element)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgb591wn0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgb591wn0.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpgb591wn0.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpgb591wn0.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n     \
    \   if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpga9tp2x_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpga9tp2x_.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpga9tp2x_.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpga9tp2x_.py\"\
    , line 8, in rolling_max\n    max_so_far = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_element:\n            max_element = numbers[i]\n\
    \        rolling_max_list.append(max_element)\n    return rolling_max_list\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
    \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
    \    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf51qf2un.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpf51qf2un.py\", line 22,\
    \ in test_check\n    check(rolling_max)\n  File \"/tmp/tmpf51qf2un.py\", line\
    \ 16, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpf51qf2un.py\"\
    , line 8, in rolling_max\n    max_element = numbers[0]\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n\
    \    return max_numbers\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n\
    \    \"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n        \"\"\"\n   \
    \ rolling_max = []\n    for i in range(len(numbers)):\n        rolling_max.append(max(numbers[:i+1]))\n\
    \    return rolling_max\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3,\
    \ 3, 100, 100]\n\ndef test_check():\n    check(rolling_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
