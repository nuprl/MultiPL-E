name: HumanEval_18_how_many_times
language: py
results:
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    if len(substring) > len(string):\n\
    \        return 0\n    else:\n        return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mfyn5x_.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmp3mfyn5x_.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmp3mfyn5x_.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmtyyqd4.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmpvmtyyqd4.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpvmtyyqd4.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    # TODO: implement this function\n\
    \    return string.count(substring)\n\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkewdc9y.py\", line\
    \ 17, in <module>\n    test_check()\n  File \"/tmp/tmpjkewdc9y.py\", line 15,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpjkewdc9y.py\", line\
    \ 11, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kvhb0ue.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmp3kvhb0ue.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmp3kvhb0ue.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplz9_63v_.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmplz9_63v_.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmplz9_63v_.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    if len(substring) > len(string):\n\
    \        return 0\n    else:\n        return sum([1 for i in range(len(string)\
    \ - len(substring) + 1) if string[i:i + len(substring)] == substring])\n\n\ndef\
    \ check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3s7h863.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmps3s7h863.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmps3s7h863.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiosnce1x.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmpiosnce1x.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpiosnce1x.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    if len(substring) == 0:\n   \
    \     return 0\n    else:\n        return len([i for i in range(len(string)) if\
    \ string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphe15oaod.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmphe15oaod.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmphe15oaod.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string)\
    \ - len(substring) + 1) if string[i:i + len(substring)] == substring])\n\n\ndef\
    \ check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsof0mgk.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmphsof0mgk.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmphsof0mgk.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphg607h32.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmphg607h32.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmphg607h32.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuyukchtf.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmpuyukchtf.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpuyukchtf.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([m.start() for m in\
    \ re.finditer(substring, string)])\n\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpehnlw1r9.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmpehnlw1r9.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpehnlw1r9.py\", line\
    \ 8, in check\n    assert candidate('', 'x') == 0\n  File \"/tmp/tmpehnlw1r9.py\"\
    , line 4, in how_many_times\n    return len([m.start() for m in re.finditer(substring,\
    \ string)])\nNameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('', 'x') ==\
    \ 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    if len(substring) > len(string):\n\
    \        return 0\n    if len(substring) == 0:\n        return 0\n    if len(substring)\
    \ == len(string):\n        if substring == string:\n            return 1\n   \
    \     else:\n            return 0\n    if substring in string:\n        return\
    \ string.count(substring)\n    else:\n        return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n\
    \    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe',\
    \ 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64t42ul_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp64t42ul_.py\", line 26,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmp64t42ul_.py\", line\
    \ 22, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsu6y7gxk.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmpsu6y7gxk.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpsu6y7gxk.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    if len(substring) > len(string):\n\
    \        return 0\n    else:\n        return string.count(substring)\n\n\ndef\
    \ check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicjpilbc.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpicjpilbc.py\", line 17,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpicjpilbc.py\", line\
    \ 13, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj06eluvd.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmpj06eluvd.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmpj06eluvd.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    if len(substring) > len(string):\n\
    \        return 0\n    else:\n        return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    count = 0\n    for i in range(len(string)):\n\
    \        if string[i:].startswith(substring):\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert\
    \ candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') ==\
    \ 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return sum([1 for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return string.count(substring)\n\
    \n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
    \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
    \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sdpkph7.py\", line\
    \ 16, in <module>\n    test_check()\n  File \"/tmp/tmp5sdpkph7.py\", line 14,\
    \ in test_check\n    check(how_many_times)\n  File \"/tmp/tmp5sdpkph7.py\", line\
    \ 10, in check\n    assert candidate('cacacacac', 'cac') == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\n\ndef check(candidate):\n    assert\
    \ candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert\
    \ candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john')\
    \ == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
    \ how many times a given substring can be found in the original string. Count\
    \ overlaping cases.\n                \"\"\"\n    return len([i for i in range(len(string))\
    \ if string.startswith(substring, i)])\n\ndef check(candidate):\n    assert candidate('',\
    \ 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac',\
    \ 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n\
    \    check(how_many_times)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
