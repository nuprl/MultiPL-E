name: HumanEval_124_valid_date
language: py
results:
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1])\
    \ < 1:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ > 29 or int(date[1]) < 1:\n            return False\n    if len(date[2]) !=\
    \ 4:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    if not date[0].isdigit() or\
    \ not date[1].isdigit() or not date[2].isdigit():\n        return False\n    if\
    \ int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    if int(date[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[1]) < 1 or int(date[1]) > 31:\n\
    \            return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if\
    \ int(date[1]) < 1 or int(date[1]) > 30:\n            return False\n    elif int(date[0])\
    \ == 2:\n        if int(date[1]) < 1 or int(date[1]) > 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    month = int(date[0])\n            day = int(date[1])\n            year =\
    \ int(date[2])\n            if month < 1 or month > 12:\n                return\
    \ False\n            elif month == 2:\n                if day < 1 or day > 29:\n\
    \                    return False\n            elif month in [4, 6, 9, 11]:\n\
    \                if day < 1 or day > 30:\n                    return False\n \
    \           elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1\
    \ or day > 31:\n                    return False\n            else:\n        \
    \        return False\n            if len(str(year)) != 4:\n                return\
    \ False\n            else:\n                return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if not (1 <= month <= 12 and\
    \ 1 <= day <= 31 and 1900 <= year <= 2100):\n        return False\n    if month\
    \ in (4, 6, 9, 11) and day > 30:\n        return False\n    if month == 2 and\
    \ day > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    month, day, year = date\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month = int(date_list[0])\n            day = int(date_list[1])\n\
    \            year = int(date_list[2])\n            if month < 1 or month > 12:\n\
    \                return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                if day < 1 or day > 31:\n                    return False\n \
    \           elif month in [4, 6, 9, 11]:\n                if day < 1 or day >\
    \ 30:\n                    return False\n            elif month == 2:\n      \
    \          if day < 1 or day > 29:\n                    return False\n       \
    \     else:\n                return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi0vtfff5.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpi0vtfff5.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpi0vtfff5.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gdoo7a0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5gdoo7a0.py\", line 40,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp5gdoo7a0.py\", line 22,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp5gdoo7a0.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    try:\n        month, day, year = map(int, date.split(\"\
    -\"))\n    except ValueError:\n        return False\n    if not 1 <= month <=\
    \ 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n      \
    \  if not 1 <= day <= 31:\n            return False\n    elif month in [4, 6,\
    \ 9, 11]:\n        if not 1 <= day <= 30:\n            return False\n    elif\
    \ month == 2:\n        if not 1 <= day <= 29:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month = int(date_list[0])\n            day = int(date_list[1])\n\
    \            year = int(date_list[2])\n            if month < 1 or month > 12:\n\
    \                return False\n            elif month == 2:\n                if\
    \ day < 1 or day > 29:\n                    return False\n            elif month\
    \ == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10\
    \ or month == 12:\n                if day < 1 or day > 31:\n                 \
    \   return False\n            elif month == 4 or month == 6 or month == 9 or month\
    \ == 11:\n                if day < 1 or day > 30:\n                    return\
    \ False\n            else:\n                return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbc3ry34c.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpbc3ry34c.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpbc3ry34c.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    month, day, year = date\n    if len(month) != 2 or len(day)\
    \ != 2 or len(year) != 4:\n        return False\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    month, day, year = date_list\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month > 12 or month < 1:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ > 31 or day < 1:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day > 30 or day < 1:\n            return False\n    elif month ==\
    \ 2:\n        if day > 29 or day < 1:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaf93gcec.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpaf93gcec.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpaf93gcec.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpaf93gcec.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) < 1 or int(date[0]) > 12:\n                return False\n\
    \            else:\n                if int(date[0]) == 1 or int(date[0]) == 3\
    \ or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0]) == 8 or int(date[0])\
    \ == 10 or int(date[0]) == 12:\n                    if int(date[1]) < 1 or int(date[1])\
    \ > 31:\n                        return False\n                    else:\n   \
    \                     return True\n                elif int(date[0]) == 4 or int(date[0])\
    \ == 6 or int(date[0]) == 9 or int(date[0]) == 11:\n                    if int(date[1])\
    \ < 1 or int(date[1]) > 30:\n                        return False\n          \
    \          else:\n                        return True\n                elif int(date[0])\
    \ == 2:\n                    if int(date[1]) < 1 or int(date[1]) > 29:\n     \
    \                   return False\n                    else:\n                \
    \        return True\n                else:\n                    return False\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sjrw1w5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_sjrw1w5.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_sjrw1w5.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    month = int(date[0])\n            day = int(date[1])\n            year =\
    \ int(date[2])\n            if month < 1 or month > 12:\n                return\
    \ False\n            elif month == 2:\n                if day < 1 or day > 29:\n\
    \                    return False\n            elif month in [4, 6, 9, 11]:\n\
    \                if day < 1 or day > 30:\n                    return False\n \
    \           elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1\
    \ or day > 31:\n                    return False\n            else:\n        \
    \        return False\n            if year < 1:\n                return False\n\
    \            else:\n                return True\n\n\ndef check(candidate):\n \
    \   assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not (1 <= int(date[0]) <= 12):\n        return False\n\
    \    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(date[1])\
    \ <= 31):\n            return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n\
    \        if not (1 <= int(date[1]) <= 30):\n            return False\n    elif\
    \ int(date[0]) == 2:\n        if not (1 <= int(date[1]) <= 29):\n            return\
    \ False\n    if not (1 <= int(date[2]) <= 9999):\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1])\
    \ < 1:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ > 29 or int(date[1]) < 1:\n            return False\n    if len(date[2]) !=\
    \ 4:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    if int(date[0]) < 1 or int(date[0])\
    \ > 12:\n        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date[1]) < 1 or int(date[1]) > 31:\n            return False\n\
    \    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) < 1 or int(date[1])\
    \ > 30:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        else:\n        \
    \    return False\n        return True\n    except ValueError:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n\
    \    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ '':\n        return False\n    else:\n        date_list = date.split('-')\n\
    \        if len(date_list) != 3:\n            return False\n        else:\n  \
    \          if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n             \
    \   return False\n            elif int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n       \
    \             return False\n            elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \                if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n       \
    \             return False\n            elif int(date_list[0]) == 2:\n       \
    \         if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n              \
    \      return False\n            else:\n                return True\n\n\nprint(valid_date('01-01-2000'))\n\
    print(valid_date('01-01-2001'))\nprint(valid_date('02-29-2000'))\nprint(valid_date('02-29-2001'))\n\
    print(valid_date('02-30-2000'))\nprint(valid_date('02-30-2001'))\nprint(valid_date('04-31-2000'))\n\
    print(valid_date('04-31-2001'))\nprint(valid_date('06-31-2000'))\nprint(valid_date('06-31-2001'))\n\
    print(valid_date('09-31-2000'))\nprint(valid_date('09-31-2001'))\nprint(valid_date('11-31-2000'))\n\
    print(valid_date('11-31-2001'))\nprint(valid_date('13-01-2000'))\nprint(valid_date('13-01-2001'))\n\
    print(valid_date('00-01-2000'))\nprint(valid_date('00-01-2001'))\nprint(valid_date('01-00-2000'))\n\
    print(valid_date('01-\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxpppb2ii.py\", line 56\n    print(valid_date('01-\n  \
    \                   ^\nSyntaxError: unterminated string literal (detected at line\
    \ 56)\n"
  exit_code: 1
  status: SyntaxError
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_split = date.split(\"-\")\n    if len(date_split)\
    \ != 3:\n        return False\n    month, day, year = date_split\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            else:\n                if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                    if int(date[1]) > 31 or int(date[1]) < 1:\n             \
    \           return False\n                    else:\n                        return\
    \ True\n                elif int(date[0]) in [4, 6, 9, 11]:\n                \
    \    if int(date[1]) > 30 or int(date[1]) < 1:\n                        return\
    \ False\n                    else:\n                        return True\n    \
    \            elif int(date[0]) == 2:\n                    if int(date[1]) > 29\
    \ or int(date[1]) < 1:\n                        return False\n               \
    \     else:\n                        return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in (4, 6, 9, 11) and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    if year < 1:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    month = int(date[0])\n            day = int(date[1])\n            year =\
    \ int(date[2])\n            if month < 1 or month > 12:\n                return\
    \ False\n            elif month == 2:\n                if day < 1 or day > 29:\n\
    \                    return False\n            elif month in [4, 6, 9, 11]:\n\
    \                if day < 1 or day > 30:\n                    return False\n \
    \           elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1\
    \ or day > 31:\n                    return False\n            else:\n        \
    \        return False\n            if len(str(year)) != 4:\n                return\
    \ False\n            else:\n                return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n           \
    \     return False\n            elif int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n                if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n\
    \                    return False\n            elif int(date_list[0]) in [4, 6,\
    \ 9, 11]:\n                if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n\
    \                    return False\n            elif int(date_list[0]) == 2:\n\
    \                if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \             return False\n            if len(date_list[2]) != 4:\n         \
    \       return False\n            else:\n                return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ not in range(1, 13):\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day not in range(1, 32):\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day not in range(1,\
    \ 31):\n                return False\n        elif month == 2:\n            if\
    \ day not in range(1, 30):\n                return False\n        return True\n\
    \    except ValueError:\n        return False\n\n\ndef check(candidate):\n   \
    \ assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') ==\
    \ False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or len(date[2])\
    \ != 4:\n        return False\n    if not date[0].isdigit() or not date[1].isdigit()\
    \ or not date[2].isdigit():\n        return False\n    if int(date[0]) > 12 or\
    \ int(date[0]) < 1:\n        return False\n    if int(date[0]) in [1, 3, 5, 7,\
    \ 8, 10, 12]:\n        if int(date[1]) > 31 or int(date[1]) < 1:\n           \
    \ return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1])\
    \ > 30 or int(date[1]) < 1:\n            return False\n    elif int(date[0]) ==\
    \ 2:\n        if int(date[1]) > 29 or int(date[1]) < 1:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0])\
    \ < 1:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month < 1\
    \ or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvp24f3r2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpvp24f3r2.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpvp24f3r2.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpvp24f3r2.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31 or int(date_list[1])\
    \ < 1:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 29 or\
    \ int(date_list[1]) < 1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesce4yed.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpesce4yed.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpesce4yed.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpesce4yed.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in (4, 6, 9, 11) and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    if month == 2 and day == 29 and\
    \ not is_leap_year(year):\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month < 1\
    \ or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    else:\n        date_list = date.split('-')\n\
    \        if len(date_list) != 3:\n            return False\n        else:\n  \
    \          month = int(date_list[0])\n            day = int(date_list[1])\n  \
    \          year = int(date_list[2])\n            if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n                if day > 31 or day < 1:\n                    return False\n\
    \            elif month in [4, 6, 9, 11]:\n                if day > 30 or day\
    \ < 1:\n                    return False\n            elif month == 2:\n     \
    \           if day > 29 or day < 1:\n                    return False\n      \
    \      else:\n                return False\n            if month > 12 or month\
    \ < 1:\n                return False\n            if year < 1:\n             \
    \   return False\n            return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            elif int(date[0]) == 2:\n                if int(date[1]) > 29 or\
    \ int(date[1]) < 1:\n                    return False\n            elif int(date[0])\
    \ in [4, 6, 9, 11]:\n                if int(date[1]) > 30 or int(date[1]) < 1:\n\
    \                    return False\n            elif int(date[0]) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n                if int(date[1]) > 31 or int(date[1]) < 1:\n\
    \                    return False\n            else:\n                return False\n\
    \            if len(date[2]) != 4:\n                return False\n           \
    \ else:\n                return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7t1l37c.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpu7t1l37c.py\", line 40,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpu7t1l37c.py\", line 22,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpu7t1l37c.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    if not date[0].isdigit() or not\
    \ date[1].isdigit() or not date[2].isdigit():\n        return False\n    if int(date[0])\
    \ < 1 or int(date[0]) > 12:\n        return False\n    if int(date[0]) in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if int(date[1]) < 1 or int(date[1]) > 31:\n  \
    \          return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 30:\n            return False\n    elif int(date[0]) ==\
    \ 2:\n        if int(date[1]) < 1 or int(date[1]) > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ '':\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) > 12 or int(date_list[0])\
    \ < 1:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ > 30 or int(date_list[1]) < 1:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    if not date[0].isdigit() or not\
    \ date[1].isdigit() or not date[2].isdigit():\n        return False\n    if int(date[0])\
    \ < 1 or int(date[0]) > 12:\n        return False\n    if int(date[0]) in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if int(date[1]) < 1 or int(date[1]) > 31:\n  \
    \          return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 30:\n            return False\n    elif int(date[0]) ==\
    \ 2:\n        if int(date[1]) < 1 or int(date[1]) > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n\
    \        return False\n    if int(date[0]) in (1, 3, 5, 7, 8, 10, 12):\n     \
    \   if int(date[1]) < 1 or int(date[1]) > 31:\n            return False\n    elif\
    \ int(date[0]) in (4, 6, 9, 11):\n        if int(date[1]) < 1 or int(date[1])\
    \ > 30:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkicyfe3v.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkicyfe3v.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpkicyfe3v.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpkicyfe3v.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    month = int(date[0])\n            day = int(date[1])\n            year =\
    \ int(date[2])\n            if month < 1 or month > 12:\n                return\
    \ False\n            elif month == 2:\n                if day < 1 or day > 29:\n\
    \                    return False\n            elif month in [4, 6, 9, 11]:\n\
    \                if day < 1 or day > 30:\n                    return False\n \
    \           elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1\
    \ or day > 31:\n                    return False\n            else:\n        \
    \        return False\n            if year < 1:\n                return False\n\
    \            else:\n                return True\n\n\ndef check(candidate):\n \
    \   assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9at0jvtt.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp9at0jvtt.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp9at0jvtt.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp9at0jvtt.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month not in range(1, 13):\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ not in range(1, 32):\n            return False\n    elif month in (4, 6, 9,\
    \ 11):\n        if day not in range(1, 31):\n            return False\n    elif\
    \ month == 2:\n        if day not in range(1, 30):\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) not in range(1, 13):\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) not in range(1, 32):\n            return False\n\
    \    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) not\
    \ in range(1, 31):\n            return False\n    elif int(date_list[0]) == 2:\n\
    \        if int(date_list[1]) not in range(1, 30):\n            return False\n\
    \    if len(date_list[2]) != 4:\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month = int(date_list[0])\n            day = int(date_list[1])\n\
    \            year = int(date_list[2])\n            if month > 12 or month < 1:\n\
    \                return False\n            elif month == 2:\n                if\
    \ day > 29 or day < 1:\n                    return False\n                else:\n\
    \                    return True\n            elif month == 1 or month == 3 or\
    \ month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n    \
    \            if day > 31 or day < 1:\n                    return False\n     \
    \           else:\n                    return True\n            elif month ==\
    \ 4 or month == 6 or month == 9 or month == 11:\n                if day > 30 or\
    \ day < 1:\n                    return False\n                else:\n        \
    \            return True\n            else:\n                return False\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if year < 0:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n        if\
    \ day > 30:\n            return False\n    elif month == 2:\n        if day >\
    \ 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    month = int(date_list[0])\n\
    \    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or\
    \ month > 12:\n        return False\n    if month == 2:\n        if day < 1 or\
    \ day > 29:\n            return False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        day = int(date[1])\n        month = int(date[0])\n\
    \        year = int(date[2])\n    except ValueError:\n        return False\n \
    \   if month < 1 or month > 12:\n        return False\n    if month in (1, 3,\
    \ 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lma7haf.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_lma7haf.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_lma7haf.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp_lma7haf.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7j3yp1n3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp7j3yp1n3.py\", line 40,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp7j3yp1n3.py\", line 22,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp7j3yp1n3.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7yoet3j.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_7yoet3j.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_7yoet3j.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp_7yoet3j.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) not in range(1, 13):\n\
    \        return False\n    if int(date_list[1]) not in range(1, 32):\n       \
    \ return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n       \
    \ if int(date_list[1]) not in range(1, 32):\n            return False\n    if\
    \ int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) not in range(1,\
    \ 31):\n            return False\n    if int(date_list[0]) == 2:\n        if int(date_list[1])\
    \ not in range(1, 30):\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if not (1 <= month <= 12 and\
    \ 1 <= day <= 31 and 1 <= year <= 9999):\n        return False\n    if month in\
    \ (4, 6, 9, 11) and day > 30:\n        return False\n    if month == 2 and day\
    \ > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    if int(date[0]) < 1 or int(date[0])\
    \ > 12:\n        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date[1]) < 1 or int(date[1]) > 31:\n            return False\n\
    \    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) < 1 or int(date[1])\
    \ > 30:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    month, day, year = date\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    if year <\
    \ 1:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) not in range(1, 13):\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) not in range(1, 32):\n            return False\n\
    \    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) not\
    \ in range(1, 31):\n            return False\n    elif int(date_list[0]) == 2:\n\
    \        if int(date_list[1]) not in range(1, 30):\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month not\
    \ in range(1, 13):\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day not in range(1, 32):\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n            return\
    \ False\n    elif month == 2:\n        if day not in range(1, 30):\n         \
    \   return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if not 1 <= month <= 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if not\
    \ 1 <= day <= 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if not 1 <= day <= 30:\n            return False\n    elif month == 2:\n\
    \        if not 1 <= day <= 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            elif int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n                if\
    \ int(date[1]) > 31 or int(date[1]) < 1:\n                    return False\n \
    \           elif int(date[0]) in [4, 6, 9, 11]:\n                if int(date[1])\
    \ > 30 or int(date[1]) < 1:\n                    return False\n            elif\
    \ int(date[0]) == 2:\n                if int(date[1]) > 29 or int(date[1]) < 1:\n\
    \                    return False\n            else:\n                return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwao0peub.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpwao0peub.py\", line 56,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpwao0peub.py\", line 38,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month = int(month)\n        day = int(day)\n        year = int(year)\n\
    \        if month < 1 or month > 12:\n            return False\n        if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n         \
    \       return False\n        elif month in [4, 6, 9, 11]:\n            if day\
    \ < 1 or day > 30:\n                return False\n        elif month == 2:\n \
    \           if day < 1 or day > 29:\n                return False\n        return\
    \ True\n    except ValueError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n           \
    \     return False\n            elif int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n                if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n\
    \                    return False\n            elif int(date_list[0]) in [4, 6,\
    \ 9, 11]:\n                if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n\
    \                    return False\n            elif int(date_list[0]) == 2:\n\
    \                if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \             return False\n            if len(date_list[2]) != 4:\n         \
    \       return False\n            else:\n                return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n           \
    \     return False\n            elif int(date_list[0]) == 1 or int(date_list[0])\
    \ == 3 or int(date_list[0]) == 5 or int(date_list[0]) == 7 or int(date_list[0])\
    \ == 8 or int(date_list[0]) == 10 or int(date_list[0]) == 12:\n              \
    \  if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n                    return\
    \ False\n                else:\n                    return True\n            elif\
    \ int(date_list[0]) == 4 or int(date_list[0]) == 6 or int(date_list[0]) == 9 or\
    \ int(date_list[0]) == 11:\n                if int(date_list[1]) > 30 or int(date_list[1])\
    \ < 1:\n                    return False\n                else:\n            \
    \        return True\n            elif int(date_list[0]) == 2:\n             \
    \   if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n                    return\
    \ False\n                else:\n                    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ not in range(1, 13):\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day not in range(1, 32):\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day not in range(1,\
    \ 31):\n                return False\n        elif month == 2:\n            if\
    \ day not in range(1, 30):\n                return False\n        return True\n\
    \    except ValueError:\n        return False\n\n\ndef check(candidate):\n   \
    \ assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') ==\
    \ False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day >\
    \ 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    elif month == 2:\n     \
    \   if day < 1 or day > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if not date[0].isdigit() or not date[1].isdigit()\
    \ or not date[2].isdigit():\n        return False\n    if int(date[0]) > 12 or\
    \ int(date[0]) < 1:\n        return False\n    if int(date[0]) in [1, 3, 5, 7,\
    \ 8, 10, 12]:\n        if int(date[1]) > 31 or int(date[1]) < 1:\n           \
    \ return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1])\
    \ > 30 or int(date[1]) < 1:\n            return False\n    elif int(date[0]) ==\
    \ 2:\n        if int(date[1]) > 29 or int(date[1]) < 1:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    try:\n        month, day, year = date.split(\"\
    -\")\n        month = int(month)\n        day = int(day)\n        year = int(year)\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            else:\n                if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                    if int(date[1]) > 31 or int(date[1]) < 1:\n             \
    \           return False\n                    else:\n                        return\
    \ True\n                elif int(date[0]) in [4, 6, 9, 11]:\n                \
    \    if int(date[1]) > 30 or int(date[1]) < 1:\n                        return\
    \ False\n                    else:\n                        return True\n    \
    \            elif int(date[0]) == 2:\n                    if int(date[1]) > 29\
    \ or int(date[1]) < 1:\n                        return False\n               \
    \     else:\n                        return True\n                else:\n    \
    \                return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3nbb_smz.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3nbb_smz.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp3nbb_smz.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp3nbb_smz.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpuyz2p6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgpuyz2p6.py\", line 37,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpgpuyz2p6.py\", line 20,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n           \
    \     return False\n            elif int(date_list[0]) == 2:\n               \
    \ if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n                    return\
    \ False\n            elif int(date_list[0]) in [4, 6, 9, 11]:\n              \
    \  if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n                    return\
    \ False\n            elif int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n    \
    \            if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n           \
    \         return False\n            else:\n                return False\n    \
    \        if len(date_list[2]) != 4:\n                return False\n          \
    \  else:\n                return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month = int(month)\n        day = int(day)\n        year = int(year)\n\
    \        if month < 1 or month > 12:\n            return False\n        if month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n         \
    \       return False\n        elif month in [4, 6, 9, 11]:\n            if day\
    \ < 1 or day > 30:\n                return False\n        elif month == 2:\n \
    \           if day < 1 or day > 29:\n                return False\n        return\
    \ True\n    except:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphe6zjiml.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphe6zjiml.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmphe6zjiml.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmphe6zjiml.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or len(date[2])\
    \ != 4:\n        return False\n    if not date[0].isdigit() or not date[1].isdigit()\
    \ or not date[2].isdigit():\n        return False\n    if int(date[0]) not in\
    \ range(1, 13):\n        return False\n    if int(date[0]) in [1, 3, 5, 7, 8,\
    \ 10, 12]:\n        if int(date[1]) not in range(1, 32):\n            return False\n\
    \    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) not in range(1,\
    \ 31):\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ not in range(1, 30):\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_t7go0p2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_t7go0p2.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_t7go0p2.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp_t7go0p2.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month < 1\
    \ or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return\
    \ False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n \
    \   if month == 2 and day > 29:\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    month, day, year = date_list\n    if int(month)\
    \ not in range(1, 13):\n        return False\n    if int(day) not in range(1,\
    \ 32):\n        return False\n    if int(year) not in range(1, 10000):\n     \
    \   return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplohya_hk.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmplohya_hk.py\", line 49,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmplohya_hk.py\", line 38,\
    \ in check\n    assert candidate('04-31-3000') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month < 1\
    \ or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return\
    \ False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n \
    \   if month == 2 and day > 29:\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9b7g6016.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp9b7g6016.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp9b7g6016.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp9b7g6016.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            elif int(date[0]) == 2:\n                if int(date[1]) > 29 or\
    \ int(date[1]) < 1:\n                    return False\n            elif int(date[0])\
    \ == 1 or int(date[0]) == 3 or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0])\
    \ == 8 or int(date[0]) == 10 or int(date[0]) == 12:\n                if int(date[1])\
    \ > 31 or int(date[1]) < 1:\n                    return False\n            elif\
    \ int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0])\
    \ == 11:\n                if int(date[1]) > 30 or int(date[1]) < 1:\n        \
    \            return False\n            else:\n                return True\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzc1zcws.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmptzc1zcws.py\", line 55,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmptzc1zcws.py\", line 37,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        day, month, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if not 1 <= month <= 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if not\
    \ 1 <= day <= 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if not 1 <= day <= 30:\n            return False\n    elif month == 2:\n\
    \        if not 1 <= day <= 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjcrucbq3.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpjcrucbq3.py\", line 54,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpjcrucbq3.py\", line 37,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            try:\n                month = int(date_list[0])\n               \
    \ day = int(date_list[1])\n                year = int(date_list[2])\n        \
    \    except ValueError:\n                return False\n            if month not\
    \ in range(1, 13):\n                return False\n            elif month in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n                if day not in range(1, 32):\n        \
    \            return False\n            elif month in [4, 6, 9, 11]:\n        \
    \        if day not in range(1, 31):\n                    return False\n     \
    \       elif month == 2:\n                if day not in range(1, 30):\n      \
    \              return False\n            else:\n                return False\n\
    \            if year < 0:\n                return False\n            else:\n \
    \               return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n\
    \    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return\
    \ False\n    if month == 2:\n        if day < 1 or day > 29:\n            return\
    \ False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day\
    \ > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if\
    \ day < 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    if len(date) != 10:\n        return False\n\
    \    if date[2] != \"-\" or date[5] != \"-\":\n        return False\n    if not\
    \ date[0:2].isdigit() or not date[3:5].isdigit() or not date[6:].isdigit():\n\
    \        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n\
    \    year = int(date[6:])\n    if month < 1 or month > 12:\n        return False\n\
    \    if month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n\
    \            return False\n    elif month in [4, 6, 9, 11]:\n        if day <\
    \ 1 or day > 30:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ > 12 or int(date_list[0]) < 1:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) > 31 or int(date_list[1])\
    \ < 1:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) > 29 or\
    \ int(date_list[1]) < 1:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in (4, 6, 9, 11) and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    if year < 1:\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month, day, year = date_list\n            if int(month) < 1 or int(month)\
    \ > 12:\n                return False\n            elif int(month) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n                if int(day) < 1 or int(day) > 31:\n        \
    \            return False\n            elif int(month) in [4, 6, 9, 11]:\n   \
    \             if int(day) < 1 or int(day) > 30:\n                    return False\n\
    \            elif int(month) == 2:\n                if int(day) < 1 or int(day)\
    \ > 29:\n                    return False\n            else:\n               \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9joa8y12.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp9joa8y12.py\", line 57,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp9joa8y12.py\", line 39,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddynh9kn.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpddynh9kn.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpddynh9kn.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpddynh9kn.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) < 1 or int(date[1]) > 31:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) < 1 or int(date[1])\
    \ > 30:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 29:\n            return False\n    if int(date[2]) < 1:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month not\
    \ in range(1, 13):\n        return False\n    if month in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if day not in range(1, 32):\n            return False\n    elif\
    \ month in [4, 6, 9, 11]:\n        if day not in range(1, 31):\n            return\
    \ False\n    elif month == 2:\n        if day not in range(1, 30):\n         \
    \   return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pnamnf3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2pnamnf3.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp2pnamnf3.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp2pnamnf3.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if day < 1 or day > 31:\n        return False\n   \
    \ if month in (4, 6, 9, 11) and day > 30:\n        return False\n    if month\
    \ == 2 and day > 29:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    if len(date) != 10:\n        return False\n    if not\
    \ date[2] == '-' or not date[5] == '-':\n        return False\n    if not date[0:2].isdigit()\
    \ or not date[3:5].isdigit() or not date[6:].isdigit():\n        return False\n\
    \    if int(date[0:2]) > 12 or int(date[0:2]) < 1:\n        return False\n   \
    \ if int(date[0:2]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[3:5]) > 31\
    \ or int(date[3:5]) < 1:\n            return False\n    elif int(date[0:2]) in\
    \ [4, 6, 9, 11]:\n        if int(date[3:5]) > 30 or int(date[3:5]) < 1:\n    \
    \        return False\n    elif int(date[0:2]) == 2:\n        if int(date[3:5])\
    \ > 29 or int(date[3:5]) < 1:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    else:\n        date_list = date.split('-')\n\
    \        if len(date_list) != 3:\n            return False\n        else:\n  \
    \          if int(date_list[0]) not in range(1, 13):\n                return False\n\
    \            else:\n                if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n                    if int(date_list[1]) not in range(1, 32):\n      \
    \                  return False\n                    else:\n                 \
    \       return True\n                elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \                    if int(date_list[1]) not in range(1, 31):\n             \
    \           return False\n                    else:\n                        return\
    \ True\n                elif int(date_list[0]) == 2:\n                    if int(date_list[1])\
    \ not in range(1, 30):\n                        return False\n               \
    \     else:\n                        return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    month, day, year = date\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0n94s7h.py\", line\
    \ 276, in <module>\n    test_check()\n  File \"/tmp/tmpd0n94s7h.py\", line 274,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpd0n94s7h.py\", line 256,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpd0n94s7h.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    month, day, year = date\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2]) != 4:\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ > 12 or month < 1:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day > 31 or day < 1:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day > 30 or day\
    \ < 1:\n                return False\n        elif month == 2:\n            if\
    \ day > 29 or day < 1:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        else:\n        \
    \    return False\n        return True\n    except:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    try:\n        month = int(date[0])\n\
    \        day = int(date[1])\n        year = int(date[2])\n    except ValueError:\n\
    \        return False\n    if month < 1 or month > 12:\n        return False\n\
    \    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    elif month == 2:\n        if day\
    \ < 1 or day > 29:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    date = date.split('-')\n    if len(date) !=\
    \ 3:\n        return False\n    month, day, year = date\n    if not month.isdigit()\
    \ or not day.isdigit() or not year.isdigit():\n        return False\n    month,\
    \ day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n           \
    \     return False\n            elif int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n                if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n\
    \                    return False\n            elif int(date_list[0]) in [4, 6,\
    \ 9, 11]:\n                if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n\
    \                    return False\n            elif int(date_list[0]) == 2:\n\
    \                if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n       \
    \             return False\n            if len(date_list[2]) != 4:\n         \
    \       return False\n            else:\n                return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    date = date.split('-')\n\
    \    if len(date) != 3:\n        return False\n    if not date[0].isdigit() or\
    \ not date[1].isdigit() or not date[2].isdigit():\n        return False\n    if\
    \ int(date[0]) < 1 or int(date[0]) > 12:\n        return False\n    if int(date[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[1]) < 1 or int(date[1]) > 31:\n\
    \            return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if\
    \ int(date[1]) < 1 or int(date[1]) > 30:\n            return False\n    elif int(date[0])\
    \ == 2:\n        if int(date[1]) < 1 or int(date[1]) > 29:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month < 1\
    \ or month > 12:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 12:\n\
    \        return False\n    if int(date[1]) < 1 or int(date[1]) > 31:\n       \
    \ return False\n    if int(date[0]) == 2 and int(date[1]) > 29:\n        return\
    \ False\n    if int(date[0]) in [4, 6, 9, 11] and int(date[1]) > 30:\n       \
    \ return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqrqcqx2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpfqrqcqx2.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpfqrqcqx2.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpfqrqcqx2.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9s3v21l3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9s3v21l3.py\", line 40,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp9s3v21l3.py\", line 22,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp9s3v21l3.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     date = datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggsmtuc4.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpggsmtuc4.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpggsmtuc4.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpggsmtuc4.py\"\
    , line 16, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if len(date_list[0]) != 2 or len(date_list[1]) != 2 or len(date_list[2])\
    \ != 4:\n                return False\n            else:\n                if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n                    return False\n         \
    \       else:\n                    if int(date_list[0]) == 1 or int(date_list[0])\
    \ == 3 or int(date_list[0]) == 5 or int(date_list[0]) == 7 or int(date_list[0])\
    \ == 8 or int(date_list[0]) == 10 or int(date_list[0]) == 12:\n              \
    \          if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n             \
    \               return False\n                        else:\n                \
    \            return True\n                    elif int(date_list[0]) == 4 or int(date_list[0])\
    \ == 6 or int(date_list[0]) == 9 or int(date_list[0]) == 11:\n               \
    \         if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n              \
    \              return False\n                        else:\n                 \
    \           return True\n                    elif int(date_list[0]) == 2:\n  \
    \                      if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n \
    \                           return False\n                        else:\n    \
    \                        return True\n                    else:\n            \
    \            return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    month, day, year = date\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy0jjuej.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpqy0jjuej.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpqy0jjuej.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpqy0jjuej.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    day, month, year = date\n    if not day.isdigit() or\
    \ not month.isdigit() or not year.isdigit():\n        return False\n    day, month,\
    \ year = int(day), int(month), int(year)\n    if not 1 <= month <= 12:\n     \
    \   return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if not 1 <=\
    \ day <= 31:\n            return False\n    elif month in (4, 6, 9, 11):\n   \
    \     if not 1 <= day <= 30:\n            return False\n    elif month == 2:\n\
    \        if not 1 <= day <= 29:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nnswcqc.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp7nnswcqc.py\", line 57,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp7nnswcqc.py\", line 40,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    else:\n        date = date.split('-')\n   \
    \     if len(date) != 3:\n            return False\n        else:\n          \
    \  month = int(date[0])\n            day = int(date[1])\n            year = int(date[2])\n\
    \            if month < 1 or month > 12:\n                return False\n     \
    \       elif month == 2:\n                if day < 1 or day > 29:\n          \
    \          return False\n            elif month == 1 or month == 3 or month ==\
    \ 5 or month == 7 or month == 8 or month == 10 or month == 12:\n             \
    \   if day < 1 or day > 31:\n                    return False\n            elif\
    \ month == 4 or month == 6 or month == 9 or month == 11:\n                if day\
    \ < 1 or day > 30:\n                    return False\n            else:\n    \
    \            return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6v9y47r.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpn6v9y47r.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpn6v9y47r.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            elif int(date[0]) == 2:\n                if int(date[1]) > 29 or\
    \ int(date[1]) < 1:\n                    return False\n            elif int(date[0])\
    \ in [4, 6, 9, 11]:\n                if int(date[1]) > 30 or int(date[1]) < 1:\n\
    \                    return False\n            elif int(date[0]) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n                if int(date[1]) > 31 or int(date[1]) < 1:\n\
    \                    return False\n            else:\n                return False\n\
    \            if len(date[2]) != 4:\n                return False\n           \
    \ else:\n                return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ahux2c4.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp6ahux2c4.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp6ahux2c4.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp6ahux2c4.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1])\
    \ < 1:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ > 29 or int(date[1]) < 1:\n            return False\n    if int(date[2]) < 1:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4zow76gk.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4zow76gk.py\", line 40,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp4zow76gk.py\", line 22,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmp4zow76gk.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1])\
    \ < 1:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ > 29 or int(date[1]) < 1:\n            return False\n    if len(date[2]) !=\
    \ 4:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month = int(date_list[0])\n            day = int(date_list[1])\n\
    \            year = int(date_list[2])\n            if month < 1 or month > 12:\n\
    \                return False\n            elif month == 2:\n                if\
    \ day < 1 or day > 29:\n                    return False\n            elif month\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n                if day < 1 or day > 31:\n     \
    \               return False\n            elif month in [4, 6, 9, 11]:\n     \
    \           if day < 1 or day > 30:\n                    return False\n      \
    \      else:\n                return False\n            return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpap8po9lg.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpap8po9lg.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpap8po9lg.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpap8po9lg.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month == 2:\n        if day < 1 or day > 29:\n \
    \           return False\n    elif month in (4, 6, 9, 11):\n        if day < 1\
    \ or day > 30:\n            return False\n    else:\n        if day < 1 or day\
    \ > 31:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month = int(date_list[0])\n            day = int(date_list[1])\n\
    \            year = int(date_list[2])\n            if month < 1 or month > 12:\n\
    \                return False\n            elif month == 2:\n                if\
    \ day < 1 or day > 29:\n                    return False\n            elif month\
    \ == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10\
    \ or month == 12:\n                if day < 1 or day > 31:\n                 \
    \   return False\n            elif month == 4 or month == 6 or month == 9 or month\
    \ == 11:\n                if day < 1 or day > 30:\n                    return\
    \ False\n            else:\n                return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ncjfbpl.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp_ncjfbpl.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp_ncjfbpl.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    else:\n        date = date.split('-')\n   \
    \     if len(date) != 3:\n            return False\n        else:\n          \
    \  month = int(date[0])\n            day = int(date[1])\n            year = int(date[2])\n\
    \            if month < 1 or month > 12:\n                return False\n     \
    \       elif month == 2:\n                if day < 1 or day > 29:\n          \
    \          return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                if day < 1 or day > 31:\n                    return False\n \
    \           elif month in [4, 6, 9, 11]:\n                if day < 1 or day >\
    \ 30:\n                    return False\n            else:\n                return\
    \ False\n            if year < 0:\n                return False\n            else:\n\
    \                return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    if not date[0].isdigit() or not date[1].isdigit() or\
    \ not date[2].isdigit():\n        return False\n    month = int(date[0])\n   \
    \ day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) not in range(1, 13):\n                return\
    \ False\n            else:\n                if int(date_list[0]) in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n                    if int(date_list[1]) not in range(1, 32):\n\
    \                        return False\n                    else:\n           \
    \             if len(date_list[2]) != 4:\n                            return False\n\
    \                        else:\n                            return True\n    \
    \            elif int(date_list[0]) in [4, 6, 9, 11]:\n                    if\
    \ int(date_list[1]) not in range(1, 31):\n                        return False\n\
    \                    else:\n                        if len(date_list[2]) != 4:\n\
    \                            return False\n                        else:\n   \
    \                         return True\n                elif int(date_list[0])\
    \ == 2:\n                    if int(date_list[1]) not in range(1, 30):\n     \
    \                   return False\n                    else:\n                \
    \        if len(date_list[2]) != 4:\n                            return False\n\
    \                        else:\n                            return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    elif int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n \
    \       if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) < 1 or int(date[0]) > 12:\n                return False\n\
    \            elif int(date[0]) == 2:\n                if int(date[1]) < 1 or int(date[1])\
    \ > 29:\n                    return False\n            elif int(date[0]) == 1\
    \ or int(date[0]) == 3 or int(date[0]) == 5 or int(date[0]) == 7 or int(date[0])\
    \ == 8 or int(date[0]) == 10 or int(date[0]) == 12:\n                if int(date[1])\
    \ < 1 or int(date[1]) > 31:\n                    return False\n            elif\
    \ int(date[0]) == 4 or int(date[0]) == 6 or int(date[0]) == 9 or int(date[0])\
    \ == 11:\n                if int(date[1]) < 1 or int(date[1]) > 30:\n        \
    \            return False\n            else:\n                return True\n\n\n\
    def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgr4ucyfc.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpgr4ucyfc.py\", line 56,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpgr4ucyfc.py\", line 38,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    try:\n        month, day, year = int(date[0]), int(date[1]),\
    \ int(date[2])\n    except ValueError:\n        return False\n    if month < 1\
    \ or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if day < 1 or day > 31:\n            return False\n    elif month in\
    \ [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n\
    \    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    date_list\
    \ = date.split('-')\n    if len(date_list) != 3:\n        return False\n    if\
    \ not date_list[0].isdigit() or not date_list[1].isdigit() or not date_list[2].isdigit():\n\
    \        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return\
    \ False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            month = int(date_list[0])\n            day = int(date_list[1])\n\
    \            year = int(date_list[2])\n            if month < 1 or month > 12:\n\
    \                return False\n            elif month == 2:\n                if\
    \ day < 1 or day > 29:\n                    return False\n            elif month\
    \ == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10\
    \ or month == 12:\n                if day < 1 or day > 31:\n                 \
    \   return False\n            elif month == 4 or month == 6 or month == 9 or month\
    \ == 11:\n                if day < 1 or day > 30:\n                    return\
    \ False\n            else:\n                return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcixhykn.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpbcixhykn.py\", line 59,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpbcixhykn.py\", line 41,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n           \
    \     return False\n            elif int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n                if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n\
    \                    return False\n            elif int(date_list[0]) in [4, 6,\
    \ 9, 11]:\n                if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n\
    \                    return False\n            elif int(date_list[0]) == 2:\n\
    \                if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \             return False\n            if len(date_list[2]) != 4:\n         \
    \       return False\n            else:\n                return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    month, day, year = date\n    if not month.isdigit() or\
    \ not day.isdigit() or not year.isdigit():\n        return False\n    month, day,\
    \ year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n  \
    \      return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4emcoco.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmps4emcoco.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmps4emcoco.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmps4emcoco.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_list = date.split(\"-\"\
    )\n        if len(date_list) != 3:\n            return False\n        else:\n\
    \            if int(date_list[0]) > 12 or int(date_list[0]) < 1:\n           \
    \     return False\n            elif int(date_list[0]) == 1 or int(date_list[0])\
    \ == 3 or int(date_list[0]) == 5 or int(date_list[0]) == 7 or int(date_list[0])\
    \ == 8 or int(date_list[0]) == 10 or int(date_list[0]) == 12:\n              \
    \  if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n                    return\
    \ False\n                else:\n                    return True\n            elif\
    \ int(date_list[0]) == 4 or int(date_list[0]) == 6 or int(date_list[0]) == 9 or\
    \ int(date_list[0]) == 11:\n                if int(date_list[1]) > 30 or int(date_list[1])\
    \ < 1:\n                    return False\n                else:\n            \
    \        return True\n            elif int(date_list[0]) == 2:\n             \
    \   if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n                    return\
    \ False\n                else:\n                    return True\n            else:\n\
    \                return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    month = int(date[0])\n            day = int(date[1])\n            year =\
    \ int(date[2])\n            if month < 1 or month > 12:\n                return\
    \ False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if\
    \ day < 1 or day > 31:\n                    return False\n            elif month\
    \ in [4, 6, 9, 11]:\n                if day < 1 or day > 30:\n               \
    \     return False\n            elif month == 2:\n                if day < 1 or\
    \ day > 29:\n                    return False\n            return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if len(date)\
    \ == 0:\n        return False\n    date_list = date.split('-')\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) not in range(1, 13):\n\
    \        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date_list[1]) not in range(1, 32):\n            return False\n\
    \    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) not\
    \ in range(1, 31):\n            return False\n    elif int(date_list[0]) == 2:\n\
    \        if int(date_list[1]) not in range(1, 30):\n            return False\n\
    \    if len(date_list[2]) != 4:\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    date = date.split('-')\n    if len(date) != 3:\n  \
    \      return False\n    for i in date:\n        if not i.isdigit():\n       \
    \     return False\n    month, day, year = int(date[0]), int(date[1]), int(date[2])\n\
    \    if month < 1 or month > 12:\n        return False\n    if month in [1, 3,\
    \ 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\
    \    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n         \
    \   return False\n    elif month == 2:\n        if day < 1 or day > 29:\n    \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiv3kzjyb.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpiv3kzjyb.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpiv3kzjyb.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpiv3kzjyb.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        date = datetime.strptime(date, '%m-%d-%Y')\n\
    \    except ValueError:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjllmyob6.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpjllmyob6.py\", line 43,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpjllmyob6.py\", line 25,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpjllmyob6.py\"\
    , line 18, in valid_date\n    date = datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg12zhvwr.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpg12zhvwr.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpg12zhvwr.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpg12zhvwr.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    if not date[0].isdigit() or not\
    \ date[1].isdigit() or not date[2].isdigit():\n        return False\n    if int(date[0])\
    \ > 12 or int(date[0]) < 1:\n        return False\n    if int(date[0]) in [1,\
    \ 3, 5, 7, 8, 10, 12]:\n        if int(date[1]) > 31 or int(date[1]) < 1:\n  \
    \          return False\n    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1])\
    \ > 30 or int(date[1]) < 1:\n            return False\n    elif int(date[0]) ==\
    \ 2:\n        if int(date[1]) > 29 or int(date[1]) < 1:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1])\
    \ < 1:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ > 29 or int(date[1]) < 1:\n            return False\n    if len(date[2]) !=\
    \ 4:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n\
    \        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \   if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    elif\
    \ int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1])\
    \ < 1:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ > 29 or int(date[1]) < 1:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date_split = date.split(\"-\"\
    )\n        if len(date_split) != 3:\n            return False\n        else:\n\
    \            month = int(date_split[0])\n            day = int(date_split[1])\n\
    \            year = int(date_split[2])\n            if month < 1 or month > 12:\n\
    \                return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n\
    \                if day < 1 or day > 31:\n                    return False\n \
    \           elif month in [4, 6, 9, 11]:\n                if day < 1 or day >\
    \ 30:\n                    return False\n            elif month == 2:\n      \
    \          if day < 1 or day > 29:\n                    return False\n       \
    \     return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date = date.split(\"-\")\n    if len(date)\
    \ != 3:\n        return False\n    if len(date[0]) != 2 or len(date[1]) != 2 or\
    \ len(date[2]) != 4:\n        return False\n    if int(date[0]) < 1 or int(date[0])\
    \ > 12:\n        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n\
    \        if int(date[1]) < 1 or int(date[1]) > 31:\n            return False\n\
    \    elif int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) < 1 or int(date[1])\
    \ > 30:\n            return False\n    elif int(date[0]) == 2:\n        if int(date[1])\
    \ < 1 or int(date[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if not date_list[0].isdigit() or not date_list[1].isdigit()\
    \ or not date_list[2].isdigit():\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0])\
    \ > 12:\n        return False\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10,\
    \ 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        \
    \    return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1])\
    \ < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0])\
    \ == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n       \
    \     return False\n    if len(date_list[2]) != 4:\n        return False\n   \
    \ return True\n\n\ndef check(candidate):\n    assert candidate('03-11-2000') ==\
    \ True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list)\
    \ != 3:\n        return False\n    if len(date_list[0]) != 2 or len(date_list[1])\
    \ != 2 or len(date_list[2]) != 4:\n        return False\n    if int(date_list[0])\
    \ < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[0])\
    \ in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1])\
    \ > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n\
    \        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return\
    \ False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or\
    \ int(date_list[1]) > 29:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ '':\n        return False\n    else:\n        date_list = date.split('-')\n\
    \        if len(date_list) != 3:\n            return False\n        else:\n  \
    \          month = int(date_list[0])\n            day = int(date_list[1])\n  \
    \          year = int(date_list[2])\n            if month > 12 or month < 1:\n\
    \                return False\n            elif month == 2:\n                if\
    \ day > 29 or day < 1:\n                    return False\n            elif month\
    \ in [4, 6, 9, 11]:\n                if day > 30 or day < 1:\n               \
    \     return False\n            elif month in [1, 3, 5, 7, 8, 10, 12]:\n     \
    \           if day > 31 or day < 1:\n                    return False\n      \
    \      else:\n                return False\n            return True\n\n\ndef check(candidate):\n\
    \    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in (1, 3, 5,\
    \ 7, 8, 10, 12):\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in (4, 6, 9, 11):\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except ValueError:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n\
    \    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ '':\n        return False\n    else:\n        date = date.split('-')\n     \
    \   if len(date) != 3:\n            return False\n        else:\n            month\
    \ = int(date[0])\n            day = int(date[1])\n            year = int(date[2])\n\
    \            if month not in range(1, 13):\n                return False\n   \
    \         elif month in [1, 3, 5, 7, 8, 10, 12]:\n                if day not in\
    \ range(1, 32):\n                    return False\n            elif month in [4,\
    \ 6, 9, 11]:\n                if day not in range(1, 31):\n                  \
    \  return False\n            elif month == 2:\n                if day not in range(1,\
    \ 30):\n                    return False\n            if year < 0:\n         \
    \       return False\n            else:\n                return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012')\
    \ == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020')\
    \ == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011')\
    \ == False\n    assert candidate('') == False\n    assert candidate('04-31-3000')\
    \ == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000')\
    \ == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003')\
    \ == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04')\
    \ == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003')\
    \ == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    try:\n   \
    \     datetime.datetime.strptime(date, '%m-%d-%Y')\n        return True\n    except\
    \ ValueError:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0ityrk3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpz0ityrk3.py\", line 41,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpz0ityrk3.py\", line 23,\
    \ in check\n    assert candidate('03-11-2000') == True\n  File \"/tmp/tmpz0ityrk3.py\"\
    , line 16, in valid_date\n    datetime.datetime.strptime(date, '%m-%d-%Y')\nNameError:\
    \ name 'datetime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        day, month, year = map(int, date.split('-'))\n\
    \    except ValueError:\n        return False\n    if month < 1 or month > 12:\n\
    \        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day\
    \ < 1 or day > 31:\n            return False\n    elif month in (4, 6, 9, 11):\n\
    \        if day < 1 or day > 30:\n            return False\n    elif month ==\
    \ 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkcfco1u5.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpkcfco1u5.py\", line 54,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmpkcfco1u5.py\", line 37,\
    \ in check\n    assert candidate('15-01-2012') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if not date:\n\
    \        return False\n    try:\n        month, day, year = date.split('-')\n\
    \        month, day, year = int(month), int(day), int(year)\n        if month\
    \ < 1 or month > 12:\n            return False\n        if month in [1, 3, 5,\
    \ 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return\
    \ False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day >\
    \ 30:\n                return False\n        elif month == 2:\n            if\
    \ day < 1 or day > 29:\n                return False\n        return True\n  \
    \  except:\n        return False\n\n\ndef check(candidate):\n    assert candidate('03-11-2000')\
    \ == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040')\
    \ == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function\
    \ which validates a given date string and\n    returns True if the date is valid\
    \ otherwise False.\n    The date is valid if all of the following rules are satisfied:\n\
    \    1. The date string is not empty.\n    2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
    \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
    \ format: mm-dd-yyyy\n\n    \n    \n    \n    \n        \"\"\"\n    if date ==\
    \ \"\":\n        return False\n    else:\n        date = date.split(\"-\")\n \
    \       if len(date) != 3:\n            return False\n        else:\n        \
    \    if int(date[0]) > 12 or int(date[0]) < 1:\n                return False\n\
    \            elif int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n                if\
    \ int(date[1]) > 31 or int(date[1]) < 1:\n                    return False\n \
    \           elif int(date[0]) in [4, 6, 9, 11]:\n                if int(date[1])\
    \ > 30 or int(date[1]) < 1:\n                    return False\n            elif\
    \ int(date[0]) == 2:\n                if int(date[1]) > 29 or int(date[1]) < 1:\n\
    \                    return False\n            else:\n                return True\n\
    \n\ndef check(candidate):\n    assert candidate('03-11-2000') == True\n    assert\
    \ candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n\
    \    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007')\
    \ == True\n    assert candidate('03-32-2011') == False\n    assert candidate('')\
    \ == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005')\
    \ == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003')\
    \ == True\n    assert candidate('04122003') == False\n    assert candidate('20030412')\
    \ == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12')\
    \ == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n  \
    \  check(valid_date)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xj469pz.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmp5xj469pz.py\", line 56,\
    \ in test_check\n    check(valid_date)\n  File \"/tmp/tmp5xj469pz.py\", line 38,\
    \ in check\n    assert candidate('03-11-2000') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
