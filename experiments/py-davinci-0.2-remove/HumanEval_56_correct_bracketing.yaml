name: HumanEval_56_correct_bracketing
language: py
prompt: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a\
  \ string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding\
  \ closing bracket.\n\n                    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
  \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
  \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
  \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
  \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
  \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n     \
    \   if i == '<':\n            count += 1\n        elif i == '>':\n           \
    \ count -= 1\n        if count < 0:\n            return False\n    if count ==\
    \ 0:\n        return True\n    else:\n        return False\n\n", "    # TODO:\
    \ implement this function\n    # Hint: use a stack\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n\
    \        elif bracket == '>':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  count += 1\n        elif bracket == \">\":\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\n", "    #\
    \ TODO: Implement this function\n    # Hint: Use a stack\n    stack = []\n   \
    \ for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n\
    \        elif bracket == \">\":\n            if len(stack) == 0:\n           \
    \     return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n", "    count\
    \ = 0\n    for i in brackets:\n        if i == \"<\":\n            count += 1\n\
    \        elif i == \">\":\n            count -= 1\n        if count < 0:\n   \
    \         return False\n    return count == 0\n\n", "    # TODO: implement this\
    \ function\n    # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            stack.append(bracket)\n        else:\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n", "    # YOUR CODE HERE\n    count = 0\n \
    \   for bracket in brackets:\n        if bracket == \"<\":\n            count\
    \ += 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    count = 0\n\
    \    for bracket in brackets:\n        if bracket == \"<\":\n            count\
    \ += 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    # counter =\
    \ 0\n    # for i in brackets:\n    #     if i == \"<\":\n    #         counter\
    \ += 1\n    #     elif i == \">\":\n    #         counter -= 1\n    #     if counter\
    \ < 0:\n    #         return False\n    # return counter == 0\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    # TODO: complete this function\n    return True\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  count += 1\n        elif bracket == \">\":\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\n", "    #\
    \ YOUR CODE HERE\n    count = 0\n    for i in brackets:\n        if i == \"<\"\
    :\n            count += 1\n        elif i == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    if count == 0:\n       \
    \ return True\n    else:\n        return False\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for char\
    \ in brackets:\n        if char == \"<\":\n            count += 1\n        elif\
    \ char == \">\":\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        else:\n       \
    \     count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    count = 0\n    for i in brackets:\n        if i == \"\
    <\":\n            count += 1\n        elif i == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    count = 0\n    for i in brackets:\n        if i == \"<\":\n            count\
    \ += 1\n        elif i == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n\
    \        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n\
    \        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ i in brackets:\n        if i == \"<\":\n            count += 1\n        elif\
    \ i == \">\":\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    # YOUR CODE HERE\n    count = 0\n    for i in\
    \ brackets:\n        if i == \"<\":\n            count += 1\n        elif i ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    if count == 0:\n        return True\n    else:\n        return False\n\n",
  "    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n        if i == \"\
    <\":\n            count += 1\n        elif i == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    if count == 0:\n       \
    \ return True\n    else:\n        return False\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    # count = 0\n    # for\
    \ char in brackets:\n    #     if char == \"<\":\n    #         count += 1\n \
    \   #     elif char == \">\":\n    #         count -= 1\n    #     if count <\
    \ 0:\n    #         return False\n    # return count == 0\n\n    count = 0\n \
    \   for char in brackets:\n        if char == \"<\":\n            count += 1\n\
    \        elif char == \">\":\n            count -= 1\n            if count < 0:\n\
    \                return False\n    return count == 0\n\n", "    # if len(brackets)\
    \ % 2 != 0:\n    #     return False\n    # else:\n    #     for i in range(0,\
    \ len(brackets), 2):\n    #         if brackets[i] == '<' and brackets[i+1] ==\
    \ '>':\n    #             return True\n    #         else:\n    #            \
    \ return False\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n", "    count = 0\n    for bracket in brackets:\n        if bracket ==\
    \ \"<\":\n            count += 1\n        elif bracket == \">\":\n           \
    \ count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    if brackets == \"\":\n        return True\n    elif brackets[0]\
    \ == \">\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n", "    # TODO: complete this function\n    # Hint: you can use a stack to solve\
    \ this problem\n    stack = []\n    for i in brackets:\n        if i == \"<\"\
    :\n            stack.append(i)\n        elif i == \">\":\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n
  "    # TODO: implement this function\n    pass\n\n", "    # YOUR CODE HERE\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            bracket_count += 1\n        elif bracket == \">\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    if bracket_count == 0:\n        return True\n    else:\n        return False\n\
    \n", "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            count += 1\n        elif bracket == \">\":\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n",
  "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n    \
    \        stack.append(bracket)\n        elif bracket == '>':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    # YOUR CODE HERE\n    if len(brackets) % 2 !=\
    \ 0:\n        return False\n    else:\n        count = 0\n        for i in brackets:\n\
    \            if i == \"<\":\n                count += 1\n            else:\n \
    \               count -= 1\n            if count < 0:\n                return\
    \ False\n        if count == 0:\n            return True\n        else:\n    \
    \        return False\n\n", "    # TODO: implement this function\n    # Hint:\
    \ you may want to use a stack\n    stack = []\n    for i in brackets:\n      \
    \  if i == \"<\":\n            stack.append(i)\n        elif i == \">\":\n   \
    \         if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n", "    # TODO: complete this function\n  \
    \  return True\n\n", "    # YOUR CODE HERE\n    if brackets == '':\n        return\
    \ True\n    elif brackets[0] == '>':\n        return False\n    else:\n      \
    \  return correct_bracketing(brackets[1:])\n\n", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n\
    \        elif i == '>':\n            count -= 1\n        if count < 0:\n     \
    \       return False\n    if count == 0:\n        return True\n    else:\n   \
    \     return False\n\n", "    count = 0\n    for i in brackets:\n        if i\
    \ == \"<\":\n            count += 1\n        elif i == \">\":\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n", "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            count += 1\n        elif bracket == \">\":\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    # YOUR CODE HERE\n    if len(brackets) == 0:\n        return True\n    if len(brackets)\
    \ == 1:\n        return False\n    if brackets[0] == '>':\n        return False\n\
    \    if brackets[-1] == '<':\n        return False\n    if brackets[0] == '<'\
    \ and brackets[-1] == '>':\n        return correct_bracketing(brackets[1:-1])\n\
    \    if brackets[0] == '<' and brackets[-1] != '>':\n        return correct_bracketing(brackets[1:])\n\
    \    if brackets[0] != '<' and brackets[-1] == '>':\n        return correct_bracketing(brackets[:-1])\n\
    \    if brackets[0] != '<' and brackets[-1] != '>':\n        return correct_bracketing(brackets[1:-1])\n\
    \    return False\n\n", "    count = 0\n    for char in brackets:\n        if\
    \ char == \"<\":\n            count += 1\n        elif char == \">\":\n      \
    \      count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    count = 0\n    for char in brackets:\n        if char\
    \ == \"<\":\n            count += 1\n        elif char == \">\":\n           \
    \ count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    # YOUR CODE HERE\n    # raise NotImplementedError()\n    count\
    \ = 0\n    for i in brackets:\n        if i == \"<\":\n            count += 1\n\
    \        elif i == \">\":\n            count -= 1\n        if count < 0:\n   \
    \         return False\n    return count == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for i in\
    \ brackets:\n        if i == \"<\":\n            count += 1\n        else:\n \
    \           count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    # TODO: implement this function\n    # Hint: you can use\
    \ a stack to keep track of opening brackets\n    #       and use a counter to\
    \ keep track of the number of closing brackets\n    #       and compare them at\
    \ the end\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n", "    count = 0\n    for i in brackets:\n\
    \        if i == \"<\":\n            count += 1\n        elif i == \">\":\n  \
    \          count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    count = 0\n    for char in brackets:\n        if char\
    \ == \"<\":\n            count += 1\n        elif char == \">\":\n           \
    \ count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n            if count < 0:\n                return False\n   \
    \ return count == 0\n\n", "    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n\
    \        if i == \"<\":\n            count += 1\n        elif i == \">\":\n  \
    \          count -= 1\n        if count < 0:\n            return False\n    if\
    \ count == 0:\n        return True\n    else:\n        return False\n\n", "  \
    \  # if brackets is empty, return True\n    if brackets == \"\":\n        return\
    \ True\n    # if brackets is not empty, check if the first character is a closing\
    \ bracket\n    elif brackets[0] == \">\":\n        return False\n    # if brackets\
    \ is not empty and the first character is an opening bracket,\n    # check if\
    \ the rest of the string is a valid bracketing\n    else:\n        # find the\
    \ index of the first closing bracket\n        index = brackets.find(\">\")\n \
    \       # if there is no closing bracket, return False\n        if index == -1:\n\
    \            return False\n        # if there is a closing bracket, check if the\
    \ rest of the string is a valid bracketing\n        else:\n            return\
    \ correct_bracketing(brackets[index + 1:])\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    # TODO: implement this\
    \ function\n    # Hint: you can use a stack to keep track of the bracketing.\n\
    \    #       you can use a list as a stack.\n    #       see the lecture notes\
    \ for an example of how to use a stack.\n    #       you can use the append()\
    \ and pop() methods of a list.\n    stack = []\n    for i in brackets:\n     \
    \   if i == \"<\":\n            stack.append(i)\n        elif i == \">\":\n  \
    \          if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n", "    # if len(brackets) == 0:\n    #   \
    \  return True\n    # elif len(brackets) == 1:\n    #     return False\n    #\
    \ else:\n    #     if brackets[0] == \"<\":\n    #         if brackets[-1] ==\
    \ \">\":\n    #             return correct_bracketing(brackets[1:-1])\n    # \
    \        else:\n    #             return False\n    #     else:\n    #       \
    \  return False\n\n    # if len(brackets) == 0:\n    #     return True\n    #\
    \ elif len(brackets) == 1:\n    #     return False\n    # else:\n    #     if\
    \ brackets[0] == \"<\":\n    #         if brackets[-1] == \">\":\n    #      \
    \       return correct_bracketing(brackets[1:-1])\n    #         else:\n    #\
    \             return False\n    #     else:\n    #         return False\n\n  \
    \  # if len(brackets) == 0:\n    #     return True\n    # elif len(brackets) ==\
    \ 1:\n    #     return False\n    # else:\n    #     if brackets[0] == \"<\":\n\
    \    #         if brackets[-1] == \">\":\n    #             return correct_bracketing(brackets[1:-1])\n\
    \    #         else:\n    #             return False\n    #     else:\n    # \
    \        return False\n\n    # if len(brackets) == 0:\n    #     return True\n\
    \    # elif len(brackets) == 1:\n    #     return False\n    # else:\n    #  \
    \   if brackets[0] == \"<\":\n    #         if brackets[-1] == \">\":\n    # \
    \            return correct_bracketing(brackets[1:-1])\n    #         else:\n\
    \    #             return False\n    #     else:\n    #         return False\n\
    \n    # if len(brackets) == 0:\n    #     return True\n    # elif len(brackets)\
    \ == 1:\n    #     return False\n    # else:\n    #     if brackets[0] == \"<\"\
    :\n    #         if brackets[-1] == \">\":\n    #            ", "    # count =\
    \ 0\n    # for i in brackets:\n    #     if i == \"<\":\n    #         count +=\
    \ 1\n    #     elif i == \">\":\n    #         count -= 1\n    #         if count\
    \ < 0:\n    #             return False\n    # return count == 0\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n", "    # TODO: complete the function body\n    # Hint: use a stack\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n\
    \            stack.append(bracket)\n        else:\n            if len(stack) ==\
    \ 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n", "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            count += 1\n        elif bracket == \">\":\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n", "    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n     \
    \   if i == '<':\n            count += 1\n        elif i == '>':\n           \
    \ count -= 1\n        if count < 0:\n            return False\n    if count ==\
    \ 0:\n        return True\n    else:\n        return False\n\n", "    count =\
    \ 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count\
    \ += 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    # your code\
    \ here\n    count = 0\n    for i in brackets:\n        if i == \"<\":\n      \
    \      count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  count += 1\n        elif bracket == \">\":\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\n", "    if\
    \ len(brackets) % 2 != 0:\n        return False\n    else:\n        count = 0\n\
    \        for i in brackets:\n            if i == \"<\":\n                count\
    \ += 1\n            elif i == \">\":\n                count -= 1\n           \
    \ if count < 0:\n                return False\n        if count == 0:\n      \
    \      return True\n        else:\n            return False\n\n", "    count =\
    \ 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count\
    \ += 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    count = 0\n\
    \    for char in brackets:\n        if char == \"<\":\n            count += 1\n\
    \        elif char == \">\":\n            count -= 1\n            if count < 0:\n\
    \                return False\n    return count == 0\n\n", "    count = 0\n  \
    \  for bracket in brackets:\n        if bracket == \"<\":\n            count +=\
    \ 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    # YOUR CODE\
    \ HERE\n    count = 0\n    for i in brackets:\n        if i == \"<\":\n      \
    \      count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    if count == 0:\n        return True\n\
    \    else:\n        return False\n\n", "    # TODO: write the body of this function\n\
    \    if len(brackets) == 0:\n        return True\n    elif len(brackets) == 1:\n\
    \        return False\n    else:\n        if brackets[0] == '<':\n           \
    \ if brackets[1] == '>':\n                return correct_bracketing(brackets[2:])\n\
    \            else:\n                return False\n        else:\n            return\
    \ False\n\n", "    # TODO: implement this function\n    return True\n\n", "  \
    \  # TODO: implement this function\n    # Hint: use a stack\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n\
    \        elif bracket == '>':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  count += 1\n        elif bracket == \">\":\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  count += 1\n        elif bracket == \">\":\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\n", "    #\
    \ if brackets == \"\":\n    #     return True\n    # elif brackets[0] == \"<\"\
    :\n    #     if brackets[-1] == \">\":\n    #         return correct_bracketing(brackets[1:-1])\n\
    \    #     else:\n    #         return False\n    # else:\n    #     return False\n\
    \n    # if brackets == \"\":\n    #     return True\n    # elif brackets[0] ==\
    \ \"<\":\n    #     if brackets[-1] == \">\":\n    #         return correct_bracketing(brackets[1:-1])\n\
    \    #     else:\n    #         return False\n    # else:\n    #     return False\n\
    \n    # if brackets == \"\":\n    #     return True\n    # elif brackets[0] ==\
    \ \"<\":\n    #     if brackets[-1] == \">\":\n    #         return correct_bracketing(brackets[1:-1])\n\
    \    #     else:\n    #         return False\n    # else:\n    #     return False\n\
    \n    # if brackets == \"\":\n    #     return True\n    # elif brackets[0] ==\
    \ \"<\":\n    #     if brackets[-1] == \">\":\n    #         return correct_bracketing(brackets[1:-1])\n\
    \    #     else:\n    #         return False\n    # else:\n    #     return False\n\
    \n    # if brackets == \"\":\n    #     return True\n    # elif brackets[0] ==\
    \ \"<\":\n    #     if brackets[-1] == \">\":\n    #         return correct_bracketing(brackets[1:-1])\n\
    \    #     else:\n    #         return False\n    # else:\n    #     return False\n\
    \n    # if brackets == \"\":\n    #     return True\n    # elif brackets[0] ==\
    \ \"<\":\n    #     if brackets[-1] == \">\":\n    #         return correct_bracketing(brackets[1:-1])\n\
    \    #     else:\n    #         return False\n    # else:\n    #     return False\n\
    \n    # if brackets == \"\":\n    #     return True\n    # elif brackets[0] ==\
    \ \"<\":", "    # TODO: complete this function\n    return False\n\n", "    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == \"<\":\n         \
    \   stack.append(bracket)\n        elif bracket == \">\":\n            if stack\
    \ == []:\n                return False\n            else:\n                stack.pop()\n\
    \    return stack == []\n\n", "    count = 0\n    for i in brackets:\n       \
    \ if i == \"<\":\n            count += 1\n        elif i == \">\":\n         \
    \   count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    # your code here\n    if brackets == \"\":\n        return True\n\
    \    elif brackets[0] == \">\":\n        return False\n    else:\n        return\
    \ correct_bracketing(brackets[1:].replace(\"<>\", \"\"))\n\n", "    # TODO: implement\
    \ this function\n    stack = []\n    for i in brackets:\n        if i == '<':\n\
    \            stack.append(i)\n        elif i == '>':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n", "    if brackets == \"\":\n        return True\n    elif brackets[0] == \"\
    <\":\n        return correct_bracketing(brackets[1:])\n    elif brackets[0] ==\
    \ \">\":\n        return False\n    else:\n        return False\n\n", "    # TODO:\
    \ implement this function\n    # Hint: you may want to use a stack\n    stack\
    \ = []\n    for i in brackets:\n        if i == '<':\n            stack.append(i)\n\
    \        elif i == '>':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) ==\
    \ 0:\n        return True\n    else:\n        return False\n\n", "    # TODO:\
    \ write this function\n    pass\n\n", "    # your code here\n    count = 0\n \
    \   for i in brackets:\n        if i == \"<\":\n            count += 1\n     \
    \   elif i == \">\":\n            count -= 1\n        if count < 0:\n        \
    \    return False\n    return count == 0\n\n", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for i in brackets:\n        if i == \"<\":\n            count += 1\n\
    \        elif i == \">\":\n            count -= 1\n        if count < 0:\n   \
    \         return False\n    if count == 0:\n        return True\n    else:\n \
    \       return False\n\n", "    count = 0\n    for char in brackets:\n       \
    \ if char == \"<\":\n            count += 1\n        elif char == \">\":\n   \
    \         count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    # TODO: implement this function\n    # Hint: you can use a stack\n\
    \    stack = []\n    for i in brackets:\n        if i == \"<\":\n            stack.append(i)\n\
    \        elif i == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) ==\
    \ 0:\n        return True\n    else:\n        return False\n\n", "    # YOUR CODE\
    \ HERE\n    count = 0\n    for i in brackets:\n        if i == \"<\":\n      \
    \      count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    if count == 0:\n        return True\n\
    \    else:\n        return False\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    # if len(brackets) % 2 != 0:\n    #     return\
    \ False\n    # else:\n    #     for i in range(len(brackets)):\n    #        \
    \ if brackets[i] == '<':\n    #             for j in range(i, len(brackets)):\n\
    \    #                 if brackets[j] == '>':\n    #                     return\
    \ True\n    #                 else:\n    #                     return False\n\
    \    #         else:\n    #             return False\n    # return True\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "    # TODO:\
    \ Write this function.\n    # Hint: You can use a stack.\n    # Hint: You can\
    \ use a queue.\n    # Hint: You can use a list.\n    # Hint: You can use a string.\n\
    \    # Hint: You can use a dictionary.\n    # Hint: You can use a set.\n    #\
    \ Hint: You can use a counter.\n    # Hint: You can use a defaultdict.\n    #\
    \ Hint: You can use a deque.\n    # Hint: You can use a namedtuple.\n    # Hint:\
    \ You can use a heap.\n    # Hint: You can use a priority queue.\n    # Hint:\
    \ You can use a linked list.\n    # Hint: You can use a binary search tree.\n\
    \    # Hint: You can use a binary heap.\n    # Hint: You can use a binary trie.\n\
    \    # Hint: You can use a binary search.\n    # Hint: You can use a binary search\
    \ tree.\n    # Hint: You can use a binary search trie.\n    # Hint: You can use\
    \ a binary search heap.\n    # Hint: You can use a binary search priority queue.\n\
    \    # Hint: You can use a binary search linked list.\n    # Hint: You can use\
    \ a binary search tree.\n    # Hint: You can use a binary search trie.\n    #\
    \ Hint: You can use a binary search heap.\n    # Hint: You can use a binary search\
    \ priority queue.\n    # Hint: You can use a binary search linked list.\n    #\
    \ Hint: You can use a binary search tree.\n    # Hint: You can use a binary search\
    \ trie.\n    # Hint: You can use a binary search heap.\n    # Hint: You can use\
    \ a binary search priority queue.\n    # Hint: You can use a binary search linked\
    \ list.\n    # Hint: You can use a binary search tree.\n    # Hint: You can use\
    \ a binary search trie.\n    # Hint: You can use a binary search heap.\n    #\
    \ Hint: You can use a binary search priority queue.\n    # Hint: You can use",
  "    count = 0\n    for char in brackets:\n        if char == \"<\":\n         \
    \   count += 1\n        elif char == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n          \
    \  count += 1\n        elif bracket == \">\":\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n\n", "    #\
    \ TODO: implement this function\n    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    # your code here\n    return brackets.count(\"\
    <\") == brackets.count(\">\")\n\n", "    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    count = 0\n    for i in brackets:\n        if i == '<':\n            count\
    \ += 1\n        elif i == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n\
    \        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    # TODO: implement\
    \ this function\n    return True\n\n", "    # YOUR CODE HERE\n    if len(brackets)\
    \ % 2 != 0:\n        return False\n    else:\n        count = 0\n        for i\
    \ in brackets:\n            if i == \"<\":\n                count += 1\n     \
    \       elif i == \">\":\n                count -= 1\n            if count < 0:\n\
    \                return False\n        if count == 0:\n            return True\n\
    \        else:\n            return False\n\n", "    # if brackets is empty, return\
    \ True\n    if brackets == \"\":\n        return True\n    # if brackets is not\
    \ empty, check if the first character is a closing bracket\n    # if so, return\
    \ False\n    if brackets[0] == \">\":\n        return False\n    # if brackets\
    \ is not empty, check if the last character is an opening bracket\n    # if so,\
    \ return False\n    if brackets[-1] == \"<\":\n        return False\n    # if\
    \ brackets is not empty, check if the first character is an opening bracket\n\
    \    # if so, check if the last character is a closing bracket\n    # if so, return\
    \ the result of correct_bracketing on the string between the first and last characters\n\
    \    if brackets[0] == \"<\":\n        if brackets[-1] == \">\":\n           \
    \ return correct_bracketing(brackets[1:-1])\n    # if brackets is not empty, check\
    \ if the first character is an opening bracket\n    # if so, check if the last\
    \ character is a closing bracket\n    # if not, return the result of correct_bracketing\
    \ on the string between the first and last characters\n    if brackets[0] == \"\
    <\":\n        if brackets[-1] != \">\":\n            return correct_bracketing(brackets[1:])\n\
    \    # if brackets is not empty, check if the first character is an opening bracket\n\
    \    # if not, return the result of correct_bracketing on the string between the\
    \ first and last characters\n    if brackets[0] != \"<\":\n        return correct_bracketing(brackets[:-1])\n\
    \n", "    # TODO: implement this function\n    return False\n\n", "    # YOUR\
    \ CODE HERE\n    if len(brackets) % 2 != 0:\n        return False\n    else:\n\
    \        left_brackets = brackets.count(\"<\")\n        right_brackets = brackets.count(\"\
    >\")\n        if left_brackets == right_brackets:\n            return True\n \
    \       else:\n            return False\n\n", "    count = 0\n    for i in brackets:\n\
    \        if i == \"<\":\n            count += 1\n        elif i == \">\":\n  \
    \          count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\"\
    :\n            if len(stack) == 0:\n                return False\n           \
    \ stack.pop()\n    return len(stack) == 0\n\n", "    # YOUR CODE HERE\n    # raise\
    \ NotImplementedError()\n    count = 0\n    for i in brackets:\n        if i ==\
    \ \"<\":\n            count += 1\n        elif i == \">\":\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n", "    # TODO: write the function\n    return True\n\n", "    stack = []\n\
    \    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n    return len(stack) == 0\n\n", "    count = 0\n  \
    \  for bracket in brackets:\n        if bracket == \"<\":\n            count +=\
    \ 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    count = 0\n\
    \    for bracket in brackets:\n        if bracket == \"<\":\n            count\
    \ += 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    # keep track\
    \ of the number of opening brackets\n    # if we ever have more closing brackets\
    \ than opening brackets,\n    # we know we have a problem\n    num_open = 0\n\
    \    for bracket in brackets:\n        if bracket == \"<\":\n            num_open\
    \ += 1\n        elif bracket == \">\":\n            num_open -= 1\n          \
    \  if num_open < 0:\n                return False\n    return num_open == 0\n\n",
  "    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n        if i == '<':\n\
    \            count += 1\n        elif i == '>':\n            count -= 1\n    \
    \    if count < 0:\n            return False\n    if count == 0:\n        return\
    \ True\n    else:\n        return False\n\n", "    # YOUR CODE HERE\n    count\
    \ = 0\n    for i in brackets:\n        if i == \"<\":\n            count += 1\n\
    \        elif i == \">\":\n            count -= 1\n        if count < 0:\n   \
    \         return False\n    if count == 0:\n        return True\n    else:\n \
    \       return False\n\n", "    count = 0\n    for i in brackets:\n        if\
    \ i == \"<\":\n            count += 1\n        elif i == \">\":\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n", "    count = 0\n    for i in brackets:\n        if i == \"<\":\n        \
    \    count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n", "    count\
    \ = 0\n    for char in brackets:\n        if char == \"<\":\n            count\
    \ += 1\n        elif char == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    # YOUR CODE\
    \ HERE\n    count = 0\n    for i in brackets:\n        if i == \"<\":\n      \
    \      count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    if count == 0:\n        return True\n\
    \    else:\n        return False\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    if len(brackets) % 2 != 0:\n        return False\n\
    \    else:\n        for i in range(len(brackets)):\n            if brackets[i]\
    \ == \"<\":\n                if brackets[i+1] == \">\":\n                    return\
    \ True\n                else:\n                    return False\n            else:\n\
    \                return False\n\n", "    count = 0\n    for i in brackets:\n \
    \       if i == \"<\":\n            count += 1\n        elif i == \">\":\n   \
    \         count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    # YOUR CODE HERE\n    if len(brackets) == 0:\n       \
    \ return True\n    if brackets[0] == '>':\n        return False\n    if brackets[-1]\
    \ == '<':\n        return False\n    if brackets.count('<') != brackets.count('>'):\n\
    \        return False\n    return True\n\n", "    count = 0\n    for char in brackets:\n\
    \        if char == \"<\":\n            count += 1\n        elif char == \">\"\
    :\n            count -= 1\n        if count < 0:\n            return False\n \
    \   return count == 0\n\n", "    # TODO: complete this function\n    # Hint: use\
    \ a stack\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '<':\n            stack.append(bracket)\n        elif bracket == '>':\n    \
    \        if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    # YOUR CODE HERE\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n\
    \        elif bracket == '>':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    if len(stack)\
    \ == 0:\n        return True\n    else:\n        return False\n", "    count =\
    \ 0\n    for char in brackets:\n        if char == \"<\":\n            count +=\
    \ 1\n        elif char == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n\
    \        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    # count = 0\n    #\
    \ for i in brackets:\n    #     if i == \"<\":\n    #         count += 1\n   \
    \ #     elif i == \">\":\n    #         count -= 1\n    #     if count < 0:\n\
    \    #         return False\n    # return count == 0\n    #\n    # # or\n    #\n\
    \    # count = 0\n    # for i in brackets:\n    #     if i == \"<\":\n    #  \
    \       count += 1\n    #     elif i == \">\":\n    #         count -= 1\n   \
    \ #         if count < 0:\n    #             return False\n    # return count\
    \ == 0\n    #\n    # # or\n    #\n    # count = 0\n    # for i in brackets:\n\
    \    #     if i == \"<\":\n    #         count += 1\n    #     elif i == \">\"\
    :\n    #         count -= 1\n    #         if count < 0:\n    #             return\
    \ False\n    #     if count == 0:\n    #         return True\n    # return False\n\
    \    #\n    # # or\n    #\n    # count = 0\n    # for i in brackets:\n    #  \
    \   if i == \"<\":\n    #         count += 1\n    #     elif i == \">\":\n   \
    \ #         count -= 1\n    #         if count < 0:\n    #             return\
    \ False\n    #     if count == 0:\n    #         return True\n    # return False\n\
    \    #\n    # # or\n    #\n    # count = 0\n    # for i in brackets:\n    #  \
    \   if i == \"<\":\n    #         count += 1\n    #     elif i == \">\":\n   \
    \ #         count -= 1\n    #         if count < 0:\n    #             return\
    \ False\n    #     if count == 0:\n    #         return True\n    # return False\n\
    \    #\n    # # or\n    #\n    # count = 0\n    # for i in brackets:\n    #  \
    \   if i == \"<\":\n    #         count += 1\n    #     elif i == \">\":\n   \
    \ #         count -= 1\n    #         if count < 0:\n    #             return\
    \ False\n    #     if", "    # TODO: complete this function\n    # Hint: use a\
    \ stack\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n\
    \            stack.append(bracket)\n        elif bracket == '>':\n           \
    \ if len(stack) == 0:\n                return False\n            else:\n     \
    \           stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n", "    count = 0\n    for bracket in brackets:\n   \
    \     if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    # TODO: implement this function\n    # Hint:\
    \ use a stack\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n \
    \           if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\n", "    # if brackets is empty, return True\n\
    \    if brackets == \"\":\n        return True\n    # if brackets is not empty,\
    \ check if the first character is a closing bracket\n    elif brackets[0] == \"\
    >\":\n        return False\n    # if brackets is not empty and the first character\
    \ is an opening bracket,\n    # check if the last character is an opening bracket\n\
    \    elif brackets[-1] == \"<\":\n        return False\n    # if brackets is not\
    \ empty and the first and last characters are opening\n    # and closing brackets,\
    \ respectively, check if the number of opening brackets\n    # is equal to the\
    \ number of closing brackets\n    elif brackets.count(\"<\") != brackets.count(\"\
    >\"):\n        return False\n    # if brackets is not empty and the first and\
    \ last characters are opening\n    # and closing brackets, respectively, and the\
    \ number of opening brackets\n    # is equal to the number of closing brackets,\
    \ check if the number of opening\n    # brackets is equal to the number of closing\
    \ brackets\n    else:\n        return True\n\n", "    # YOUR CODE HERE\n    if\
    \ len(brackets) % 2 != 0:\n        return False\n    else:\n        for i in range(len(brackets)):\n\
    \            if brackets[i] == '<':\n                if brackets[i + 1] == '>':\n\
    \                    return True\n                else:\n                    return\
    \ False\n            else:\n                return False\n\n", "    bracket_stack\
    \ = []\n    for bracket in brackets:\n        if bracket == \"<\":\n         \
    \   bracket_stack.append(bracket)\n        elif bracket == \">\":\n          \
    \  if len(bracket_stack) == 0:\n                return False\n            else:\n\
    \                bracket_stack.pop()\n    return len(bracket_stack) == 0\n\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    # your code here\n    count = 0\n    for i in brackets:\n        if i == \"\
    <\":\n            count += 1\n        elif i == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    if brackets == \"\":\n        return True\n    elif brackets[0] == \"<\":\n\
    \        return correct_bracketing(brackets[1:])\n    elif brackets[0] == \">\"\
    :\n        return False\n    else:\n        return False\n\n", "    # if brackets\
    \ is empty, return True\n    if brackets == \"\":\n        return True\n    #\
    \ if brackets is not empty, check if the first character is a closing bracket\n\
    \    # if it is, return False\n    if brackets[0] == \">\":\n        return False\n\
    \    # if the first character is an opening bracket, check if the last character\
    \ is an opening bracket\n    # if it is, return False\n    if brackets[-1] ==\
    \ \"<\":\n        return False\n    # if the first and last characters are correct,\
    \ check if the number of opening brackets is equal to the number of closing brackets\n\
    \    # if it is, return True\n    if brackets.count(\"<\") == brackets.count(\"\
    >\"):\n        return True\n    # if the number of opening brackets is not equal\
    \ to the number of closing brackets, return False\n    else:\n        return False\n\
    \n", "    # TODO: implement this function\n    # Hint: use a stack\n    stack\
    \ = []\n    for bracket in brackets:\n        if bracket == '<':\n           \
    \ stack.append(bracket)\n        elif bracket == '>':\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    if len(stack) == 0:\n        return True\n    else:\n        return False\n\
    \n", "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\"\
    :\n            count += 1\n        elif bracket == \">\":\n            count -=\
    \ 1\n        if count < 0:\n            return False\n    return count == 0\n\n",
  "    # TODO: complete this function\n    pass\n\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"<\":\n            count += 1\n       \
    \ elif bracket == \">\":\n            count -= 1\n        if count < 0:\n    \
    \        return False\n    return count == 0\n\n", "    # TODO: implement this\
    \ function\n    # Hint: use a stack\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            stack.append(bracket)\n        elif bracket\
    \ == '>':\n            if len(stack) == 0:\n                return False\n   \
    \         else:\n                stack.pop()\n    if len(stack) == 0:\n      \
    \  return True\n    else:\n        return False\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n\
    \        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    # TODO: implement\
    \ this function\n    count = 0\n    for i in brackets:\n        if i == \"<\"\
    :\n            count += 1\n        elif i == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    if count == 0:\n       \
    \ return True\n    else:\n        return False\n\n", "    stack = []\n    for\
    \ bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n\
    \        elif bracket == '>':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n", "    # TODO: complete this function\n    # Hint: use a stack\n  \
    \  stack = []\n    for i in brackets:\n        if i == \"<\":\n            stack.append(i)\n\
    \        elif i == \">\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    if len(stack) ==\
    \ 0:\n        return True\n    else:\n        return False\n\n", "    # YOUR CODE\
    \ HERE\n    raise NotImplementedError()\n\n", "    # <>\n    # <<>>\n    # <<<>>>\n\
    \    # <<<><>>\n    # <<<><<>>>\n    # <<<><<><>>>\n    # <<<><<><<>>>\n    #\
    \ <<<><<><<><>>>\n    # <<<><<><<><<>>>\n    # <<<><<><<><<><>>>\n    # <<<><<><<><<><<>>>\n\
    \    # <<<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<>>>\n    # <<<><<><<><<><<><<><>>>\n\
    \    # <<<><<><<><<><<><<><<>>>\n    # <<<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<>>>\n\
    \    # <<<><<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<><<>>>\n \
    \   # <<<><<><<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<><<><<>>>\n\
    \    # <<<><<><<><<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<><<><<><<>>>\n\
    \    # <<<><<><<><<><<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<><<><<><<><<>>>\n\
    \    # <<<><<><<><<><<><<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<><<><<><<><<><<>>>\n\
    \    # <<<><<><<><<><<><<><<><<><<><<><<><<><<><>>>\n    # <<<><<><<><<><<><<><<><<><<",
  "    # YOUR CODE HERE\n    if len(brackets) % 2 != 0:\n        return False\n  \
    \  else:\n        count = 0\n        for i in brackets:\n            if i == \"\
    <\":\n                count += 1\n            else:\n                count -=\
    \ 1\n            if count < 0:\n                return False\n        if count\
    \ == 0:\n            return True\n        else:\n            return False\n\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    count = 0\n    for i in brackets:\n        if i == \"<\":\n            count\
    \ += 1\n        elif i == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n\
    \        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ i in brackets:\n        if i == \"<\":\n            count += 1\n        elif\
    \ i == \">\":\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n", "    # YOUR CODE HERE\n    count = 0\n  \
    \  for i in brackets:\n        if i == \"<\":\n            count += 1\n      \
    \  elif i == \">\":\n            count -= 1\n        if count < 0:\n         \
    \   return False\n    if count == 0:\n        return True\n    else:\n       \
    \ return False\n\n", "    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n\
    \        if i == \"<\":\n            count += 1\n        elif i == \">\":\n  \
    \          count -= 1\n        if count < 0:\n            return False\n    if\
    \ count == 0:\n        return True\n    else:\n        return False\n\n", "  \
    \  count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n   \
    \         count += 1\n        elif bracket == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n",
  "    # if brackets is empty, return True\n    if brackets == \"\":\n        return\
    \ True\n    # if brackets is not empty, check if the first character is a closing\
    \ bracket\n    elif brackets[0] == \">\":\n        return False\n    # if brackets\
    \ is not empty and the first character is an opening bracket,\n    # check if\
    \ the last character is an opening bracket\n    elif brackets[-1] == \"<\":\n\
    \        return False\n    # if brackets is not empty and the first and last characters\
    \ are not opening\n    # and closing brackets, respectively, check if the number\
    \ of opening brackets\n    # is equal to the number of closing brackets\n    elif\
    \ brackets.count(\"<\") != brackets.count(\">\"):\n        return False\n    #\
    \ if brackets is not empty and the first and last characters are not opening\n\
    \    # and closing brackets, respectively, and the number of opening brackets\
    \ is\n    # equal to the number of closing brackets, check if the number of opening\n\
    \    # brackets is equal to the number of closing brackets\n    else:\n      \
    \  return True\n\n", "    stack = []\n    for b in brackets:\n        if b ==\
    \ \"<\":\n            stack.append(b)\n        else:\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                stack.pop()\n\
    \    return len(stack) == 0\n\n", "    stack = []\n    for b in brackets:\n  \
    \      if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n\
    \            if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    return len(stack) == 0\n\n", "    # YOUR CODE\
    \ HERE\n    count = 0\n    for i in brackets:\n        if i == '<':\n        \
    \    count += 1\n        elif i == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    if count == 0:\n        return True\n  \
    \  else:\n        return False\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    open_brackets = 0\n    for char in brackets:\n\
    \        if char == \"<\":\n            open_brackets += 1\n        elif char\
    \ == \">\":\n            open_brackets -= 1\n        if open_brackets < 0:\n \
    \           return False\n    return open_brackets == 0\n\n", "    # YOUR CODE\
    \ HERE\n    count = 0\n    for i in brackets:\n        if i == \"<\":\n      \
    \      count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    if count == 0:\n        return True\n\
    \    else:\n        return False\n\n", "    # YOUR CODE HERE\n    count = 0\n\
    \    for i in brackets:\n        if i == \"<\":\n            count += 1\n    \
    \    elif i == \">\":\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    if count == 0:\n        return True\n    else:\n     \
    \   return False\n\n", "    # count = 0\n    # for char in brackets:\n    #  \
    \   if char == \"<\":\n    #         count += 1\n    #     elif char == \">\"\
    :\n    #         count -= 1\n    #     if count < 0:\n    #         return False\n\
    \    # return count == 0\n\n    count = 0\n    for char in brackets:\n       \
    \ if char == \"<\":\n            count += 1\n        elif char == \">\":\n   \
    \         count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\n", "    stack = []\n    for bracket in brackets:\n \
    \       if bracket == \"<\":\n            stack.append(bracket)\n        elif\
    \ bracket == \">\":\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n    return len(stack) == 0\n\n", "    stack = []\n \
    \   for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n\
    \        elif bracket == \">\":\n            if len(stack) == 0:\n           \
    \     return False\n            stack.pop()\n    return len(stack) == 0\n\n",
  "    # YOUR CODE HERE\n    count = 0\n    for i in brackets:\n        if i == \"\
    <\":\n            count += 1\n        elif i == \">\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    if count == 0:\n       \
    \ return True\n    else:\n        return False\n\n", "    count = 0\n    for i\
    \ in brackets:\n        if i == \"<\":\n            count += 1\n        elif i\
    \ == \">\":\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n", "    count = 0\n    for char in brackets:\n\
    \        if char == \"<\":\n            count += 1\n        elif char == \">\"\
    :\n            count -= 1\n        if count < 0:\n            return False\n \
    \   return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n   \
    \     if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n            if count < 0:\n                return\
    \ False\n    return count == 0\n\n", "    count = 0\n    for char in brackets:\n\
    \        if char == \"<\":\n            count += 1\n        elif char == \">\"\
    :\n            count -= 1\n        if count < 0:\n            return False\n \
    \   return count == 0\n\n", "    count = 0\n    for char in brackets:\n      \
    \  if char == \"<\":\n            count += 1\n        elif char == \">\":\n  \
    \          count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"<\":\n            count += 1\n        elif bracket == \">\":\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    # TODO: implement this function\n    pass\n\n", "    count =\
    \ 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count\
    \ += 1\n        elif bracket == \">\":\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n\n", "    # YOUR CODE\
    \ HERE\n    count = 0\n    for i in brackets:\n        if i == \"<\":\n      \
    \      count += 1\n        elif i == \">\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    if count == 0:\n        return True\n\
    \    else:\n        return False\n\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == \"<\":\n            count += 1\n        elif bracket ==\
    \ \">\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n", "    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"<\":\n            count += 1\n        elif bracket == \"\
    >\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
