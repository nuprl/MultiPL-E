name: HumanEval_65_circular_shift
language: py
results:
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprmeb3dj7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmprmeb3dj7.py\", line 18,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprmeb3dj7.py\", line\
    \ 11, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # Convert to string\n    x = str(x)\n    # Reverse the\
    \ string\n    x = x[::-1]\n    # Shift the string\n    x = x[:shift] + x[shift:]\n\
    \    # Reverse the string\n    x = x[::-1]\n    # Return the string\n    return\
    \ x\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert\
    \ candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12,\
    \ 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n   \
    \ check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77d0t3c6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp77d0t3c6.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp77d0t3c6.py\", line\
    \ 19, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[shift:] + x_str[:shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0mzn8q6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpx0mzn8q6.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpx0mzn8q6.py\", line\
    \ 14, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: implement this function\n    # Hint: use the\
    \ divmod function\n    # Hint: use the reversed function\n    # Hint: use the\
    \ join function\n    # Hint: use the str function\n    # Hint: use the abs function\n\
    \    # Hint: use the len function\n    # Hint: use the range function\n    # Hint:\
    \ use the map function\n    # Hint: use the list function\n    # Hint: use the\
    \ int function\n    # Hint: use the str function\n    # Hint: use the reversed\
    \ function\n    # Hint: use the join function\n    # Hint: use the str function\n\
    \    # Hint: use the abs function\n    # Hint: use the len function\n    # Hint:\
    \ use the range function\n    # Hint: use the map function\n    # Hint: use the\
    \ list function\n    # Hint: use the int function\n    # Hint: use the str function\n\
    \    # Hint: use the reversed function\n    # Hint: use the join function\n  \
    \  # Hint: use the str function\n    # Hint: use the abs function\n    # Hint:\
    \ use the len function\n    # Hint: use the range function\n    # Hint: use the\
    \ map function\n    # Hint: use the list function\n    # Hint: use the int function\n\
    \    # Hint: use the str function\n    # Hint: use the reversed function\n   \
    \ # Hint: use the join function\n    # Hint: use the str function\n    # Hint:\
    \ use the abs function\n    # Hint: use the len function\n    # Hint: use the\
    \ range function\n    # Hint: use the map function\n    # Hint: use the list function\n\
    \    # Hint: use the int function\n    # Hint: use the str function\n    # Hint:\
    \ use the reversed function\n    # Hint: use the join function\n    # Hint: use\
    \ the str function\n    # Hint: use the abs function\n    # Hint: use the len\
    \ function\n    # Hint: use the range function\n    # Hint: use the map function\n\
    \    # Hint: use the list function\n    # Hint: use the int function\n   \ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfoywdta.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpnfoywdta.py\", line 66,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpnfoywdta.py\", line\
    \ 59, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvnvkz_y.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpuvnvkz_y.py\", line 17,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpuvnvkz_y.py\", line\
    \ 12, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        return ''.join(str(d) for d in reversed(digits))\n    else:\n       \
    \ return ''.join(str(d) for d in digits[-shift:] + digits[:-shift])\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[shift:] + x_str[:shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_g99ll6c.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_g99ll6c.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp_g99ll6c.py\", line\
    \ 13, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7mfzg98.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpo7mfzg98.py\", line 17,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpo7mfzg98.py\", line\
    \ 12, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: implement this function\n    # Hint: use the\
    \ modulus operator\n    # Hint: use the string slicing syntax\n    # Hint: use\
    \ the string concatenation syntax\n    # Hint: use the string reverse syntax\n\
    \    # Hint: use the string join syntax\n    # Hint: use the string format syntax\n\
    \    # Hint: use the string int syntax\n    # Hint: use the string str syntax\n\
    \    # Hint: use the string len syntax\n    # Hint: use the string list syntax\n\
    \    # Hint: use the string map syntax\n    # Hint: use the string filter syntax\n\
    \    # Hint: use the string reduce syntax\n    # Hint: use the string enumerate\
    \ syntax\n    # Hint: use the string zip syntax\n    # Hint: use the string all\
    \ syntax\n    # Hint: use the string any syntax\n    # Hint: use the string sorted\
    \ syntax\n    # Hint: use the string reversed syntax\n    # Hint: use the string\
    \ sum syntax\n    # Hint: use the string max syntax\n    # Hint: use the string\
    \ min syntax\n    # Hint: use the string abs syntax\n    # Hint: use the string\
    \ pow syntax\n    # Hint: use the string round syntax\n    # Hint: use the string\
    \ divmod syntax\n    # Hint: use the string bin syntax\n    # Hint: use the string\
    \ hex syntax\n    # Hint: use the string oct syntax\n    # Hint: use the string\
    \ chr syntax\n    # Hint: use the string ord syntax\n    # Hint: use the string\
    \ isinstance syntax\n    # Hint: use the string issubclass syntax\n    # Hint:\
    \ use the string type syntax\n    # Hint: use the string dir syntax\n    # Hint:\
    \ use the string help syntax\n    # Hint: use the string id syntax\n    # Hint:\
    \ use the string vars syntax\n    # Hint: use the string locals syntax\n    #\
    \ Hint: use the string globals syntax\n    # Hint: use the string hasattr syntax\n\
    \    # Hint: use the string getattr syntax\n    # Hint: use the string setattr\
    \ syntax\n    # Hint: use the string delattr syntax\n    # Hint\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeyzm0vd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpjeyzm0vd.py\", line 60,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpjeyzm0vd.py\", line\
    \ 53, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # Convert to string\n    x_str = str(x)\n    # If shift\
    \ > number of digits, return digits reversed\n    if shift > len(x_str):\n   \
    \     return x_str[::-1]\n    # Return shifted string\n    return x_str[-shift:]\
    \ + x_str[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    else:\n        return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: Implement this function\n    x = str(x)\n   \
    \ shift = shift % len(x)\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2989c92.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi2989c92.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpi2989c92.py\", line\
    \ 15, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: Implement this function\n    # Hint: You may\
    \ find the following functions useful:\n    #       str(x) -> returns a string\
    \ representation of x\n    #       len(str(x)) -> returns the number of digits\
    \ in x\n    #       int(str(x)[i]) -> returns the digit at position i in x\n \
    \   #       str(int(x)) -> returns a string representation of x\n    #       int(str(x)[i:])\
    \ -> returns the integer formed by the digits at positions i and beyond in x\n\
    \    #       int(str(x)[:i]) -> returns the integer formed by the digits at positions\
    \ 0 to i-1 in x\n    #       int(str(x)[i:j]) -> returns the integer formed by\
    \ the digits at positions i to j-1 in x\n    #       int(str(x)[:i] + str(x)[j:])\
    \ -> returns the integer formed by the digits at positions 0 to i-1\n    #   \
    \                                    and j to the end of x\n    #       int(str(x)[::-1])\
    \ -> returns the integer formed by the digits of x in reverse order\n    #   \
    \    int(str(x)[::-1][i:]) -> returns the integer formed by the digits of x in\
    \ reverse order\n    #                                starting at position i\n\
    \    #       int(str(x)[::-1][:i]) -> returns the integer formed by the digits\
    \ of x in reverse order\n    #                                up to position i-1\n\
    \    #       int(str(x)[::-1][i:j]) -> returns the integer formed by the digits\
    \ of x in reverse order\n    #                                 starting at position\
    \ i and ending at position j-1\n    #       int(str(x)[::-1][:i] + str(x)[::-1][j:])\
    \ -> returns the integer formed by the digits of x in\n    #                 \
    \                                  reverse order up to position i-1 and starting\
    \ at\n    #                                                   position j\n   \
    \ #       int(str(x)[::-1][::-1]) -> returns the integer x\n    #       int(str(x)[::-1][::-1][i:])\
    \ -> returns the integer formed by the digits of x starting at\n    #        \
    \                              position\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmurpgj6q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpmurpgj6q.py\", line 38,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpmurpgj6q.py\", line\
    \ 31, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        return ''.join(map(str, digits[::-1]))\n    else:\n        return ''.join(map(str,\
    \ digits[-shift:] + digits[:-shift]))\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwlfzoazg.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpwlfzoazg.py\", line 17,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpwlfzoazg.py\", line\
    \ 12, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[shift:] + x_str[:shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0s80v1g4.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0s80v1g4.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp0s80v1g4.py\", line\
    \ 13, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30g20c0n.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp30g20c0n.py\", line 17,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp30g20c0n.py\", line\
    \ 12, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return\
    \ x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mti1_15.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1mti1_15.py\", line 19,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp1mti1_15.py\", line\
    \ 14, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift == 0:\n        return str(x)\n    else:\n  \
    \      x_str = str(x)\n        if shift > len(x_str):\n            return x_str[::-1]\n\
    \        else:\n            return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return\
    \ x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkp3qyrs.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjkp3qyrs.py\", line 19,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpjkp3qyrs.py\", line\
    \ 14, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[shift:] + x_str[:shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvdeaeod.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprvdeaeod.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprvdeaeod.py\", line\
    \ 13, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if\
    \ shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw6j9e3q.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpjw6j9e3q.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpjw6j9e3q.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        return ''.join(str(d) for d in reversed(digits))\n    else:\n       \
    \ return ''.join(str(d) for d in digits[-shift:] + digits[:-shift])\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # Convert x to a string\n    x_str = str(x)\n    # Get\
    \ the length of the string\n    x_len = len(x_str)\n    # If shift > number of\
    \ digits, return digits reversed\n    if shift > x_len:\n        return x_str[::-1]\n\
    \    # Split the string into two parts\n    x_str_1 = x_str[:x_len - shift]\n\
    \    x_str_2 = x_str[x_len - shift:]\n    # Return the two parts concatenated\n\
    \    return x_str_2 + x_str_1\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[shift:] + x_str[:shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_l52_ygy.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_l52_ygy.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp_l52_ygy.py\", line\
    \ 13, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: implement this function\n    x_str = str(x)\n\
    \    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return\
    \ x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return\
    \ x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtd38pgg.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvtd38pgg.py\", line 19,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpvtd38pgg.py\", line\
    \ 14, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    # TODO: Implement this function\n    x = str(x)\n   \
    \ if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:]\
    \ + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift >= len(x_str):\n       \
    \ return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gu3ensr.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8gu3ensr.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp8gu3ensr.py\", line\
    \ 15, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n      \
    \  return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n\
    \    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return x[::-1]\n\
    \    else:\n        return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \            \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n        return\
    \ x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
