name: HumanEval_42_incr_list
language: py
results:
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([1,\
    \ 2, 3, 4, 5]))\nprint(incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n[2, 3, 4, 5, 6]\n[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nincr_list([1, 2, 3])\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nincr_list([1, 2, 3])\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([1,\
    \ 2, 3, 4, 5]))\nprint(incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n[2, 3, 4, 5, 6]\n[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nincr_list([1, 2, 3])\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nincr_list([1, 2, 3])\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [e + 1 for e in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [e + 1 for e in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n\
    \    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10,\
    \ 1, 124]\n\ndef test_check():\n    check(incr_list)\n\ntest_check()\n"
  stdout: "[2, 3, 4]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n\
    \    \"\"\"Return list with elements incremented by 1.\n            \"\"\"\n \
    \   return [x + 1 for x in l]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\ndef test_check():\n\
    \    check(incr_list)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
