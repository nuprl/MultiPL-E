name: HumanEval_103_rounded_avg
language: py
results:
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) /\
    \ 2)\n        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp502w0alh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp502w0alh.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp502w0alh.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptj2rvw45.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptj2rvw45.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptj2rvw45.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4at_oo7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt4at_oo7.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpt4at_oo7.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt6ovowi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxt6ovowi.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxt6ovowi.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxoqfnbk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpuxoqfnbk.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpuxoqfnbk.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6sl3zys.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc6sl3zys.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpc6sl3zys.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja5cglwu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpja5cglwu.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpja5cglwu.py\", line\
    \ 21, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n \
    \       return bin(round(avg))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8tr18_xq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8tr18_xq.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8tr18_xq.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmh5ttmoe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmh5ttmoe.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmh5ttmoe.py\", line\
    \ 20, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(5,\
    \ 5))\nprint(rounded_avg(5, 6))\nprint(rounded_avg(5, 7))\nprint(rounded_avg(5,\
    \ 8))\nprint(rounded_avg(5, 9))\nprint(rounded_avg(5, 10))\nprint(rounded_avg(5,\
    \ 11))\nprint(rounded_avg(5, 12))\nprint(rounded_avg(5, 13))\nprint(rounded_avg(5,\
    \ 14))\nprint(rounded_avg(5, 15))\nprint(rounded_avg(5, 16))\nprint(rounded_avg(5,\
    \ 17))\nprint(rounded_avg(5, 18))\nprint(rounded_avg(5, 19))\nprint(rounded_avg(5,\
    \ 20))\nprint(rounded_avg(5, 21))\nprint(rounded_avg(5, 22))\nprint(rounded_avg(5,\
    \ 23))\nprint(rounded_avg(5, 24))\nprint(rounded_avg(5, 25))\nprint(rounded_avg(5,\
    \ 26))\nprint(rounded_avg(5, 27))\nprint(rounded_avg(5, 28))\nprint(rounded_avg(5,\
    \ 29))\nprint(rounded_avg(5, 30))\nprint(rounded_avg(5, 31))\nprint(rounded_avg(5,\
    \ 32))\nprint(rounded_avg(5, 33))\nprint(rounded_avg(5, 34))\nprint(rounded_avg(5,\
    \ 35))\nprint(rounded_avg(5, 36))\nprint(rounded_avg(5, 37))\nprint(rounded_avg(5,\
    \ 38))\nprint(rounded_avg(5, 39))\nprint(rounded_avg(5, 40))\nprint(rounded_avg(5,\
    \ 41))\nprint(rounded_avg(5, 42))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b101\n0b110\n0b110\n0b110\n0b111\n0b1000\n0b1000\n0b1000\n0b1001\n\
    0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n\
    0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n0b10001\n0b10010\n0b10010\n0b10010\n\
    0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n0b10110\n0b10110\n0b10110\n0b10111\n\
    0b11000\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qms8v2_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_qms8v2_.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_qms8v2_.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1, 41))\nprint(rounded_avg(1, 42))\nprint(rounded_avg(1,\
    \ 43))\nprint(rounded_avg(1, 44))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n0b111\n0b1000\n\
    0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n0b1100\n0b1100\n\
    0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n0b10001\n0b10010\n\
    0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n0b10110\n0b10110\n\
    0b10110\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbui7t0g9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbui7t0g9.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbui7t0g9.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm2rxl4p5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpm2rxl4p5.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpm2rxl4p5.py\", line\
    \ 21, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpym1955zh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpym1955zh.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpym1955zh.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round((n\
    \ + m) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_cpg9on.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu_cpg9on.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpu_cpg9on.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0fyajiq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe0fyajiq.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpe0fyajiq.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) /\
    \ 2)\n        return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsd64z5u0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsd64z5u0.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsd64z5u0.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoll5blgd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpoll5blgd.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpoll5blgd.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhq6p24p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbhq6p24p.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbhq6p24p.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimy9jqa8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpimy9jqa8.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpimy9jqa8.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    return bin(round((n + m) / 2))\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphsuiwyjh.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphsuiwyjh.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphsuiwyjh.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnxawn74.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwnxawn74.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpwnxawn74.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    return bin(round((n + m) / 2))[2:]\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2cjg3f6m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2cjg3f6m.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2cjg3f6m.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfb_oivqb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfb_oivqb.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfb_oivqb.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphg8u9oc3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphg8u9oc3.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphg8u9oc3.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6toyj3nn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6toyj3nn.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp6toyj3nn.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbudtu3kq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbudtu3kq.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbudtu3kq.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhmbkcbe.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphhmbkcbe.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphhmbkcbe.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghqj5f4q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpghqj5f4q.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpghqj5f4q.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) /\
    \ 2)\n        return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(2, 6))\nprint(rounded_avg(2, 5))\nprint(rounded_avg(2,\
    \ 4))\nprint(rounded_avg(2, 3))\nprint(rounded_avg(2, 2))\nprint(rounded_avg(2,\
    \ 1))\nprint(rounded_avg(2, 0))\nprint(rounded_avg(2, -1))\nprint(rounded_avg(2,\
    \ -2))\nprint(rounded_avg(2, -3))\nprint(rounded_avg(2, -4))\nprint(rounded_avg(2,\
    \ -5))\nprint(rounded_avg(2, -6))\nprint(rounded_avg(2, -7))\nprint(rounded_avg(2,\
    \ -8))\nprint(rounded_avg(2, -9))\nprint(rounded_avg(2, -10))\nprint(rounded_avg(2,\
    \ -11))\nprint(rounded_avg(2, -12))\nprint(rounded_avg(2, -13))\nprint(rounded_avg(2,\
    \ -14))\nprint(rounded_avg(2, -15))\nprint(rounded_avg(2, -16))\nprint(rounded_avg(2,\
    \ -17))\nprint(rounded_avg(2, -18))\nprint(rounded_avg(2, -19))\nprint(rounded_avg(2,\
    \ -20))\nprint(rounded_avg(2, -21))\nprint(rounded_avg(2, -22))\nprint(rounded_avg(2,\
    \ -23))\nprint(rounded_avg(2, -24))\nprint(rounded_avg(2, -25))\nprint(rounded_avg(2,\
    \ -26))\nprint(rounded_avg(2, -27))\nprint(rounded_avg(2, -28))\nprint(rounded_avg(2,\
    \ -29))\nprint(rounded_avg(2, -30))\nprint(rounded_avg\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjfgu75ei.py\", line 52\n    print(rounded_avg\n      \
    \   ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1,\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8254vzpy.py\", line 54\n    print(rounded_avg(1,\n   \
    \                  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8mc8zs5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt8mc8zs5.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpt8mc8zs5.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh2ym5jy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuh2ym5jy.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpuh2ym5jy.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(5,\
    \ 5))\nprint(rounded_avg(1, 1))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(1,\
    \ 100))\nprint(rounded_avg(1, 1000))\nprint(rounded_avg(1, 10000))\nprint(rounded_avg(1,\
    \ 100000))\nprint(rounded_avg(1, 1000000))\nprint(rounded_avg(1, 10000000))\n\
    print(rounded_avg(1, 100000000))\nprint(rounded_avg(1, 1000000000))\nprint(rounded_avg(1,\
    \ 10000000000))\nprint(rounded_avg(1, 100000000000))\nprint(rounded_avg(1, 1000000000000))\n\
    print(rounded_avg(1, 10000000000000))\nprint(rounded_avg(1, 100000000000000))\n\
    print(rounded_avg(1, 1000000000000000))\nprint(rounded_avg(1, 10000000000000000))\n\
    print(rounded_avg(1, 100000000000000000))\nprint(rounded_avg(1, 1000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000))\nprint(rounded_avg(1, 100000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000000))\nprint(rounded_avg(1, 100000000000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000000000000))\nprint(rounded_avg(\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_silxile.py\", line 50\n    print(rounded_avg(\n     \
    \                ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(3,\
    \ 3))\nprint(rounded_avg(2, 6))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(1,\
    \ 100))\nprint(rounded_avg(1, 10000))\nprint(rounded_avg(1, 100000))\nprint(rounded_avg(1,\
    \ 1000000))\nprint(rounded_avg(1, 10000000))\nprint(rounded_avg(1, 100000000))\n\
    print(rounded_avg(1, 1000000000))\nprint(rounded_avg(1, 10000000000))\nprint(rounded_avg(1,\
    \ 100000000000))\nprint(rounded_avg(1, 1000000000000))\nprint(rounded_avg(1, 10000000000000))\n\
    print(rounded_avg(1, 100000000000000))\nprint(rounded_avg(1, 1000000000000000))\n\
    print(rounded_avg(1, 10000000000000000))\nprint(rounded_avg(1, 100000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000))\nprint(rounded_avg(1, 10000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000))\nprint(rounded_avg(1, 100000000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000000000))\nprint(rounded_avg(1, 100000000000000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000000000000))\nprint(rounded_\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl1ingn_7.py\", line 50\n    print(rounded_\n         ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3atiix7f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3atiix7f.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp3atiix7f.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(2, 2))\nprint(rounded_avg(2,\
    \ 3))\nprint(rounded_avg(1, 1))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(1,\
    \ 100))\nprint(rounded_avg(1, 1000))\nprint(rounded_avg(1, 10000))\nprint(rounded_avg(1,\
    \ 100000))\nprint(rounded_avg(1, 1000000))\nprint(rounded_avg(1, 10000000))\n\
    print(rounded_avg(1, 100000000))\nprint(rounded_avg(1, 1000000000))\nprint(rounded_avg(1,\
    \ 10000000000))\nprint(rounded_avg(1, 100000000000))\nprint(rounded_avg(1, 1000000000000))\n\
    print(rounded_avg(1, 10000000000000))\nprint(rounded_avg(1, 100000000000000))\n\
    print(rounded_avg(1, 1000000000000000))\nprint(rounded_avg(1, 10000000000000000))\n\
    print(rounded_avg(1, 100000000000000000))\nprint(rounded_avg(1, 1000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000))\nprint(rounded_avg(1, 100000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000000))\nprint(rounded_avg(1, 100000000000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000000000000))\nprint(rounded_avg(\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzclnbumj.py\", line 50\n    print(rounded_avg(\n     \
    \                ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(1,\
    \ 1))\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1\n0b10\n0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n\
    0b110\n0b110\n0b111\n0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n\
    0b1011\n0b1100\n0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n\
    0b10000\n0b10000\n0b10001\n0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(4, 6))\nprint(rounded_avg(4, 5))\nprint(rounded_avg(4,\
    \ 4))\nprint(rounded_avg(4, 3))\nprint(rounded_avg(4, 2))\nprint(rounded_avg(4,\
    \ 1))\nprint(rounded_avg(4, 0))\nprint(rounded_avg(4, -1))\nprint(rounded_avg(4,\
    \ -2))\nprint(rounded_avg(4, -3))\nprint(rounded_avg(4, -4))\nprint(rounded_avg(4,\
    \ -5))\nprint(rounded_avg(4, -6))\nprint(rounded_avg(4, -7))\nprint(rounded_avg(4,\
    \ -8))\nprint(rounded_avg(4, -9))\nprint(rounded_avg(4, -10))\nprint(rounded_avg(4,\
    \ -11))\nprint(rounded_avg(4, -12))\nprint(rounded_avg(4, -13))\nprint(rounded_avg(4,\
    \ -14))\nprint(rounded_avg(4, -15))\nprint(rounded_avg(4, -16))\nprint(rounded_avg(4,\
    \ -17))\nprint(rounded_avg(4, -18))\nprint(rounded_avg(4, -19))\nprint(rounded_avg(4,\
    \ -20))\nprint(rounded_avg(4, -21))\nprint(rounded_avg(4, -22))\nprint(rounded_avg(4,\
    \ -23))\nprint(rounded_avg(4, -24))\nprint(rounded_avg(4, -25))\nprint(rounded_avg(4,\
    \ -26))\nprint(rounded_avg(4, -27))\nprint(rounded_avg(4, -28))\nprint(rounded_avg(4,\
    \ -29))\nprint(rounded_avg(4, -30))\nprint(rounded_avg\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp0_hb7hie.py\", line 52\n    print(rounded_avg\n      \
    \   ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptljiolwu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptljiolwu.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptljiolwu.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmn_kmq73.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmn_kmq73.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmn_kmq73.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjapitvf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphjapitvf.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphjapitvf.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtb77zas.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprtb77zas.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmprtb77zas.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7bq68k7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe7bq68k7.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpe7bq68k7.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgfqra3y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptgfqra3y.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptgfqra3y.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbt7v9kfj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbt7v9kfj.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpbt7v9kfj.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmir3wrsk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmir3wrsk.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmir3wrsk.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpywj6jaiy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpywj6jaiy.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpywj6jaiy.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9e2ovzh5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9e2ovzh5.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9e2ovzh5.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunef717i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpunef717i.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpunef717i.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1,\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprcpcr9p2.py\", line 54\n    print(rounded_avg(1,\n   \
    \                  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9sdjkvo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpv9sdjkvo.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpv9sdjkvo.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0lfiyrp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx0lfiyrp.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpx0lfiyrp.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jrzeoru.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4jrzeoru.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4jrzeoru.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) /\
    \ 2)\n        return bin(avg)[2:]\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprn9ry00m.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprn9ry00m.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmprn9ry00m.py\", line\
    \ 17, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(2, 6))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 4))\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1, 7))\nprint(rounded_avg(1,\
    \ 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(1,\
    \ 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1, 13))\nprint(rounded_avg(1,\
    \ 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1, 16))\nprint(rounded_avg(1,\
    \ 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1, 19))\nprint(rounded_avg(1,\
    \ 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1, 22))\nprint(rounded_avg(1,\
    \ 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1, 25))\nprint(rounded_avg(1,\
    \ 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1, 28))\nprint(rounded_avg(1,\
    \ 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1, 31))\nprint(rounded_avg(1,\
    \ 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1, 34))\nprint(rounded_avg(1,\
    \ 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1, 37))\nprint(rounded_avg(1,\
    \ 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1, 40))\nprint(rounded_avg(1,\
    \ 41))\nprint(rounded_avg(1, 42))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n0b111\n\
    0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n0b1100\n\
    0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n0b10001\n\
    0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n0b10110\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw52ixsxo.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw52ixsxo.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpw52ixsxo.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zjyckq6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_zjyckq6.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_zjyckq6.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz931ggw2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpz931ggw2.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpz931ggw2.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3toh8as.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpn3toh8as.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpn3toh8as.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(1,\
    \ 1))\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b1\n0b10\n0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n\
    0b110\n0b110\n0b111\n0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n\
    0b1011\n0b1100\n0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n\
    0b10000\n0b10000\n0b10001\n0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4_w864b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpm4_w864b.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpm4_w864b.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(3,\
    \ 3))\nprint(rounded_avg(3, 4))\nprint(rounded_avg(4, 3))\nprint(rounded_avg(3,\
    \ 5))\nprint(rounded_avg(5, 3))\nprint(rounded_avg(3, 6))\nprint(rounded_avg(6,\
    \ 3))\nprint(rounded_avg(3, 7))\nprint(rounded_avg(7, 3))\nprint(rounded_avg(3,\
    \ 8))\nprint(rounded_avg(8, 3))\nprint(rounded_avg(3, 9))\nprint(rounded_avg(9,\
    \ 3))\nprint(rounded_avg(3, 10))\nprint(rounded_avg(10, 3))\nprint(rounded_avg(3,\
    \ 11))\nprint(rounded_avg(11, 3))\nprint(rounded_avg(3, 12))\nprint(rounded_avg(12,\
    \ 3))\nprint(rounded_avg(3, 13))\nprint(rounded_avg(13, 3))\nprint(rounded_avg(3,\
    \ 14))\nprint(rounded_avg(14, 3))\nprint(rounded_avg(3, 15))\nprint(rounded_avg(15,\
    \ 3))\nprint(rounded_avg(3, 16))\nprint(rounded_avg(16, 3))\nprint(rounded_avg(3,\
    \ 17))\nprint(rounded_avg(17, 3))\nprint(rounded_avg(3, 18))\nprint(rounded_avg(18,\
    \ 3))\nprint(rounded_avg(3, 19))\nprint(rounded_avg(19, 3))\nprint(rounded_avg(3,\
    \ 20))\nprint(rounded_avg(20, 3))\nprint(rounded_avg(3, 21))\nprint(rounded_avg(21,\
    \ 3))\nprint(rounded_avg(3, 22))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b11\n-1\n0b11\n0b100\n-1\n0b100\n-1\n0b100\n-1\n0b101\n-1\n0b110\n-1\n\
    0b110\n-1\n0b110\n-1\n0b111\n-1\n0b1000\n-1\n0b1000\n-1\n0b1000\n-1\n0b1001\n\
    -1\n0b1010\n-1\n0b1010\n-1\n0b1010\n-1\n0b1011\n-1\n0b1100\n-1\n0b1100\n-1\n0b1100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xi8aqa5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_xi8aqa5.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_xi8aqa5.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfye_kk0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdfye_kk0.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpdfye_kk0.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61o_rzev.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp61o_rzev.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp61o_rzev.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpinhgg8it.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpinhgg8it.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpinhgg8it.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 1))\nprint(rounded_avg(1,\
    \ 3))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(1,\
    \ 100))\nprint(rounded_avg(1, 100000))\nprint(rounded_avg(1, 1000000))\nprint(rounded_avg(1,\
    \ 10000000))\nprint(rounded_avg(1, 100000000))\nprint(rounded_avg(1, 1000000000))\n\
    print(rounded_avg(1, 10000000000))\nprint(rounded_avg(1, 100000000000))\nprint(rounded_avg(1,\
    \ 1000000000000))\nprint(rounded_avg(1, 10000000000000))\nprint(rounded_avg(1,\
    \ 100000000000000))\nprint(rounded_avg(1, 1000000000000000))\nprint(rounded_avg(1,\
    \ 10000000000000000))\nprint(rounded_avg(1, 100000000000000000))\nprint(rounded_avg(1,\
    \ 1000000000000000000))\nprint(rounded_avg(1, 10000000000000000000))\nprint(rounded_avg(1,\
    \ 100000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000))\nprint(rounded_avg(1,\
    \ 10000000000000000000000))\nprint(rounded_avg(1, 100000000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000000))\nprint(rounded_avg(1, 1000000000000000000000000000))\n\
    print(rounded_avg(1, 10000000000000000000000000000))\nprint(rounded_avg(1, 100000000000000000000000000000))\n\
    print(rounded_avg(1, 1000000000000000000000000000000))\nprint(rounded_avg(1, 10000000000000000000000000000000))\n\
    print(rounded_avg(1, 100000000000000000000000000000000))\nprint(rounded_avg(1,\
    \ 1000000000000000000000000000000000))\nprint\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b10\n0b1\n0b10\n0b11\n0b110\n0b110010\n0b1100001101010000\n0b1111010000100100000\n\
    0b10011000100101101000000\n0b10111110101111000010000000\n0b11101110011010110010100000000\n\
    0b100101010000001011111001000000000\n0b101110100100001110110111010000000000\n\
    0b111010001101010010100101000100000000000\n0b1001000110000100111001110010101000000000000\n\
    0b1011010111100110001000001111010010000000000000\n0b1110001101011111101010010011000110100000000000000\n\
    0b10001110000110111100100110111111000001000000000000000\n0b10110001101000101011110000101110110001010000000000000000\n\
    0b11011110000010110110101100111010011101100100000000000000000\n0b100010101100011100100011000001001000100111101000000000000000000\n\
    0b101011010111100011101011110001011010110001100010000000000000000000\n0b110110001101011100100110101101110001011101111010100000000000000000000\n\
    0b1000011110000110011110000011001001101110101011001001000000000000000000000\n\
    0b1010100101101000000101100011111100001010010101111011100000000000000000000000\n\
    0b1101001111000010000110111100111011001100111011011010000000000000000000000000000\n\
    0b10000100010110010101000101100001010000000001010010001000000000000000000000000000000\n\
    0b10100101011011111010010110111001100100000001100110101000000000000000000000000000000000\n\
    0b11001110110010111000111100100111111101000010000000010000000000000000000000000000000000000\n\
    0b100000010011111100111001011110001111100010010100000010000000000000000000000000000000000000000\n\
    0b101000011000111100000111110101110011011010111001000010000000000000000000000000000000000000000000\n\
    0b110010011111001011001001110011010000010001100111010100000000000000000000000000000000000000000000000\n\
    0b111111000110111101111100010000000100010110000001001000000000000000000000000000000000000000000000000000\n\
    0b1001110111000101101011011010100000101011011100001011100000000000000000000000000000000000000000000000000000\n\
    0b1100010100110111000110010001001000110110010011001110000000000000000000000000000000000000000000000000000000000\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiz0qxx2z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpiz0qxx2z.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpiz0qxx2z.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1, 41))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b10\n0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n\
    0b111\n0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n\
    0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n\
    0b10001\n0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxykg8rb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmxykg8rb.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpmxykg8rb.py\", line\
    \ 21, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(5,\
    \ 5))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(10, 1))\nprint(rounded_avg(10,\
    \ 10))\nprint(rounded_avg(1, 100))\nprint(rounded_avg(100, 1))\nprint(rounded_avg(100,\
    \ 100))\nprint(rounded_avg(1, 1000))\nprint(rounded_avg(1000, 1))\nprint(rounded_avg(1000,\
    \ 1000))\nprint(rounded_avg(1, 10000))\nprint(rounded_avg(10000, 1))\nprint(rounded_avg(10000,\
    \ 10000))\nprint(rounded_avg(1, 100000))\nprint(rounded_avg(100000, 1))\nprint(rounded_avg(100000,\
    \ 100000))\nprint(rounded_avg(1, 1000000))\nprint(rounded_avg(1000000, 1))\nprint(rounded_avg(1000000,\
    \ 1000000))\nprint(rounded_avg(1, 10000000))\nprint(rounded_avg(10000000, 1))\n\
    print(rounded_avg(10000000, 10000000))\nprint(rounded_avg(1, 100000000))\nprint(rounded_avg(100000000,\
    \ 1))\nprint(rounded_avg(100000000, 100000000))\nprint(rounded_avg(1, 1000000000))\n\
    print(rounded_avg(1000000000, 1))\nprint(rounded_avg(1000000000, 1000000000))\n\
    print(rounded_avg(1, 10000000000))\nprint(rounded_avg(10000000000, 1))\nprint(rounded_avg(10000000000,\
    \ 10000000000))\nprint(rounded_avg(1, 100000000000))\nprint(rounded_avg(100000000000,\
    \ 1))\nprint(rounded_avg(100000000000, 100000000000))\nprint(rounded_avg(1,\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxt295_rh.py\", line 51\n    print(rounded_avg(1,\n   \
    \                  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpri41ggur.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpri41ggur.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpri41ggur.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mz9pgbk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0mz9pgbk.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp0mz9pgbk.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx7u568g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppx7u568g.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmppx7u568g.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04hmozwp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp04hmozwp.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp04hmozwp.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10h0m7ck.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp10h0m7ck.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp10h0m7ck.py\", line\
    \ 21, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozcowwa6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpozcowwa6.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpozcowwa6.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpht5b9z8c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpht5b9z8c.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpht5b9z8c.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) /\
    \ 2)\n        return bin(avg)\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp003f4gu3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp003f4gu3.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp003f4gu3.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88umrr7d.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp88umrr7d.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp88umrr7d.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(3, 4))\nprint(rounded_avg(3, 5))\nprint(rounded_avg(3,\
    \ 6))\nprint(rounded_avg(3, 7))\nprint(rounded_avg(3, 8))\nprint(rounded_avg(3,\
    \ 9))\nprint(rounded_avg(3, 10))\nprint(rounded_avg(3, 11))\nprint(rounded_avg(3,\
    \ 12))\nprint(rounded_avg(3, 13))\nprint(rounded_avg(3, 14))\nprint(rounded_avg(3,\
    \ 15))\nprint(rounded_avg(3, 16))\nprint(rounded_avg(3, 17))\nprint(rounded_avg(3,\
    \ 18))\nprint(rounded_avg(3, 19))\nprint(rounded_avg(3, 20))\nprint(rounded_avg(3,\
    \ 21))\nprint(rounded_avg(3, 22))\nprint(rounded_avg(3, 23))\nprint(rounded_avg(3,\
    \ 24))\nprint(rounded_avg(3, 25))\nprint(rounded_avg(3, 26))\nprint(rounded_avg(3,\
    \ 27))\nprint(rounded_avg(3, 28))\nprint(rounded_avg(3, 29))\nprint(rounded_avg(3,\
    \ 30))\nprint(rounded_avg(3, 31))\nprint(rounded_avg(3, 32))\nprint(rounded_avg(3,\
    \ 33))\nprint(rounded_avg(3, 34))\nprint(rounded_avg(3, 35))\nprint(rounded_avg(3,\
    \ 36))\nprint(rounded_avg(3, 37))\nprint(rounded_avg(3, 38))\nprint(rounded_avg(3,\
    \ 39))\nprint(rounded_avg(3, 40))\nprint(rounded_avg(3, 41))\nprint(rounded_avg(3,\
    \ 42))\nprint(rounded_avg(3, 43))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n0b111\n0b1000\n0b1000\n\
    0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n0b1100\n0b1100\n0b1101\n\
    0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n0b10001\n0b10010\n\
    0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n0b10110\n0b10110\n\
    0b10110\n0b10111\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspbv5fsx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpspbv5fsx.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpspbv5fsx.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_50nrid1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_50nrid1.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp_50nrid1.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp690kvcqa.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp690kvcqa.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp690kvcqa.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n\
    \        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1, 5)\
    \ == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp44iepjan.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp44iepjan.py\", line 31,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp44iepjan.py\", line\
    \ 21, in check\n    assert candidate(560, 851) == '0b1011000010'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n2iii0a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1n2iii0a.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1n2iii0a.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaq6uuk07.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpaq6uuk07.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpaq6uuk07.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh_l_oy2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyh_l_oy2.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpyh_l_oy2.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(int(round((n\
    \ + m) / 2)))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmper2dkfqo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmper2dkfqo.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmper2dkfqo.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj592uqxu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj592uqxu.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpj592uqxu.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1, 41))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b10\n0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n\
    0b111\n0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n\
    0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n\
    0b10001\n0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsrmbiqr_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsrmbiqr_.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsrmbiqr_.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqga4c_n6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqga4c_n6.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqga4c_n6.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qb6xnmk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4qb6xnmk.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4qb6xnmk.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qx2k4iz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4qx2k4iz.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4qx2k4iz.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03n_zng_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp03n_zng_.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp03n_zng_.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpat0xzile.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpat0xzile.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpat0xzile.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwqioqxz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqwqioqxz.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqwqioqxz.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnu7y13ik.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnu7y13ik.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpnu7y13ik.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return\
    \ bin(avg)\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5dg3742y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5dg3742y.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5dg3742y.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsazoirt1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsazoirt1.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsazoirt1.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = int(round((n +\
    \ m) / 2))\n        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1, 41))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b10\n0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n\
    0b111\n0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n\
    0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n\
    0b10001\n0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqb4ob5lm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqb4ob5lm.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqb4ob5lm.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwfl3b2m_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwfl3b2m_.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpwfl3b2m_.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8cx3as64.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8cx3as64.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8cx3as64.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9g439nly.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9g439nly.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp9g439nly.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(1, 20))\nprint(rounded_avg(1, 21))\nprint(rounded_avg(1,\
    \ 22))\nprint(rounded_avg(1, 23))\nprint(rounded_avg(1, 24))\nprint(rounded_avg(1,\
    \ 25))\nprint(rounded_avg(1, 26))\nprint(rounded_avg(1, 27))\nprint(rounded_avg(1,\
    \ 28))\nprint(rounded_avg(1, 29))\nprint(rounded_avg(1, 30))\nprint(rounded_avg(1,\
    \ 31))\nprint(rounded_avg(1, 32))\nprint(rounded_avg(1, 33))\nprint(rounded_avg(1,\
    \ 34))\nprint(rounded_avg(1, 35))\nprint(rounded_avg(1, 36))\nprint(rounded_avg(1,\
    \ 37))\nprint(rounded_avg(1, 38))\nprint(rounded_avg(1, 39))\nprint(rounded_avg(1,\
    \ 40))\nprint(rounded_avg(1, 41))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b10\n0b10\n0b10\n0b11\n0b100\n0b100\n0b100\n0b101\n0b110\n0b110\n0b110\n\
    0b111\n0b1000\n0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n\
    0b1100\n0b1100\n0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n\
    0b10001\n0b10010\n0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ugxj33g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1ugxj33g.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp1ugxj33g.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcn8ab11.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphcn8ab11.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmphcn8ab11.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpako2q8ps.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpako2q8ps.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpako2q8ps.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) /\
    \ 2)\n        return bin(avg)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87vj93j8.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp87vj93j8.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp87vj93j8.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(1, 2)) # 1\nprint(rounded_avg(1, 3)) # 2\nprint(rounded_avg(1,\
    \ 4)) # 2\nprint(rounded_avg(1, 5)) # 3\nprint(rounded_avg(1, 6)) # 3\nprint(rounded_avg(1,\
    \ 7)) # 4\nprint(rounded_avg(1, 8)) # 4\nprint(rounded_avg(1, 9)) # 5\nprint(rounded_avg(1,\
    \ 10)) # 5\nprint(rounded_avg(1, 11)) # 6\nprint(rounded_avg(1, 12)) # 6\nprint(rounded_avg(1,\
    \ 13)) # 7\nprint(rounded_avg(1, 14)) # 7\nprint(rounded_avg(1, 15)) # 8\nprint(rounded_avg(1,\
    \ 16)) # 8\nprint(rounded_avg(1, 17)) # 9\nprint(rounded_avg(1, 18)) # 9\nprint(rounded_avg(1,\
    \ 19)) # 10\nprint(rounded_avg(1, 20)) # 10\nprint(rounded_avg(1, 21)) # 11\n\
    print(rounded_avg(1, 22)) # 11\nprint(rounded_avg(1, 23)) # 12\nprint(rounded_avg(1,\
    \ 24)) # 12\nprint(rounded_avg(1, 25)) # 13\nprint(rounded_avg(1, 26)) # 13\n\
    print(rounded_avg(1, 27)) # 14\nprint(rounded_avg(1, 28)) # 14\nprint(rounded_avg(1,\
    \ 29)) # 15\nprint(rounded_avg(1, 30)) # 15\nprint(rounded_avg(1, 31)) # 16\n\
    print(rounded_avg(1, 32)) # 16\nprint(rounded_avg(1, 33)) # 17\nprint(rounded_avg(1,\
    \ 34)) # 17\nprint(rounded_avg(1, 35)) # 18\nprint(rounded_\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpin7o04nz.py\", line 49\n    print(rounded_\n         ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    return bin(round((n + m) / 2))[2:]\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi0pd95vj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi0pd95vj.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpi0pd95vj.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9s0yutd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx9s0yutd.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpx9s0yutd.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(3, 7))\nprint(rounded_avg(7, 3))\nprint(rounded_avg(2,\
    \ 4))\nprint(rounded_avg(4, 2))\nprint(rounded_avg(1, 1))\nprint(rounded_avg(1,\
    \ 2))\nprint(rounded_avg(2, 1))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(3,\
    \ 1))\nprint(rounded_avg(1, 4))\nprint(rounded_avg(4, 1))\nprint(rounded_avg(1,\
    \ 5))\nprint(rounded_avg(5, 1))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(6,\
    \ 1))\nprint(rounded_avg(1, 7))\nprint(rounded_avg(7, 1))\nprint(rounded_avg(1,\
    \ 8))\nprint(rounded_avg(8, 1))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(9,\
    \ 1))\nprint(rounded_avg(1, 10))\nprint(rounded_avg(10, 1))\nprint(rounded_avg(1,\
    \ 11))\nprint(rounded_avg(11, 1))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(12,\
    \ 1))\nprint(rounded_avg(1, 13))\nprint(rounded_avg(13, 1))\nprint(rounded_avg(1,\
    \ 14))\nprint(rounded_avg(14, 1))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(15,\
    \ 1))\nprint(rounded_avg(1, 16))\nprint(rounded_avg(16, 1))\nprint(rounded_avg(1,\
    \ 17))\nprint(rounded_avg(17, 1))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(18,\
    \ 1))\nprint(rounded_avg(1, 19))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b101\n-1\n0b11\n-1\n0b1\n0b10\n-1\n0b10\n-1\n0b10\n-1\n0b11\n-1\n0b100\n\
    -1\n0b100\n-1\n0b100\n-1\n0b101\n-1\n0b110\n-1\n0b110\n-1\n0b110\n-1\n0b111\n\
    -1\n0b1000\n-1\n0b1000\n-1\n0b1000\n-1\n0b1001\n-1\n0b1010\n-1\n0b1010\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqey9gcr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcqey9gcr.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpcqey9gcr.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpr1uwyk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnpr1uwyk.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpnpr1uwyk.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(3, 7))\nprint(rounded_avg(7, 3))\nprint(rounded_avg(3,\
    \ 3))\nprint(rounded_avg(3, 5))\nprint(rounded_avg(3, 4))\nprint(rounded_avg(3,\
    \ 6))\nprint(rounded_avg(3, 8))\nprint(rounded_avg(3, 9))\nprint(rounded_avg(3,\
    \ 10))\nprint(rounded_avg(3, 11))\nprint(rounded_avg(3, 12))\nprint(rounded_avg(3,\
    \ 13))\nprint(rounded_avg(3, 14))\nprint(rounded_avg(3, 15))\nprint(rounded_avg(3,\
    \ 16))\nprint(rounded_avg(3, 17))\nprint(rounded_avg(3, 18))\nprint(rounded_avg(3,\
    \ 19))\nprint(rounded_avg(3, 20))\nprint(rounded_avg(3, 21))\nprint(rounded_avg(3,\
    \ 22))\nprint(rounded_avg(3, 23))\nprint(rounded_avg(3, 24))\nprint(rounded_avg(3,\
    \ 25))\nprint(rounded_avg(3, 26))\nprint(rounded_avg(3, 27))\nprint(rounded_avg(3,\
    \ 28))\nprint(rounded_avg(3, 29))\nprint(rounded_avg(3, 30))\nprint(rounded_avg(3,\
    \ 31))\nprint(rounded_avg(3, 32))\nprint(rounded_avg(3, 33))\nprint(rounded_avg(3,\
    \ 34))\nprint(rounded_avg(3, 35))\nprint(rounded_avg(3, 36))\nprint(rounded_avg(3,\
    \ 37))\nprint(rounded_avg(3, 38))\nprint(rounded_avg(3, 39))\nprint(rounded_avg(3,\
    \ 40))\nprint(rounded_avg(3, 41))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b101\n-1\n0b11\n0b100\n0b100\n0b100\n0b110\n0b110\n0b110\n0b111\n0b1000\n\
    0b1000\n0b1000\n0b1001\n0b1010\n0b1010\n0b1010\n0b1011\n0b1100\n0b1100\n0b1100\n\
    0b1101\n0b1110\n0b1110\n0b1110\n0b1111\n0b10000\n0b10000\n0b10000\n0b10001\n0b10010\n\
    0b10010\n0b10010\n0b10011\n0b10100\n0b10100\n0b10100\n0b10101\n0b10110\n0b10110\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxukgstx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqxukgstx.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqxukgstx.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpktgl6894.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpktgl6894.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpktgl6894.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2x0bnc2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo2x0bnc2.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpo2x0bnc2.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90lobv9r.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp90lobv9r.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp90lobv9r.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(4, 6))\nprint(rounded_avg(6, 4))\nprint(rounded_avg(5,\
    \ 5))\nprint(rounded_avg(1, 2))\nprint(rounded_avg(2, 1))\nprint(rounded_avg(1,\
    \ 1))\nprint(rounded_avg(1, 3))\nprint(rounded_avg(3, 1))\nprint(rounded_avg(1,\
    \ 4))\nprint(rounded_avg(4, 1))\nprint(rounded_avg(1, 5))\nprint(rounded_avg(5,\
    \ 1))\nprint(rounded_avg(1, 6))\nprint(rounded_avg(6, 1))\nprint(rounded_avg(1,\
    \ 7))\nprint(rounded_avg(7, 1))\nprint(rounded_avg(1, 8))\nprint(rounded_avg(8,\
    \ 1))\nprint(rounded_avg(1, 9))\nprint(rounded_avg(9, 1))\nprint(rounded_avg(1,\
    \ 10))\nprint(rounded_avg(10, 1))\nprint(rounded_avg(1, 11))\nprint(rounded_avg(11,\
    \ 1))\nprint(rounded_avg(1, 12))\nprint(rounded_avg(12, 1))\nprint(rounded_avg(1,\
    \ 13))\nprint(rounded_avg(13, 1))\nprint(rounded_avg(1, 14))\nprint(rounded_avg(14,\
    \ 1))\nprint(rounded_avg(1, 15))\nprint(rounded_avg(15, 1))\nprint(rounded_avg(1,\
    \ 16))\nprint(rounded_avg(16, 1))\nprint(rounded_avg(1, 17))\nprint(rounded_avg(17,\
    \ 1))\nprint(rounded_avg(1, 18))\nprint(rounded_avg(18, 1))\nprint(rounded_avg(1,\
    \ 19))\nprint(rounded_avg(19, 1))\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b101\n-1\n0b101\n0b10\n-1\n0b1\n0b10\n-1\n0b10\n-1\n0b11\n-1\n0b100\n\
    -1\n0b100\n-1\n0b100\n-1\n0b101\n-1\n0b110\n-1\n0b110\n-1\n0b110\n-1\n0b111\n\
    -1\n0b1000\n-1\n0b1000\n-1\n0b1000\n-1\n0b1001\n-1\n0b1010\n-1\n0b1010\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjm54fu5t.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjm54fu5t.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjm54fu5t.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_4yacc6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl_4yacc6.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpl_4yacc6.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog2j7gqh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpog2j7gqh.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpog2j7gqh.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8dvk6vwl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8dvk6vwl.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8dvk6vwl.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n  \
    \  assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1bjwwun.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy1bjwwun.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpy1bjwwun.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjgdimhbu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjgdimhbu.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjgdimhbu.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(2, 4))\nprint(rounded_avg(2, 5))\nprint(rounded_avg(5,\
    \ 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: "0b11\n0b100\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert\
    \ candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rbxnqgj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8rbxnqgj.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp8rbxnqgj.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n>m:\n        return -1\n    else:\n        return bin(round((n+m)/2))[2:]\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv12h4xxi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpv12h4xxi.py\", line 29,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpv12h4xxi.py\", line\
    \ 15, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))\n\nprint(rounded_avg(3, 5))\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  stdout: "0b100\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5koied9u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5koied9u.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp5koied9u.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n                    \"\"\
    \"\n    if n > m:\n        return -1\n    else:\n        return bin(round((n +\
    \ m) / 2))[2:]\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi26i5rq7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi26i5rq7.py\", line 30,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpi26i5rq7.py\", line\
    \ 16, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  exit_code: -1
  status: Exception
