name: HumanEval_46_fib4
language: py
results:
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if\
    \ n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n   \
    \ b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n        e = a + b\
    \ + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a\
    \ non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(n-3):\n  \
    \      a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    if\
    \ n == 6:\n        return 6\n    if n == 7:\n        return 10\n    if n == 8:\n\
    \        return 16\n    if n == 9:\n        return 26\n    if n == 10:\n     \
    \   return 42\n    if n == 11:\n        return 68\n    if n == 12:\n        return\
    \ 110\n    if n == 13:\n        return 178\n    if n == 14:\n        return 288\n\
    \    if n == 15:\n        return 466\n    if n == 16:\n        return 754\n  \
    \  if n == 17:\n        return 1220\n    if n == 18:\n        return 1974\n  \
    \  if n == 19:\n        return 3194\n    if n == 20:\n        return 5168\n  \
    \  if n == 21:\n        return 8362\n    if n == 22:\n        return 13530\n \
    \   if n == 23:\n        return 21892\n    if n == 24:\n        return 35422\n\
    \    if n == 25:\n        return 57314\n    if n == 26:\n        return 92736\n\
    \    if n == 27:\n        return 150050\n    if n == 28:\n        return 242786\n\
    \    if n == 29:\n        return 392836\n    if n == 30:\n        return 635622\n\
    \    if n == 31:\n        return 1028458\n    if n == 32:\n        return 1664080\n\
    \    if n == 33:\n        return 2692538\n    if n == 34:\n        return 4356618\n\
    \    if n == 35:\n        return 7049156\n    if n == 36:\n        return 11405774\n\
    \    if n == 37:\n        return 18454930\n    if n == 38:\n        return 29860704\n\
    \    if n == 39:\n        return 48315634\n    if n == 40:\n        return 78176338\n\
    \    if n == 41:\n        return 126491971\n    if n == 42\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpa9w8ra8r.py\", line 94\n    if n == 42\n             \
    \ ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        n1 = 0\n        n2 = 0\n        n3 = 2\n   \
    \     n4 = 0\n        for i in range(4, n+1):\n            n5 = n1 + n2 + n3 +\
    \ n4\n            n1 = n2\n            n2 = n3\n            n3 = n4\n        \
    \    n4 = n5\n        return n5\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n+1):\n            e = a + b + c + d\n            a, b, c, d = b, c, d, e\n\
    \        return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n \
    \   assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            e = a + b + c + d\n      \
    \      a = b\n            b = c\n            c = d\n            d = e\n      \
    \  return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n \
    \       for i in range(4, n + 1):\n            e = a + b + c + d\n           \
    \ a = b\n            b = c\n            c = d\n            d = e\n        return\
    \ e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    fib4_n_minus_1 = 0\n    fib4_n_minus_2 = 0\n    fib4_n_minus_3 = 2\n\
    \    fib4_n_minus_4 = 0\n    fib4_n = 0\n    for i in range(4, n+1):\n       \
    \ fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3 + fib4_n_minus_4\n\
    \        fib4_n_minus_1 = fib4_n_minus_2\n        fib4_n_minus_2 = fib4_n_minus_3\n\
    \        fib4_n_minus_3 = fib4_n_minus_4\n        fib4_n_minus_4 = fib4_n\n  \
    \  return fib4_n\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    else:\n        a = 0\n        b = 0\n\
    \        c = 2\n        d = 0\n        for i in range(n-4):\n            e = a\
    \ + b + c + d\n            a = b\n            b = c\n            c = d\n     \
    \       d = e\n        return e\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupy5mfsk.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpupy5mfsk.py\", line 41,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpupy5mfsk.py\", line 35, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a\
    \ + b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    a = 0\n    b = 0\n    c = 2\n    d\
    \ = 0\n    for i in range(5, n+1):\n        a, b, c, d = b, c, d, a + b + c +\
    \ d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n \
    \   assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jum41fr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0jum41fr.py\", line 36,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmp0jum41fr.py\", line 30, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if\
    \ n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n   \
    \ b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n        e = a +\
    \ b + c + d\n        a = b\n        b = c\n        c = d\n        d = e\n    return\
    \ d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a\
    \ + b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    a = 0\n    b = 0\n    c = 2\n    d\
    \ = 0\n    for i in range(5, n + 1):\n        a, b, c, d = b, c, d, a + b + c\
    \ + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n\
    \    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjv1eapo.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppjv1eapo.py\", line 36,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmppjv1eapo.py\", line 30, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 4):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return a + b + c + d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a\
    \ non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\
    def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef\
    \ test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n \
    \       for i in range(4, n + 1):\n            e = a + b + c + d\n           \
    \ a = b\n            b = c\n            c = d\n            d = e\n        return\
    \ e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    else:\n        a = 0\n        b = 0\n\
    \        c = 2\n        d = 0\n        for i in range(n-4):\n            a, b,\
    \ c, d = b, c, d, a + b + c + d\n        return d\n\ndef check(candidate):\n \
    \   assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvdtecah.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmphvdtecah.py\", line 36,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmphvdtecah.py\", line 30, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoked25sr.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpoked25sr.py\", line 21,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpoked25sr.py\", line 15, in\
    \ check\n    assert candidate(5) == 4\n  File \"/tmp/tmpoked25sr.py\", line 11,\
    \ in fib4\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a\
    \ + b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmef_z0t5.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmef_z0t5.py\", line 20,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpmef_z0t5.py\", line 14, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if\
    \ n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d\
    \ = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a\
    \ + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        f0 = 0\n        f1 = 0\n        f2 = 2\n   \
    \     f3 = 0\n        for i in range(4, n+1):\n            f4 = f0 + f1 + f2 +\
    \ f3\n            f0 = f1\n            f1 = f2\n            f2 = f3\n        \
    \    f3 = f4\n        return f4\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n\
    def check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\ndef\
    \ test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    if\
    \ n == 6:\n        return 6\n    if n == 7:\n        return 10\n    if n == 8:\n\
    \        return 16\n    if n == 9:\n        return 26\n    if n == 10:\n     \
    \   return 42\n    if n == 11:\n        return 68\n    if n == 12:\n        return\
    \ 110\n    if n == 13:\n        return 178\n    if n == 14:\n        return 288\n\
    \    if n == 15:\n        return 466\n    if n == 16:\n        return 754\n  \
    \  if n == 17:\n        return 1220\n    if n == 18:\n        return 1974\n  \
    \  if n == 19:\n        return 3194\n    if n == 20:\n        return 5168\n  \
    \  if n == 21:\n        return 8362\n    if n == 22:\n        return 13530\n \
    \   if n == 23:\n        return 21892\n    if n == 24:\n        return 35422\n\
    \    if n == 25:\n        return 57314\n    if n == 26:\n        return 92736\n\
    \    if n == 27:\n        return 150050\n    if n == 28:\n        return 242786\n\
    \    if n == 29:\n        return 392836\n    if n == 30:\n        return 635622\n\
    \    if n == 31:\n        return 1028458\n    if n == 32:\n        return 1664080\n\
    \    if n == 33:\n        return 2692538\n    if n == 34:\n        return 4356618\n\
    \    if n == 35:\n        return 7049156\n    if n == 36:\n        return 11405774\n\
    \    if n == 37:\n        return 18454930\n    if n == 38:\n        return 29860704\n\
    \    if n == 39:\n        return 48315634\n    if n == 40:\n        return 78176338\n\
    \    if n == 41:\n        return 126491971\n    if n == 42\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_pa1tkn1.py\", line 94\n    if n == 42\n             \
    \ ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n > 3:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n\
    \        for i in range(n-3):\n            a, b, c, d = b, c, d, a + b + c + d\n\
    \        return d\n\ndef check(candidate):\n    assert candidate(5) == 4\n   \
    \ assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-3):\n\
    \            a, b, c, d = b, c, d, a+b+c+d\n        return d\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a\
    \ + b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n + 1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return d\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(n):\n\
    \        a, b, c, d = b, c, d, a + b + c + d\n    return a\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b,\
    \ c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n   \
    \ assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        fib4_n_minus_1 = 0\n        fib4_n_minus_2 =\
    \ 0\n        fib4_n_minus_3 = 2\n        fib4_n_minus_4 = 0\n        fib4_n =\
    \ 0\n        for i in range(4, n+1):\n            fib4_n = fib4_n_minus_1 + fib4_n_minus_2\
    \ + fib4_n_minus_3 + fib4_n_minus_4\n            fib4_n_minus_1 = fib4_n_minus_2\n\
    \            fib4_n_minus_2 = fib4_n_minus_3\n            fib4_n_minus_3 = fib4_n_minus_4\n\
    \            fib4_n_minus_4 = fib4_n\n        return fib4_n\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(n-3):\n            a, b, c, d = b, c, d, a +\
    \ b + c + d\n        return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n + 1):\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n  \
    \  assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n > 3:\n        a = 0\n        b = 0\n        c = 2\n        d = 0\n\
    \        for i in range(4, n+1):\n            e = a + b + c + d\n            a\
    \ = b\n            b = c\n            c = d\n            d = e\n        return\
    \ e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(n-3):\n  \
    \      a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4,\
    \ n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\
    \n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n\
    def test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    a = 0\n    b = 0\n    c = 2\n    d\
    \ = 0\n    for i in range(n-4):\n        a = b\n        b = c\n        c = d\n\
    \        d = a + b + c + d\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) ==\
    \ 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7a2kk2m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpj7a2kk2m.py\", line 38,\
    \ in test_check\n    check(fib4)\n  File \"/tmp/tmpj7a2kk2m.py\", line 32, in\
    \ check\n    assert candidate(5) == 4\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n\
    \        e = a + b + c + d\n        a = b\n        b = c\n        c = d\n    \
    \    d = e\n    return e\n\n\ndef check(candidate):\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return\
    \ 0\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    if\
    \ n == 6:\n        return 6\n    if n == 7:\n        return 10\n    if n == 8:\n\
    \        return 16\n    if n == 9:\n        return 26\n    if n == 10:\n     \
    \   return 42\n    if n == 11:\n        return 68\n    if n == 12:\n        return\
    \ 110\n    if n == 13:\n        return 178\n    if n == 14:\n        return 288\n\
    \    if n == 15:\n        return 466\n    if n == 16:\n        return 754\n  \
    \  if n == 17:\n        return 1220\n    if n == 18:\n        return 1974\n  \
    \  if n == 19:\n        return 3194\n    if n == 20:\n        return 5168\n  \
    \  if n == 21:\n        return 8362\n    if n == 22:\n        return 13530\n \
    \   if n == 23:\n        return 21892\n    if n == 24:\n        return 35422\n\
    \    if n == 25:\n        return 57314\n    if n == 26:\n        return 92736\n\
    \    if n == 27:\n        return 150050\n    if n == 28:\n        return 242786\n\
    \    if n == 29:\n        return 392836\n    if n == 30:\n        return 635622\n\
    \    if n == 31:\n        return 1028458\n    if n == 32:\n        return 1664080\n\
    \    if n == 33:\n        return 2692538\n    if n == 34:\n        return 4356618\n\
    \    if n == 35:\n        return 7049156\n    if n == 36:\n        return 11405774\n\
    \    if n == 37:\n        return 18454930\n    if n == 38:\n        return 29860704\n\
    \    if n == 39:\n        return 48315634\n    if n == 40:\n        return 78176338\n\
    \    if n == 41:\n        return 126491971\n    if n == 42\ndef check(candidate):\n\
    \    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10)\
    \ == 104\n    assert candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpir_6bclm.py\", line 94\n    if n == 42\n             \
    \ ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\"\
    )\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if\
    \ n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d\
    \ = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a\
    \ + b + c + d\n    return d\n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        a = 0\n        b = 0\n        c = 2\n      \
    \  d = 0\n        for i in range(4, n+1):\n            e = a + b + c + d\n   \
    \         a = b\n            b = c\n            c = d\n            d = e\n   \
    \     return e\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12)\
    \ == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence\
    \ similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) ->\
    \ 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently\
    \ compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\
    \                \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n\
    \        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n    \
    \    return 0\n    else:\n        fib4_n_minus_1 = 0\n        fib4_n_minus_2 =\
    \ 0\n        fib4_n_minus_3 = 2\n        fib4_n_minus_4 = 0\n        for i in\
    \ range(4, n+1):\n            fib4_n = fib4_n_minus_1 + fib4_n_minus_2 + fib4_n_minus_3\
    \ + fib4_n_minus_4\n            fib4_n_minus_1 = fib4_n_minus_2\n            fib4_n_minus_2\
    \ = fib4_n_minus_3\n            fib4_n_minus_3 = fib4_n_minus_4\n            fib4_n_minus_4\
    \ = fib4_n\n        return fib4_n\n\ndef check(candidate):\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert\
    \ candidate(12) == 386\n\ndef test_check():\n    check(fib4)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
