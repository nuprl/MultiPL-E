name: HumanEval_116_sort_array
language: py
prompt: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
  \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n                \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4,\
  \ 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n  \
  \  assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
  \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4,\
  \ 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32, 3,\
  \ 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
  \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
  \    check(sort_array)\n\ntest_check()\n"
completions: ["    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "  \
    \  return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    #\
    \ sort by number of ones in binary representation\n    arr.sort(key=lambda x:\
    \ bin(x).count('1'))\n    # sort by decimal value\n    arr.sort()\n    return\
    \ arr\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n",
  "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))\n\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", " \
    \   return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))\n\nprint(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\
    print(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sort_array([1024,\
    \ 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))\nprint(sort_array([10000, 10000]))\n\
    print(sort_array([2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))\nprint(sort_array([2,\
    \ 3, 5, 7, 11, 13, 17, 19]))\nprint(sort_array([10, 100, 1000, 10000]))", "  \
    \  return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", " \
    \   return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", " \
    \   return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))\n", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))\n\n\nprint(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\
    print(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sort_array([1024,\
    \ 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))\nprint(sort_array([10000, 10000]))\n\
    print(sort_array([2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))", "   \
    \ return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))\n\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", " \
    \   return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda n: (bin(n).count('1'),\
    \ n))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))\n\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))\n\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))\n\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", " \
    \   return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "  \
    \  return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))\n", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return\
    \ sorted(arr, key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x:\
    \ (bin(x).count('1'), x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'),\
    \ x))", "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
