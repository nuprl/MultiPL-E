name: HumanEval_111_histogram
language: py
results:
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        histogram[letter] = histogram.get(letter,\
    \ 0) + 1\n    max_count = max(histogram.values())\n    return {letter: count for\
    \ letter, count in histogram.items() if count == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3h9ugl13.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3h9ugl13.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3h9ugl13.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8lnh_c3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpg8lnh_c3.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpg8lnh_c3.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    # TODO:\
    \ implement me\n    pass\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphoko8iok.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphoko8iok.py\", line 25,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphoko8iok.py\", line 15,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    # Create\
    \ a dictionary to store the letter and the count\n    histogram = {}\n    # Split\
    \ the string into a list of words\n    words = test.split()\n    # Iterate over\
    \ the words\n    for word in words:\n        # If the word is not in the dictionary,\
    \ add it\n        if word not in histogram:\n            histogram[word] = 1\n\
    \        # If the word is in the dictionary, increment the count\n        else:\n\
    \            histogram[word] += 1\n    # Return the dictionary\n    return histogram\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ff9vc6s.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9ff9vc6s.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9ff9vc6s.py\", line 28,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_3nq0zg.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpz_3nq0zg.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpz_3nq0zg.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeiv491gy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeiv491gy.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpeiv491gy.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_ctujjr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd_ctujjr.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpd_ctujjr.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gykzkna.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8gykzkna.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8gykzkna.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.split()\n    test = [x.lower() for x in test]\n    d = {}\n    for x\
    \ in test:\n        if x in d:\n            d[x] += 1\n        else:\n       \
    \     d[x] = 1\n    max_value = max(d.values())\n    max_keys = [k for k, v in\
    \ d.items() if v == max_value]\n    return max_keys\n\nprint(histogram(\"a b c\
    \ d e f\"))\nprint(histogram(\"a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d\
    \ e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a\
    \ b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c\
    \ d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c\
    \ d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e\
    \ f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f\"))\nprint(histogram(\"a b\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzej3red8.py\", line 33\n    print(histogram(\"a b\n  \
    \                  ^\nSyntaxError: unterminated string literal (detected at line\
    \ 33)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hd9ncqu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_hd9ncqu.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_hd9ncqu.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\nprint(histogram(\"a b c d e\
    \ f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\n\
    print(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c\
    \ d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c\
    \ d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c d e\
    \ f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a\
    \ b c d e f\ndef check(candidate):\n    assert candidate('a b b a') == { 'a':\
    \ 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpd5x5b7_8.py\", line 26\n    print(histogram(\"a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f\n                    ^\nSyntaxError: unterminated\
    \ string literal (detected at line 26)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptg3wuvrl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptg3wuvrl.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptg3wuvrl.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfpjp9ko.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkfpjp9ko.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkfpjp9ko.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpdzlcwd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphpdzlcwd.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphpdzlcwd.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0b1kiot0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0b1kiot0.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0b1kiot0.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    # Create\
    \ a dictionary of the letters and their counts\n    counts = {}\n    for letter\
    \ in test:\n        if letter in counts:\n            counts[letter] += 1\n  \
    \      else:\n            counts[letter] = 1\n    \n    # Find the maximum count\n\
    \    max_count = 0\n    for count in counts.values():\n        if count > max_count:\n\
    \            max_count = count\n    \n    # Find the letters with the maximum\
    \ count\n    max_letters = []\n    for letter, count in counts.items():\n    \
    \    if count == max_count:\n            max_letters.append(letter)\n    \n  \
    \  # Return the dictionary\n    return {letter: max_count for letter in max_letters}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkrfc7lk.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpfkrfc7lk.py\", line 45,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfkrfc7lk.py\", line 35,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetga2pof.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpetga2pof.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpetga2pof.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k:v for k,v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8705w_go.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8705w_go.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8705w_go.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp735cgepx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp735cgepx.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp735cgepx.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \nprint(histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n\
    print(histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z\"))\nprint(histogram(\"a b c d e\
    \ f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n\
    print(histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{' ': 25}\n{' ': 51}\n{' ': 77}\n{' ': 103}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9vrpg7ai.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9vrpg7ai.py\", line 36,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9vrpg7ai.py\", line 26,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    d =\
    \ {}\n    for c in test:\n        if c in d:\n            d[c] += 1\n        else:\n\
    \            d[c] = 1\n    max_value = max(d.values())\n    return {k: v for k,\
    \ v in d.items() if v == max_value}\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvfrbn8v.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzvfrbn8v.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzvfrbn8v.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfjqbdde.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxfjqbdde.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxfjqbdde.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp269df1sw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp269df1sw.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp269df1sw.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3fe_q4f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj3fe_q4f.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpj3fe_q4f.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae6g0l9g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpae6g0l9g.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpae6g0l9g.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0s1z9yc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc0s1z9yc.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpc0s1z9yc.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    max_letters = [letter for letter in hist if hist[letter] == max_count]\n\
    \    return {letter: max_count for letter in max_letters}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0442_cqa.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0442_cqa.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0442_cqa.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvi7j1z2v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvi7j1z2v.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpvi7j1z2v.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfea0i8l.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcfea0i8l.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpcfea0i8l.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw49xxre3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpw49xxre3.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpw49xxre3.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpii0vq2ll.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpii0vq2ll.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpii0vq2ll.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikct720h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpikct720h.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpikct720h.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtjmo3tj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvtjmo3tj.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpvtjmo3tj.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9kloxig.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc9kloxig.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpc9kloxig.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \nprint(histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: "{' ': 25}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4xu6lq8x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4xu6lq8x.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4xu6lq8x.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82y6ur33.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp82y6ur33.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp82y6ur33.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89ued09n.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp89ued09n.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp89ued09n.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzq74gnwc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzq74gnwc.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzq74gnwc.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    d = {}\n    for word in test:\n\
    \        for letter in word:\n            if letter in d:\n                d[letter]\
    \ += 1\n            else:\n                d[letter] = 1\n    return d\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpogqse8i5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpogqse8i5.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpogqse8i5.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8jjo7by.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpx8jjo7by.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpx8jjo7by.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2i6r5z4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz2i6r5z4.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpz2i6r5z4.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp059b00wu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp059b00wu.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp059b00wu.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjrlqt_3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppjrlqt_3.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppjrlqt_3.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vn7exw1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5vn7exw1.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5vn7exw1.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    test = ''.join(test)\n    hist\
    \ = {}\n    for i in test:\n        hist[i] = hist.get(i, 0) + 1\n    return hist\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nv8gbop.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2nv8gbop.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2nv8gbop.py\", line 21,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk0uy7n51.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk0uy7n51.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpk0uy7n51.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_value = max(hist.values())\n    return {key: value for key, value\
    \ in hist.items() if value == max_value}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnewxw0d5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnewxw0d5.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpnewxw0d5.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lf8rxq8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2lf8rxq8.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2lf8rxq8.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    return hist\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bihv0wt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4bihv0wt.py\", line 27,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4bihv0wt.py\", line 17,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxv02kqkf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxv02kqkf.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxv02kqkf.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1ntdgai.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo1ntdgai.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpo1ntdgai.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp11ei2ex.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp11ei2ex.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp11ei2ex.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbj7pfl0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphbj7pfl0.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphbj7pfl0.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphstlw5gg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmphstlw5gg.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphstlw5gg.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpka6xyuf_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpka6xyuf_.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpka6xyuf_.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggub2uv4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpggub2uv4.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpggub2uv4.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sclv58t.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9sclv58t.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9sclv58t.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_val = max(hist.values())\n\
    \    return {k:v for k,v in hist.items() if v == max_val}\n\nprint(histogram(\"\
    aabbbcccccdddddd\"))\nprint(histogram(\"aabbbcccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5myr8rw6.py\", line 21\n    print(histogram(\"aabbbcccccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\n\
    \                    ^\nSyntaxError: unterminated string literal (detected at\
    \ line 21)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8asjzdj4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8asjzdj4.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8asjzdj4.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    return hist\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqc6n8n_y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqc6n8n_y.py\", line 27,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqc6n8n_y.py\", line 17,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6diootlq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6diootlq.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6diootlq.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07hm7v0c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp07hm7v0c.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp07hm7v0c.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4xo69ba.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa4xo69ba.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpa4xo69ba.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxa4v478.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvxa4v478.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpvxa4v478.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwzy93e1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxwzy93e1.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxwzy93e1.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqrmti8y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmprqrmti8y.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmprqrmti8y.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpws_mep8v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpws_mep8v.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpws_mep8v.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    test = \"\".join(test)\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxp9s13nv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxp9s13nv.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxp9s13nv.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgd3ie9vj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgd3ie9vj.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgd3ie9vj.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgijm66g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfgijm66g.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfgijm66g.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z0rr97q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4z0rr97q.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4z0rr97q.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkcod59vj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkcod59vj.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkcod59vj.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwynnjsce.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwynnjsce.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwynnjsce.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    max_letters = [letter for letter in hist if hist[letter] == max_count]\n\
    \    return {letter: max_count for letter in max_letters}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvfpgia4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqvfpgia4.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqvfpgia4.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyjbkj8k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphyjbkj8k.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphyjbkj8k.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwcpmjzi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwwcpmjzi.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwwcpmjzi.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7xie6pz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo7xie6pz.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpo7xie6pz.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_value = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_value}\n\nprint(histogram(\"\
    aabbbcccdddd\"))\nprint(histogram(\"aabbbcccddddeeeee\"))\nprint(histogram(\"\
    aabbbcccddddeeeeeffffff\"))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggg\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhh\"))\nprint(histogram(\"\
    aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiii\"))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjj\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkk\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkklllllllllll\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkklllllllllllmmmmmmmmmmmmmm\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkklllllllllllmmmmmmmmmmmmmmnnnnnnnnnnnnnnn\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkklllllllllllmmmmmmmmmmmmmmnnnnnnnnnnnnnnnooooooooooooooo\"\
    ))\nprint(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkk\n\
    def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxtfb_a3z.py\", line 32\n    print(histogram(\"aabbbcccddddeeeeeffffffggggggghhhhhhhhiiiiiiiijjjjjjjjjkkkkkkkkkk\n\
    \                    ^\nSyntaxError: unterminated string literal (detected at\
    \ line 32)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter:count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperdhn9_7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmperdhn9_7.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmperdhn9_7.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.split()\n    test_dict = {}\n    for word in test:\n        if word in\
    \ test_dict:\n            test_dict[word] += 1\n        else:\n            test_dict[word]\
    \ = 1\n    return test_dict\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5fgelcbi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5fgelcbi.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5fgelcbi.py\", line 22,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbtnfwf5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwbtnfwf5.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpwbtnfwf5.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10zh_tni.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp10zh_tni.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp10zh_tni.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhdoeg06.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqhdoeg06.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqhdoeg06.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2mp3eko.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph2mp3eko.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmph2mp3eko.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpar50p_d2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpar50p_d2.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpar50p_d2.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjc_994vu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjc_994vu.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjc_994vu.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char not in hist:\n            hist[char]\
    \ = 1\n        else:\n            hist[char] += 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpans2usgs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpans2usgs.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpans2usgs.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8alfg87g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8alfg87g.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8alfg87g.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtsww0nt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdtsww0nt.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdtsww0nt.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnix57t_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgnix57t_.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpgnix57t_.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpom_fknvu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpom_fknvu.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpom_fknvu.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5swfu1sx.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5swfu1sx.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5swfu1sx.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {key: value for key, value in hist.items() if value == max_count}\n\
    \nprint(histogram(\"aabbccddee\"))\nprint(histogram(\"aabbccddeeff\"))\nprint(histogram(\"\
    aabbccddeeffgg\"))\nprint(histogram(\"aabbccddeeffgggg\"))\nprint(histogram(\"\
    aabbccddeeffgggggg\"))\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: "{'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2}\n{'a': 2, 'b': 2, 'c': 2, 'd':\
    \ 2, 'e': 2, 'f': 2}\n{'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2}\n\
    {'g': 4}\n{'g': 6}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuct9upnm.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpuct9upnm.py\", line 37,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuct9upnm.py\", line 27,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyasvkj06.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyasvkj06.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpyasvkj06.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dl9gn8v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0dl9gn8v.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0dl9gn8v.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8fkc5wi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu8fkc5wi.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpu8fkc5wi.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a232a04.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4a232a04.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4a232a04.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wobq0el.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4wobq0el.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4wobq0el.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfz3ty53j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfz3ty53j.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfz3ty53j.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijwa0m1o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpijwa0m1o.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpijwa0m1o.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.split()\n    test_dict = {}\n    for i in test:\n        if i in test_dict:\n\
    \            test_dict[i] += 1\n        else:\n            test_dict[i] = 1\n\
    \    return test_dict\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmneaa8e.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplmneaa8e.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplmneaa8e.py\", line 22,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.split()\n    test.sort()\n    d = {}\n    for i in test:\n        if\
    \ i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return\
    \ d\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxy2ms6_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyxy2ms6_.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpyxy2ms6_.py\", line 23,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\nprint(histogram(\"a b c d e\
    \ f\"))\nprint(histogram(\"aabbccddeeff\"))\nprint(histogram(\"aabbccddeeffgg\"\
    ))\nprint(histogram(\"aabbccddeeffgg\"))\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{' ': 5}\n{'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2}\n{'a': 2, 'b':\
    \ 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2, 'g': 2}\n{'a': 2, 'b': 2, 'c': 2, 'd': 2,\
    \ 'e': 2, 'f': 2, 'g': 2}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplq99npo7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplq99npo7.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplq99npo7.py\", line 23,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.split()\n    test_dict = {}\n    for word in test:\n        if word in\
    \ test_dict:\n            test_dict[word] += 1\n        else:\n            test_dict[word]\
    \ = 1\n    return test_dict\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetoqkckc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpetoqkckc.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpetoqkckc.py\", line 22,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_45raar.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0_45raar.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0_45raar.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi09gd5py.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi09gd5py.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpi09gd5py.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhfk88pb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuhfk88pb.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuhfk88pb.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjobe30pt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjobe30pt.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjobe30pt.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmst10b97.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmst10b97.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmst10b97.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwruyah3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuwruyah3.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuwruyah3.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \nprint(histogram(\"aabbbccccdddd\"))\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: "{'c': 4, 'd': 4}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprakj2c6p.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprakj2c6p.py\", line 32,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmprakj2c6p.py\", line 22,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_kwtduj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpe_kwtduj.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpe_kwtduj.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrtv7a63.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplrtv7a63.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplrtv7a63.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhfhagcf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplhfhagcf.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplhfhagcf.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzn70fym0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzn70fym0.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzn70fym0.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25i8czdj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp25i8czdj.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp25i8czdj.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k:v for k,v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tq3f5dv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp3tq3f5dv.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3tq3f5dv.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdwchxg95.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdwchxg95.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdwchxg95.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6q9456mw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6q9456mw.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6q9456mw.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg92uqa0f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpg92uqa0f.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpg92uqa0f.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    max_letters = [letter for letter,\
    \ count in hist.items() if count == max_count]\n    return {letter: max_count\
    \ for letter in max_letters}\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq22egex5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpq22egex5.py\", line 29,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpq22egex5.py\", line 19,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbq0jygx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzbq0jygx.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzbq0jygx.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cm25mqf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3cm25mqf.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3cm25mqf.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4i4pqvu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj4i4pqvu.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpj4i4pqvu.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5ifnl6u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf5ifnl6u.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpf5ifnl6u.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnivym95a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnivym95a.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpnivym95a.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvb1ta8x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfvb1ta8x.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfvb1ta8x.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsleb4p4x.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsleb4p4x.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpsleb4p4x.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \nprint(histogram(\"a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f\"\
    ))\nprint(histogram(\"a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\n\
    print(histogram(\"a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c\
    \ d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\"))\nprint(histogram(\"\
    a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c\
    \ d e f a b c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c d e\
    \ f a b c d e f a b c d e f a\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp665xl2o6.py\", line 30\n    print(histogram(\"a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a\n                    ^\n\
    SyntaxError: unterminated string literal (detected at line 30)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4s_ivmg6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4s_ivmg6.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4s_ivmg6.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n  \
    \  max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if\
    \ v == max_count}\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuilpzuqk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuilpzuqk.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuilpzuqk.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5hahcwq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi5hahcwq.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpi5hahcwq.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\nprint(histogram(\"\
    a b c d e f\"))\nprint(histogram(\"a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2k5r8ukq.py\", line 21\n    print(histogram(\"a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b\
    \ c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\
    \ e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f\
    \ a b c d e f a b c d e f a b c d e f a b c d e f a b c d e f a b c d\n      \
    \              ^\nSyntaxError: unterminated string literal (detected at line 21)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggul8dj5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpggul8dj5.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpggul8dj5.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2azqrx2q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2azqrx2q.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp2azqrx2q.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp716ucau_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp716ucau_.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp716ucau_.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmefue30.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsmefue30.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpsmefue30.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_xwqsh0m.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_xwqsh0m.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_xwqsh0m.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrxqbqas.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplrxqbqas.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmplrxqbqas.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggoa3t5f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpggoa3t5f.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpggoa3t5f.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptebcpu5k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptebcpu5k.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptebcpu5k.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwld0c52.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptwld0c52.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptwld0c52.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    # find the max count\n\
    \    max_count = 0\n    for letter in hist:\n        if hist[letter] > max_count:\n\
    \            max_count = hist[letter]\n    # find all letters with max count\n\
    \    max_letters = []\n    for letter in hist:\n        if hist[letter] == max_count:\n\
    \            max_letters.append(letter)\n    return {letter: max_count for letter\
    \ in max_letters}\n\ndef check(candidate):\n    assert candidate('a b b a') ==\
    \ { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1\
    \ }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b\
    \ b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a':\
    \ 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp607lmb3q.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp607lmb3q.py\", line 40,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp607lmb3q.py\", line 30,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7rbwa2s.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp7rbwa2s.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp7rbwa2s.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfz74epuq.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfz74epuq.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfz74epuq.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoeepivsa.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpoeepivsa.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpoeepivsa.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpivl4ta1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpivl4ta1x.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpivl4ta1x.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_dvke_w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6_dvke_w.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6_dvke_w.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpll2u0huk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpll2u0huk.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpll2u0huk.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histo\
    \ = {}\n    for letter in test:\n        if letter in histo:\n            histo[letter]\
    \ += 1\n        else:\n            histo[letter] = 1\n    return histo\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcxfro1d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvcxfro1d.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpvcxfro1d.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoflugptl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpoflugptl.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpoflugptl.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_val = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_val}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b3ovnho.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5b3ovnho.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5b3ovnho.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsdz8pasp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsdz8pasp.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpsdz8pasp.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_8cpknb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp_8cpknb.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpp_8cpknb.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    d =\
    \ {}\n    for letter in test:\n        if letter in d:\n            d[letter]\
    \ += 1\n        else:\n            d[letter] = 1\n    return d\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxndzxs0s.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxndzxs0s.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxndzxs0s.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c not in hist:\n            hist[c] = 1\n\
    \        else:\n            hist[c] += 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5flvbl9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpj5flvbl9.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpj5flvbl9.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    test = \"\".join(test)\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgtsip18.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfgtsip18.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpfgtsip18.py\", line 27,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpfgtsip18.py\",\
    \ line 17, in histogram\n    max_count = max(hist.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    d =\
    \ {}\n    for c in test:\n        if c in d:\n            d[c] += 1\n        else:\n\
    \            d[c] = 1\n    return d\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94n2r3r0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp94n2r3r0.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp94n2r3r0.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuaodjc4b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpuaodjc4b.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpuaodjc4b.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6z4askfu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6z4askfu.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp6z4askfu.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxpfcchs.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdxpfcchs.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdxpfcchs.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2dvjggm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpd2dvjggm.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpd2dvjggm.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_value = max(hist.values())\n    return {k: v for k, v in hist.items()\
    \ if v == max_value}\n\nprint(histogram(\"hello world\"))\nprint(histogram(\"\
    hello world hello world\"))\nprint(histogram(\"hello world hello world hello world\"\
    ))\nprint(histogram(\"hello world hello world hello world hello world\"))\nprint(histogram(\"\
    hello world hello world hello world hello world hello world\"))\nprint(histogram(\"\
    hello world hello world hello world hello world hello world hello world\"))\n\
    print(histogram(\"hello world hello world hello world hello world hello world\
    \ hello world hello world\"))\nprint(histogram(\"hello world hello world hello\
    \ world hello world hello world hello world hello world hello world\"))\nprint(histogram(\"\
    hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world\"))\nprint(histogram(\"hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world\"))\nprint(histogram(\"hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world\"))\nprint(histogram(\"hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world\"))\nprint(histogram(\"hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world\"))\nprint(histogram(\"\
    hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world\"))\nprint(histogram(\"hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world\"))\nprint(histogram(\"\
    hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world\"))\nprint(histogram(\"hello world hello\
    \ world hello world hello world hello world hello world hello world hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world hello world hello world\"))\nprint(histogram(\"hello world hello world\
    \ hello world hello world hello world hello world hello world hello world\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5wqa2s5j.py\", line 34\n    print(histogram(\"hello world\
    \ hello world hello world hello world hello world hello world hello world hello\
    \ world\n                    ^\nSyntaxError: unterminated string literal (detected\
    \ at line 34)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5issl6f.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_5issl6f.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp_5issl6f.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1pcw9ays.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1pcw9ays.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp1pcw9ays.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpac_upq7a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpac_upq7a.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpac_upq7a.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    max_count = max(hist.values())\n\
    \    return {k:v for k,v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0kjfas5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpb0kjfas5.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpb0kjfas5.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split(\" \")\n    test = \"\".join(test)\n \
    \   hist = {}\n    for letter in test:\n        if letter in hist:\n         \
    \   hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return\
    \ hist\n\ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert\
    \ candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b\
    \ b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g':\
    \ 1 }\n    assert candidate('') == {  }\n    assert candidate('a') == { 'a': 1\
    \ }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbpb74ss.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphbpb74ss.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmphbpb74ss.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_19wdbz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps_19wdbz.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmps_19wdbz.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzafrpzp1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzafrpzp1.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpzafrpzp1.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiggtx9zp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiggtx9zp.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpiggtx9zp.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxfzz628z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxfzz628z.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpxfzz628z.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5pskjo2m.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5pskjo2m.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp5pskjo2m.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_val = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_val}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31ocbvos.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp31ocbvos.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp31ocbvos.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4oxffceb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4oxffceb.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp4oxffceb.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    max_count = max(hist.values())\n    return {letter: count for letter,\
    \ count in hist.items() if count == max_count}\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zppwwbv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7zppwwbv.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp7zppwwbv.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    test = \"\".join(test)\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_value = max(hist.values())\n\
    \    max_keys = [k for k, v in hist.items() if v == max_value]\n    return {k:\
    \ max_value for k in max_keys}\n\ndef check(candidate):\n    assert candidate('a\
    \ b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2,\
    \ 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd':\
    \ 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n \
    \   assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g')\
    \ == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuzi078i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjuzi078i.py\", line 35,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpjuzi078i.py\", line 31,\
    \ in check\n    assert candidate('') == {  }\n  File \"/tmp/tmpjuzi078i.py\",\
    \ line 20, in histogram\n    max_value = max(hist.values())\nValueError: max()\
    \ arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmcmxc_ou.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmcmxc_ou.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmcmxc_ou.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp12caiyiv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp12caiyiv.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp12caiyiv.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeq72casz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeq72casz.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpeq72casz.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    d = {}\n    for word in test:\n\
    \        for letter in word:\n            if letter in d:\n                d[letter]\
    \ += 1\n            else:\n                d[letter] = 1\n    return d\n\ndef\
    \ check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n \
    \   assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w2lwsm2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9w2lwsm2.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp9w2lwsm2.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgwkku1h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqgwkku1h.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpqgwkku1h.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0aslqly4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0aslqly4.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp0aslqly4.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcmr8405g.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcmr8405g.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpcmr8405g.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    max_letters = [letter for letter in hist if hist[letter] == max_count]\n\
    \    return {letter: max_count for letter in max_letters}\n\nprint(histogram(\"\
    a b c d e f\"))\nprint(histogram(\"a b c d e f a\"))\nprint(histogram(\"a b c\
    \ d e f a a\"))\nprint(histogram(\"a b c d e f a a a\"))\nprint(histogram(\"a\
    \ b c d e f a a a a\"))\nprint(histogram(\"a b c d e f a a a a a\"))\nprint(histogram(\"\
    a b c d e f a a a a a a\"))\nprint(histogram(\"a b c d e f a a a a a a a\"))\n\
    print(histogram(\"a b c d e f a a a a a a a a\"))\nprint(histogram(\"a b c d e\
    \ f a a a a a a a a a\"))\nprint(histogram(\"a b c d e f a a a a a a a a a a\"\
    ))\nprint(histogram(\"a b c d e f a a a a a a a a a a a\"))\nprint(histogram(\"\
    a b c d e f a a a a a a a a a a a a\"))\nprint(histogram(\"a b c d e f a a a a\
    \ a a a a a a a a a\"))\nprint(histogram(\"a b c d e f a a a a a a a a a a a a\
    \ a a\"))\nprint(histogram(\"a b c d e f a a a a a a a a a a a a a a a\"))\nprint(histogram(\"\
    a b c d e f a a a a a a a a a a a a a a a a\"))\nprint(histogram(\"a b c d e f\
    \ a a a a a a a a a a a a a a a a a\"))\nprint(histogram(\"a b c d e f a a a a\
    \ a a a a a a a a a a a a a a\"))\nprint(hist\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp78nq8dzf.py\", line 40\n    print(hist\n         ^\nSyntaxError:\
    \ '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    d =\
    \ {}\n    for c in test:\n        if c not in d:\n            d[c] = 1\n     \
    \   else:\n            d[c] += 1\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8tmeywk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt8tmeywk.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpt8tmeywk.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdc7rabbo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdc7rabbo.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpdc7rabbo.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    max_count = max(hist.values())\n\
    \    return {letter: count for letter, count in hist.items() if count == max_count}\n\
    \ndef check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n\
    \    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == {\
    \ 'b': 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('') == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n\
    \    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zvitnwq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8zvitnwq.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8zvitnwq.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    histogram\
    \ = {}\n    for letter in test:\n        if letter in histogram:\n           \
    \ histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n \
    \   return histogram\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99lagu6u.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp99lagu6u.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp99lagu6u.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpmdhi3c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcpmdhi3c.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpcpmdhi3c.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n  \
    \  max_count = max(hist.values())\n    return {key: value for key, value in hist.items()\
    \ if value == max_count}\n\ndef check(candidate):\n    assert candidate('a b b\
    \ a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b':\
    \ 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1,\
    \ 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqzknf6p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmqzknf6p.py\", line 28,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmqzknf6p.py\", line 18,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3dac9k8c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3dac9k8c.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp3dac9k8c.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkozym1q6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkozym1q6.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpkozym1q6.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for char in test:\n        if char in hist:\n            hist[char]\
    \ += 1\n        else:\n            hist[char] = 1\n    max_count = max(hist.values())\n\
    \    return {k: v for k, v in hist.items() if v == max_count}\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpca295tj5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpca295tj5.py\", line 31,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpca295tj5.py\", line 21,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnpe40el.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmptnpe40el.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmptnpe40el.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    d =\
    \ {}\n    for c in test:\n        if c not in d:\n            d[c] = 1\n     \
    \   else:\n            d[c] += 1\n    return d\n\ndef check(candidate):\n    assert\
    \ candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1,\
    \ 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1,\
    \ 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r\
    \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert\
    \ candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__ar0dux.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp__ar0dux.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp__ar0dux.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        hist[letter] = hist.get(letter, 0) +\
    \ 1\n    return hist\n\ndef check(candidate):\n    assert candidate('a b b a')\
    \ == { 'a': 2, 'b': 2 }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2\
    \ }\n    assert candidate('a b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g':\
    \ 1 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert\
    \ candidate('b b b b a') == { 'b': 4 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('') == {  }\n    assert candidate('a')\
    \ == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fg5o_ot.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8fg5o_ot.py\", line 27,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp8fg5o_ot.py\", line 17,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n\
    \        else:\n            hist[c] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppcpz7dyw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppcpz7dyw.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmppcpz7dyw.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    test\
    \ = test.lower()\n    test = test.split()\n    test = ''.join(test)\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhst9moy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmhst9moy.py\", line 33,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmpmhst9moy.py\", line 24,\
    \ in check\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
    \    \"\"\"Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n    of the letter with the most repetition and containing the\
    \ corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n                    \n    \"\"\"\n    hist\
    \ = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter]\
    \ += 1\n        else:\n            hist[letter] = 1\n    return hist\n\ndef check(candidate):\n\
    \    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
    \ b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a b c d g') == { 'a':\
    \ 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r t g') == { 'r':\
    \ 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b': 4 }\n    assert\
    \ candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('') ==\
    \ {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61gn444q.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp61gn444q.py\", line 30,\
    \ in test_check\n    check(histogram)\n  File \"/tmp/tmp61gn444q.py\", line 20,\
    \ in check\n    assert candidate('a b b a') == { 'a': 2, 'b': 2 }\nAssertionError\n"
  exit_code: -1
  status: Exception
