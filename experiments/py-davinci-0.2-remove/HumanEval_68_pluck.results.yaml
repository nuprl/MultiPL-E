language: py
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    smallest_even = None\n\
    \    smallest_even_index = None\n    for i, node in enumerate(arr):\n        if\
    \ node % 2 == 0:\n            if smallest_even is None or node < smallest_even:\n\
    \                smallest_even = node\n                smallest_even_index = i\n\
    \    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr\
    \ if n % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i,\
    \ n in enumerate(arr):\n        if n % 2 == 0:\n            evens.append([n, i])\n\
    \    if evens:\n        evens.sort()\n        return evens[0]\n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i,\
    \ v in enumerate(arr):\n        if v % 2 == 0:\n            evens.append((v, i))\n\
    \    if evens:\n        return min(evens)\n    return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdg6se6g.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpkdg6se6g.py\", line 47,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkdg6se6g.py\", line 37, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num\
    \ in arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    smallest_even\
    \ = min(even_nums)\n    smallest_even_index = arr.index(smallest_even)\n    return\
    \ [smallest_even, smallest_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = []\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n\
    \            evens.append([n, i])\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return evens[0]\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr\
    \ if n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    even_nodes = [node for node in arr if node % 2 == 0]\n  \
    \  if len(even_nodes) == 0:\n        return []\n    min_even = min(even_nodes)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    evens.sort()\n    return [evens[0], arr.index(evens[0])]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bew3fh4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp4bew3fh4.py\", line 42,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4bew3fh4.py\", line 32, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n\
    \            evens.append([v, i])\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return evens[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i,\
    \ v in enumerate(arr):\n        if v % 2 == 0:\n            evens.append([v, i])\n\
    \    if evens:\n        return min(evens)\n    return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    return [0, 0]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq0h0v95.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwq0h0v95.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwq0h0v95.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr\
    \ if n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i,\
    \ node in enumerate(arr):\n        if node % 2 == 0:\n            evens.append([node,\
    \ i])\n    if evens:\n        return min(evens)\n    return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num\
    \ in arr if num % 2 == 0]\n    if even_nums:\n        min_even = min(even_nums)\n\
    \        min_even_idx = arr.index(min_even)\n        return [min_even, min_even_idx]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # if the array is empty,\
    \ return []\n    if len(arr) == 0:\n        return []\n    # if the array is not\
    \ empty, find the smallest even value\n    smallest_even = None\n    for i in\
    \ range(len(arr)):\n        if arr[i] % 2 == 0:\n            if smallest_even\
    \ is None:\n                smallest_even = arr[i]\n            else:\n      \
    \          if arr[i] < smallest_even:\n                    smallest_even = arr[i]\n\
    \    # if there are no even values, return []\n    if smallest_even is None:\n\
    \        return []\n    # if there are even values, find the index of the smallest\
    \ even value\n    smallest_even_index = None\n    for i in range(len(arr)):\n\
    \        if arr[i] == smallest_even:\n            if smallest_even_index is None:\n\
    \                smallest_even_index = i\n            else:\n                if\
    \ i < smallest_even_index:\n                    smallest_even_index = i\n    #\
    \ return the smallest even value and its index\n    return [smallest_even, smallest_even_index]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [n for n in arr\
    \ if n % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nodes = [node for\
    \ node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n \
    \   smallest_even = min(even_nodes)\n    smallest_even_index = arr.index(smallest_even)\n\
    \    return [smallest_even, smallest_even_index]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    evens.sort()\n    smallest = evens[0]\n    for i, x in enumerate(arr):\n\
    \        if x == smallest:\n            return [x, i]\n    return []\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i,\
    \ n in enumerate(arr):\n        if n % 2 == 0:\n            evens.append([n, i])\n\
    \    if evens:\n        return min(evens)\n    return []\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = []\n    for i, n in enumerate(arr):\n        if n\
    \ % 2 == 0:\n            evens.append([n, i])\n    if len(evens) == 0:\n     \
    \   return []\n    evens.sort()\n    return evens[0]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    even_nums = [num for num\
    \ in arr if num % 2 == 0]\n    if not even_nums:\n        return []\n    min_even\
    \ = min(even_nums)\n    min_even_idx = arr.index(min_even)\n    return [min_even,\
    \ min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n\
    \    return [min_even, min_even_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    even_nums = [x for x in arr if x % 2 == 0]\n    if not even_nums:\n\
    \        return []\n    min_even = min(even_nums)\n    min_even_index = arr.index(min_even)\n\
    \    return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n\
    \    return [min_even, min_even_idx]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_idx = arr.index(min_even)\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    evens.sort()\n    return [evens[0], arr.index(evens[0])]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = []\n    for i,\
    \ v in enumerate(arr):\n        if v % 2 == 0:\n            evens.append([v, i])\n\
    \    if not evens:\n        return []\n    return sorted(evens)[0]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    smallest_even = None\n\
    \    smallest_even_index = None\n    for i, node in enumerate(arr):\n        if\
    \ node % 2 == 0:\n            if smallest_even is None or node < smallest_even:\n\
    \                smallest_even = node\n                smallest_even_index = i\n\
    \    if smallest_even is None:\n        return []\n    return [smallest_even,\
    \ smallest_even_index]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [i for i in arr\
    \ if i % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n\
    \            evens.append([v, i])\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return evens[0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    min_even_index = arr.index(min_even)\n  \
    \  return [min_even, min_even_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    even_nums = [num for num in arr if num % 2 == 0]\n    if not even_nums:\n\
    \        return []\n    smallest_even = min(even_nums)\n    smallest_even_index\
    \ = arr.index(smallest_even)\n    return [smallest_even, smallest_even_index]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n   \
    \     return []\n    evens = [x for x in arr if x % 2 == 0]\n    if len(evens)\
    \ == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n\
    \            evens.append([v, i])\n    if not evens:\n        return []\n    evens.sort()\n\
    \    return evens[0]\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # TODO: Implement me\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpid0nbqr2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpid0nbqr2.py\", line 42,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpid0nbqr2.py\", line 32, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976989
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxsqh9i5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkxsqh9i5.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkxsqh9i5.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976988
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
- exit_code: -1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    return [0, 0]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq0h0v95.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwq0h0v95.py\", line 41,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwq0h0v95.py\", line 31, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1659976989
- exit_code: 0
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n\n    Example 2:\n        Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n\n    Example\
    \ 3:\n        \n    Example 4:\n        Explanation: 0 is the smallest value,\
    \ but  there are two zeros,\n                 so we will choose the first zero,\
    \ which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
    \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976988
