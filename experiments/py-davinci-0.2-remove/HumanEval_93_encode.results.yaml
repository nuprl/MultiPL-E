name: HumanEval_93_encode
language: py
results:
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.lower()\
    \ in vowels:\n            encoded_message += chr(ord(letter) + 2)\n        else:\n\
    \            encoded_message += letter\n    return encoded_message.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                char = char.lower()\n            else:\n  \
    \              char = char.upper()\n            if char in vowels:\n         \
    \       char = vowels[(vowels.index(char) + 2) % len(vowels)]\n        encoded_message\
    \ += char\n    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yr6ksa_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8yr6ksa_.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8yr6ksa_.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw8uymixf.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpw8uymixf.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpw8uymixf.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    # return\
    \ encoded_message\n    pass\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfg77beb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkfg77beb.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpkfg77beb.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5c28a56.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpq5c28a56.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpq5c28a56.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    message = message.lower()\n \
    \   vowels = \"aeiou\"\n    encoded_message = \"\"\n    for letter in message:\n\
    \        if letter in vowels:\n            index = vowels.index(letter)\n    \
    \        encoded_message += vowels[(index + 2) % 5]\n        else:\n         \
    \   encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6bv78zqd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6bv78zqd.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6bv78zqd.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2qfnzzp.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpv2qfnzzp.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv2qfnzzp.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzppfecn.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpwzppfecn.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpwzppfecn.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp37nml7l.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpp37nml7l.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpp37nml7l.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                char = char.lower()\n            else:\n                char\
    \ = char.upper()\n            if char in vowels:\n                char = vowels[(vowels.index(char)\
    \ + 2) % len(vowels)]\n            encoded_message += char\n        else:\n  \
    \          encoded_message += char\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvw_lmak.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdvw_lmak.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpdvw_lmak.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return ''.join([chr(ord(c) +\
    \ 2) if c in 'aeiou' else c.swapcase() for c in message])\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8amfl116.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8amfl116.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8amfl116.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                encoded_message += char.lower()\n            else:\n        \
    \        encoded_message += char.upper()\n        else:\n            encoded_message\
    \ += char\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjldzumm0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjldzumm0.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjldzumm0.py\", line 27, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rfwgmfl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0rfwgmfl.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp0rfwgmfl.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         new_message += chr(ord(letter) + 2)\n        else:\n            new_message\
    \ += letter\n    return new_message.swapcase()\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9ol68o_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpf9ol68o_.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpf9ol68o_.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixnixg8u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpixnixg8u.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpixnixg8u.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvdxjldn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnvdxjldn.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpnvdxjldn.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jsqg85b.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4jsqg85b.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4jsqg85b.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp54wmfnuj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp54wmfnuj.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp54wmfnuj.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message.swapcase().translate(str.maketrans('aeiou',\
    \ 'cfilor'))\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ic3h3aq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1ic3h3aq.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp1ic3h3aq.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp1ic3h3aq.py\"\
    , line 11, in encode\n    return message.swapcase().translate(str.maketrans('aeiou',\
    \ 'cfilor'))\nValueError: the first two maketrans arguments must have equal length\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ None\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n  \
    \  assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoag_x0fw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpoag_x0fw.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpoag_x0fw.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaojycayi.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpaojycayi.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpaojycayi.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.lower() in vowels:\n                encoded_message += chr(ord(char) +\
    \ 2)\n            else:\n                encoded_message += chr(ord(char) + 1)\n\
    \        else:\n            encoded_message += char\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgf3z7ef2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgf3z7ef2.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpgf3z7ef2.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu46lt5ns.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu46lt5ns.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpu46lt5ns.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.lower() in vowels:\n                encoded_message += vowels[(vowels.index(char.lower())\
    \ + 2) % 5]\n            else:\n                encoded_message += char\n    \
    \    else:\n            encoded_message += char\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ok60wnx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7ok60wnx.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7ok60wnx.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa949uvl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqa949uvl.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpqa949uvl.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.islower():\n                encoded_message += char.upper()\n         \
    \   else:\n                encoded_message += char.lower()\n        else:\n  \
    \          encoded_message += char\n    for vowel in vowels:\n        encoded_message\
    \ = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n        encoded_message\
    \ = encoded_message.replace(vowel.upper(), chr(ord(vowel.upper()) + 2))\n    return\
    \ encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message +=\
    \ vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7w0etki.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu7w0etki.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpu7w0etki.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   if letter.isupper():\n                encoded_message += letter.lower()\n\
    \            else:\n                encoded_message += letter.upper()\n      \
    \  else:\n            encoded_message += letter\n    for vowel in vowels:\n  \
    \      encoded_message = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2espmjb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx2espmjb.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpx2espmjb.py\", line 27, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    new_message\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n\
    \                new_message += vowels[(index + 2) % 5]\n            else:\n \
    \               new_message += letter\n        else:\n            new_message\
    \ += letter\n    return new_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvkaf3fqp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpvkaf3fqp.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpvkaf3fqp.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpub40paqm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpub40paqm.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpub40paqm.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_ry5whl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8_ry5whl.py\", line 24,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8_ry5whl.py\", line 17, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp8_ry5whl.py\"\
    , line 12, in encode\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.lower()\
    \ in vowels:\n            encoded_message += chr(ord(letter) + 2)\n        else:\n\
    \            encoded_message += letter.swapcase()\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphj7etsu2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphj7etsu2.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmphj7etsu2.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for c in message:\n        if c.isalpha():\n            if c.islower():\n\
    \                c = c.upper()\n            else:\n                c = c.lower()\n\
    \            if c in vowels:\n                c = chr(ord(c) + 2)\n          \
    \      if c > \"Z\":\n                    c = chr(ord(c) - 26)\n            encoded_message\
    \ += c\n        else:\n            encoded_message += c\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuu1rzvvm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpuu1rzvvm.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpuu1rzvvm.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    new_message = ''\n    for letter in message:\n        if letter.lower()\
    \ in vowels:\n            new_message += vowels[(vowels.index(letter.lower())\
    \ + 2) % 5]\n        else:\n            new_message += letter\n    return new_message.swapcase()\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_ead_5i.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4_ead_5i.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4_ead_5i.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1ft0mhh.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpq1ft0mhh.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpq1ft0mhh.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message +=\
    \ vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae_4mktg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpae_4mktg.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpae_4mktg.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpql3ay4w4.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpql3ay4w4.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpql3ay4w4.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                char = char.lower()\n            else:\n                char\
    \ = char.upper()\n            if char in vowels:\n                char = vowels[(vowels.index(char)\
    \ + 2) % len(vowels)]\n            encoded_message += char\n        else:\n  \
    \          encoded_message += char\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpve2e4loc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpve2e4loc.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpve2e4loc.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pnd9bmy.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp7pnd9bmy.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7pnd9bmy.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64a8grk5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp64a8grk5.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp64a8grk5.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.lower()\
    \ in vowels:\n            encoded_message += chr(ord(letter) + 2)\n        else:\n\
    \            encoded_message += letter\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5qxml1x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk5qxml1x.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpk5qxml1x.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65znky80.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp65znky80.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp65znky80.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh4o2yz7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxh4o2yz7.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxh4o2yz7.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbklx2kk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnbklx2kk.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpnbklx2kk.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    pass\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqduqh6c.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqqduqh6c.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpqqduqh6c.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                encoded_message += char.lower()\n            else:\n        \
    \        encoded_message += char.upper()\n        else:\n            encoded_message\
    \ += char\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87v4u_l9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp87v4u_l9.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp87v4u_l9.py\", line 27, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         new_message += chr(ord(letter) + 2)\n        else:\n            new_message\
    \ += letter\n    return new_message.swapcase()\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.islower():\n                encoded_message += char.upper()\n         \
    \   else:\n                encoded_message += char.lower()\n        else:\n  \
    \          encoded_message += char\n    for vowel in vowels:\n        encoded_message\
    \ = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n        encoded_message\
    \ = encoded_message.replace(vowel.upper(), chr(ord(vowel.upper()) + 2))\n    return\
    \ encoded_message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.lower() in vowels:\n       \
    \     encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message\
    \ += char\n    return encoded_message.swapcase()\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5jnxjmd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpe5jnxjmd.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpe5jnxjmd.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n        else:\n            encoded_message\
    \ += letter\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0u9jt7oe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0u9jt7oe.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp0u9jt7oe.py\", line 26, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5]\n\
    \        else:\n            encoded_message += letter.swapcase()\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3gmvj2m.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo3gmvj2m.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpo3gmvj2m.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    message\
    \ = message.lower()\n    encoded_message = \"\"\n    for char in message:\n  \
    \      if char in vowels:\n            encoded_message += vowels[(vowels.index(char)\
    \ + 2) % 5]\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjr2wf_xb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjr2wf_xb.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjr2wf_xb.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_kud2jlu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_kud2jlu.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_kud2jlu.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message +=\
    \ vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfg09l1pa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfg09l1pa.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfg09l1pa.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                char = char.lower()\n            else:\n  \
    \              char = char.upper()\n            if char in vowels:\n         \
    \       char = vowels[(vowels.index(char) + 2) % len(vowels)]\n        encoded_message\
    \ += char\n    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnimjhudh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnimjhudh.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpnimjhudh.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaglnkn9g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpaglnkn9g.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpaglnkn9g.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.lower() in vowels:\n     \
    \       encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message\
    \ += char\n    return encoded_message.swapcase()\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                char = char.lower()\n            else:\n                char\
    \ = char.upper()\n            if char in vowels:\n                char = vowels[(vowels.index(char)\
    \ + 2) % len(vowels)]\n        encoded_message += char\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjivusf38.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjivusf38.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjivusf38.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message +=\
    \ vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3dgl2my_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3dgl2my_.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3dgl2my_.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                encoded_message += char.lower()\n            else:\n        \
    \        encoded_message += char.upper()\n        else:\n            encoded_message\
    \ += char\n    for char in encoded_message:\n        if char in vowels:\n    \
    \        index = vowels.index(char)\n            encoded_message = encoded_message.replace(char,\
    \ vowels[(index + 2) % 5])\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1typ1dp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_1typ1dp.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_1typ1dp.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul0z335p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpul0z335p.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpul0z335p.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code goes here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc838h1r_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpc838h1r_.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc838h1r_.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ None\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n  \
    \  assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxtpa0xav.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxtpa0xav.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxtpa0xav.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter.swapcase()\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqpcvwd4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcqpcvwd4.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpcqpcvwd4.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.islower():\n                encoded_message += char.upper()\n         \
    \   else:\n                encoded_message += char.lower()\n        else:\n  \
    \          encoded_message += char\n    for vowel in vowels:\n        if vowel\
    \ in encoded_message:\n            encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2u86hjbj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2u86hjbj.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2u86hjbj.py\", line 29, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                char = char.lower()\n            else:\n                char\
    \ = char.upper()\n            if char in vowels:\n                char = vowels[(vowels.index(char)\
    \ + 2) % len(vowels)]\n        encoded_message += char\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplal4_mpv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplal4_mpv.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmplal4_mpv.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) - 32) if char.islower()\
    \ else chr(ord(char) + 32)\n        else:\n            encoded_message += char\n\
    \    return encoded_message\n\nprint(encode('Hello World'))\nprint(encode('Hello\
    \ World!'))\nprint(encode('Hello World! How are you?'))\nprint(encode('Hello World!\
    \ How are you? I am fine!'))\nprint(encode('Hello World! How are you? I am fine!\
    \ Thanks for asking!'))\nprint(encode('Hello World! How are you? I am fine! Thanks\
    \ for asking! How are you?'))\nprint(encode('Hello World! How are you? I am fine!\
    \ Thanks for asking! How are you? I am fine!'))\nprint(encode('Hello World! How\
    \ are you? I am fine! Thanks for asking! How are you? I am fine! Thanks for asking!'))\n\
    print(encode('Hello World! How are you? I am fine! Thanks for asking! How are\
    \ you? I am fine! Thanks for asking! How are you?'))\nprint(encode('Hello World!\
    \ How are you? I am fine! Thanks for asking! How are you? I am fine! Thanks for\
    \ asking! How are you? I am fine!'))\nprint(encode('Hello World! How are you?\
    \ I am fine! Thanks for asking! How are you? I am fine! Thanks for asking! How\
    \ are you? I am fine! Thanks for asking!'))\nprint(encode('Hello World! How are\
    \ you? I am fine! Thanks for asking! How are you? I am fine! Thanks for asking!\
    \ How are you? I am fine! Thanks for asking! How are you?'))\nprint(encode('Hello\
    \ World! How are you? I am fine! Thanks for asking! How are you? I am fine! Thanks\
    \ for asking! How are you? I am fine! Thanks for asking! How are you? I am fine!'))\n\
    print(en\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpeq0_el8q.py\", line 36\n    print(en\n         ^\nSyntaxError:\
    \ '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                encoded_message += char.lower()\n         \
    \   else:\n                encoded_message += char.upper()\n        else:\n  \
    \          encoded_message += char\n    for i in range(len(encoded_message)):\n\
    \        if encoded_message[i] in vowels:\n            encoded_message = encoded_message[:i]\
    \ + vowels[(vowels.index(encoded_message[i]) + 2) % 5] + encoded_message[i+1:]\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7ezrc_w.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp7ezrc_w.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpp7ezrc_w.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.lower() in vowels:\n     \
    \       encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message\
    \ += char\n    return encoded_message.swapcase()\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                encoded_message += char.lower()\n            else:\n        \
    \        encoded_message += char.upper()\n        else:\n            encoded_message\
    \ += char\n    for i in range(len(encoded_message)):\n        if encoded_message[i]\
    \ in vowels:\n            encoded_message = encoded_message[:i] + vowels[(vowels.index(encoded_message[i])\
    \ + 2) % 5] + encoded_message[i+1:]\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9df94ke.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe9df94ke.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpe9df94ke.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                new_message += chr(ord(letter)\
    \ + 2)\n            else:\n                new_message += letter\n        else:\n\
    \            new_message += letter\n    return new_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n44owcq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7n44owcq.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7n44owcq.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp65j07zk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpp65j07zk.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpp65j07zk.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                encoded_message += char.lower()\n            else:\n        \
    \        encoded_message += char.upper()\n        else:\n            encoded_message\
    \ += char\n    for i in range(len(encoded_message)):\n        if encoded_message[i]\
    \ in vowels:\n            if encoded_message[i] == 'u':\n                encoded_message\
    \ = encoded_message[:i] + 'a' + encoded_message[i+1:]\n            else:\n   \
    \             encoded_message = encoded_message[:i] + vowels[vowels.index(encoded_message[i])+2]\
    \ + encoded_message[i+1:]\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5q47o2d5.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5q47o2d5.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5q47o2d5.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) - 32) if char.islower()\
    \ else chr(ord(char) + 32)\n        else:\n            encoded_message += char\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjz7i95jv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjz7i95jv.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjz7i95jv.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcukcur00.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpcukcur00.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpcukcur00.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjdc0qzn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphjdc0qzn.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmphjdc0qzn.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n\
    \                encoded_message += vowels[(index + 2) % 5]\n            else:\n\
    \                encoded_message += letter\n        else:\n            encoded_message\
    \ += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wpeyvzv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp9wpeyvzv.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9wpeyvzv.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.lower()\
    \ in vowels:\n            index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter.swapcase()\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf054xox1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf054xox1.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpf054xox1.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = []\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message.append(vowels[(index\
    \ + 2) % 5])\n        else:\n            encoded_message.append(letter)\n    return\
    \ ''.join(encoded_message)\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65hz5n27.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp65hz5n27.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp65hz5n27.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n        if letter in vowels:\n\
    \            if letter == 'u':\n                encoded_message += 'a'\n     \
    \       else:\n                encoded_message += vowels[vowels.index(letter)\
    \ + 2]\n    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnzsypr2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptnzsypr2.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptnzsypr2.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv8v4dc7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvv8v4dc7.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpvv8v4dc7.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) + 1)\n        else:\n\
    \            encoded_message += char\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3vpbgud.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpj3vpbgud.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpj3vpbgud.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                encoded_message += char.lower()\n         \
    \   else:\n                encoded_message += char.upper()\n        else:\n  \
    \          encoded_message += char\n    for vowel in vowels:\n        encoded_message\
    \ = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n    return encoded_message\n\
    \nprint(encode(\"Hello World\"))\nprint(encode(\"Hello World!\"))\nprint(encode(\"\
    Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello\
    \ World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World!\
    \ 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"\
    ))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\n\
    print(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"\
    Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello\
    \ World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World!\
    \ 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"\
    ))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\n\
    print(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"\
    Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello\
    \ World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World!\
    \ 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"\
    ))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\n\
    print(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"\
    Hello World! 123\"))\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD!\
    \ 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\n\
    hELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO\
    \ wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD!\
    \ 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\n\
    hELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO\
    \ wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD!\
    \ 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\nhELLO wORLD! 123\n\
    hELLO wORLD! 123\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxylauoeg.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpxylauoeg.py\", line 70,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxylauoeg.py\", line 64, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           if letter.isupper():\n                encoded_message += vowels[(vowels.index(letter.lower())\
    \ + 2) % 5].upper()\n            else:\n                encoded_message += vowels[(vowels.index(letter)\
    \ + 2) % 5]\n        else:\n            if letter.isupper():\n               \
    \ encoded_message += letter.lower()\n            else:\n                encoded_message\
    \ += letter.upper()\n    return encoded_message\n\n\ndef check(candidate):\n \
    \   assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsat33tr0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsat33tr0.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpsat33tr0.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           encoded_message += chr(ord(letter) + 2)\n        else:\n         \
    \   encoded_message += letter\n    return encoded_message.swapcase()\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.islower():\n                encoded_message += char.upper()\n         \
    \   else:\n                encoded_message += char.lower()\n            if char.lower()\
    \ in vowels:\n                encoded_message = encoded_message[:-1]\n       \
    \         encoded_message += vowels[(vowels.index(char.lower()) + 2) % 5]\n  \
    \      else:\n            encoded_message += char\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpky3yrw0u.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpky3yrw0u.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpky3yrw0u.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) + 1)\n        else:\n\
    \            encoded_message += char\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3imnzvi6.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3imnzvi6.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3imnzvi6.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.lower() in vowels:\n       \
    \     encoded_message += vowels[(vowels.index(char.lower()) + 2) % 5]\n      \
    \  else:\n            encoded_message += char\n    return encoded_message.swapcase()\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6qcikqm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu6qcikqm.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpu6qcikqm.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkcyxw6g5.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkcyxw6g5.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpkcyxw6g5.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) - 32)\n        else:\n\
    \            encoded_message += char\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkg49baz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfkg49baz.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfkg49baz.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n        else:\n            encoded_message\
    \ += letter\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\nprint(encode('Hello World'))\n\
    print(encode('Hello World!'))\nprint(encode('Hello World!!'))\nprint(encode('Hello\
    \ World!!!'))\nprint(encode('Hello World!!!!'))\nprint(encode('Hello World!!!!!'))\n\
    print(encode('Hello World!!!!!!'))\nprint(encode('Hello World!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!!!'))\n\
    print(encode('Hello World!!!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!!!!!'))\n\
    print(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!'))\n\
    print(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!'))\n\
    print(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!'))\n\
    print(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello\
    \ World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'))\nprint(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm1e6osv0.py\", line 54\n    print(encode('Hello World!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n\
    \                ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    return\
    \ message\n\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO\
    \ wORLD!\"\nassert encode(\"Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"\
    Hello World!\") == \"hELLO wORLD!\"\nassert encode(\"Hello World!\")\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5_vltzq.py\", line\
    \ 14, in <module>\n    assert encode(\"Hello World!\") == \"hELLO wORLD!\"\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk515uhu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgk515uhu.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpgk515uhu.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n\
    \            if char.isupper():\n                encoded_message += char.lower()\n\
    \            else:\n                encoded_message += char.upper()\n        else:\n\
    \            encoded_message += char\n    for index, char in enumerate(encoded_message):\n\
    \        if char in vowels:\n            if char == 'u':\n                encoded_message\
    \ = encoded_message[:index] + 'a' + encoded_message[index+1:]\n            else:\n\
    \                encoded_message = encoded_message[:index] + vowels[vowels.index(char)+2]\
    \ + encoded_message[index+1:]\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc41qnpco.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpc41qnpco.py\", line 38,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc41qnpco.py\", line 31, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak7us3_i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpak7us3_i.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpak7us3_i.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n        else:\n            encoded_message\
    \ += letter\n    for i in range(len(encoded_message)):\n        if encoded_message[i]\
    \ in vowels:\n            encoded_message = encoded_message[:i] + vowels[(vowels.index(encoded_message[i])\
    \ + 2) % 5] + encoded_message[i+1:]\n    return encoded_message\n\nprint(encode('Hello,\
    \ World!'))\nprint(encode('Hello, World! I am a test message.'))\nprint(encode('Hello,\
    \ World! I am a test message. I am a test message.'))\nprint(encode('Hello, World!\
    \ I am a test message. I am a test message. I am a test message.'))\nprint(encode('Hello,\
    \ World! I am a test message. I am a test message. I am a test message. I am a\
    \ test message.'))\nprint(encode('Hello, World! I am a test message. I am a test\
    \ message. I am a test message. I am a test message. I am a test message.'))\n\
    print(encode('Hello, World! I am a test message. I am a test message. I am a test\
    \ message. I am a test message. I am a test message. I am a test message.'))\n\
    print(encode('Hello, World! I am a test message. I am a test message. I am a test\
    \ message. I am a test message. I am a test message. I am a test message. I am\
    \ a test message.'))\nprint(encode('Hello, World! I am a test message. I am a\
    \ test message. I am a test message. I am a test message. I am a test message.\
    \ I am a test message. I am a test message. I am a test message.'))\nprint(encode('Hello,\
    \ World! I am a test message. I am a test message. I am a test message. I am a\
    \ test message.\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpysviusqa.py\", line 34\n    print(encode('Hello, World!\
    \ I am a test message. I am a test message. I am a test message. I am a test message.\n\
    \                 ^\nSyntaxError: unterminated string literal (detected at line\
    \ 34)\n"
  exit_code: 1
  status: SyntaxError
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    vowels\
    \ = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for letter in message:\n\
    \        if letter.lower() in vowels:\n            index = vowels.index(letter.lower())\n\
    \            encoded_message += vowels[(index + 2) % 5]\n        else:\n     \
    \       encoded_message += letter.swapcase()\n    return encoded_message\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdn51a8mx.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdn51a8mx.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpdn51a8mx.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter.swapcase()\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7dvqz7k8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7dvqz7k8.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7dvqz7k8.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypm7372h.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpypm7372h.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpypm7372h.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ \"\"\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaaqz05a7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpaaqz05a7.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpaaqz05a7.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                encoded_message += char.lower()\n         \
    \   else:\n                encoded_message += char.upper()\n        else:\n  \
    \          encoded_message += char\n    for i in range(len(encoded_message)):\n\
    \        if encoded_message[i] in vowels:\n            encoded_message = encoded_message[:i]\
    \ + vowels[(vowels.index(encoded_message[i]) + 2) % 5] + encoded_message[i+1:]\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv8u9h7qv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv8u9h7qv.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv8u9h7qv.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n\
    \                new_message += vowels[(index + 2) % 5]\n            else:\n \
    \               new_message += letter\n        else:\n            new_message\
    \ += letter\n    return new_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpernfum9e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpernfum9e.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpernfum9e.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu04kdqh.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwu04kdqh.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpwu04kdqh.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message +=\
    \ vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzpmyqlv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxzpmyqlv.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxzpmyqlv.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            encoded_message +=\
    \ vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2xt0yi7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy2xt0yi7.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpy2xt0yi7.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) + 1)\n        else:\n\
    \            encoded_message += char\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx3gk8el3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx3gk8el3.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpx3gk8el3.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for char in message:\n\
    \        if char.isalpha():\n            if char.lower() in vowels:\n        \
    \        index = alphabet.index(char.lower())\n                encoded_message\
    \ += alphabet[index + 2]\n            else:\n                encoded_message +=\
    \ char\n        else:\n            encoded_message += char\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mk9pffr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7mk9pffr.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7mk9pffr.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += vowels[(vowels.index(char.lower())\
    \ + 2) % 5]\n            else:\n                encoded_message += char\n    \
    \    else:\n            encoded_message += char\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4sp5jxg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo4sp5jxg.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpo4sp5jxg.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvpcf7jf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwvpcf7jf.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpwvpcf7jf.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme010gza.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpme010gza.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpme010gza.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe89ox82o.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpe89ox82o.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpe89ox82o.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ None\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n  \
    \  assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiiomme3q.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpiiomme3q.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpiiomme3q.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    message = message.lower()\n \
    \   vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n \
    \       if letter in vowels:\n            index = vowels.index(letter)\n     \
    \       encoded_message += vowels[(index + 2) % 5]\n        else:\n          \
    \  encoded_message += letter\n    return encoded_message.swapcase()\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa50kuk9v.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa50kuk9v.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpa50kuk9v.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   if letter.isupper():\n                encoded_message += letter.lower()\n\
    \            else:\n                encoded_message += letter.upper()\n      \
    \  else:\n            encoded_message += letter\n    for vowel in vowels:\n  \
    \      if vowel in encoded_message:\n            encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lk6hprd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5lk6hprd.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5lk6hprd.py\", line 28, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.lower() in vowels:\n     \
    \       encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message\
    \ += char\n    return encoded_message.swapcase()\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk4sdlje.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgk4sdlje.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpgk4sdlje.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                char = char.lower()\n            else:\n                char\
    \ = char.upper()\n            if char in vowels:\n                char = vowels[(vowels.index(char)\
    \ + 2) % len(vowels)]\n        encoded_message += char\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qv2n3yg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2qv2n3yg.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2qv2n3yg.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26csobix.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp26csobix.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp26csobix.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5]\n\
    \        else:\n            encoded_message += letter.swapcase()\n    return encoded_message\n\
    \nprint(encode(\"Hello World\"))\nprint(encode(\"Hello World!\"))\nprint(encode(\"\
    Hello World! How are you?\"))\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "hoLLa waRLD\nhoLLa waRLD!\nhoLLa waRLD! haW iRo Yae?\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7vtm087.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf7vtm087.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpf7vtm087.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ None\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n  \
    \  assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ym3u3ps.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2ym3u3ps.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2ym3u3ps.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    # return\
    \ encoded_message\n    pass\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf65b3rf5.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpf65b3rf5.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpf65b3rf5.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13qe7cjz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp13qe7cjz.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp13qe7cjz.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            new_message += vowels[(index\
    \ + 2) % 5]\n        else:\n            new_message += letter\n    return new_message.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2u1c8utm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2u1c8utm.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2u1c8utm.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.lower() in vowels:\n                encoded_message += chr(ord(char) +\
    \ 2)\n            else:\n                encoded_message += chr(ord(char) + 1)\n\
    \        else:\n            encoded_message += char\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dd2pe29.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0dd2pe29.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp0dd2pe29.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ei3px_q.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4ei3px_q.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4ei3px_q.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    message = message.swapcase()\n\
    \    vowels = 'aeiou'\n    for vowel in vowels:\n        message = message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return message\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2c_vecrc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2c_vecrc.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2c_vecrc.py\", line 19, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message.swapcase().translate(str.maketrans('aeiou',\
    \ 'cfilor'))\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppntnmxca.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppntnmxca.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmppntnmxca.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmppntnmxca.py\"\
    , line 11, in encode\n    return message.swapcase().translate(str.maketrans('aeiou',\
    \ 'cfilor'))\nValueError: the first two maketrans arguments must have equal length\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5]\n\
    \        else:\n            encoded_message += letter.swapcase()\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6v3hnh_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpv6v3hnh_.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv6v3hnh_.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n        else:\n            encoded_message\
    \ += letter\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\nprint(encode('Hello World'))\n\
    print(encode('Hello World!'))\nprint(encode('Hello World!!'))\nprint(encode('Hello\
    \ World!!!'))\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "hELLO wORLD\nhELLO wORLD!\nhELLO wORLD!!\nhELLO wORLD!!!\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz8bv689.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpyz8bv689.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpyz8bv689.py\", line 31, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message.swapcase().translate(str.maketrans(\"\
    aeiou\", \"cgjkr\"))\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6pmx0b8.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpa6pmx0b8.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpa6pmx0b8.py\", line 15, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc619quac.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpc619quac.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc619quac.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    # alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # encoded_message =\
    \ ''\n    # for letter in message:\n    #     if letter.lower() in vowels:\n \
    \   #         index = alphabet.index(letter.lower())\n    #         encoded_message\
    \ += alphabet[index + 2]\n    #     else:\n    #         encoded_message += letter\n\
    \    # return encoded_message.swapcase()\n\n    # vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    # alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # encoded_message =\
    \ ''\n    # for letter in message:\n    #     if letter.lower() in vowels:\n \
    \   #         index = alphabet.index(letter.lower())\n    #         encoded_message\
    \ += alphabet[index + 2]\n    #     else:\n    #         encoded_message += letter\n\
    \    # return encoded_message.swapcase()\n\n    # vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    # alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # encoded_message =\
    \ ''\n    # for letter in message:\n    #     if letter.lower() in vowels:\n \
    \   #         index = alphabet.index(letter.lower())\n    #         encoded_message\
    \ += alphabet[index + 2]\n    #     else:\n    #         encoded_message += letter\n\
    \    # return encoded_message.swapcase()\n\n    # vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    # alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # encoded_message =\
    \ ''\n    # for letter in message:\n    #     if letter.lower() in vowels:\n \
    \   #         index = alphabet.index(letter.lower())\n    #         encoded_message\
    \ += alphabet[index + 2]\n    #     else:\n    #         encoded_message += letter\n\
    \    # return encoded_message.swapcase()\n\n    # vowels = ['a\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0xzjqnl.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpc0xzjqnl.py\", line 64,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc0xzjqnl.py\", line 57, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8dp3yn_2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8dp3yn_2.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8dp3yn_2.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                char = char.lower()\n            else:\n                char\
    \ = char.upper()\n            if char in vowels:\n                char = vowels[(vowels.index(char)\
    \ + 2) % len(vowels)]\n            encoded_message += char\n        else:\n  \
    \          encoded_message += char\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0te6dij.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpn0te6dij.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpn0te6dij.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4ov55le.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk4ov55le.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpk4ov55le.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n\
    \                encoded_message += vowels[(index + 2) % 5]\n            else:\n\
    \                encoded_message += letter\n        else:\n            encoded_message\
    \ += letter\n    return encoded_message\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wknpm9q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6wknpm9q.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6wknpm9q.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3g430gxc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp3g430gxc.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3g430gxc.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                index = vowels.index(char.lower())\n           \
    \     encoded_message += vowels[(index + 2) % 5]\n            else:\n        \
    \        encoded_message += char\n        else:\n            encoded_message +=\
    \ char\n    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ltnwz8v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6ltnwz8v.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6ltnwz8v.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         index = vowels.index(letter.lower())\n            new_message += vowels[(index\
    \ + 2) % 5]\n        else:\n            new_message += letter\n    return new_message.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kfbaf16.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3kfbaf16.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3kfbaf16.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n\
    \            if char.isupper():\n                encoded_message += char.lower()\n\
    \            else:\n                encoded_message += char.upper()\n        else:\n\
    \            encoded_message += char\n    for i in range(len(encoded_message)):\n\
    \        if encoded_message[i] in vowels:\n            if encoded_message[i] ==\
    \ 'u':\n                encoded_message = encoded_message[:i] + 'a' + encoded_message[i+1:]\n\
    \            else:\n                encoded_message = encoded_message[:i] + chr(ord(encoded_message[i])\
    \ + 2) + encoded_message[i+1:]\n    return encoded_message\n\nprint(encode(\"\
    Hello World!\"))\nprint(encode(\"Hello World! I am a string.\"))\nprint(encode(\"\
    Hello World! I am a string. I am a string. I am a string. I am a string. I am\
    \ a string. I am a string. I am a string. I am a string. I am a string. I am a\
    \ string. I am a string. I am a string. I am a string. I am a string. I am a string.\
    \ I am a string. I am a string. I am a string. I am a string. I am a string. I\
    \ am a string. I am a string. I am a string. I am a string. I am a string. I am\
    \ a string. I am a string. I am a string. I am a string. I am a string. I am a\
    \ string. I am a string. I am a string. I am a string. I am a string. I am a string.\
    \ I am a string. I am a string. I am a string. I am a string. I am a string. I\
    \ am a string. I am a string. I am a string. I am a string. I am a string. I am\
    \ a string. I am a string. I am a string. I am a string. I am a string. I am a\
    \ string. I am a string. I am a string. I am a string. I am\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpq7wyn0tx.py\", line 31\n    print(encode(\"Hello World!\
    \ I am a string. I am a string. I am a string. I am a string. I am a string. I\
    \ am a string. I am a string. I am a string. I am a string. I am a string. I am\
    \ a string. I am a string. I am a string. I am a string. I am a string. I am a\
    \ string. I am a string. I am a string. I am a string. I am a string. I am a string.\
    \ I am a string. I am a string. I am a string. I am a string. I am a string. I\
    \ am a string. I am a string. I am a string. I am a string. I am a string. I am\
    \ a string. I am a string. I am a string. I am a string. I am a string. I am a\
    \ string. I am a string. I am a string. I am a string. I am a string. I am a string.\
    \ I am a string. I am a string. I am a string. I am a string. I am a string. I\
    \ am a string. I am a string. I am a string. I am a string. I am a string. I am\
    \ a string. I am a string. I am a string. I am\n                 ^\nSyntaxError:\
    \ unterminated string literal (detected at line 31)\n"
  exit_code: 1
  status: SyntaxError
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return ''.join([encode_char(c)\
    \ for c in message])\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2k1u62d.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmph2k1u62d.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmph2k1u62d.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmph2k1u62d.py\"\
    , line 11, in encode\n    return ''.join([encode_char(c) for c in message])\n\
    \  File \"/tmp/tmph2k1u62d.py\", line 11, in <listcomp>\n    return ''.join([encode_char(c)\
    \ for c in message])\nNameError: name 'encode_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write function here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa55tmiwo.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpa55tmiwo.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpa55tmiwo.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpii7ibrdg.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpii7ibrdg.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpii7ibrdg.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         new_message += chr(ord(letter) + 2)\n        else:\n            new_message\
    \ += letter\n    return new_message.swapcase()\n\nprint(encode('Hello World'))\n\
    print(encode('Hello World!'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello World!?'))\n\
    print(encode('Hello World!?'))\nprint(encode('Hello World!?'))\nprint(encode('Hello\
    \ World!?'))\nprint(encode('Hello World!?'))\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "hGLLQ wQRLD\nhGLLQ wQRLD!\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\n\
    hGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ\
    \ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\n\
    hGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ\
    \ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\n\
    hGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ\
    \ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\nhGLLQ wQRLD!?\n\
    hGLLQ wQRLD!?\nhGLLQ wQRLD!?\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpi6h1xj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvpi6h1xj.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpvpi6h1xj.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += chr(ord(char) + 2)\n        \
    \    else:\n                encoded_message += chr(ord(char) - 32) if char.islower()\
    \ else chr(ord(char) + 32)\n        else:\n            encoded_message += char\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_t72mku9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_t72mku9.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_t72mku9.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           encoded_message += chr(ord(letter) + 2)\n        else:\n         \
    \   encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   if letter.isupper():\n                encoded_message += letter.lower()\n\
    \            else:\n                encoded_message += letter.upper()\n      \
    \  else:\n            encoded_message += letter\n    for vowel in vowels:\n  \
    \      encoded_message = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqdhgc7ne.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqdhgc7ne.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpqdhgc7ne.py\", line 27, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   if letter.isupper():\n                encoded_message += letter.lower()\n\
    \            else:\n                encoded_message += letter.upper()\n      \
    \      if letter.lower() in vowels:\n                encoded_message = encoded_message[:-1]\n\
    \                encoded_message += vowels[(vowels.index(letter.lower()) + 2)\
    \ % 5]\n        else:\n            encoded_message += letter\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5m93a189.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5m93a189.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5m93a189.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   if letter.islower():\n                encoded_message += letter.upper()\n\
    \            else:\n                encoded_message += letter.lower()\n      \
    \  else:\n            encoded_message += letter\n    for vowel in vowels:\n  \
    \      encoded_message = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n\
    \        encoded_message = encoded_message.replace(vowel.upper(), chr(ord(vowel.upper())\
    \ + 2))\n    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         new_message += chr(ord(letter) + 2)\n        else:\n            new_message\
    \ += letter\n    return new_message.swapcase()\n\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n        else:\n            encoded_message\
    \ += letter\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel,\
    \ chr(ord(vowel) + 2))\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9stlaese.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9stlaese.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9stlaese.py\", line 27, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                index = vowels.index(char.lower())\n           \
    \     encoded_message += vowels[(index + 2) % 5]\n            else:\n        \
    \        encoded_message += char\n        else:\n            encoded_message +=\
    \ char\n    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps62yfuhy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmps62yfuhy.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmps62yfuhy.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    message = message.lower()\n \
    \   vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n \
    \       if letter in vowels:\n            index = vowels.index(letter)\n     \
    \       encoded_message += vowels[(index + 2) % 5]\n        else:\n          \
    \  encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbl7vca98.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbl7vca98.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpbl7vca98.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                char = char.lower()\n            else:\n  \
    \              char = char.upper()\n            if char in vowels:\n         \
    \       char = vowels[(vowels.index(char) + 2) % len(vowels)]\n        encoded_message\
    \ += char\n    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofsitl5z.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpofsitl5z.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpofsitl5z.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                encoded_message += chr(ord(letter)\
    \ + 2)\n            else:\n                encoded_message += letter\n       \
    \ else:\n            encoded_message += letter\n    return encoded_message.swapcase()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower()\
    \ in vowels:\n                encoded_message += vowels[(vowels.index(char.lower())\
    \ + 2) % 5]\n            else:\n                encoded_message += char\n    \
    \    else:\n            encoded_message += char\n    return encoded_message\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme6eqxwg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpme6eqxwg.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpme6eqxwg.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         new_message += chr(ord(letter) + 2)\n        else:\n            new_message\
    \ += letter\n    return new_message.swapcase()\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return ''.join([encode_char(char)\
    \ for char in message])\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9er7jdi6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp9er7jdi6.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9er7jdi6.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp9er7jdi6.py\"\
    , line 11, in encode\n    return ''.join([encode_char(char) for char in message])\n\
    \  File \"/tmp/tmp9er7jdi6.py\", line 11, in <listcomp>\n    return ''.join([encode_char(char)\
    \ for char in message])\nNameError: name 'encode_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return ''.join([chr(ord(c) +\
    \ 2) if c in 'aeiou' else c for c in message.swapcase()])\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdysuykn.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppdysuykn.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmppdysuykn.py\", line 15, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeq5ejo__.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpeq5ejo__.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpeq5ejo__.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.isupper():\n                encoded_message += letter.lower()\n  \
    \          else:\n                encoded_message += letter.upper()\n        else:\n\
    \            encoded_message += letter\n    for vowel in vowels:\n        encoded_message\
    \ = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxcuhzk4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmprxcuhzk4.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmprxcuhzk4.py\", line 27, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfasiwoy.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptfasiwoy.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptfasiwoy.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.lower() in vowels:\n                encoded_message += chr(ord(char) +\
    \ 2)\n            else:\n                encoded_message += chr(ord(char) + 1)\n\
    \        else:\n            encoded_message += char\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcmsjgpz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbcmsjgpz.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpbcmsjgpz.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47rrc2ur.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp47rrc2ur.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp47rrc2ur.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for char in message:\n        if char.lower() in vowels:\n       \
    \     encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message\
    \ += char\n    return encoded_message.swapcase()\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Convert the message to lowercase\n\
    \    message = message.lower()\n    # Create a list of vowels\n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    # Create a list of the alphabet\n    alphabet = list(string.ascii_lowercase)\n\
    \    # Create a list of the encoded message\n    encoded_message = []\n    # Iterate\
    \ through the message\n    for char in message:\n        # Check if the character\
    \ is a vowel\n        if char in vowels:\n            # Get the index of the vowel\n\
    \            index = vowels.index(char)\n            # Get the index of the next\
    \ vowel\n            next_vowel = (index + 2) % len(vowels)\n            # Append\
    \ the next vowel to the encoded message\n            encoded_message.append(vowels[next_vowel])\n\
    \        # Check if the character is a letter\n        elif char in alphabet:\n\
    \            # Get the index of the letter\n            index = alphabet.index(char)\n\
    \            # Get the index of the next letter\n            next_letter = (index\
    \ + 2) % len(alphabet)\n            # Append the next letter to the encoded message\n\
    \            encoded_message.append(alphabet[next_letter])\n        # Otherwise,\
    \ append the character to the encoded message\n        else:\n            encoded_message.append(char)\n\
    \    # Return the encoded message\n    return ''.join(encoded_message)\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgwjyls0.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpsgwjyls0.py\", line 51,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpsgwjyls0.py\", line 44, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpsgwjyls0.py\"\
    , line 16, in encode\n    alphabet = list(string.ascii_lowercase)\nNameError:\
    \ name 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    message = message.lower()\n \
    \   vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n \
    \       if letter in vowels:\n            index = vowels.index(letter)\n     \
    \       encoded_message += vowels[(index + 2) % 5]\n        else:\n          \
    \  encoded_message += letter\n    return encoded_message.upper()\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6l0fh60r.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6l0fh60r.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6l0fh60r.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfjfsl43.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsfjfsl43.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpsfjfsl43.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for char in message:\n        if char.isalpha():\n            if\
    \ char.isupper():\n                encoded_message += char.lower()\n         \
    \   else:\n                encoded_message += char.upper()\n        else:\n  \
    \          encoded_message += char\n    for i in range(len(encoded_message)):\n\
    \        if encoded_message[i] in vowels:\n            if encoded_message[i] ==\
    \ \"u\":\n                encoded_message = encoded_message[:i] + \"a\" + encoded_message[i+1:]\n\
    \            else:\n                encoded_message = encoded_message[:i] + vowels[vowels.index(encoded_message[i])+2]\
    \ + encoded_message[i+1:]\n    return encoded_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgj36kdz8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgj36kdz8.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpgj36kdz8.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0s9rt64v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp0s9rt64v.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp0s9rt64v.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    return message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2bhyh0ub.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp2bhyh0ub.py\", line 21,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2bhyh0ub.py\", line 14, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqz5h_o0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfqz5h_o0.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfqz5h_o0.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5s6q4hi3.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5s6q4hi3.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5s6q4hi3.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # your code here\n    return\
    \ message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72zb_ye_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp72zb_ye_.py\", line 22,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp72zb_ye_.py\", line 15, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # Your code here\n    pass\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9gxbcs6e.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9gxbcs6e.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9gxbcs6e.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    new_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         if letter.lower() == 'u':\n                new_message += 'a'\n    \
    \        else:\n                new_message += chr(ord(letter) + 2)\n        else:\n\
    \            new_message += letter\n    return new_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpda6bsrtf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpda6bsrtf.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpda6bsrtf.py\", line 25, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiunge5sn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpiunge5sn.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpiunge5sn.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message.swapcase()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5]\n\
    \        else:\n            encoded_message += letter.swapcase()\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6xo_syy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm6xo_syy.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpm6xo_syy.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n\
    \                encoded_message += vowels[(index + 2) % 5]\n            else:\n\
    \                encoded_message += letter\n        else:\n            encoded_message\
    \ += letter\n    return encoded_message\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3u7qxfjf.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3u7qxfjf.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3u7qxfjf.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.isalpha():\n           \
    \ if letter.lower() in vowels:\n                index = vowels.index(letter.lower())\n\
    \                encoded_message += vowels[(index + 2) % 5]\n            else:\n\
    \                encoded_message += letter\n        else:\n            encoded_message\
    \ += letter\n    return encoded_message\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ipj5fc1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ipj5fc1.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3ipj5fc1.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\nprint(encode(\"Hello World\"))\nprint(encode(\"\
    Hello World!\"))\nprint(encode(\"Hello World! 123\"))\nprint(encode(\"Hello World!\
    \ 123!\"))\nprint(encode(\"Hello World! 123!@#\"))\nprint(encode(\"Hello World!\
    \ 123!@#!\"))\nprint(encode(\"Hello World! 123!@#!$\"))\nprint(encode(\"Hello\
    \ World! 123!@#!$%\"))\nprint(encode(\"Hello World! 123!@#!$%^\"))\nprint(encode(\"\
    Hello World! 123!@#!$%^&\"))\nprint(encode(\"Hello World! 123!@#!$%^&*\"))\nprint(encode(\"\
    Hello World! 123!@#!$%^&*(\"))\nprint(encode(\"Hello World! 123!@#!$%^&*()\"))\n\
    print(encode(\"Hello World! 123!@#!$%^&*()_\"))\nprint(encode(\"Hello World! 123!@#!$%^&*()_+\"\
    ))\nprint(encode(\"Hello World! 123!@#!$%^&*()_+\"))\nprint(encode(\"Hello World!\
    \ 123!@#!$%^&*()_+\"))\nprint(encode(\"Hello World! 123!@#!$%^&*()_+\"))\nprint(encode(\"\
    Hello World! 123!@#!$%^&*()_+\"))\nprint(encode(\"Hello World! 123!@#!$%^&*()_+\"\
    ))\nprint(encode(\"Hello World! 123!@#!$%^&*()_+\"))\nprint(encode(\"Hello World!\
    \ 123!@#!$%^&*()_+\"))\nprint(encode(\"Hello World! 123!@#!$%^&*()_+\"))\nprint(encode(\"\
    Hello World! 123!\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptt_0y3s0.py\", line 44\n    print(encode(\"Hello World!\
    \ 123!\n                 ^\nSyntaxError: unterminated string literal (detected\
    \ at line 44)\n"
  exit_code: 1
  status: SyntaxError
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n\
    \            if char.islower():\n                encoded_message += char.upper()\n\
    \            else:\n                encoded_message += char.lower()\n        else:\n\
    \            encoded_message += char\n    for i in range(len(encoded_message)):\n\
    \        if encoded_message[i] in vowels:\n            encoded_message = encoded_message[:i]\
    \ + vowels[(vowels.index(encoded_message[i]) + 2) % 5] + encoded_message[i+1:]\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_bkle1d.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7_bkle1d.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7_bkle1d.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n\
    \            if char.isupper():\n                encoded_message += char.lower()\n\
    \            else:\n                encoded_message += char.upper()\n        else:\n\
    \            encoded_message += char\n    for i in range(len(encoded_message)):\n\
    \        if encoded_message[i] in vowels:\n            encoded_message = encoded_message[:i]\
    \ + vowels[(vowels.index(encoded_message[i]) + 2) % 5] + encoded_message[i+1:]\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgd3wig0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptgd3wig0.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptgd3wig0.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = 'aeiou'\n    encoded_message\
    \ = ''\n    for letter in message:\n        if letter.lower() in vowels:\n   \
    \         encoded_message += chr(ord(letter) + 2)\n        else:\n           \
    \ encoded_message += letter\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbc48k6iz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbc48k6iz.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpbc48k6iz.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    vowels = \"aeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter.lower() in vowels:\n \
    \           index = vowels.index(letter.lower())\n            encoded_message\
    \ += vowels[(index + 2) % 5]\n        else:\n            encoded_message += letter\n\
    \    return encoded_message.swapcase()\n\nprint(encode(\"Hello World\"))\nprint(encode(\"\
    Hello World!\"))\nprint(encode(\"Hello World! How are you?\"))\nprint(encode(\"\
    Hello World! How are you? I am fine.\"))\nprint(encode(\"Hello World! How are\
    \ you? I am fine. What about you?\"))\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "hOLLA wARLD\nhOLLA wARLD!\nhOLLA wARLD! hAW IRO YAE?\nhOLLA wARLD! hAW\
    \ IRO YAE? U IM FUNO.\nhOLLA wARLD! hAW IRO YAE? U IM FUNO. wHIT IBAET YAE?\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuupxw91a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuupxw91a.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpuupxw91a.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    message = message.lower()\n \
    \   vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n     \
    \   if letter in vowels:\n            index = vowels.index(letter)\n         \
    \   new_message += vowels[(index + 2) % 5]\n        else:\n            new_message\
    \ += letter\n    return new_message.swapcase()\n\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxcmju_h.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqxcmju_h.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpqxcmju_h.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Implement me\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4sont3s.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpn4sont3s.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpn4sont3s.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5v1vaqs.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpg5v1vaqs.py\", line 23,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpg5v1vaqs.py\", line 16, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
