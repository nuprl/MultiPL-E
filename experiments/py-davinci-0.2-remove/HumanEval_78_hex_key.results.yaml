language: py
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    if num == \"\":\n        return\
    \ 0\n    else:\n        return len([i for i in num if i in \"2357BD\"])\n\n\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if x in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    hex_prime_digits = ['2', '3',\
    \ '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in hex_prime_digits:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_list = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    prime_list\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in hex_list:\n\
    \            if int(i, 16) in prime_list:\n                count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = \"2357BD\"\n\
    \    count = 0\n    for i in num:\n        if i in hex_primes:\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in hex_primes:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = '2357BD'\n  \
    \  return sum(1 for i in num if i in hex_primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for i in num if int(i, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = '0123456789ABCDEF'\n\
    \    primes = '2357BD'\n    return sum(1 for digit in num if digit in primes)\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    hex_digits\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F']\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n\
    \    for i in num:\n        if i in prime_hex_digits:\n            count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i in \"2357BD\":\n            count += 1\n    return count\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if int(x, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A',\
    \ 'B', 'C', 'D', 'E', 'F']\n    hex_primes = []\n    for i in num:\n        if\
    \ int(i, 16) in primes:\n            hex_primes.append(i)\n    return len(hex_primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = ['2', '3', '5', '7',\
    \ 'B', 'D']\n    return sum(num.count(i) for i in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for x in num if int(x, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for i in num:\n\
    \        if hex_digits[i] in [2, 3, 5, 7, 11, 13]:\n            count += 1\n \
    \   return count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    num = num.upper()\n    return sum(1 for x in num if int(x, 16) in primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if x in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n       \
    \ if i in primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_primes = {'2': 2, '3':\
    \ 3, '5': 5, '7': 7, 'B': 11, 'D': 13}\n    return len([x for x in num if hex_digits[x]\
    \ in hex_primes.values()])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return sum(1 for x in num if x in hex_primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for i in num if int(i, 16) in hex_primes)\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = \"2357BD\"\n\
    \    return len([x for x in num if x in hex_primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for i in num if int(i, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = \"0123456789ABCDEF\"\
    \n    primes = \"2357BDF\"\n    count = 0\n    for i in num:\n        if i in\
    \ primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46wx43uy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp46wx43uy.py\", line 32,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp46wx43uy.py\", line 28,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for i in num:\n       \
    \ if i in hex_digits:\n            if i in primes:\n                count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return sum(1 for x in num if x in hex_primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for x in num if int(x, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    count = 0\n    for digit in num:\n        if hex_digits[digit] in primes:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_dict = {'0': 0, '1': 1,\
    \ '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B':\
    \ 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_list = list(num)\n    hex_list\
    \ = [hex_dict[i] for i in hex_list]\n    count = 0\n    for i in hex_list:\n \
    \       if i in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for x in num if int(x, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = '0123456789ABCDEF'\n\
    \    primes = '2357BDF'\n    return sum(1 for digit in num if digit in primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctcte4ow.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpctcte4ow.py\", line 28,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpctcte4ow.py\", line 24,\
    \ in check\n    assert candidate('123456789ABCDEF0') == 6\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n  \
    \  count = 0\n    for i in num:\n        if i in hex_primes:\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    hex_primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n       \
    \ if i in hex_primes:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if x in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for c in num\
    \ if c in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for x in num if int(x, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for x in num if int(x, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_primes = 0\n    for i in num:\n        if int(i,\
    \ 16) in primes:\n            hex_primes += 1\n    return hex_primes\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    hex_primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return sum(num.count(i) for i in hex_primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if int(x, 16) in [2, 3, 5, 7, 11, 13]])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n  \
    \  count = 0\n    for i in num:\n        if i in hex_primes:\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_list = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    prime_list\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in hex_list:\n\
    \            if hex_list.index(i) in prime_list:\n                count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for i in num:\n       \
    \ if i in hex_digits:\n            if i in primes:\n                count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    num = int(num, 16)\n    return sum(1 for i in primes if num % i ==\
    \ 0)\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7gz_ric.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj7gz_ric.py\", line 28,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpj7gz_ric.py\", line 21,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for i in num if int(i, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if x in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    num = num.upper()\n    return sum(1 for i in num if int(i, 16) in primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in \"2357BD\")\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n  \
    \  return sum(1 for i in num if i in hex_primes)\n\ndef check(candidate):\n  \
    \  assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n       \
    \ if i in primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    num\
    \ = num.upper()\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n\
    \    for i in num:\n        if i in primes:\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = \"0123456789ABCDEF\"\
    \n    primes = \"2357BD\"\n    count = 0\n    for i in num:\n        if i in primes:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for i in num if int(i, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = '0123456789ABCDEF'\n\
    \    primes = '2357BD'\n    return sum(1 for digit in num if digit in primes)\n\
    \ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in \"2357BD\"])\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    return len(set(num) & primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4q7ubwwg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4q7ubwwg.py\", line 28,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp4q7ubwwg.py\", line 21,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_list = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    prime_list\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in hex_list:\n\
    \            if int(i, 16) in prime_list:\n                count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n       \
    \ if i in primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in \"2357BD\")\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i in '2357BD':\n            count += 1\n    return count\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for i in num:\n       \
    \ if i in hex_digits:\n            if i in primes:\n                count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([x for x in num if x in primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = '2357BD'\n    return sum(1 for i in num if i in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in \"2357BD\")\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if x in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_key = {'0': 0, '1': 1,\
    \ '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B':\
    \ 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for i in num:\n\
    \        if hex_key[i] in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    count = 0\n    for i in num:\n\
    \        if i in '2357BD':\n            count += 1\n    return count\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    count = 0\n    for i in num:\n        if i in hex_primes:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_prime = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_prime])\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return sum(num.count(prime) for prime\
    \ in primes)\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n   \
    \ assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert\
    \ candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert\
    \ candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n \
    \   check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for c in num\
    \ if c in \"2357BD\")\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    hex_primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n       \
    \ if i in hex_primes:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([i for i in num\
    \ if i in '2357BD'])\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    hex_digits\
    \ = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9':\
    \ 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3,\
    \ 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if hex_digits[i] in\
    \ primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_primes = {'2': 2, '3':\
    \ 3, '5': 5, '7': 7, 'B': 11, 'D': 13}\n    count = 0\n    for i in num:\n   \
    \     if hex_digits[i] in hex_primes.values():\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = [2, 3, 5, 7,\
    \ 11, 13]\n    count = 0\n    for i in num:\n        if int(i, 16) in hex_digits:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for i in num\
    \ if i in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return len([i for i in num if int(i, 16) in hex_primes])\n\n\n\
    def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_primes = {'2': 2, '3':\
    \ 3, '5': 5, '7': 7, 'B': 11, 'D': 13}\n    count = 0\n    for i in num:\n   \
    \     if hex_digits[i] in hex_primes.values():\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    hex_primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for i in num:\n       \
    \ if i in hex_primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for i in num:\n       \
    \ if i in hex_digits:\n            if i in primes:\n                count += 1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = ['2', '3', '5', '7',\
    \ 'B', 'D']\n    return sum(1 for i in num if i in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    hex_primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for char in num:\n    \
    \    if char in hex_primes:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = ['2', '3', '5', '7',\
    \ 'B', 'D']\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0': 0, '1':\
    \ 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10,\
    \ 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    count = 0\n    for i in num:\n        if hex_digits[i] in primes:\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([i for i in num if i in primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    return sum(1 for i in num if i in hex_primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpft0us3ec.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpft0us3ec.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpft0us3ec.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    return len(set(num) & primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4q7ubwwg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4q7ubwwg.py\", line 28,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp4q7ubwwg.py\", line 21,\
    \ in check\n    assert candidate('1077E') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in hex_digits:\n\
    \            if hex_digits.index(i) in primes:\n                count += 1\n \
    \   return count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(1 for x in num if int(x, 16) in hex_primes)\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = ['2', '3', '5', '7',\
    \ 'B', 'D']\n    return len([x for x in num if x in primes])\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    count = 0\n    for i in num:\n\
    \        if i in hex_digits:\n            if int(i, 16) in primes:\n         \
    \       count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = \"2357BD\"\n    return sum(1 for i in num if i in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = [2, 3, 5, 7,\
    \ 11, 13]\n    return sum(num.upper().count(hex(i)[2:]) for i in hex_primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3503t71.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt3503t71.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmpt3503t71.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for i in num if int(i, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = '0123456789ABCDEF'\n\
    \    primes = [2, 3, 5, 7, 11, 13]\n    return sum(1 for x in num if x in hex_digits\
    \ and int(x, 16) in primes)\n\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    hex_primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for i in num:\n       \
    \ if i in hex_digits:\n            if i in hex_primes:\n                count\
    \ += 1\n    return count\n\ndef check(candidate):\n    assert candidate('AB')\
    \ == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') ==\
    \ 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return len([x for x in num\
    \ if x in ['2', '3', '5', '7', 'B', 'D']])\n\n\ndef check(candidate):\n    assert\
    \ candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33')\
    \ == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    primes = [2, 3, 5, 7, 11,\
    \ 13]\n    return sum(1 for x in num if int(x, 16) in primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: -1
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp41dkj941.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp41dkj941.py\", line 27,\
    \ in test_check\n    check(hex_key)\n  File \"/tmp/tmp41dkj941.py\", line 19,\
    \ in check\n    assert candidate('AB') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return sum(1 for i in num if i in hex_primes)\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    hex_primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    return sum(1 for x in num\
    \ if x in '2357BD')\n\n\ndef check(candidate):\n    assert candidate('AB') ==\
    \ 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n\
    \    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i in num:\n\
    \        if i in primes:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    count\
    \ = 0\n    for i in num:\n        if i in '2357BD':\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n\
    \    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n \
    \   assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') ==\
    \ 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n\
    \    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_digits = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    primes\
    \ = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if i in hex_digits:\n\
    \            if int(i, 16) in primes:\n                count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert\
    \ candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020')\
    \ == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    hex_primes = ['2', '3', '5',\
    \ '7', 'B', 'D']\n    return len([i for i in num if i in hex_primes])\n\n\ndef\
    \ check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976991
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    num = num.upper()\n    primes\
    \ = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for i in num if i in primes)\n\
    \n\ndef check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
    \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') ==\
    \ 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
    \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
- exit_code: 0
  program: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write\
    \ a function that receives \n    a hexadecimal number as a string and counts the\
    \ number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    num\
    \ = str(num)\n    count = 0\n    for i in num:\n        if i in ['2', '3', '5',\
    \ '7', 'B', 'D']:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert\
    \ candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0')\
    \ == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef\
    \ test_check():\n    check(hex_key)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976992
