language: py
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqu6uqzpd.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqu6uqzpd.py\", line 24,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpqu6uqzpd.py\", line\
    \ 17, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert\
    \ candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert candidate([11, 21,\
    \ 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\ndef test_check():\n\
    \    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqu6uqzpd.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqu6uqzpd.py\", line 24,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpqu6uqzpd.py\", line\
    \ 17, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n    assert\
    \ candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n    assert candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1], 1) == 1\n\n\
    def test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5p32xdi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc5p32xdi.py\", line 26,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpc5p32xdi.py\", line\
    \ 19, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\nAssertionError\n"
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n\
    \    for i in range(k):\n        if arr[i] < 10:\n            total += arr[i]\n\
    \        elif arr[i] < 100:\n            total += arr[i] % 10 + arr[i] // 10\n\
    \    return total\n\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmg7p8v1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbmg7p8v1.py\", line 31,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpbmg7p8v1.py\", line\
    \ 26, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\ndef check(candidate):\n    assert candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: -1
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n\
    \    for i in range(k):\n        if arr[i] < 10:\n            total += arr[i]\n\
    \        elif arr[i] < 100:\n            total += arr[i] % 10 + arr[i] // 10\n\
    \    return total\ndef check(candidate):\n    assert candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n  \
    \  assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert candidate([1],\
    \ 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_38l3h5k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_38l3h5k.py\", line 30,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmp_38l3h5k.py\", line\
    \ 25, in check\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(filter(lambda\
    \ x: x < 100, arr[:k]))\n\ndef check(candidate):\n    assert candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n\
    \    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert\
    \ candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
- exit_code: 0
  program: "from typing import List\n\ndef add_elements(arr: List[int], k: int) ->\
    \ int:\n    \"\"\"\n    Given a non-empty array of integers arr and an integer\
    \ k, return\n    the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n\n    Example:\n\n    \n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976896
