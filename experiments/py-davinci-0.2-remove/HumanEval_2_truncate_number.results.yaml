name: HumanEval_2_truncate_number
language: py
results:
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - math.floor(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecoqdtja.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpecoqdtja.py\", line 17,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpecoqdtja.py\", line\
    \ 12, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpecoqdtja.py\"\
    , line 8, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n        \"\"\"\n   \
    \ return number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
