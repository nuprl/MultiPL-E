language: py
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu371oa_e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(set(word)\
    \ & set(\"aeiou\")) == len(word) - n:\n                result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0ss17x5j.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    if len(s) == 0:\n        return\
    \ []\n    else:\n        words = s.split()\n        result = []\n        for word\
    \ in words:\n            if count_consonants(word) == n:\n                result.append(word)\n\
    \        return result\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjenfkol_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjenfkol_.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjenfkol_.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpjenfkol_.py\", line 17, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(set(word)\
    \ & set(\"aeiou\")) == len(word) - n:\n                result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0ss17x5j.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo47z9y7v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo47z9y7v.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpo47z9y7v.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(set(word)\
    \ & set(\"aeiou\")) == len(word) - n:\n                result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0ss17x5j.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(set(word) & set(\"bcdfghjklmnpqrstvwxyz\"\
    )) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9_zrqk0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx9_zrqk0.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx9_zrqk0.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    return\
    \ [word for word in words if len([c for c in word if c not in 'aeiou']) == n]\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7lx0b4c_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7lx0b4c_.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp7lx0b4c_.py\", line\
    \ 19, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            if len(set(word)\
    \ & set('aeiou')) == len(word) - n:\n                result.append(word)\n   \
    \ return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ygafg8z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3ygafg8z.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ygafg8z.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            consonants\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    consonants += 1\n            if consonants == n:\n      \
    \          result.append(word)\n    return result\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbi6b31iw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            consonants\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    consonants += 1\n            if consonants == n:\n    \
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6t88043j.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6t88043j.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6t88043j.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall('[^aeiou]', word)) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp626hag19.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp626hag19.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp626hag19.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp626hag19.py\", line 14, in select_words\n    if len(re.findall('[^aeiou]',\
    \ word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(set(word)\
    \ & set(\"bcdfghjklmnpqrstvwxyz\")) == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfey7yior.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfey7yior.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpfey7yior.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(set(word)\
    \ & set(\"aeiou\")) == len(word) - n:\n                result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0ss17x5j.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0ss17x5j.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(set(word) - set('aeiou')) == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vyhevcw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2vyhevcw.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2vyhevcw.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    if len(s) == 0:\n        return\
    \ []\n    words = s.split()\n    result = []\n    for word in words:\n       \
    \ if len(word) >= n:\n            consonants = 0\n            for letter in word:\n\
    \                if letter not in 'aeiou':\n                    consonants +=\
    \ 1\n            if consonants == n:\n                result.append(word)\n  \
    \  return result\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskdfu90j.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpskdfu90j.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpskdfu90j.py\", line\
    \ 29, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(list(filter(lambda x: x not in\
    \ 'aeiou', word))) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgggwt4u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsgggwt4u.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpsgggwt4u.py\", line\
    \ 23, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    words = s.split()\n    result = []\n    for word in words:\n     \
    \   count = 0\n        for letter in word:\n            if letter.lower() not\
    \ in vowels:\n                count += 1\n        if count == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu371oa_e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    s = s.split()\n    result\
    \ = []\n    for word in s:\n        count = 0\n        for letter in word:\n \
    \           if letter not in 'aeiou':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlgqo5hx.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxlgqo5hx.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxlgqo5hx.py\", line\
    \ 26, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(list(filter(lambda\
    \ x: x not in 'aeiou', word))) == n:\n                result.append(word)\n  \
    \  return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbak7nj1r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbak7nj1r.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbak7nj1r.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    return [word for word in s.split()\
    \ if len([c for c in word if c not in 'aeiou']) == n]\n\nprint(select_words('hello\
    \ world', 2))\nprint(select_words('hello world', 3))\nprint(select_words('', 2))\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk94ayy46.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk94ayy46.py\", line 26,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpk94ayy46.py\", line\
    \ 21, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: '[]

    [''hello'']

    []

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            consonants\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    consonants += 1\n            if consonants == n:\n      \
    \          result.append(word)\n    return result\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbi6b31iw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        count = 0\n        for char in word:\n\
    \            if char not in 'aeiou':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vgga4wv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5vgga4wv.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5vgga4wv.py\", line\
    \ 27, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            count =\
    \ 0\n            for char in word:\n                if char not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqf2eixy0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqf2eixy0.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqf2eixy0.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall(r'[^aeiou]', word))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdydkc5i_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdydkc5i_.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdydkc5i_.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpdydkc5i_.py\", line 14, in select_words\n    if len(re.findall(r'[^aeiou]',\
    \ word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            consonants\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    consonants += 1\n            if consonants == n:\n      \
    \          result.append(word)\n    return result\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbi6b31iw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu371oa_e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    return [word for word in s.split()\
    \ if len([c for c in word if c not in 'aeiou']) == n]\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbbaqjsuj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbbaqjsuj.py\", line 23,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbbaqjsuj.py\", line\
    \ 18, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            if len(set(word)\
    \ & set('aeiou')) == len(word) - n:\n                result.append(word)\n   \
    \ return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ygafg8z.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3ygafg8z.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3ygafg8z.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    return [word for word in s.split()\
    \ if sum(1 for c in word if c not in 'aeiou') == n]\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_u516ght.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_u516ght.py\", line 23,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_u516ght.py\", line\
    \ 18, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    if not s:\n        return\
    \ []\n    words = s.split()\n    result = []\n    for word in words:\n       \
    \ if len([c for c in word if c not in 'aeiou']) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnelct2s.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmplnelct2s.py\", line 30,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplnelct2s.py\", line\
    \ 25, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiouAEIOU\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word, re.IGNORECASE)) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesywtbry.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpesywtbry.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpesywtbry.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpesywtbry.py\", line 14, in select_words\n    if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word, re.IGNORECASE)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    return [word for word in s.split()\
    \ if len([char for char in word if char not in 'aeiou']) == n]\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqpcsqkm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprqpcsqkm.py\", line 23,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmprqpcsqkm.py\", line\
    \ 18, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\nprint(select_words(\"hello world\", 2))\nprint(select_words(\"\
    hello world\", 3))\nprint(select_words(\"hello world\", 4))\nprint(select_words(\"\
    hello world\", 5))\nprint(select_words(\"hello world\", 6))\nprint(select_words(\"\
    hello world\", 7))\nprint(select_words(\"hello world\", 8))\nprint(select_words(\"\
    hello world\", 9))\nprint(select_words(\"hello world\", 10))\nprint(select_words(\"\
    hello world\", 11))\nprint(select_words(\"hello world\", 12))\nprint(select_words(\"\
    hello world\", 13))\nprint(select_words(\"hello world\", 14))\nprint(select_words(\"\
    hello world\", 15))\nprint(select_words(\"hello world\", 16))\nprint(select_words(\"\
    hello world\", 17))\nprint(select_words(\"hello world\", 18))\nprint(select_words(\"\
    hello world\", 19))\nprint(select_words(\"hello world\", 20))\nprint(select_words(\"\
    hello world\", 21))\nprint(select_words(\"hello world\", 22))\nprint(select_words(\"\
    hello world\", 23))\nprint(select_words(\"hello world\", 24))\nprint(select_words(\"\
    hello world\", 25))\nprint(select_words(\"hello world\", 26))\nprint(select_words(\"\
    hello world\", 27))\nprint(select_words(\"hello world\", 28))\nprint(select_words(\"\
    hello world\", 29))\nprint(select_words(\"hello world\", 30))\nprint(select_words(\"\
    hello world\", 31))\nprint(select_words(\"hello world\", 32))\nprint(select_words(\"\
    hello world\", 33))\nprint(select_words(\"hello world\", 34))\nprint(select_words(\"\
    hello world\", 35))\nprint(select_words(\"hello world\", 36))\nprint(select_words(\"\
    hello world\", 37))\nprint(select_words(\"hello world\", 38))\nprint(select_words(\"\
    hello world\", 39))\nprint(select_words(\"hello world\", 40))\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq7z0tyhq.py\", line\
    \ 70, in <module>\n    test_check()\n  File \"/tmp/tmpq7z0tyhq.py\", line 68,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq7z0tyhq.py\", line\
    \ 59, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: '[]

    []

    []

    [''hello'', ''world'']

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    return [word for word in s.split()\
    \ if len([c for c in word if c not in 'aeiou']) == n]\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6t5mxpm7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6t5mxpm7.py\", line 22,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6t5mxpm7.py\", line\
    \ 17, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggiotdbg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpggiotdbg.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpggiotdbg.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpggiotdbg.py\", line 14, in select_words\n    if len(re.findall(r'[bcdfghjklmnpqrstvwxyz]',\
    \ word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(set(word).intersection(set(['a',\
    \ 'e', 'i', 'o', 'u']))) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcy1lyus5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcy1lyus5.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpcy1lyus5.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        count = 0\n        for letter in word:\n\
    \            if letter not in \"aeiou\":\n                count += 1\n       \
    \ if count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmd87380c.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpmd87380c.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmd87380c.py\", line\
    \ 27, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq5o1qjwl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpq5o1qjwl.py\", line 23,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpq5o1qjwl.py\", line\
    \ 14, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if len(list(filter(lambda\
    \ x: x not in \"aeiou\", word))) == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9huk6eb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy9huk6eb.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpy9huk6eb.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    result = []\n    for word\
    \ in s.split():\n        if len([c for c in word if c not in 'aeiou']) == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp211c72x_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp211c72x_.py\", line 27,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp211c72x_.py\", line\
    \ 22, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    if s == \"\":\n        return\
    \ []\n    else:\n        words = s.split()\n        result = []\n        for word\
    \ in words:\n            if len(word) >= n:\n                count = 0\n     \
    \           for letter in word:\n                    if letter not in \"aeiou\"\
    :\n                        count += 1\n                if count == n:\n      \
    \              result.append(word)\n        return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rpvwqvr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1rpvwqvr.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp1rpvwqvr.py\", line\
    \ 31, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(set(word) & set(\"bcdfghjklmnpqrstvwxyz\"\
    )) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9_zrqk0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx9_zrqk0.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx9_zrqk0.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(set(word) & set('bcdfghjklmnpqrstvwxyz'))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjiyuyc3e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjiyuyc3e.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjiyuyc3e.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\nprint(select_words('hello world', 2))\nprint(select_words('hello\
    \ world', 3))\nprint(select_words('hello world', 4))\nprint(select_words('hello\
    \ world', 5))\nprint(select_words('hello world', 6))\nprint(select_words('hello\
    \ world', 7))\nprint(select_words('hello world', 8))\nprint(select_words('hello\
    \ world', 9))\nprint(select_words('hello world', 10))\nprint(select_words('hello\
    \ world', 11))\nprint(select_words('hello world', 12))\nprint(select_words('hello\
    \ world', 13))\nprint(select_words('hello world', 14))\nprint(select_words('hello\
    \ world', 15))\nprint(select_words('hello world', 16))\nprint(select_words('hello\
    \ world', 17))\nprint(select_words('hello world', 18))\nprint(select_words('hello\
    \ world', 19))\nprint(select_words('hello world', 20))\nprint(select_words('hello\
    \ world', 21))\nprint(select_words('hello world', 22))\nprint(select_words('hello\
    \ world', 23))\nprint(select_words('hello world', 24))\nprint(select_words('hello\
    \ world', 25))\nprint(select_words('hello world', 26))\nprint(select_words('hello\
    \ world', 27))\nprint(select_words('hello world', 28))\nprint(select_words('hello\
    \ world', 29))\nprint(select_words('hello world', 30))\nprint(select_words('hello\
    \ world', 31))\nprint(select_words('hello world', 32))\nprint(select_words('hello\
    \ world', 33))\nprint(select_words('hello world', 34))\nprint(select_words('hello\
    \ world', 35))\nprint(select_words('hello world', 36))\nprint(select_words('hello\
    \ world', 37))\nprint\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbyj6nkx5.py\", line\
    \ 72, in <module>\n    test_check()\n  File \"/tmp/tmpbyj6nkx5.py\", line 70,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbyj6nkx5.py\", line\
    \ 65, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: '[]

    [''hello'']

    [''world'']

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            consonants\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    consonants += 1\n            if consonants == n:\n      \
    \          result.append(word)\n    return result\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5m5kvw15.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5m5kvw15.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp5m5kvw15.py\", line\
    \ 27, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) < n:\n            continue\n\
    \        count = 0\n        for letter in word:\n            if letter not in\
    \ 'aeiou':\n                count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3r4zffkl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3r4zffkl.py\", line 34,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp3r4zffkl.py\", line\
    \ 29, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            if word.count('a')\
    \ + word.count('e') + word.count('i') + word.count('o') + word.count('u') == n:\n\
    \                result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpufyfs1la.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpufyfs1la.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpufyfs1la.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            count =\
    \ 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzg4589s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgzg4589s.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgzg4589s.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu371oa_e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall(r'[^aeiou]', word))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdydkc5i_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdydkc5i_.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdydkc5i_.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpdydkc5i_.py\", line 14, in select_words\n    if len(re.findall(r'[^aeiou]',\
    \ word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            if word.count('a')\
    \ + word.count('e') + word.count('i') + word.count('o') + word.count('u') == n:\n\
    \                result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppckmo6b4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppckmo6b4.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppckmo6b4.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for char in word:\n                if char not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a081ugh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4a081ugh.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4a081ugh.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for char in word:\n                if char not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a081ugh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4a081ugh.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4a081ugh.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            if len(set(word).intersection(set(['a',\
    \ 'e', 'i', 'o', 'u']))) == n:\n                result.append(word)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplhzipvtu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplhzipvtu.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmplhzipvtu.py\", line\
    \ 20, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for char in word:\n                if char not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a081ugh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4a081ugh.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4a081ugh.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall(r'[^aeiou]', word))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdydkc5i_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdydkc5i_.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpdydkc5i_.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpdydkc5i_.py\", line 14, in select_words\n    if len(re.findall(r'[^aeiou]',\
    \ word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswrphcor.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpswrphcor.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpswrphcor.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        count = 0\n        for letter in word:\n\
    \            if letter not in 'aeiou':\n                count += 1\n        if\
    \ count == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphq6w9lo0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphq6w9lo0.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmphq6w9lo0.py\", line\
    \ 27, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu371oa_e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            consonants\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    consonants += 1\n            if consonants == n:\n      \
    \          result.append(word)\n    return result\n\ndef check(candidate):\n \
    \   assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbi6b31iw.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpbi6b31iw.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in 'aeiou':\n\
    \                    count += 1\n            if count == n:\n                result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt6aa3a0p.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpt6aa3a0p.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    if s == \"\":\n        return\
    \ []\n    else:\n        words = s.split()\n        result = []\n        for word\
    \ in words:\n            if len(word) == n:\n                result.append(word)\n\
    \        return result\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzkqugk1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptzkqugk1.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptzkqugk1.py\", line\
    \ 22, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if count_consonants(word) == n:\n    \
    \        result.append(word)\n    return result\n\ndef check(candidate):\n   \
    \ assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4u6yskxe.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4u6yskxe.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp4u6yskxe.py\", line 14, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for letter in word:\n                if letter not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu371oa_e.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpu371oa_e.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp239cjgaf.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp239cjgaf.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswrphcor.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpswrphcor.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpswrphcor.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        consonants = 0\n        for letter in\
    \ word:\n            if letter not in \"aeiouAEIOU\":\n                consonants\
    \ += 1\n        if consonants == n:\n            result.append(word)\n    return\
    \ result\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    pass\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswrphcor.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpswrphcor.py\", line 24,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpswrphcor.py\", line\
    \ 15, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\nprint(select_words(\"hello world\", 5))\nprint(select_words(\"\
    hello world\", 4))\nprint(select_words(\"hello world\", 3))\nprint(select_words(\"\
    hello world\", 2))\nprint(select_words(\"hello world\", 1))\nprint(select_words(\"\
    hello world\", 0))\nprint(select_words(\"\", 0))\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvufvnay.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnvufvnay.py\", line 35,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnvufvnay.py\", line\
    \ 26, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: '[''hello'', ''world'']

    []

    []

    []

    []

    []

    []

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(re.findall(r'[bcdfghjklmnpqrstvwxz]',\
    \ word, re.IGNORECASE)) == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnly27rf7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnly27rf7.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpnly27rf7.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpnly27rf7.py\", line 14, in select_words\n    if len(re.findall(r'[bcdfghjklmnpqrstvwxz]',\
    \ word, re.IGNORECASE)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    # your code here\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp097i2f4l.py\", line 25,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp097i2f4l.py\", line\
    \ 16, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) > n:\n            if len(set(word)\
    \ & set(\"aeiou\")) == len(word) - n:\n                result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvssuklnd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvssuklnd.py\", line 29,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvssuklnd.py\", line\
    \ 24, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) >= n:\n            count\
    \ = 0\n            for char in word:\n                if char not in \"aeiou\"\
    :\n                    count += 1\n            if count == n:\n              \
    \  result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_exh4wgt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_exh4wgt.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_exh4wgt.py\", line\
    \ 28, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n\
    \    \"\"\"Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns a list of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty list.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n                        \"\"\"\n    words = s.split()\n    result\
    \ = []\n    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgkvart8t.py\", line 28,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpgkvart8t.py\", line\
    \ 19, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
