name: HumanEval_120_maximum
language: py
results:
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9m6wlj19.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp9m6wlj19.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9m6wlj19.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9clyycn.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpn9clyycn.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpn9clyycn.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return arr[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rytehuc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2rytehuc.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2rytehuc.py\", line 36,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # max heap\n    heap = []\n    for i in\
    \ range(k):\n        heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n\
    \        if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return sorted([-x for x in heap])\n\ndef check(candidate):\n \
    \   assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0opw2vhh.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp0opw2vhh.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0opw2vhh.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp0opw2vhh.py\"\
    , line 25, in maximum\n    heapq.heappush(heap, -arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for i in range(k):\n    \
    \    heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n        if\
    \ arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return heapq.nlargest(k, heap)\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuyjwx21c.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpuyjwx21c.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpuyjwx21c.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpuyjwx21c.py\"\
    , line 24, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyryqfy01.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpyryqfy01.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpyryqfy01.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdevcayr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwdevcayr.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwdevcayr.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2zgb0e6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv2zgb0e6.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv2zgb0e6.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ke7o57t.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4ke7o57t.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4ke7o57t.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfcf6h07.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjfcf6h07.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjfcf6h07.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohnlj_ah.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpohnlj_ah.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpohnlj_ah.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpze4asrmg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpze4asrmg.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpze4asrmg.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgckxfuu_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgckxfuu_.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgckxfuu_.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvi3gg1ag.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvi3gg1ag.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvi3gg1ag.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kh52wsf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3kh52wsf.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3kh52wsf.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphqrmp19j.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphqrmp19j.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphqrmp19j.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpchfki59x.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpchfki59x.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpchfki59x.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjvncj26g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjvncj26g.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjvncj26g.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0jijyyh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq0jijyyh.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpq0jijyyh.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4p2rooy.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpt4p2rooy.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpt4p2rooy.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjv8a0ge.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwjv8a0ge.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwjv8a0ge.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp683gviql.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp683gviql.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp683gviql.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz_4nfra.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgz_4nfra.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgz_4nfra.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxc4hemkr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxc4hemkr.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxc4hemkr.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6gh8hkp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr6gh8hkp.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpr6gh8hkp.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5qetgqn.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmps5qetgqn.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps5qetgqn.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbuiynet.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpnbuiynet.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnbuiynet.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5yb7ny6e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5yb7ny6e.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5yb7ny6e.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_37swdf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw_37swdf.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpw_37swdf.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8oyv530.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_8oyv530.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_8oyv530.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpki8m5ku9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpki8m5ku9.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpki8m5ku9.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjdtp74u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbjdtp74u.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbjdtp74u.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_r5do15.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7_r5do15.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7_r5do15.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0br75sb2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0br75sb2.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0br75sb2.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ppgb4f4.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8ppgb4f4.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8ppgb4f4.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5xp8d2a.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw5xp8d2a.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpw5xp8d2a.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4r6nzn6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpf4r6nzn6.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpf4r6nzn6.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpviftlb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwpviftlb.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwpviftlb.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjzyg31u3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjzyg31u3.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjzyg31u3.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1tuhhbrf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1tuhhbrf.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1tuhhbrf.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswbqotme.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpswbqotme.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpswbqotme.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4r29ct1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpj4r29ct1.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpj4r29ct1.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0s4kv4zk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0s4kv4zk.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0s4kv4zk.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqs7igwxe.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqs7igwxe.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqs7igwxe.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplov8znf1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmplov8znf1.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplov8znf1.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9olbjs9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpe9olbjs9.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe9olbjs9.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not arr:\n        return []\n    if k\
    \ == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    if k > len(arr):\n        return []\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93sup5ze.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp93sup5ze.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp93sup5ze.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4k4vq6e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpx4k4vq6e.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx4k4vq6e.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0unso8zk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0unso8zk.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0unso8zk.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvqfz2rv.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmptvqfz2rv.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptvqfz2rv.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncmr8h7p.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpncmr8h7p.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpncmr8h7p.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02sod967.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp02sod967.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp02sod967.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpps360i.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjpps360i.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjpps360i.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdcy8g1eq.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdcy8g1eq.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdcy8g1eq.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdlfuwqq.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfdlfuwqq.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfdlfuwqq.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6ftjuin.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm6ftjuin.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpm6ftjuin.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8x5lcfm9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8x5lcfm9.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8x5lcfm9.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jhw1mou.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8jhw1mou.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8jhw1mou.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqur8pjlx.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpqur8pjlx.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqur8pjlx.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxn6jq62u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxn6jq62u.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxn6jq62u.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvpevtha.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprvpevtha.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprvpevtha.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwq9qhbf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprwq9qhbf.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprwq9qhbf.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzink1cz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdzink1cz.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdzink1cz.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzhrlngh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbzhrlngh.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbzhrlngh.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc29hkky.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpnc29hkky.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnc29hkky.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not arr:\n        return []\n    if k\
    \ == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    if k > len(arr):\n        return []\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddmgqhb1.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpddmgqhb1.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpddmgqhb1.py\", line 41,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpddmgqhb1.py\"\
    , line 32, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkq4y228i.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpkq4y228i.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpkq4y228i.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k\
    \ == len(arr):\n        return sorted(arr)\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8aa6yqkd.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp8aa6yqkd.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8aa6yqkd.py\", line 37,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmp8aa6yqkd.py\"\
    , line 28, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy39bj9m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwy39bj9m.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwy39bj9m.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqt04_t4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgqt04_t4.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgqt04_t4.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn39g94gi.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpn39g94gi.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpn39g94gi.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizohgg45.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpizohgg45.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpizohgg45.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwte3111.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpuwte3111.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpuwte3111.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgqkiga7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmptgqkiga7.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptgqkiga7.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for num in arr:\n       \
    \ heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\
    \    return heapq.nlargest(k, heap)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeax7rgvq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpeax7rgvq.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpeax7rgvq.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpeax7rgvq.py\"\
    , line 24, in maximum\n    heapq.heappush(heap, num)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoauqamkw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpoauqamkw.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoauqamkw.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqykvaew7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpqykvaew7.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqykvaew7.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfpxvmq7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgfpxvmq7.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgfpxvmq7.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcc01vub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpvcc01vub.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvcc01vub.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1ygo6x7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpk1ygo6x7.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpk1ygo6x7.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nmddfa1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8nmddfa1.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8nmddfa1.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ilozdnl.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1ilozdnl.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1ilozdnl.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv39qxlzw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv39qxlzw.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv39qxlzw.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7gbxjez.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp7gbxjez.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp7gbxjez.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpluuzbsep.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpluuzbsep.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpluuzbsep.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvzjinyl.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnvzjinyl.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpnvzjinyl.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvqpe5r9y.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvqpe5r9y.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvqpe5r9y.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ysrlo0u.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp2ysrlo0u.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2ysrlo0u.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k\
    \ == len(arr):\n        return sorted(arr)\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi352ay01.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpi352ay01.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpi352ay01.py\", line 37,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpi352ay01.py\"\
    , line 28, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb38dur3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzb38dur3.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzb38dur3.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7vrnlj4.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_7vrnlj4.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_7vrnlj4.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphngvmzdp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphngvmzdp.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphngvmzdp.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7nshy8j.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpl7nshy8j.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpl7nshy8j.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for i in range(k):\n    \
    \    heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n        if\
    \ arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjz1t_sl.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpcjz1t_sl.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcjz1t_sl.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpcjz1t_sl.py\"\
    , line 24, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5pu2oy5w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp5pu2oy5w.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5pu2oy5w.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojy2oas8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpojy2oas8.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpojy2oas8.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpib91norm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpib91norm.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpib91norm.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeoml_9b7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpeoml_9b7.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpeoml_9b7.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xr1ig_6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6xr1ig_6.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6xr1ig_6.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecls9z_d.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpecls9z_d.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpecls9z_d.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4anyxhjw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4anyxhjw.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4anyxhjw.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmgujvc6z.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmgujvc6z.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmgujvc6z.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_29wkaj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7_29wkaj.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7_29wkaj.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpar2w1p3k.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpar2w1p3k.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpar2w1p3k.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for i in range(k):\n    \
    \    heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n        if\
    \ arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65j0r5u7.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp65j0r5u7.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp65j0r5u7.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp65j0r5u7.py\"\
    , line 24, in maximum\n    heapq.heappush(heap, arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99ixogvt.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp99ixogvt.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp99ixogvt.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rfod7ia.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6rfod7ia.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6rfod7ia.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz81f3ze.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzz81f3ze.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzz81f3ze.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n0hnre9.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1n0hnre9.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1n0hnre9.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0u3722_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpz0u3722_.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpz0u3722_.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppncsohz1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmppncsohz1.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppncsohz1.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn86ugt5b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpn86ugt5b.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpn86ugt5b.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    elif\
    \ k == len(arr):\n        return sorted(arr, reverse=True)\n    else:\n      \
    \  heap = arr[:k]\n        heapq.heapify(heap)\n        for i in range(k, len(arr)):\n\
    \            if arr[i] > heap[0]:\n                heapq.heapreplace(heap, arr[i])\n\
    \        return sorted(heap, reverse=True)\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7lmhid1.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpe7lmhid1.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpe7lmhid1.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5pboa4p.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpg5pboa4p.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpg5pboa4p.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_0lgf5_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7_0lgf5_.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7_0lgf5_.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvv731rir.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpvv731rir.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvv731rir.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpvv731rir.py\"\
    , line 23, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4cs1h2c3.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp4cs1h2c3.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4cs1h2c3.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxr1h_ny.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppxr1h_ny.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppxr1h_ny.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajq9f1pc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpajq9f1pc.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpajq9f1pc.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1epkh6f_.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1epkh6f_.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1epkh6f_.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa07ifxro.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpa07ifxro.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpa07ifxro.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmliy8fwk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmliy8fwk.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmliy8fwk.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgoqiraa.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbgoqiraa.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbgoqiraa.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq105p0vm.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpq105p0vm.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpq105p0vm.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vvzr_ly.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp4vvzr_ly.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4vvzr_ly.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7iolnwc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpu7iolnwc.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpu7iolnwc.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuf_91kbk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpuf_91kbk.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpuf_91kbk.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp032xc483.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp032xc483.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp032xc483.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp85ykv8yb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp85ykv8yb.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp85ykv8yb.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k\
    \ == len(arr):\n        return sorted(arr)\n    return sorted(arr)[-k:]\n\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7095w1ck.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7095w1ck.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7095w1ck.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcuj161yg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcuj161yg.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcuj161yg.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlkk0mjk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdlkk0mjk.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdlkk0mjk.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z0gzwtf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4z0gzwtf.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4z0gzwtf.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1dy11vw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpy1dy11vw.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpy1dy11vw.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpap3ulu86.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpap3ulu86.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpap3ulu86.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvn07iwfl.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpvn07iwfl.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvn07iwfl.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ril1il3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3ril1il3.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3ril1il3.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58ni5i6w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp58ni5i6w.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp58ni5i6w.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ja4hto8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp5ja4hto8.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp5ja4hto8.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpynceulyw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpynceulyw.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpynceulyw.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbqvicv4w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbqvicv4w.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbqvicv4w.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjo8iq8ng.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjo8iq8ng.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjo8iq8ng.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8_zmqum.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpt8_zmqum.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpt8_zmqum.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbnppico.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwbnppico.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwbnppico.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph3ix7vqr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmph3ix7vqr.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmph3ix7vqr.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_wzutz3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpl_wzutz3.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpl_wzutz3.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wq1pw91.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4wq1pw91.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4wq1pw91.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpixuhhqcj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpixuhhqcj.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpixuhhqcj.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3n3p1i94.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3n3p1i94.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3n3p1i94.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwvbo7af.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzwvbo7af.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpzwvbo7af.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv58qqk2e.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv58qqk2e.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv58qqk2e.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93js_xi1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp93js_xi1.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp93js_xi1.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsz5t_la.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdsz5t_la.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdsz5t_la.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7zn0rx5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpa7zn0rx5.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpa7zn0rx5.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuuoaoump.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpuuoaoump.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpuuoaoump.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_kyvst7.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm_kyvst7.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpm_kyvst7.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5_g8abf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpj5_g8abf.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpj5_g8abf.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp534ibdlc.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp534ibdlc.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp534ibdlc.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfsykg12c.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfsykg12c.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfsykg12c.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_3q85xa.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7_3q85xa.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7_3q85xa.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4q512kn8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4q512kn8.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4q512kn8.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus79x52b.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpus79x52b.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpus79x52b.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    heap = []\n    for i in range(k):\n    \
    \    heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n       \
    \ if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return [-x for x in heap]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqh_jks49.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpqh_jks49.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqh_jks49.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpqh_jks49.py\"\
    , line 24, in maximum\n    heapq.heappush(heap, -arr[i])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakr3ydn6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpakr3ydn6.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpakr3ydn6.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0b5vqe1j.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0b5vqe1j.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0b5vqe1j.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpklxi62ou.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpklxi62ou.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpklxi62ou.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wfz3lwy.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3wfz3lwy.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3wfz3lwy.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjrodejk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcjrodejk.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcjrodejk.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # return sorted(arr, reverse=True)[:k]\n\
    \    return heapq.nlargest(k, arr)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2m752hd5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2m752hd5.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2m752hd5.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp2m752hd5.py\"\
    , line 23, in maximum\n    return heapq.nlargest(k, arr)\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'help'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3f9wkw1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv3f9wkw1.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv3f9wkw1.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptdh7s58b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmptdh7s58b.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptdh7s58b.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpephm729b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpephm729b.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpephm729b.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsl77seim.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpsl77seim.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpsl77seim.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkb8wmj4u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpkb8wmj4u.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpkb8wmj4u.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfpusy4wq.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfpusy4wq.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpfpusy4wq.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ymiiv9l.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0ymiiv9l.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0ymiiv9l.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # Time complexity: O(N*log(N))\n    # Space\
    \ complexity: O(N)\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgn767h07.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgn767h07.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgn767h07.py\", line 37,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k\
    \ == len(arr):\n        return sorted(arr)\n    heap = arr[:k]\n    heapq.heapify(heap)\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heapreplace(heap,\
    \ arr[i])\n    return sorted(heap)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kesvt5o.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp1kesvt5o.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1kesvt5o.py\", line 35,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmp1kesvt5o.py\"\
    , line 27, in maximum\n    heapq.heapify(heap)\nNameError: name 'heapq' is not\
    \ defined. Did you mean: 'heap'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxds68vd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwxds68vd.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwxds68vd.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppm6u92v2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppm6u92v2.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppm6u92v2.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprgnrhyuk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmprgnrhyuk.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprgnrhyuk.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05_map_b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp05_map_b.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp05_map_b.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k\
    \ >= len(arr):\n        return sorted(arr, reverse=True)\n    else:\n        return\
    \ sorted(arr, reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4c3_wow7.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4c3_wow7.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4c3_wow7.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5z3kroc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpw5z3kroc.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpw5z3kroc.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8mhfcr_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmph8mhfcr_.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmph8mhfcr_.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoffy0gdw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpoffy0gdw.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoffy0gdw.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7rpf8mso.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp7rpf8mso.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp7rpf8mso.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mrdo1nd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_mrdo1nd.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_mrdo1nd.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ar6c4g8.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1ar6c4g8.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1ar6c4g8.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbotly949.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpbotly949.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbotly949.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cj6b47i.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_cj6b47i.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_cj6b47i.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbk0jtvz5.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpbk0jtvz5.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpbk0jtvz5.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1_f5i3g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmps1_f5i3g.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps1_f5i3g.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11ydlh7c.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp11ydlh7c.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp11ydlh7c.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ergt4mb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp0ergt4mb.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0ergt4mb.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiru48hc1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpiru48hc1.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpiru48hc1.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppcrbk0dk.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppcrbk0dk.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppcrbk0dk.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdj9830zb.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpdj9830zb.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdj9830zb.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
