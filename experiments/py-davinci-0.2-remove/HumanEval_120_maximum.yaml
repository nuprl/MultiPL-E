name: HumanEval_120_maximum
language: py
prompt: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
  \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n      \
  \  1. The length of the array will be in the range of [1, 1000].\n        2. The\
  \ elements in the array will be in the range of [-1000, 1000].\n        3. 0 <=\
  \ k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    pass\n\n", "    pass\n\n", "    arr.sort()\n    return arr[-k:]\n",
  "    # max heap\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,\
    \ -arr[i])\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0]:\n\
    \            heapq.heappop(heap)\n            heapq.heappush(heap, -arr[i])\n\
    \    return sorted([-x for x in heap])\n", "    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return heapq.nlargest(k, heap)\n", "    pass\n", "    pass\n\n",
  "    pass\n\n", '    return sorted(arr, reverse=True)[:k]', "    pass\n\n", "  \
    \  pass\n\n", "    pass\n\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n\n", " \
    \   pass\n\n", "    pass\n\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", " \
    \   pass\n\n", "    pass\n\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", " \
    \   pass\n\n", "    pass\n\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n",
  "    pass\n\n", "    if not arr:\n        return []\n    if k == 0:\n        return\
    \ []\n    if k == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n\
    \        return []\n    return sorted(arr)[-k:]\n", "    pass\n\n", "    pass\n\
    \n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n", "    pass\n\n", "    pass\n\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n", "  \
    \  return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n\n", " \
    \   pass\n\n", "    if not arr:\n        return []\n    if k == 0:\n        return\
    \ []\n    if k == len(arr):\n        return sorted(arr)\n    if k > len(arr):\n\
    \        return []\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,\
    \ arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n  \
    \          heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n   \
    \ return sorted(heap)\n", "    pass\n\n", "    if k == 0:\n        return []\n\
    \    if k == len(arr):\n        return sorted(arr)\n    heap = []\n    for i in\
    \ range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n\
    \        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap)\n", "    pass\n", "    pass\n\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    heap = []\n    for num\
    \ in arr:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n    \
    \        heapq.heappop(heap)\n    return heapq.nlargest(k, heap)\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", '    return sorted(arr, reverse=True)[:k]',
  "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n\n", " \
    \   pass\n\n", "    pass\n", '    return sorted(arr, reverse=True)[:k]', "   \
    \ return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap)\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    heap = []\n    for i\
    \ in range(k):\n        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n\
    \        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n", "    pass\n\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\
    \n", "    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, arr[i])\n    return sorted(heap, reverse=True)\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n", "    pass\n\n", " \
    \   pass\n", "    pass\n\n", "    if k == 0:\n        return []\n    elif k ==\
    \ len(arr):\n        return sorted(arr, reverse=True)\n    else:\n        heap\
    \ = arr[:k]\n        heapq.heapify(heap)\n        for i in range(k, len(arr)):\n\
    \            if arr[i] > heap[0]:\n                heapq.heapreplace(heap, arr[i])\n\
    \        return sorted(heap, reverse=True)\n", "    pass\n\n", "    pass\n\n",
  "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n\n", " \
    \   pass\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    pass\n", "    pass\n\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    pass\n", "    pass\n\n", "    if k == 0:\n      \
    \  return []\n    if k == len(arr):\n        return sorted(arr)\n    return sorted(arr)[-k:]\n\
    \n", "    pass\n\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n",
  "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n", " \
    \   pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n", "    pass\n\n", " \
    \   pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n", " \
    \   heap = []\n    for i in range(k):\n        heapq.heappush(heap, -arr[i])\n\
    \    for i in range(k, len(arr)):\n        if -arr[i] > heap[0]:\n           \
    \ heapq.heappop(heap)\n            heapq.heappush(heap, -arr[i])\n    return [-x\
    \ for x in heap]\n", "    pass\n\n", "    pass\n\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    pass\n\n", "    pass\n\n", "    # return sorted(arr, reverse=True)[:k]\n  \
    \  return heapq.nlargest(k, arr)\n", "    pass\n\n", "    pass\n\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    # Time\
    \ complexity: O(N*log(N))\n    # Space complexity: O(N)\n    return sorted(arr)[-k:]\n",
  "    if k == 0:\n        return []\n    if k == len(arr):\n        return sorted(arr)\n\
    \    heap = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n\
    \        if arr[i] > heap[0]:\n            heapq.heapreplace(heap, arr[i])\n \
    \   return sorted(heap)\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", " \
    \   pass\n\n", "    if k == 0:\n        return []\n    if k >= len(arr):\n   \
    \     return sorted(arr, reverse=True)\n    else:\n        return sorted(arr,\
    \ reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    pass\n\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n", "    pass\n\n", "    pass\n\n", "    pass\n\
    \n", "    pass\n\n", "    pass\n\n", '    return sorted(arr, reverse=True)[:k]',
  "    pass\n\n", '    return sorted(arr, reverse=True)[:k]']
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
