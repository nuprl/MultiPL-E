name: HumanEval_21_rescale_to_unit
language: py
prompt: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\
  \    \"\"\" Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    such that the smallest number will become 0 and the largest\
  \ will become 1\n        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
  \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
  \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
  \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
  \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
  \ntest_check()\n"
completions: ["    assert len(numbers) > 1, \"Cannot rescale a list of one element\"\
    \n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"Cannot rescale a list of equal elements\"\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    min_val = min(numbers)\n    max_val = max(numbers)\n\
    \    assert max_val != min_val\n    return [(n - min_val) / (max_val - min_val)\
    \ for n in numbers]\n", "    assert len(numbers) > 1, \"Can't rescale a list with\
    \ only one element\"\n    min_num, max_num = min(numbers), max(numbers)\n    assert\
    \ min_num != max_num, \"Can't rescale a list with only one unique element\"\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list of only one element\"\n \
    \   min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list of only one unique element\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1,\
    \ \"Need at least two numbers to rescale\"\n    min_num, max_num = min(numbers),\
    \ max(numbers)\n    assert min_num != max_num, \"Cannot rescale a list with only\
    \ one number\"\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list of length 1\"\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"Cannot rescale a list of equal numbers\"\n    return [(x - min_value) / (max_value\
    \ - min_value) for x in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale\
    \ a list of length < 2\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list of identical elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1\n    min_val = min(numbers)\n    max_val = max(numbers)\n\
    \    assert min_val != max_val\n    return [(x - min_val) / (max_val - min_val)\
    \ for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError('The\
    \ list must have at least two elements')\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    if min_num == max_num:\n        raise ValueError('The list\
    \ must have at least two different elements')\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]", "    assert len(numbers) > 1, \"The list must\
    \ contain at least two numbers\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num, \"The list must contain at least two different\
    \ numbers\"\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i]\
    \ - min_num) / (max_num - min_num)\n    return numbers\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list with only one element\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"Cannot\
    \ rescale a list with only one unique element\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list with less than two elements\"\n    min_number =\
    \ min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ max_number > min_number\n    return [(n - min_number) / (max_number - min_number)\
    \ for n in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list\
    \ with less than two elements\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list with all equal elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list with only one element\"\n\
    \    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list with only one unique element\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1,\
    \ \"Cannot rescale a list with less than two elements\"\n    min_value, max_value\
    \ = min(numbers), max(numbers)\n    assert min_value != max_value, \"Cannot rescale\
    \ a list with all equal elements\"\n    return [(n - min_value) / (max_value -\
    \ min_value) for n in numbers]\n", "    assert len(numbers) > 1, \"List must have\
    \ at least two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"List must have at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError('At\
    \ least two numbers are required')\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    if max_number == min_number:\n        raise ValueError('All\
    \ numbers are equal')\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list with less than two elements\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list with all the same elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list with only one element\"\n\
    \    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list with only one unique element\"\n    return [(x - min_num)\
    \ / (max_num - min_num) for x in numbers]\n", "    assert len(numbers) > 1, \"\
    Cannot rescale a list with only one element\"\n    min_num, max_num = min(numbers),\
    \ max(numbers)\n    assert min_num != max_num, \"Cannot rescale a list with all\
    \ the same elements\"\n    return [(num - min_num) / (max_num - min_num) for num\
    \ in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with less\
    \ than two elements\"\n    min_num, max_num = min(numbers), max(numbers)\n   \
    \ assert min_num != max_num, \"Cannot rescale a list with all equal elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list with only one element\"\n\
    \    min_number = min(numbers)\n    max_number = max(numbers)\n    assert max_number\
    \ != min_number, \"Cannot rescale a list with only one unique element\"\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"Cannot rescale a list with less than two elements\"\
    \n    min_number, max_number = min(numbers), max(numbers)\n    assert min_number\
    \ != max_number, \"Cannot rescale a list with all equal elements\"\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"Can't rescale a list with only one element\"\n \
    \   min_n = min(numbers)\n    max_n = max(numbers)\n    assert min_n != max_n,\
    \ \"Can't rescale a list with only one unique element\"\n    return [(n - min_n)\
    \ / (max_n - min_n) for n in numbers]\n", "    assert len(numbers) >= 2, \"Cannot\
    \ rescale a list with less than two numbers\"\n    min_num, max_num = min(numbers),\
    \ max(numbers)\n    assert min_num != max_num, \"Cannot rescale a list with only\
    \ one number\"\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with a single element\"\n\
    \    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list with all the same elements\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1,\
    \ \"Cannot rescale a list with less than two elements\"\n    min_num, max_num\
    \ = min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot rescale\
    \ a list with all equal elements\"\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) > 1, \"List must have at least\
    \ two elements\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert min_value != max_value, \"All numbers in the list are the same\"\n\
    \    return [(x - min_value) / (max_value - min_value) for x in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list with less than two elements\"\
    \n    min_n, max_n = min(numbers), max(numbers)\n    return [(n - min_n) / (max_n\
    \ - min_n) for n in numbers]\n", "    assert len(numbers) > 1\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    assert min_num != max_num\n    return [(num -\
    \ min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ > 1, \"List must have at least two elements\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    assert min_num != max_num, \"List must have at\
    \ least two different elements\"\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) > 1, \"The list must have at\
    \ least two elements\"\n    max_number = max(numbers)\n    min_number = min(numbers)\n\
    \    assert max_number != min_number, \"The list must have at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers\
    \ to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n    assert\
    \ min_num != max_num, \"Cannot rescale list of identical numbers\"\n    return\
    \ [(num - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list of one element\"\n    min_n = min(numbers)\n  \
    \  max_n = max(numbers)\n    return [(n - min_n) / (max_n - min_n) for n in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list of one element\"\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot\
    \ rescale a list of identical numbers\"\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale\
    \ a list of length 1\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    assert max_value != min_value, \"Cannot rescale a list of identical numbers\"\
    \n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with a single element\"\n\
    \    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1\n\
    \    min_num = min(numbers)\n    max_num = max(numbers)\n    assert min_num !=\
    \ max_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) > 1, \"List must have at least two elements\"\n    min_num\
    \ = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with only one element\"\n\
    \    min_value = min(numbers)\n    max_value = max(numbers)\n    assert max_value\
    \ != min_value, \"Cannot rescale a list with all the same values\"\n    return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n", "    assert\
    \ len(numbers) > 1, \"Cannot rescale a list of length 1\"\n    min_num, max_num\
    \ = min(numbers), max(numbers)\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with a single element\"\n    largest = max(numbers)\n    smallest\
    \ = min(numbers)\n    assert largest != smallest, \"Cannot rescale a list with\
    \ all equal elements\"\n    return [(n - smallest) / (largest - smallest) for\
    \ n in numbers]\n", "    assert len(numbers) > 1, \"List must have at least two\
    \ elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n \
    \   return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    smallest = min(numbers)\n    largest = max(numbers)\n\
    \    assert smallest != largest\n    return [(n - smallest) / (largest - smallest)\
    \ for n in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    Cannot rescale a list with less than 2 elements\")\n    min_n = min(numbers)\n\
    \    max_n = max(numbers)\n    if min_n == max_n:\n        return [0.5] * len(numbers)\n\
    \    return [(n - min_n) / (max_n - min_n) for n in numbers]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"At least two numbers are required\")\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    if min_number == max_number:\n\
    \        raise ValueError(\"All numbers are the same\")\n    return [(number -\
    \ min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) > 1, \"List must contain at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"All numbers in the list are equal\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"List\
    \ must have at least two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for\
    \ x in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with\
    \ a single element\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with all equal elements\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with less\
    \ than two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with all equal elements\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with less\
    \ than two elements\"\n    min_num, max_num = min(numbers), max(numbers)\n   \
    \ assert min_num != max_num, \"Cannot rescale a list with all the same elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list with a single element\"\n\
    \    min_val, max_val = min(numbers), max(numbers)\n    assert min_val != max_val,\
    \ \"Cannot rescale a list with all elements equal\"\n    return [(n - min_val)\
    \ / (max_val - min_val) for n in numbers]\n", "    assert len(numbers) > 1, \"\
    Cannot rescale a list of less than two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"Cannot\
    \ rescale a list of identical numbers\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"List\
    \ must have at least two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"List must have at least\
    \ two distinct elements\"\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    Need at least two numbers to rescale\")\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    if min_num == max_num:\n        raise ValueError(\"Cannot\
    \ rescale a list with all equal numbers\")\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_number,\
    \ max_number = min(numbers), max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with only one number\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with one element\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Need at least two numbers to rescale\"\n    max_number = max(numbers)\n\
    \    min_number = min(numbers)\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with only one element\"\n    min_num, max_num = min(numbers),\
    \ max(numbers)\n    assert min_num != max_num, \"Cannot rescale a list with only\
    \ one unique element\"\n    return [(num - min_num) / (max_num - min_num) for\
    \ num in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list of\
    \ less than two elements\"\n    min_value, max_value = min(numbers), max(numbers)\n\
    \    assert min_value != max_value, \"Cannot rescale a list of identical elements\"\
    \n    return [(n - min_value) / (max_value - min_value) for n in numbers]\n",
  "    assert len(numbers) > 1\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list of length 1\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list of identical numbers\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   if not numbers:\n        raise ValueError(\"numbers must not be empty\")\n\
    \    if len(numbers) == 1:\n        raise ValueError(\"numbers must have at least\
    \ two elements\")\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    if min_number == max_number:\n        raise ValueError(\"numbers must have\
    \ at least two different elements\")\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list of length 1\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ of identical numbers\"\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list of length 1\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list of identical numbers\"\
    \n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
  "    assert len(numbers) >= 2\n    assert all(isinstance(n, float) for n in numbers)\n\
    \    min_n = min(numbers)\n    max_n = max(numbers)\n    return [(n - min_n) /\
    \ (max_n - min_n) for n in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with less than two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"Cannot\
    \ rescale a list with all the same elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"List must contain at least two elements\"\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    assert min_value != max_value, \"List must\
    \ contain at least two different elements\"\n    return [(x - min_value) / (max_value\
    \ - min_value) for x in numbers]\n", "    assert len(numbers) > 1, \"List must\
    \ have at least two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    return [ (x - min_number) / (max_number - min_number) for\
    \ x in numbers ]\n", "    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    if max_num == min_num:\n        return [0.5] * len(numbers)\n    return [(num\
    \ - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list with less than two elements\"\n    min_number =\
    \ min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ max_number > min_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list of less than two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ of identical elements\"\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list of less than two elements\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list with all equal elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list with a single element\"\n\
    \    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"Cannot rescale a list with all equal elements\"\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    max_number = max(numbers)\n    min_number = min(numbers)\n\
    \    assert max_number != min_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"List\
    \ must have at least two elements\"\n    min_num = min(numbers)\n    max_num =\
    \ max(numbers)\n    assert min_num != max_num, \"List must have at least two different\
    \ elements\"\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with less than two elements\"\
    \n    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n\
    \    assert all(numbers)\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers\
    \ to rescale\"\n    min_number, max_number = min(numbers), max(numbers)\n    assert\
    \ min_number != max_number, \"Cannot rescale a list of identical numbers\"\n \
    \   return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"List must have at least two elements\"\n    min_num\
    \ = min(numbers)\n    max_num = max(numbers)\n    assert min_num != max_num, \"\
    List must have at least two different elements\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) >= 2\n\
    \    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list of one element\"\n    assert all(isinstance(n, float) for n in numbers),\
    \ \"Cannot rescale a list of non-numbers\"\n    min_number = min(numbers)\n  \
    \  max_number = max(numbers)\n    assert min_number != max_number, \"Cannot rescale\
    \ a list of equal numbers\"\n    return [(n - min_number) / (max_number - min_number)\
    \ for n in numbers]\n", "    assert len(numbers) >= 2\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(x - min_number) / (max_number\
    \ - min_number) for x in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale\
    \ a list with less than two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ with all equal elements\"\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list of less than two elements\"\n    min_value, max_value = min(numbers),\
    \ max(numbers)\n    assert min_value != max_value, \"Cannot rescale a list of\
    \ identical elements\"\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    assert len(numbers) > 1, \"List must have at least\
    \ two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"List must have at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list\
    \ with less than two elements\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list with all equal elements\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers\
    \ to rescale\")\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    if min_number == max_number:\n        raise ValueError(\"Cannot rescale a\
    \ list with all equal elements\")\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with only one element\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ with all the same elements\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list of only one number\"\n    largest = max(numbers)\n    smallest\
    \ = min(numbers)\n    return [(n - smallest) / (largest - smallest) for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) > 1, \"List must have at least\
    \ two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"List must have at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list\
    \ with only one element\"\n    min_n, max_n = min(numbers), max(numbers)\n   \
    \ assert min_n != max_n, \"Cannot rescale a list with all equal elements\"\n \
    \   return [(n - min_n) / (max_n - min_n) for n in numbers]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"List must have at least two elements\")\n \
    \   min_num = min(numbers)\n    max_num = max(numbers)\n    if max_num == min_num:\n\
    \        raise ValueError(\"List must have at least two distinct elements\")\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]", "   \
    \ assert len(numbers) > 1, \"Cannot rescale a list with one element\"\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(x - min_value)\
    \ / (max_value - min_value) for x in numbers]\n", "    assert len(numbers) >=\
    \ 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) > 1\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"The list must have at least two elements\"\
    )\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n\
    \        raise ValueError(\"The list must have at least two different elements\"\
    )\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", " \
    \   assert len(numbers) > 1, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"List must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with only one element\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert max_number != min_number, \"Cannot rescale a list\
    \ with only one unique element\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    if len(numbers) < 2:\n       \
    \ raise ValueError('At least two numbers are required')\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    if min_number == max_number:\n        raise\
    \ ValueError('All numbers are the same')\n    return [(number - min_number) /\
    \ (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list with only one element\"\n    min_num, max_num =\
    \ min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot rescale\
    \ a list with all the same element\"\n    return [(num - min_num) / (max_num -\
    \ min_num) for num in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale\
    \ a list of one number\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list of equal numbers\"\n \
    \   return [(num - min_num) / (max_num - min_num) for num in numbers]\n", "  \
    \  assert len(numbers) > 1, \"Cannot rescale a list with only one element\"\n\
    \    min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Cannot rescale a list with only one unique element\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1,\
    \ \"List must have at least two elements\"\n    min_value = min(numbers)\n   \
    \ max_value = max(numbers)\n    assert min_value != max_value, \"List must have\
    \ at least two different elements\"\n    return [(x - min_value) / (max_value\
    \ - min_value) for x in numbers]\n", "    assert len(numbers) >= 2, \"Can't rescale\
    \ a list with fewer than two elements\"\n    min_number, max_number = min(numbers),\
    \ max(numbers)\n    assert min_number != max_number, \"Can't rescale a list with\
    \ all equal elements\"\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list with less than two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ with all equal elements\"\n    return [(n - min_number) / (max_number - min_number)\
    \ for n in numbers]\n", "    assert len(numbers) > 1, \"Need at least two numbers\
    \ to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n    assert\
    \ min_num != max_num, \"Cannot rescale a list with only one number\"\n    return\
    \ [(num - min_num) / (max_num - min_num) for num in numbers]\n\nassert rescale_to_unit([1,\
    \ 2, 3]) == [0, 0.5, 1]\nassert rescale_to_unit([1, 1, 1]) == [0, 0, 0]\nassert\
    \ rescale_to_unit([-1, 0, 1]) == [0, 0.5, 1]\nassert rescale_to_unit([-1, -1,\
    \ -1]) == [0, 0, 0]\nassert rescale_to_unit([-1, 0, 1, 2]) == [0, 0.25, 0.5, 1]\n\
    assert rescale_to_unit([-1, 0, 1, 2, 3]) == [0, 0.2, 0.4, 0.6, 1]\n", "    assert\
    \ len(numbers) > 1, \"Cannot rescale a list of length 1\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"Cannot\
    \ rescale a list of identical numbers\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert max_number != min_number\n\
    \    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
  "    assert len(numbers) > 1, \"List must have at least two elements\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"List must have at least two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Can't\
    \ rescale a list with only one element\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Can't rescale a list\
    \ with only one unique element\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n   \
    \ min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two\
    \ numbers to rescale\"\n    min_val, max_val = min(numbers), max(numbers)\n  \
    \  assert min_val != max_val, \"Cannot rescale a list with only one value\"\n\
    \    return [(n - min_val) / (max_val - min_val) for n in numbers]\n", "    assert\
    \ len(numbers) > 1, \"Cannot rescale a list with only one element\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with only one unique element\"\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) > 1, \"Cannot rescale a list with less than two elements\"\n  \
    \  min_value, max_value = min(numbers), max(numbers)\n    assert min_value !=\
    \ max_value, \"Cannot rescale a list with only one unique element\"\n    return\
    \ [(number - min_value) / (max_value - min_value) for number in numbers]\n", " \
    \   assert len(numbers) >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) > 1, \"List must have at least\
    \ two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"List must have at least two different\
    \ elements\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) > 1, \"Need at least two numbers\
    \ to rescale\"\n    max_number = max(numbers)\n    min_number = min(numbers)\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list of less than two elements\"\
    \n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"Cannot rescale a list with all equal elements\"\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"Can't rescale a list with only one element\"\n \
    \   min_num, max_num = min(numbers), max(numbers)\n    assert min_num != max_num,\
    \ \"Can't rescale a list with all the same elements\"\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1,\
    \ \"The list must have at least two elements\"\n    max_number = max(numbers)\n\
    \    min_number = min(numbers)\n    assert max_number != min_number, \"The list\
    \ must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"List must have at least two elements\"\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    assert min_num != max_num, \"List must have at\
    \ least two different elements\"\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list\
    \ with less than two elements\"\n    min_value, max_value = min(numbers), max(numbers)\n\
    \    assert min_value != max_value, \"Cannot rescale a list with all equal elements\"\
    \n    return [(n - min_value) / (max_value - min_value) for n in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list of length 1\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list of identical numbers\"\n    return [(x - min_number)\
    \ / (max_number - min_number) for x in numbers]\n", "    assert len(numbers) >\
    \ 1, \"List must have at least two elements\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"List must\
    \ have at least two different elements\"\n    return [(number - min_number) /\
    \ (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Need at least two numbers to rescale\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Can't\
    \ rescale a list with a single element\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    return [(n - min_number) / (max_number - min_number) for\
    \ n in numbers]\n", "    assert len(numbers) >= 2, \"List must have at least two\
    \ elements\"\n    max_number = max(numbers)\n    min_number = min(numbers)\n \
    \   return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"At least two numbers are required\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2, \"At least two numbers are required\"\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    assert min_num != max_num, \"All numbers\
    \ are the same\"\n    return [(num - min_num) / (max_num - min_num) for num in\
    \ numbers]\n", "    assert len(numbers) > 1, \"Can't rescale a list with only\
    \ one element\"\n    min_num, max_num = min(numbers), max(numbers)\n    assert\
    \ min_num != max_num, \"Can't rescale a list with only one unique element\"\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2, \"At least two numbers\
    \ are required\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"All numbers are the same\"\n    return\
    \ [(x - min_number) / (max_number - min_number) for x in numbers]\n", "    assert\
    \ len(numbers) > 1, \"List must have at least two elements\"\n    min_number =\
    \ min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with only one element\"\n    smallest, largest = min(numbers),\
    \ max(numbers)\n    assert smallest != largest, \"Cannot rescale a list with only\
    \ one unique element\"\n    factor = 1 / (largest - smallest)\n    return [(n\
    \ - smallest) * factor for n in numbers]\n", "    if len(numbers) < 2:\n     \
    \   raise ValueError(\"Need at least two elements to rescale\")\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    if min_num == max_num:\n        raise\
    \ ValueError(\"Cannot rescale a list with all equal elements\")\n    return [(num\
    \ - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"At least two numbers are required\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"All numbers\
    \ are equal\"\n    return [(number - min_number) / (max_number - min_number) for\
    \ number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list\
    \ with only one element\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list of one element\"\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"Cannot rescale a list of equal elements\"\n    return [(x - min_value) / (max_value\
    \ - min_value) for x in numbers]\n", "    assert len(numbers) > 1, \"List must\
    \ have at least two elements\"\n    smallest = min(numbers)\n    largest = max(numbers)\n\
    \    assert smallest != largest, \"List must have at least two distinct elements\"\
    \n    return [(x - smallest) / (largest - smallest) for x in numbers]\n", "  \
    \  assert len(numbers) > 1, \"Cannot rescale a list with one element\"\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"Cannot rescale a list with all equal elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list with only one element\"\n    min_val, max_val =\
    \ min(numbers), max(numbers)\n    assert min_val != max_val, \"Cannot rescale\
    \ a list with only one unique element\"\n    return [(n - min_val) / (max_val\
    \ - min_val) for n in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale\
    \ a list with less than two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list\
    \ with all equal elements\"\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"List\
    \ must have at least two elements\"\n    min_num = min(numbers)\n    max_num =\
    \ max(numbers)\n    assert min_num != max_num, \"List must have at least two different\
    \ elements\"\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with less than two elements\"\
    \n    min_value, max_value = min(numbers), max(numbers)\n    assert min_value\
    \ != max_value, \"Cannot rescale a list with all equal elements\"\n    return\
    \ [(x - min_value) / (max_value - min_value) for x in numbers]\n", "    assert\
    \ len(numbers) > 1, \"Cannot rescale a list with only one element\"\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot\
    \ rescale a list with only one unique element\"\n    return [(num - min_num) /\
    \ (max_num - min_num) for num in numbers]\n", "    if len(numbers) < 2:\n    \
    \    raise ValueError(\"List must contain at least two elements\")\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    if min_value == max_value:\n\
    \        raise ValueError(\"List must contain at least two different elements\"\
    )\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
  "    assert len(numbers) > 1, \"Cannot rescale a list with one element\"\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot\
    \ rescale a list with all the same elements\"\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) > 1, \"List must\
    \ have at least two elements\"\n    max_number = max(numbers)\n    min_number\
    \ = min(numbers)\n    assert max_number != min_number, \"List must have at least\
    \ two distinct elements\"\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number\n    return\
    \ [(x - min_number) / (max_number - min_number) for x in numbers]\n", "    assert\
    \ len(numbers) >= 2\n    max_number = max(numbers)\n    min_number = min(numbers)\n\
    \    assert max_number != min_number\n    return [(x - min_number) / (max_number\
    \ - min_number) for x in numbers]\n", "    assert len(numbers) >= 2, \"Need at\
    \ least two numbers to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list with only one element\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"Cannot rescale a list of less than two elements\"\
    \n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert min_number\
    \ != max_number, \"Cannot rescale a list of identical elements\"\n    return [(number\
    \ - min_number) / (max_number - min_number) for number in numbers]\n", "    assert\
    \ len(numbers) > 1, \"List must have at least two elements\"\n    min_number =\
    \ min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number,\
    \ \"List must have at least two different elements\"\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1\n    min_num = min(numbers)\n    max_num = max(numbers)\n    assert max_num\
    \ > min_num\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) > 1\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1\n    min_num\
    \ = min(numbers)\n    max_num = max(numbers)\n    assert min_num != max_num\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) >= 2, 'Need at least two numbers to rescale'\n    min_number,\
    \ max_number = min(numbers), max(numbers)\n    assert min_number != max_number,\
    \ 'Cannot rescale list of identical numbers'\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n", "    assert len(numbers)\
    \ > 1\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a list with fewer than two elements\"\n    min_number, max_number =\
    \ min(numbers), max(numbers)\n    assert min_number != max_number, \"Cannot rescale\
    \ a list with all equal elements\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"List\
    \ must contain at least two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"List must contain at\
    \ least two different elements\"\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot\
    \ rescale a single number\"\n    smallest, largest = min(numbers), max(numbers)\n\
    \    assert smallest != largest, \"Cannot rescale a single number\"\n    factor\
    \ = 1 / (largest - smallest)\n    return [(n - smallest) * factor for n in numbers]\n",
  "    assert len(numbers) >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number\n    return [(number - min_number) / (max_number\
    \ - min_number) for number in numbers]\n", "    assert len(numbers) > 1, \"List\
    \ must contain at least two elements\"\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    assert min_num != max_num, \"All numbers in the list are\
    \ equal\"\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n",
  "    assert len(numbers) >= 2, \"Need at least two numbers to rescale\"\n    min_num,\
    \ max_num = min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot\
    \ rescale a list with only one number\"\n    return [(num - min_num) / (max_num\
    \ - min_num) for num in numbers]\n", "    assert len(numbers) > 1\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    assert min_number != max_number\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    assert min_num != max_num\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2, \"Need at least two numbers\
    \ to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n    assert\
    \ min_num != max_num, \"Cannot rescale a list with all equal elements\"\n    return\
    \ [(num - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"At least two numbers are required\"\n    min_n, max_n = min(numbers),\
    \ max(numbers)\n    assert min_n != max_n, \"All numbers are equal\"\n    return\
    \ [(n - min_n) / (max_n - min_n) for n in numbers]\n", "    assert len(numbers)\
    \ >= 2, \"Must have at least two numbers to rescale\"\n    min_num, max_num =\
    \ min(numbers), max(numbers)\n    assert min_num != max_num, \"Cannot rescale\
    \ a list with only one element\"\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    assert len(numbers) >= 2, \"Cannot rescale a list\
    \ with less than two elements\"\n    min_number, max_number = min(numbers), max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with all equal elements\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with less\
    \ than two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with all equal elements\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with less\
    \ than two elements\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n\
    \    assert min_number != max_number, \"Cannot rescale a list with all equal elements\"\
    \n    return [(number - min_number) / (max_number - min_number) for number in\
    \ numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a list with only\
    \ one element\"\n    smallest = min(numbers)\n    largest = max(numbers)\n   \
    \ assert smallest != largest, \"Cannot rescale a list with only one unique element\"\
    \n    return [(number - smallest) / (largest - smallest) for number in numbers]\n",
  "    assert len(numbers) >= 2\n    # find the minimum and maximum values\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    # rescale the numbers\n  \
    \  rescaled = [ (n - min_value) / (max_value - min_value) for n in numbers ]\n\
    \    return rescaled\n", "    assert len(numbers) > 1\n    min_num = min(numbers)\n\
    \    max_num = max(numbers)\n    assert max_num != min_num\n    return [(num -\
    \ min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ > 1, \"Cannot rescale a list with a single element\"\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    assert min_number != max_number, \"Cannot\
    \ rescale a list with all equal elements\"\n    return [(n - min_number) / (max_number\
    \ - min_number) for n in numbers]\n", "    assert len(numbers) > 1, \"List of\
    \ numbers must have at least two elements\"\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    assert min_num != max_num, \"List of numbers must have at\
    \ least two different elements\"\n    return [(num - min_num) / (max_num - min_num)\
    \ for num in numbers]\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List must have at least two elements\")\n    min_num = min(numbers)\n    max_num\
    \ = max(numbers)\n    if min_num == max_num:\n        raise ValueError(\"List\
    \ must have at least two different elements\")\n    return [(num - min_num) /\
    \ (max_num - min_num) for num in numbers]\n", "    assert len(numbers) > 1, \"\
    List must have at least two elements\"\n    min_number = min(numbers)\n    max_number\
    \ = max(numbers)\n    assert min_number != max_number, \"List must have at least\
    \ two different elements\"\n    return [(number - min_number) / (max_number -\
    \ min_number) for number in numbers]\n", "    assert len(numbers) >= 2, \"Need\
    \ at least two numbers to rescale\"\n    min_num, max_num = min(numbers), max(numbers)\n\
    \    assert min_num != max_num, \"Cannot rescale a list with all equal numbers\"\
    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", " \
    \   assert len(numbers) > 1, \"List must have at least two elements\"\n    min_value\
    \ = min(numbers)\n    max_value = max(numbers)\n    assert min_value != max_value,\
    \ \"List must have at least two different elements\"\n    return [(number - min_value)\
    \ / (max_value - min_value) for number in numbers]\n", "    if len(numbers) <\
    \ 2:\n        raise ValueError(\"Cannot rescale a list with less than 2 elements\"\
    )\n    min_number = min(numbers)\n    max_number = max(numbers)\n    if min_number\
    \ == max_number:\n        raise ValueError(\"Cannot rescale a list with all the\
    \ same elements\")\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) >= 2, \"Cannot rescale a\
    \ list with less than two elements\"\n    min_number, max_number = min(numbers),\
    \ max(numbers)\n    assert min_number != max_number, \"Cannot rescale a list with\
    \ all equal elements\"\n    return [(number - min_number) / (max_number - min_number)\
    \ for number in numbers]\n", "    assert len(numbers) > 1, \"Cannot rescale a\
    \ list of length 1\"\n    min_num, max_num = min(numbers), max(numbers)\n    assert\
    \ min_num != max_num, \"Cannot rescale a list of identical numbers\"\n    return\
    \ [(num - min_num) / (max_num - min_num) for num in numbers]\n", "    assert len(numbers)\
    \ >= 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(n - min_number) / (max_number - min_number)\
    \ for n in numbers]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
