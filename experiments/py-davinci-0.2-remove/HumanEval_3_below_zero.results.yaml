name: HumanEval_3_below_zero
language: py
results:
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ -2, 3, -4, 5, -6, 7, -8, 9]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\
    print(below_zero([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]))\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ 10, -10]))\ndef check(candidate):\n    assert candidate([]) == False\n    assert\
    \ candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5,\
    \ 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n \
    \   assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1,\
    \ -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([-1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpq4qsn1fa.py\", line 15\n    print(below_zero([-1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1\n                     ^\nSyntaxError: '['\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpptf79lvn.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for op in operations:\n        balance += op\n        if\
    \ balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_6utwk3d.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6y9r8jgn.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16,\
    \ -17, -18, -19, -20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]))\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nTrue\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for op in operations:\n        balance += op\n        if\
    \ balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, 10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10, 10]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\
    True\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ -2, 3, -1, -1])) # True\nprint(below_zero([1, 2, 3, 4, 5])) # False\nprint(below_zero([1,\
    \ 2, 3, -5, 5])) # True\nprint(below_zero([1, 2, 3, -5, -5])) # True\nprint(below_zero([1,\
    \ 2, 3, -5, -5, 5])) # True\nprint(below_zero([1, 2, 3, -5, -5, 5, 5])) # False\n\
    def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1,\
    \ 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n\
    \    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5,\
    \ 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nTrue\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ 10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, 10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, 10, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, 10, -10, 10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, 10, -10, 10, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6,\ndef check(candidate):\n    assert candidate([]) == False\n \
    \   assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt9stlxsg.py\", line 27\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6,\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for i in operations:\n        balance += i\n        if balance\
    \ < 0:\n            return True\n    return False\n\ndef check(candidate):\n \
    \   assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for op in operations:\n        balance += op\n        if\
    \ balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,2,3,4,5,6,7,8,9,10]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,1,2,3,4,5,6,7,8,9,10]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10,1,2,3,4,5,6,7,8,9,-10]))\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10]))\nprint(below_zero\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3ldbhdxd.py\", line 26\n    print(below_zero\n       \
    \  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nTrue\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, 10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10, 10]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\
    True\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpbro2tvyj.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nTrue\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10]))\nprint(below_zero\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjxw5a8j7.py\", line 26\n    print(below_zero\n       \
    \  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphdfwvd50.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([-1,\
    \ 1, -2, 3, -2, -1]))\nprint(below_zero([1, 1, 1, 1, 1, 1]))\nprint(below_zero([1,\
    \ 1, 1, 1, 1, -6]))\nprint(below_zero([-1, -2, -3, -4, -5]))\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfxeuvjxz.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -20, -30, -40]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60, -70]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50, -60, -70, -80]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqbxogkwz.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for op in operations:\n        balance += op\n        if\
    \ balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10]))\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1v2ev27b.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -11]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16,\
    \ -17, -18, -19, -20]))\nprint(below_zero\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwcaxrg_w.py\", line 26\n    print(below_zero\n       \
    \  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ 10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, -10, 10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, -10, 10, 10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, 10, 10, -10, -10, 10, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5,\ndef check(candidate):\n    assert candidate([]) == False\n    assert\
    \ candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5,\
    \ 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n \
    \   assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1,\
    \ -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprn11go7n.py\", line 27\n    print(below_zero([1, 2, 3,\
    \ 4, 5,\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, 10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10, 10]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\
    True\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ -2, 3, -4, 5, -6, 7, -8, 9, -10]))\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "True\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,2,3,4,5,6,7,8,9,10]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,11]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14,15]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14,15,16]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14,15,16,17]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14,15,16,17,18]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14,15,16,17,18,19]))\n\
    print(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,14,15,16,17,18,19,20]))\nprint(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,\n\
    def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1,\
    \ 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n\
    \    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5,\
    \ 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpphfankxw.py\", line 27\n    print(below_zero([1,2,3,4,5,6,7,8,9,-10,11,12,13,\n\
    \                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -1]))\n\
    def check(candidate):\n    assert candidate([]) == False\n    assert candidate([1,\
    \ 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n\
    \    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5,\
    \ 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nTrue\nFalse\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2nyau7dp.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, -10, -10, -10\n                     ^\nSyntaxError: '['\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -100]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -1000]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, -10000]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -100000]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -1000000]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10000000]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -100000000]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -1000000000]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10000000000]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -100000000000]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -1000000000000]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10000000000000]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -100000000000000]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -1000000000000000\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpid0smi1b.py\", line 30\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -1000000000000000\n                     ^\nSyntaxError: '['\
    \ was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([5,\
    \ -10, 5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5,\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpaf6yonn7.py\", line 15\n    print(below_zero([5, -10,\
    \ 5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5,\
    \ -5, -5, -5,\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10]))\nprint(below_zero\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmtygnol8.py\", line 26\n    print(below_zero\n       \
    \  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -20, -30, -40]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60, -70]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50, -60, -70, -80]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp20bnu98c.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10]))\nprint(below_zero\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpn_4eq4ta.py\", line 26\n    print(below_zero\n       \
    \  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10]))\nprint(below_zero([-1, 1, -2, 2, -3, 3, -4, 4, -5, 5, -6, 6,\
    \ -7, 7, -8, 8, -9, 9, -10, 10]))\nprint(below_zero([-1, 1, -2, 2, -3, 3, -4,\
    \ 4, -5, 5, -6, 6, -7, 7, -8, 8, -9, 9, -10, 10, -11]))\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nTrue\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, -20]))\ndef check(candidate):\n    assert candidate([]) == False\n  \
    \  assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2,\
    \ -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n\
    \    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1,\
    \ -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmj_rv_78.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -20, -30, -40]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60, -70]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50, -60, -70, -80]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjz8p9q5_.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100]))\nprint(below_zero([10, 20, 30, 40, 50,\
    \ 60, 70, 80, 90, 100, -1000]))\nprint(below_zero([10, 20, 30, 40, 50, 60, 70,\
    \ 80, 90, 100, -100]))\nprint(below_zero([10, 20, 30, 40, 50, 60, 70, 80, 90,\
    \ 100, -10]))\nprint(below_zero([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, -1]))\n\
    print(below_zero([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 0]))\nprint(below_zero([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 1]))\nprint(below_zero([10, 20, 30, 40,\
    \ 50, 60, 70, 80, 90, 100, 10]))\nprint(below_zero([10, 20, 30, 40, 50, 60, 70,\
    \ 80, 90, 100, 100]))\nprint(below_zero([10, 20, 30, 40, 50, 60, 70, 80, 90, 100,\
    \ 1000]))\ndef check(candidate):\n    assert candidate([]) == False\n    assert\
    \ candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5,\
    \ 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n \
    \   assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1,\
    \ -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nTrue\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for op in operations:\n        balance += op\n        if\
    \ balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -20, -30, -40]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60, -70]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50, -60, -70, -80]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmptgno7r1z.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -11, -12, -13]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -11, -12, -13, -14]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ -11, -12, -13, -14, -15]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ -11, -12, -13, -14, -15, -16]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -11, -12, -13, -14, -15, -16, -17]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12,\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprm166mi1.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, -11, -12,\n                     ^\nSyntaxError: '[' was\
    \ never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10, -10, -10, -10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10]))\nprint(below_zero\ndef check(candidate):\n    assert candidate([])\
    \ == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpjaq780op.py\", line 26\n    print(below_zero\n       \
    \  ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, 10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, 10]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, 10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, -10, -10, -10, -10, -10, -10, 10]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nFalse\nTrue\nTrue\n\
    True\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -20, -30, -40]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60, -70]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50, -60, -70, -80]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnc_clzk9.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 10, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10, 10]))\ndef check(candidate):\n    assert candidate([]) == False\n\
    \    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1,\
    \ 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) ==\
    \ False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert\
    \ candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\ndef test_check():\n    check(below_zero)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nTrue\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -20]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30]))\nprint(below_zero([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, -10, -20, -30, -40]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -10,\
    \ -20, -30, -40, -50, -60, -70]))\nprint(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ -10, -20, -30, -40, -50, -60, -70, -80]))\nprint(below_zero([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90]))\nprint(below_zero([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, -10, -20, -30, -40, -50, -60, -70, -80, -90, -100]))\n\
    print(below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -\ndef check(candidate):\n    assert\
    \ candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n\
    \    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1,\
    \ 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4,\
    \ -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\n\
    def test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxhte40ko.py\", line 26\n    print(below_zero([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, -\n                     ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n\
    \    \"\"\" You're given a list of deposit and withdrawal operations on a bank\
    \ account that starts with\n    zero balance. Your task is to detect if at any\
    \ point the balance of account fallls below zero, and\n    at that point function\
    \ should return True. Otherwise it should return False.\n            \"\"\"\n\
    \    balance = 0\n    for operation in operations:\n        balance += operation\n\
    \        if balance < 0:\n            return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3])\
    \ == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1,\
    \ -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5,\
    \ 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n\
    \ndef test_check():\n    check(below_zero)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
