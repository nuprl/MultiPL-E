name: HumanEval_25_factorize
language: py
prompt: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  \    Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n    Input number should be equal to the product\
  \ of all factors\n                \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
  \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3,\
  \ 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
  \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n   \
  \ assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
  \ntest_check()\n"
completions: ["    factors = []\n    i = 2\n    while n > 1:\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n = n / i\n        i += 1\n\
    \    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n   \
    \     while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \        if n == 1:\n            break\n    return factors\n", "    factors =\
    \ []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n /= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n\nprint(factorize(10))\nprint(factorize(14))\n\
    print(factorize(356))\nprint(factorize(89))\nprint(factorize(1000))", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n //= i\n    return factors\n\n", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n = n // i\n    return factors\n", "    factors\
    \ = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i +=\
    \ 1\n        else:\n            n //= i\n            factors.append(i)\n    if\
    \ n > 1:\n        factors.append(n)\n    return factors\n\n", "    factors = []\n\
    \    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i\
    \ in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n        \
    \    factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n\
    \    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n   \
    \     while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \        if n == 1:\n            break\n    return factors\n\n", "    factors\
    \ = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        i += 1\n    return factors\n\n", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n = n // i\n    return factors\n", "    factors\
    \ = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n\
    \    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n\
    \            factors.append(i)\n            n = n // i\n    if n > 2:\n      \
    \  factors.append(n)\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n //= i\n    return factors\n\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    i = 2\n    while\
    \ n > 1:\n        while n % i == 0:\n            factors.append(i)\n         \
    \   n = n / i\n        i += 1\n    return factors\n", "    factors = []\n    i\
    \ = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n\
    \            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\
    \    return factors\n\n", "    factors = []\n    d = 2\n    while n > 1:\n   \
    \     while n % d == 0:\n            factors.append(d)\n            n //= d\n\
    \        d += 1\n    return factors\n", "    factors = []\n    while n > 1:\n\
    \        for i in range(2, n + 1):\n            if n % i == 0:\n             \
    \   factors.append(i)\n                n = n // i\n                break\n   \
    \ return factors\n", "    factors = []\n    i = 2\n    while i <= n:\n       \
    \ if n % i == 0:\n            factors.append(i)\n            n = n // i\n    \
    \    else:\n            i += 1\n    return factors\n\n", "    factors = []\n \
    \   i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        else:\n            i += 1\n    return factors\n\
    \nprint(factorize(10))\nprint(factorize(100))\nprint(factorize(1000))\nprint(factorize(10000))\n\
    print(factorize(100000))\nprint(factorize(1000000))\nprint(factorize(10000000))\n\
    print(factorize(100000000))\nprint(factorize(1000000000))\nprint(factorize(10000000000))\n\
    print(factorize(100000000000))\nprint(factorize(1000000000000))\nprint(factorize(10000000000000))\n\
    print(factorize(100000000000000))\nprint(factorize(1000000000000000))\nprint(factorize(10000000000000000))\n\
    print(factorize(100000000000000000))\nprint(factorize(1000000000000000000))\n\
    print(factorize(10000000000000000000))\nprint(factorize(100000000000000000000))\n\
    print(factorize(1000000000000000000000))\nprint(factorize(10000000000000000000000))\n\
    print(factorize(100000000000000000000000))\nprint(factorize(1000000000000000000000000))\n\
    print(factorize(10000000000000000000000000))\nprint(factorize(100000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000))\nprint(factorize(10000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000000000))\n\
    print(factorize", "    if n == 1:\n        return [1]\n    factors = []\n    for\
    \ i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n", "    factors = []\n    for i in\
    \ range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n\nprint(factorize(10))\nprint(factorize(100))\n\
    print(factorize(1000))\nprint(factorize(10000))\nprint(factorize(100000))\nprint(factorize(1000000))\n\
    print(factorize(10000000))\nprint(factorize(100000000))\nprint(factorize(1000000000))\n\
    print(factorize(10000000000))\nprint(factorize(100000000000))\nprint(factorize(1000000000000))\n\
    print(factorize(10000000000000))\nprint(factorize(100000000000000))\nprint(factorize(1000000000000000))\n\
    print(factorize(10000000000000000))\nprint(factorize(100000000000000000))\nprint(factorize(1000000000000000000))\n\
    print(factorize(10000000000000000000))\nprint(factorize(100000000000000000000))\n\
    print(factorize(1000000000000000000000))\nprint(factorize(10000000000000000000000))\n\
    print(factorize(100000000000000000000000))\nprint(factorize(1000000000000000000000000))\n\
    print(factorize(10000000000000000000000000))\nprint(factorize(100000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000))\nprint(factorize(10000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000000000))\n", "    factors\
    \ = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n / i\n        else:\n            i += 1\n    return factors\n",
  "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n =\
    \ n // 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n      \
    \      factors.append(i)\n            n = n // i\n        i = i + 2\n    if n\
    \ > 2:\n        factors.append(n)\n    return factors\n\n", "    factors = []\n\
    \    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n /= d\n        d += 1\n    return factors\n\n", "    factors = []\n\
    \    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n\
    \    return factors\n\n", "    factors = []\n    while n > 1:\n        for i in\
    \ range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n\
    \                n = n // i\n                break\n    return factors\n\n", " \
    \   factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n \
    \           factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n    \
    \        factors.append(i)\n            n = n // i\n        i += 1\n    return\
    \ factors\n", "    factors = []\n    d = 2\n    while n > 1:\n        while n\
    \ % d == 0:\n            factors.append(d)\n            n /= d\n        d += 1\n\
    \    return factors\n", "    factors = []\n    i = 2\n    while n > 1:\n     \
    \   while n % i == 0:\n            factors.append(i)\n            n = n / i\n\
    \        i += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n //= i\n    return factors\n\n", "    factors = []\n    d = 2\n    while\
    \ n > 1:\n        while n % d == 0:\n            factors.append(d)\n         \
    \   n /= d\n        d += 1\n    return factors\n", "    factors = []\n    d =\
    \ 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n / i\n        i += 1\n    return factors\n", "    factors =\
    \ []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n / i\n        else:\n            i += 1\n    return factors\n\
    \nprint(factorize(12))", "    factors = []\n    for i in range(2, n + 1):\n  \
    \      while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \    return factors\n", "    factors = []\n    for i in range(2, n+1):\n     \
    \   while n % i == 0:\n            factors.append(i)\n            n = n // i\n\
    \    return factors\n\nprint(factorize(1))\nprint(factorize(2))\nprint(factorize(3))\n\
    print(factorize(4))\nprint(factorize(5))\nprint(factorize(6))\nprint(factorize(7))\n\
    print(factorize(8))\nprint(factorize(9))\nprint(factorize(10))\nprint(factorize(11))\n\
    print(factorize(12))\nprint(factorize(13))\nprint(factorize(14))\nprint(factorize(15))\n\
    print(factorize(16))\nprint(factorize(17))\nprint(factorize(18))\nprint(factorize(19))\n\
    print(factorize(20))\nprint(factorize(21))\nprint(factorize(22))\nprint(factorize(23))\n\
    print(factorize(24))\nprint(factorize(25))\nprint(factorize(26))\nprint(factorize(27))\n\
    print(factorize(28))\nprint(factorize(29))\nprint(factorize(30))\nprint(factorize(31))\n\
    print(factorize(32))\nprint(factorize(33))\nprint(factorize(34))\nprint(factorize(35))\n\
    print(factorize(36))\nprint(factorize(37))\nprint(factorize(38))\nprint(factorize(39))\n\
    print(factorize(40))\nprint(factorize(41))\nprint(factorize(42))\nprint(factorize(43))\n\
    print(factorize(44))\nprint(factorize(45))\nprint(factorize(46))\nprint(factorize(47))\n\
    print(factorize(48))\nprint(factorize(49))\nprint(factorize(50))\nprint(factorize(51))\n\
    print(factorize(52))\nprint(factorize(53))\nprint(factorize(54))\nprint(factorize(55))\n\
    print(factorize(56))\nprint(factorize(57))\nprint(factorize(58))\n", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n = n // i\n    return factors\n\n", "    factors\
    \ = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        else:\n            i += 1\n    return factors\n\
    \nprint(factorize(10))\nprint(factorize(100))\nprint(factorize(101))\nprint(factorize(102))\n\
    print(factorize(103))\nprint(factorize(104))\nprint(factorize(105))\nprint(factorize(106))\n\
    print(factorize(107))\nprint(factorize(108))\nprint(factorize(109))\nprint(factorize(110))\n\
    print(factorize(111))\nprint(factorize(112))\nprint(factorize(113))\nprint(factorize(114))\n\
    print(factorize(115))\nprint(factorize(116))\nprint(factorize(117))\nprint(factorize(118))\n\
    print(factorize(119))\nprint(factorize(120))\nprint(factorize(121))\nprint(factorize(122))\n\
    print(factorize(123))\nprint(factorize(124))\nprint(factorize(125))\nprint(factorize(126))\n\
    print(factorize(127))\nprint(factorize(128))\nprint(factorize(129))\nprint(factorize(130))\n\
    print(factorize(131))\nprint(factorize(132))\nprint(factorize(133))\nprint(factorize(134))\n\
    print(factorize(135))\nprint(factorize(136))\nprint(factorize(137))\nprint(factorize(138))\n\
    print(factorize(139))\nprint(factorize(140))\nprint(factorize(141))\nprint(factorize(142))\n\
    print(factorize(143))\nprint(factorize(144))\nprint(factorize(145))\nprint(factorize(146))\n\
    print(factorize(147))\nprint(factorize(148))\nprint(factorize(149))\nprint(factorize(150))\n\
    print(factorize(151))\nprint(factorize(152))\nprint(factorize(153))\nprint(factorize(154))\n\
    print(factorize(155))\n", "    factors = []\n    for i in range(2, n+1):\n   \
    \     while n % i == 0:\n            factors.append(i)\n            n = n // i\n\
    \    return factors\n\nprint(factorize(10))\nprint(factorize(14))\nprint(factorize(356))\n\
    print(factorize(89))\nprint(factorize(1000))", "    if n < 2:\n        return\
    \ []\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n //= i\n    if n >\
    \ 1:\n        factors.append(n)\n    return factors\n\n", "    factors = []\n\
    \    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n\n", "    factors = []\n    i = 2\n\
    \    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n\
    \            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\
    \    return factors\n\n", "    factors = []\n    i = 2\n    while n > 1:\n   \
    \     while n % i == 0:\n            factors.append(i)\n            n = n / i\n\
    \        i += 1\n    return factors\n\n", "    factors = []\n    i = 2\n    while\
    \ n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n\
    \ = n / i\n        else:\n            i += 1\n    return factors\n", "    factors\
    \ = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        else:\n            i += 1\n    return factors\n\
    \n", "    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n\
    \            factors.append(d)\n            n /= d\n        d += 1\n    return\
    \ factors\n", "    factors = []\n    i = 2\n    while n > 1:\n        if n % i\
    \ == 0:\n            factors.append(i)\n            n = n // i\n        else:\n\
    \            i += 1\n    return factors\n", "    if n < 2:\n        return []\n\
    \    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n\
    \            factors.append(i)\n            n //= i\n        if n == 1:\n    \
    \        break\n    return factors\n", "    if n == 1:\n        return [1]\n \
    \   factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n\
    \ //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n\
    \            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n\
    \    return factors\n", "    factors = []\n    divisor = 2\n    while n > 1:\n\
    \        while n % divisor == 0:\n            factors.append(divisor)\n      \
    \      n /= divisor\n        divisor += 1\n    return factors\n", "    factors\
    \ = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n        i += 1\n    return factors\n\nprint(factorize(100))",
  "    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n      \
    \      factors.append(i)\n            n = n // i\n        else:\n            i\
    \ += 1\n    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n\
    \        while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n   \
    \     while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \    return factors\n\n", "    factors = []\n    for i in range(2, n + 1):\n \
    \       while n % i == 0:\n            factors.append(i)\n            n = n //\
    \ i\n    return factors\n\n", "    factors = []\n    for i in range(2, n + 1):\n\
    \        while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \        if n == 1:\n            break\n    return factors\n\n", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n = n // i\n    return factors\n", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n = n // i\n    return factors\n", "    factors\
    \ = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        i += 1\n    return factors\n", "    factors =\
    \ []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n \
    \   for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n\
    \            factors.append(i)\n            n = n // i\n    if n > 2:\n      \
    \  factors.append(n)\n    return factors\n\n", "    factors = []\n    for i in\
    \ range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n", "    factors = []\n    i = 2\n\
    \    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n\
    \    return factors\n", "    factors = []\n    d = 2\n    while n > 1:\n     \
    \   while n % d == 0:\n            factors.append(d)\n            n //= d\n  \
    \      d += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n //= i\n        if n == 1:\n            break\n    return factors\n\n",
  "    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n \
    \       factors.append(2)\n        n //= 2\n    for i in range(3, int(math.sqrt(n))\
    \ + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n       \
    \     n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n      \
    \      factors.append(i)\n            n = n // i\n        else:\n            i\
    \ += 1\n    return factors\n\n", "    factors = []\n    d = 2\n    while n > 1:\n\
    \        while n % d == 0:\n            factors.append(d)\n            n /= d\n\
    \        d += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    factor = 2\n  \
    \  while n > 1:\n        while n % factor == 0:\n            factors.append(factor)\n\
    \            n //= factor\n        factor += 1\n    return factors\n", "    factors\
    \ = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n        \
    \    factors.append(divisor)\n            n /= divisor\n        divisor += 1\n\
    \    return factors\n", "    factors = []\n    i = 2\n    while i * i <= n:\n\
    \        while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\
    \n", "    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n\
    \            factors.append(i)\n            n = n // i\n        else:\n      \
    \      i += 1\n    return factors\n\n", "    factors = []\n    d = 2\n    while\
    \ n > 1:\n        while n % d == 0:\n            factors.append(d)\n         \
    \   n //= d\n        d += 1\n    return factors\n\nprint(factorize(10))\nprint(factorize(100))\n\
    print(factorize(1000))\nprint(factorize(10000))\nprint(factorize(100000))\nprint(factorize(1000000))\n\
    print(factorize(10000000))\nprint(factorize(100000000))\nprint(factorize(1000000000))\n\
    print(factorize(10000000000))\nprint(factorize(100000000000))\nprint(factorize(1000000000000))\n\
    print(factorize(10000000000000))\nprint(factorize(100000000000000))\nprint(factorize(1000000000000000))\n\
    print(factorize(10000000000000000))\nprint(factorize(100000000000000000))\nprint(factorize(1000000000000000000))\n\
    print(factorize(10000000000000000000))\nprint(factorize(100000000000000000000))\n\
    print(factorize(1000000000000000000000))\nprint(factorize(10000000000000000000000))\n\
    print(factorize(100000000000000000000000))\nprint(factorize(1000000000000000000000000))\n\
    print(factorize(10000000000000000000000000))\nprint(factorize(100000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000))\nprint(factorize(10000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000", "    factors = []\n\
    \    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n / i\n        i += 1\n    return factors\n\nprint(factorize(12))\n\
    print(factorize(13))\nprint(factorize(15))\nprint(factorize(16))\nprint(factorize(17))\n\
    print(factorize(18))\nprint(factorize(19))\nprint(factorize(20))\nprint(factorize(21))\n\
    print(factorize(22))\nprint(factorize(23))\nprint(factorize(24))\nprint(factorize(25))\n\
    print(factorize(26))\nprint(factorize(27))\nprint(factorize(28))\nprint(factorize(29))\n\
    print(factorize(30))\nprint(factorize(31))\nprint(factorize(32))\nprint(factorize(33))\n\
    print(factorize(34))\nprint(factorize(35))\nprint(factorize(36))\nprint(factorize(37))\n\
    print(factorize(38))\nprint(factorize(39))\nprint(factorize(40))\nprint(factorize(41))\n\
    print(factorize(42))\nprint(factorize(43))\nprint(factorize(44))\nprint(factorize(45))\n\
    print(factorize(46))\nprint(factorize(47))\nprint(factorize(48))\nprint(factorize(49))\n\
    print(factorize(50))\nprint(factorize(51))\nprint(factorize(52))\nprint(factorize(53))\n\
    print(factorize(54))\nprint(factorize(55))\nprint(factorize(56))\nprint(factorize(57))\n\
    print(factorize(58))\nprint(factorize(59))\nprint(factorize(60))\nprint(factorize(61))\n\
    print(factorize(62))\nprint(factorize(63))\nprint(factorize(64))\nprint(factorize(65))\n\
    print(factorize(66))\nprint(factorize(67))\nprint(factorize(68))\nprint(factorize(69))\n\
    print(factorize", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n\nprint(factorize(100))", "    factors = []\n    divisor = 2\n    while\
    \ n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n\
    \            n //= divisor\n        divisor += 1\n    return factors\n", "   \
    \ factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n     \
    \       factors.append(d)\n            n /= d\n        d += 1\n    return factors\n",
  "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor\
    \ == 0:\n            factors.append(divisor)\n            n //= divisor\n    \
    \    divisor += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    d = 2\n    while\
    \ n > 1:\n        while n % d == 0:\n            factors.append(d)\n         \
    \   n /= d\n        d += 1\n    return factors\n\n", "    factors = []\n    for\
    \ i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n\n", "    factors = []\n    d = 2\n\
    \    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    i = 2\n    while\
    \ n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n\
    \ = n // i\n        else:\n            i += 1\n    return factors\n\n", "    factors\
    \ = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n\
    \ % i == 0:\n                factors.append(i)\n                n = n // i\n \
    \               break\n    return factors\n", "    factors = []\n    d = 2\n \
    \   while d * d <= n:\n        if n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        else:\n            d += 1\n    if n > 1:\n     \
    \   factors.append(n)\n    return factors\n", "    factors = []\n    i = 2\n \
    \   while n > 1:\n        if n % i == 0:\n            factors.append(i)\n    \
    \        n //= i\n        else:\n            i += 1\n    return factors\n", " \
    \   factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n \
    \           factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n    \
    \        factors.append(i)\n            n //= i\n        i += 1\n    return factors\n",
  "    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n    \
    \        factors.append(d)\n            n //= d\n        d += 1\n    return factors\n",
  "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n       \
    \     i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n\nprint(factorize(10))\n\
    print(factorize(100))\nprint(factorize(1000))\nprint(factorize(10000))\nprint(factorize(100000))\n\
    print(factorize(1000000))\nprint(factorize(10000000))\nprint(factorize(100000000))\n\
    print(factorize(1000000000))\nprint(factorize(10000000000))\nprint(factorize(100000000000))\n\
    print(factorize(1000000000000))\nprint(factorize(10000000000000))\nprint(factorize(100000000000000))\n\
    print(factorize(1000000000000000))\nprint(factorize(10000000000000000))\nprint(factorize(100000000000000000))\n\
    print(factorize(1000000000000000000))\nprint(factorize(10000000000000000000))\n\
    print(factorize(100000000000000000000))\nprint(factorize(1000000000000000000000))\n\
    print(factorize(10000000000000000000000))\nprint(factorize(100000000000000000000000))\n\
    print(factorize(1000000000000000000000000))\nprint(factorize(10000000000000000000000000))\n\
    print(factorize(100000000000000000000000000))\nprint(factorize(1000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000))\nprint(factorize(100000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000000000))\n\
    print(", "    factors = []\n    for i in range(2, n + 1):\n        while n % i\
    \ == 0:\n            factors.append(i)\n            n = n // i\n    return factors\n",
  "    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n    \
    \        factors.append(d)\n            n /= d\n        d += 1\n    return factors\n",
  "    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n\
    \            factors.append(i)\n            n //= i\n        i += 1\n    if n\
    \ > 1:\n        factors.append(n)\n    return factors\n\n", "    factors = []\n\
    \    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n /= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        if n == 1:\n            break\n    return factors\n",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n //= i\n        if n == 1:\n      \
    \      break\n    return factors\n\nprint(factorize(100))", "    factors = []\n\
    \    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n    return factors\n\n", "    factors = []\n    i = 2\n\
    \    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n   \
    \         n = n // i\n        else:\n            i += 1\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n    \
    \        factors.append(i)\n            n = n / i\n        i += 1\n    return\
    \ factors\n\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n", "    if n < 2:\n        return []\n    factors = []\n    while n\
    \ % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3,\
    \ int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n //= i\n    return factors\n", "  \
    \  factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n    return factors\n", " \
    \   factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n     \
    \       factors.append(i)\n            n = n // i\n        else:\n           \
    \ i += 1\n    return factors\n\n", "    factors = []\n    i = 2\n    while i <=\
    \ n:\n        if n % i == 0:\n            factors.append(i)\n            n = n\
    \ // i\n        else:\n            i += 1\n    return factors\n", "    factors\
    \ = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n           \
    \ factors.append(i)\n            n //= i\n        if n == 1:\n            break\n\
    \    return factors\n\n", "    factors = []\n    i = 2\n    while i * i <= n:\n\
    \        if n % i:\n            i += 1\n        else:\n            n //= i\n \
    \           factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return\
    \ factors\n\n", "    factors = []\n    i = 2\n    while n > 1:\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n //= i\n        i +=\
    \ 1\n    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n\
    \        while n % i == 0:\n            factors.append(i)\n            n = n //\
    \ i\n    return factors\n", "    factors = []\n    factor = 2\n    while n > 1:\n\
    \        while n % factor == 0:\n            factors.append(factor)\n        \
    \    n //= factor\n        factor += 1\n    return factors\n", "    factors =\
    \ []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n        else:\n            i += 1\n    return factors\n\n",
  "    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n    \
    \        factors.append(d)\n            n //= d\n        d += 1\n    return factors\n",
  "    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n       \
    \     factors.append(i)\n            n = n / i\n        else:\n            i +=\
    \ 1\n    return factors\n\nprint(factorize(10))\nprint(factorize(100))\nprint(factorize(1000))\n\
    print(factorize(10000))\nprint(factorize(100000))\nprint(factorize(1000000))\n\
    print(factorize(10000000))\nprint(factorize(100000000))\nprint(factorize(1000000000))\n\
    print(factorize(10000000000))\nprint(factorize(100000000000))\nprint(factorize(1000000000000))\n\
    print(factorize(10000000000000))\nprint(factorize(100000000000000))\nprint(factorize(1000000000000000))\n\
    print(factorize(10000000000000000))\nprint(factorize(100000000000000000))\nprint(factorize(1000000000000000000))\n\
    print(factorize(10000000000000000000))\nprint(factorize(100000000000000000000))\n\
    print(factorize(1000000000000000000000))\nprint(factorize(10000000000000000000000))\n\
    print(factorize(100000000000000000000000))\nprint(factorize(1000000000000000000000000))\n\
    print(factorize(10000000000000000000000000))\nprint(factorize(100000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000))\nprint(factorize(10000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000000000))\n\
    print(factorize", "    factors = []\n    i = 2\n    while n > 1:\n        if n\
    \ % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n\
    \            i += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    d = 2\n    while\
    \ n > 1:\n        while n % d == 0:\n            factors.append(d)\n         \
    \   n /= d\n        d += 1\n    return factors\n\n", "    factors = []\n    i\
    \ = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        else:\n            i += 1\n    return factors\n",
  "    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n \
    \       factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)\
    \ + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n       \
    \     n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n       \
    \     factors.append(i)\n            n = n // i\n        else:\n            i\
    \ += 1\n    return factors\n\n", "    factors = []\n    i = 2\n    while i <=\
    \ n:\n        if n % i == 0:\n            factors.append(i)\n            n = n\
    \ / i\n        else:\n            i += 1\n    return factors\n\nprint(factorize(10))\n\
    print(factorize(14))\nprint(factorize(356))\nprint(factorize(89))\nprint(factorize(1000))",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n      \
    \      factors.append(i)\n            n = n / i\n        else:\n            i\
    \ += 1\n    return factors\n\n", "    factors = []\n    for i in range(2, n +\
    \ 1):\n        while n % i == 0:\n            factors.append(i)\n            n\
    \ = n / i\n    return factors\n\nprint(factorize(10))\nprint(factorize(14))\n\
    print(factorize(356))\nprint(factorize(89))\nprint(factorize(1000))", "    factors\
    \ = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n \
    \           factors.append(divisor)\n            n /= divisor\n        divisor\
    \ += 1\n    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n\
    \        while n % i == 0:\n            factors.append(i)\n            n = n //\
    \ i\n    return factors\n\n", "    factors = []\n    i = 2\n    while n > 1:\n\
    \        while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \        i += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    factor = 2\n  \
    \  while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n\
    \            n //= factor\n        else:\n            factor += 1\n    return\
    \ factors\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n", "    factors = []\n    i = 2\n    while i <= n:\n        if n %\
    \ i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n\
    \            i += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n+1):\n        while n % i == 0:\n            factors.append(i)\n          \
    \  n = n // i\n        if n == 1:\n            break\n    return factors\n", " \
    \   factors = []\n    for i in range(2, n+1):\n        while n % i == 0:\n   \
    \         factors.append(i)\n            n = n // i\n    return factors\n\n",
  "    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n\
    \            factors.append(i)\n            n = n // i\n        i += 1\n    if\
    \ n > 1:\n        factors.append(n)\n    return factors\n", "    factors = []\n\
    \    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n        \
    \    factors.append(divisor)\n            n /= divisor\n        divisor += 1\n\
    \    return factors\n", "    factors = []\n    factor = 2\n    while n > 1:\n\
    \        if n % factor == 0:\n            factors.append(factor)\n           \
    \ n = n // factor\n        else:\n            factor += 1\n    return factors\n\
    \n", "    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n\
    \            factors.append(i)\n            n = n // i\n        else:\n      \
    \      i += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n\n", "    factors = []\n    i = 2\n    while\
    \ n > 1:\n        while n % i == 0:\n            factors.append(i)\n         \
    \   n = n / i\n        i += 1\n    return factors\n\n", "    factors = []\n  \
    \  for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n", "    factors = []\n    i = 2\n    while\
    \ n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n\
    \ = n / i\n        else:\n            i += 1\n    return factors\n\nprint(factorize(10))",
  "    factors = []\n    i = 2\n    while i <= n:\n        while n % i == 0:\n   \
    \         factors.append(i)\n            n = n // i\n        i += 1\n    return\
    \ factors\n", "    factors = []\n    if n == 1:\n        return [1]\n    while\
    \ n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3,\
    \ int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    if n > 2:\n        factors.append(n)\n    return\
    \ factors\n", "    factors = []\n    if n == 1:\n        return [1]\n    for i\
    \ in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n", "    factors = []\n    d = 2\n\
    \    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n //= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        i += 1\n    return factors\n\n", "    factors\
    \ = []\n    factor = 2\n    while factor <= n:\n        if n % factor == 0:\n\
    \            factors.append(factor)\n            n = n // factor\n        else:\n\
    \            factor += 1\n    return factors\n\n", "    factors = []\n    i =\
    \ 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n        else:\n            i += 1\n    return factors\n\
    \n", "    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n\
    \            factors.append(i)\n            n = n // i\n        i += 1\n    return\
    \ factors\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n", "    factors = []\n    i = 2\n    while n > 1:\n        while n\
    \ % i == 0:\n            factors.append(i)\n            n = n / i\n        i +=\
    \ 1\n    return factors\n", "    factors = []\n    divisor = 2\n    while n >\
    \ 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n \
    \           n /= divisor\n        divisor += 1\n    return factors\n\n", "   \
    \ factors = []\n    # TODO: implement this function\n    return factors\n", " \
    \   factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n\
    \ //= 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n       \
    \     factors.append(i)\n            n //= i\n        i += 2\n    if n > 1:\n\
    \        factors.append(n)\n    return factors\n", "    factors = []\n    for\
    \ i in range(2, n+1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n / i\n    return factors\n", "    factors = []\n    for i in\
    \ range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n", "    factors = []\n    for i in\
    \ range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n\n", "    factors = []\n    for i\
    \ in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n\n", "    factors = []\n    for i\
    \ in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n // i\n    return factors\n", "    if n == 1:\n        return\
    \ [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n  \
    \      n //= 2\n    factor = 3\n    while factor * factor <= n:\n        if n\
    \ % factor == 0:\n            factors.append(factor)\n            n //= factor\n\
    \        else:\n            factor += 2\n    if n != 1:\n        factors.append(n)\n\
    \    return factors\n", "    factors = []\n    for i in range(2, n + 1):\n   \
    \     while n % i == 0:\n            factors.append(i)\n            n = n // i\n\
    \    return factors\n", "    factors = []\n    d = 2\n    while n > 1:\n     \
    \   while n % d == 0:\n            factors.append(d)\n            n //= d\n  \
    \      d += 1\n    return factors\n\nprint(factorize(10))\nprint(factorize(14))\n\
    print(factorize(356))\nprint(factorize(89))\nprint(factorize(1000))", "    factors\
    \ = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n\
    \            n /= d\n        d += 1\n    return factors\n", "    factors = []\n\
    \    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n //= i\n    return factors\n", "    if n == 1:\n        return [1]\n\
    \    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n\
    \            factors.append(i)\n            n //= i\n    return factors\n", " \
    \   factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n   \
    \         factors.append(i)\n            n = n / i\n        i += 1\n    return\
    \ factors\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n //= i\n    return\
    \ factors\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n\n", "    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n", "    factors = []\n    factor = 2\n    while n > 1:\n        while\
    \ n % factor == 0:\n            factors.append(factor)\n            n //= factor\n\
    \        factor += 1\n    return factors\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n\n", "    factors = []\n    while n % 2 ==\
    \ 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)\
    \ + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n       \
    \     n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
  "    factors = []\n    d = 2\n    while n > 1:\n        while n % d == 0:\n    \
    \        factors.append(d)\n            n //= d\n        d += 1\n    return factors\n",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n    return factors\n", " \
    \   factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n   \
    \         factors.append(i)\n            n = n / i\n        i += 1\n    return\
    \ factors\n", "    factors = []\n    i = 2\n    while n > 1:\n        while n\
    \ % i == 0:\n            factors.append(i)\n            n = n / i\n        i +=\
    \ 1\n    return factors\n", "    factors = []\n    d = 2\n    while n > 1:\n \
    \       while n % d == 0:\n            factors.append(d)\n            n /= d\n\
    \        d += 1\n    return factors\n\n", "    factors = []\n    divisor = 2\n\
    \    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n\
    \            n /= divisor\n        divisor += 1\n    return factors\n", "    if\
    \ n == 1:\n        return [1]\n    factors = []\n    for i in range(2, n + 1):\n\
    \        while n % i == 0:\n            factors.append(i)\n            n //= i\n\
    \        if n == 1:\n            break\n    return factors\n\n", "    if n < 2:\n\
    \        return []\n    factors = []\n    for i in range(2, n + 1):\n        while\
    \ n % i == 0:\n            factors.append(i)\n            n = n // i\n    return\
    \ factors\n", "    factors = []\n    d = 2\n    while n > 1:\n        while n\
    \ % d == 0:\n            factors.append(d)\n            n //= d\n        d +=\
    \ 1\n    return factors\n\n", "    factors = []\n    for i in range(2, n + 1):\n\
    \        while n % i == 0:\n            factors.append(i)\n            n = n //\
    \ i\n    return factors\n\nprint(factorize(100))", "    factors = []\n    while\
    \ n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n\
    \            n = n / i\n    if n > 2:\n        factors.append(n)\n    return factors\n\
    \nprint(factorize(2))\nprint(factorize(3))\nprint(factorize(4))\nprint(factorize(5))\n\
    print(factorize(6))\nprint(factorize(7))\nprint(factorize(8))\nprint(factorize(9))\n\
    print(factorize(10))\nprint(factorize(11))\nprint(factorize(12))\nprint(factorize(13))\n\
    print(factorize(14))\nprint(factorize(15))\nprint(factorize(16))\nprint(factorize(17))\n\
    print(factorize(18))\nprint(factorize(19))\nprint(factorize(20))\nprint(factorize(21))\n\
    print(factorize(22))\nprint(factorize(23))\nprint(factorize(24))\nprint(factorize(25))\n\
    print(factorize(26))\nprint(factorize(27))\nprint(factorize(28))\nprint(factorize(29))\n\
    print(factorize(30))\nprint(factorize(31))\nprint(factorize(32))\nprint(factorize(33))\n\
    print(factorize(34))\nprint(factorize(35))\nprint(factorize(36))\nprint(factorize(37))\n\
    print(factorize(38))\nprint(factorize(39))\nprint(factorize(40))\nprint(factorize(41))\n\
    print(factorize(42))\nprint(factorize(43))\nprint(factorize(44))\nprint(factorize(45))\n\
    print(factorize(46))\nprint(factorize(47))\nprint(factorize(48))\nprint(factorize(49))\n\
    print(factorize(50))\nprint(factorize(51))\nprint(factorize(52))\nprint(factorize(53))",
  "    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n  \
    \          factors.append(i)\n            n = n // i\n        if n == 1:\n   \
    \         break\n    return factors\n\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n\n", "    factors = []\n    for i in range(2,\
    \ n + 1):\n        while n % i == 0:\n            factors.append(i)\n        \
    \    n = n // i\n    return factors\n\n", "    factors = []\n    divisor = 2\n\
    \    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n\
    \            n //= divisor\n        divisor += 1\n    return factors\n\nprint(factorize(10))\n\
    print(factorize(100))\nprint(factorize(1000))\nprint(factorize(10000))\nprint(factorize(100000))\n\
    print(factorize(1000000))\nprint(factorize(10000000))\nprint(factorize(100000000))\n\
    print(factorize(1000000000))\nprint(factorize(10000000000))\nprint(factorize(100000000000))\n\
    print(factorize(1000000000000))\nprint(factorize(10000000000000))\nprint(factorize(100000000000000))\n\
    print(factorize(1000000000000000))\nprint(factorize(10000000000000000))\nprint(factorize(100000000000000000))\n\
    print(factorize(1000000000000000000))\nprint(factorize(10000000000000000000))\n\
    print(factorize(100000000000000000000))\nprint(factorize(1000000000000000000000))\n\
    print(factorize(10000000000000000000000))\nprint(factorize(100000000000000000000000))\n\
    print(factorize(1000000000000000000000000))\nprint(factorize(10000000000000000000000000))\n\
    print(factorize(100000000000000000000000000))\nprint(factorize(1000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000))\nprint(factorize(100000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000))\nprint(factorize(1000000000000000000000000000000000000000))\n\
    print(factorize(10000000000000000000000000000000000000000))\nprint(factorize(100000000000000000000000000000000000000000))\n\
    print(factorize(1000000000000000000000000000000000000000000))\nprint(factorize(10000000000000000000000000000000000000000000))\n\
    print(factorize(100000000000000000000000000000000000000000000))"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
