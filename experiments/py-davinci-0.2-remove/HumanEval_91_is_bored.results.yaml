name: HumanEval_91_is_bored
language: py
results:
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bufku1w.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1bufku1w.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1bufku1w.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbywb6cif.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpbywb6cif.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbywb6cif.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2a0ojrks.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2a0ojrks.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2a0ojrks.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydmyl7qz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpydmyl7qz.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpydmyl7qz.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9omxju8n.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9omxju8n.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9omxju8n.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words\
    \ = sentence.split()\n        if words and words[0] == 'I':\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0u7lxdb7.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0u7lxdb7.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0u7lxdb7.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_ix6m0d.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpy_ix6m0d.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy_ix6m0d.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgoexyizq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgoexyizq.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgoexyizq.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2js6i94w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2js6i94w.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2js6i94w.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm9h8dz0w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm9h8dz0w.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm9h8dz0w.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2f37trur.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2f37trur.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2f37trur.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_r6pjhk.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpc_r6pjhk.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc_r6pjhk.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.strip().startswith('I'))\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfjkqyzr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvfjkqyzr.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvfjkqyzr.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb_cz6id.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpzb_cz6id.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzb_cz6id.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu9elcpbl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu9elcpbl.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu9elcpbl.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpph16wasf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpph16wasf.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpph16wasf.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpod4p2boz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpod4p2boz.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpod4p2boz.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu273ol1m.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpu273ol1m.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu273ol1m.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdakf6e7.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpjdakf6e7.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjdakf6e7.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    # your code\
    \ here\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96qw4u1k.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp96qw4u1k.py\", line 22,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp96qw4u1k.py\", line 16,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6tg6dtx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpz6tg6dtx.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz6tg6dtx.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps84odw9b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmps84odw9b.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps84odw9b.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfi_eyzfd.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpfi_eyzfd.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfi_eyzfd.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_isabtpc.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_isabtpc.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_isabtpc.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzm30maqv.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpzm30maqv.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzm30maqv.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdovebf8.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppdovebf8.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppdovebf8.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    # your code\
    \ here\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0po_f8w6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp0po_f8w6.py\", line 22,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0po_f8w6.py\", line 16,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcofe_mv1.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpcofe_mv1.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcofe_mv1.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0j_3yun.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg0j_3yun.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg0j_3yun.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphikiq_3w.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmphikiq_3w.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphikiq_3w.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiohx04rd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpiohx04rd.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiohx04rd.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvabgbrt.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmphvabgbrt.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphvabgbrt.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2xln8hs.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpy2xln8hs.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy2xln8hs.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3w6glm4o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3w6glm4o.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3w6glm4o.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h91j1fd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6h91j1fd.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6h91j1fd.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflg0pasr.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpflg0pasr.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpflg0pasr.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdmqxe3e7.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpdmqxe3e7.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdmqxe3e7.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftgilvyr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpftgilvyr.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpftgilvyr.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4uwc_7h.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmph4uwc_7h.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph4uwc_7h.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkgvzxvxm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpkgvzxvxm.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkgvzxvxm.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpywi5xqig.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpywi5xqig.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpywi5xqig.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp337g6pry.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp337g6pry.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp337g6pry.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeauwdxrt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeauwdxrt.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeauwdxrt.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.strip().startswith('I'))\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3icm209.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpg3icm209.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg3icm209.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfh36cl2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsfh36cl2.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsfh36cl2.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmcx00ffo.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpmcx00ffo.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmcx00ffo.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdndvnnm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpjdndvnnm.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjdndvnnm.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvohhmsi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqvohhmsi.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqvohhmsi.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('. '):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2bwqzhe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpy2bwqzhe.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy2bwqzhe.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbfzwvpv.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmptbfzwvpv.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptbfzwvpv.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpia0b2ahw.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpia0b2ahw.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpia0b2ahw.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_2m7_cv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu_2m7_cv.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu_2m7_cv.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7311fzd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj7311fzd.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj7311fzd.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5h_dutp.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpg5h_dutp.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg5h_dutp.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0w7e_ilo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0w7e_ilo.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0w7e_ilo.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmy71q7t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxmy71q7t.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxmy71q7t.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaj805fh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptaj805fh.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptaj805fh.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99k_rktk.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp99k_rktk.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp99k_rktk.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpflznm1ss.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpflznm1ss.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpflznm1ss.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfatifuga.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfatifuga.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfatifuga.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkypehp3k.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpkypehp3k.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkypehp3k.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcudzdqdy.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpcudzdqdy.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcudzdqdy.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlydh_4n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjlydh_4n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjlydh_4n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9sq3cmm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpn9sq3cmm.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn9sq3cmm.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.startswith('I'))\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8lhmses.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpi8lhmses.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi8lhmses.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxo7v30i.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpdxo7v30i.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdxo7v30i.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0cobzjg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu0cobzjg.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu0cobzjg.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeafx6lk5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpeafx6lk5.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeafx6lk5.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_829ap4r.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_829ap4r.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_829ap4r.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwqksijj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptwqksijj.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptwqksijj.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvztkfaij.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvztkfaij.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvztkfaij.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpye_1rt_j.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpye_1rt_j.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpye_1rt_j.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadsuu38p.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpadsuu38p.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpadsuu38p.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecktvgfo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpecktvgfo.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpecktvgfo.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8avpx03k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8avpx03k.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8avpx03k.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7614t47l.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7614t47l.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7614t47l.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupae6d4o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpupae6d4o.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpupae6d4o.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuw6bdwcm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpuw6bdwcm.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuw6bdwcm.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyreoa1m_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyreoa1m_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyreoa1m_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6qaik4f.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpt6qaik4f.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt6qaik4f.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl71z5y5g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpl71z5y5g.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl71z5y5g.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp943vw7gn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp943vw7gn.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp943vw7gn.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3fwprr_.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpm3fwprr_.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm3fwprr_.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9aeewuyj.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp9aeewuyj.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9aeewuyj.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqj02p5wd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqj02p5wd.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqj02p5wd.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptma08a_l.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmptma08a_l.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptma08a_l.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfivi1lva.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfivi1lva.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfivi1lva.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8vqrtx_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpi8vqrtx_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi8vqrtx_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words\
    \ = sentence.split()\n        if words[0] == 'I':\n            boredoms += 1\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbrhwkrm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpjbrhwkrm.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjbrhwkrm.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhq8559p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfhq8559p.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfhq8559p.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63ajueu4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp63ajueu4.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp63ajueu4.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwod68vcf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwod68vcf.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwod68vcf.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbghzxzmq.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpbghzxzmq.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbghzxzmq.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpac00d_88.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpac00d_88.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpac00d_88.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cpkiiob.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0cpkiiob.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0cpkiiob.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0_g0w4e.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpa0_g0w4e.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa0_g0w4e.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe_ysyrh_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpe_ysyrh_.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe_ysyrh_.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3sui5_18.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3sui5_18.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3sui5_18.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_4dcqd3.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpz_4dcqd3.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz_4dcqd3.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.strip().startswith('I'))\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9hxdy4w.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpo9hxdy4w.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo9hxdy4w.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9ub3ico.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo9ub3ico.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo9ub3ico.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyn5g_c4i.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpyn5g_c4i.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyn5g_c4i.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprkynp2s_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmprkynp2s_.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprkynp2s_.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudijj_e7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpudijj_e7.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpudijj_e7.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcv8e_yru.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcv8e_yru.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcv8e_yru.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg79b1ehd.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpg79b1ehd.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg79b1ehd.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo769032e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo769032e.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo769032e.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphuam28mu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphuam28mu.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphuam28mu.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5413qbe7.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp5413qbe7.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5413qbe7.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0q86o9io.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0q86o9io.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0q86o9io.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wlzo3a8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_wlzo3a8.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_wlzo3a8.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiowej0qc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpiowej0qc.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiowej0qc.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadkzxf65.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpadkzxf65.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpadkzxf65.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7llm5vly.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7llm5vly.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7llm5vly.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpquaf11bd.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpquaf11bd.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpquaf11bd.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1thlcksm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1thlcksm.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1thlcksm.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n    sentences.extend(S.split('!'))\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0z0u0ce.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl0z0u0ce.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl0z0u0ce.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5farisq4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5farisq4.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5farisq4.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.strip().startswith('I'))\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpinkwfo4v.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpinkwfo4v.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpinkwfo4v.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77ek_arz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp77ek_arz.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp77ek_arz.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpquttk2yg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpquttk2yg.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpquttk2yg.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0zhwdedc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0zhwdedc.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0zhwdedc.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd1_zo1r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvd1_zo1r.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvd1_zo1r.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljvyc7uy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpljvyc7uy.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpljvyc7uy.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanh77cw3.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpanh77cw3.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpanh77cw3.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpby4zvh56.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpby4zvh56.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpby4zvh56.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqm4isc6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpsqm4isc6.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsqm4isc6.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.strip().startswith('I'))\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp401jco82.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp401jco82.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp401jco82.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_w9qe9d.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4_w9qe9d.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4_w9qe9d.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('. ')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdr7o68ra.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdr7o68ra.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdr7o68ra.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcz12rfhh.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpcz12rfhh.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcz12rfhh.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpod6c766i.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpod6c766i.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpod6c766i.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjtiyx5e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzjtiyx5e.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzjtiyx5e.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2upzzzij.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2upzzzij.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2upzzzij.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphi_4r1au.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphi_4r1au.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphi_4r1au.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xqc_4sv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6xqc_4sv.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6xqc_4sv.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    # S = \"I am\
    \ bored. I am not bored.\"\n    # S = \"I am bored. I am not bored. I am bored.\
    \ I am not bored.\"\n    # S = \"I am bored. I am not bored. I am bored. I am\
    \ not bored. I am bored. I am not bored.\"\n    # S = \"I am bored. I am not bored.\
    \ I am bored. I am not bored. I am bored. I am not bored. I am bored. I am not\
    \ bored.\"\n    # S = \"I am bored. I am not bored. I am bored. I am not bored.\
    \ I am bored. I am not bored. I am bored. I am not bored. I am bored. I am not\
    \ bored.\"\n    # S = \"I am bored. I am not bored. I am bored. I am not bored.\
    \ I am bored. I am not bored. I am bored. I am not bored. I am bored. I am not\
    \ bored. I am bored. I am not bored.\"\n    # S = \"I am bored. I am not bored.\
    \ I am bored. I am not bored. I am bored. I am not bored. I am bored. I am not\
    \ bored. I am bored. I am not bored. I am bored. I am not bored. I am bored. I\
    \ am not bored.\"\n    # S = \"I am bored. I am not bored. I am bored. I am not\
    \ bored. I am bored. I am not bored. I am bored. I am not bored. I am bored. I\
    \ am not bored. I am bored. I am not bored. I am bored. I am not bored. I am bored.\
    \ I am not bored.\"\n    # S = \"I am bored. I am not bored. I am bored. I am\
    \ not bored. I am bored. I am not bored. I am bored. I am not bored. I am bored.\
    \ I am not bored. I am bored. I am not bored. I am bored. I am not bored. I am\
    \ bored. I am not bored. I am bored. I am not bored.\"\n    # S = \"I am bored.\
    \ I am not bored. I am bored. I am not bored. I am bored. I am not bored. I am\
    \ bored. I am not bored. I am bored. I am not bored. I am\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo0789ke5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo0789ke5.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo0789ke5.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptq5ydzwi.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmptq5ydzwi.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptq5ydzwi.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp54jathxu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp54jathxu.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp54jathxu.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_frm6b6g.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_frm6b6g.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_frm6b6g.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzun27m_y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzun27m_y.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzun27m_y.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfhqyimw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnfhqyimw.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnfhqyimw.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hn2s5vh.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp5hn2s5vh.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5hn2s5vh.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttdo4q5x.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpttdo4q5x.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpttdo4q5x.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n    sentences.extend(S.split('!'))\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7n_b0mm.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe7n_b0mm.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe7n_b0mm.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq1co33e.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpiq1co33e.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiq1co33e.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xw81c74.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5xw81c74.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5xw81c74.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        words\
    \ = sentence.split()\n        if words[0] == 'I':\n            boredoms += 1\n\
    \    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5eynsbk.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpu5eynsbk.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu5eynsbk.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.split()[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizjtkgg3.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpizjtkgg3.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpizjtkgg3.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.strip().startswith('I')])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmcw2u37.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpsmcw2u37.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsmcw2u37.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21xwem3y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp21xwem3y.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp21xwem3y.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_itwyc6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpn_itwyc6.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn_itwyc6.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh74c41c.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpyh74c41c.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyh74c41c.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4866f0m.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpd4866f0m.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd4866f0m.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0m8paa6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq0m8paa6.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq0m8paa6.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2xf31vo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw2xf31vo.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw2xf31vo.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return sum(1\
    \ for s in S.split('.') if s.strip().startswith('I'))\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1bmiq05.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmps1bmiq05.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps1bmiq05.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lrvql7n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3lrvql7n.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3lrvql7n.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_npffhl.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpd_npffhl.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd_npffhl.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for word in S.split():\n        if word == 'I':\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjp205vg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdjp205vg.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdjp205vg.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ktsaiob.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_ktsaiob.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_ktsaiob.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn22u3159.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpn22u3159.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn22u3159.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ee5ytmo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7ee5ytmo.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7ee5ytmo.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperb38a_6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmperb38a_6.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmperb38a_6.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphs1uq_6a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphs1uq_6a.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphs1uq_6a.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6zhgik59.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp6zhgik59.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6zhgik59.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7yv4o1v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa7yv4o1v.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa7yv4o1v.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxffl4u3h.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxffl4u3h.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxffl4u3h.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return len([s\
    \ for s in S.split('.') if s.startswith('I')])\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmffv0p1k.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpmffv0p1k.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmffv0p1k.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbrhju2a.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjbrhju2a.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjbrhju2a.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpbl1_nh.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpkpbl1_nh.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkpbl1_nh.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42iaq4r7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp42iaq4r7.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp42iaq4r7.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppj2kms8x.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmppj2kms8x.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppj2kms8x.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgspg96nt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgspg96nt.py\", line 20,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgspg96nt.py\", line 13,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyyj4076j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyyj4076j.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyyj4076j.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1hscdcon.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1hscdcon.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1hscdcon.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukm4rquz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpukm4rquz.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpukm4rquz.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wq4o3q8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6wq4o3q8.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6wq4o3q8.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4jtz8oj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc4jtz8oj.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc4jtz8oj.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxk0m25w.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpdxk0m25w.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdxk0m25w.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxuvpf8e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbxuvpf8e.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbxuvpf8e.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplahs7ui7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplahs7ui7.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplahs7ui7.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qec3jkt.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp9qec3jkt.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9qec3jkt.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeji3hb7c.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeji3hb7c.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeji3hb7c.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7xmj4yn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr7xmj4yn.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr7xmj4yn.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu9vhz0u2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu9vhz0u2.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu9vhz0u2.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.split()[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        if\
    \ sentence.strip().startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmportty63d.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmportty63d.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmportty63d.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    return S.count('I')\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8axm5ei.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpi8axm5ei.py\", line 21,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi8axm5ei.py\", line 14,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprgr2nqh2.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprgr2nqh2.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprgr2nqh2.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n            \"\"\"\n    boredoms =\
    \ 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoz41qy98.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoz41qy98.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpoz41qy98.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
