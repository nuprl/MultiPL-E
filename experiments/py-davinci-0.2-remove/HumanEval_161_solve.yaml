name: HumanEval_161_solve
language: py
prompt: "def solve(s: str) -> str:\n    \"\"\"You are given a string s.\n    if s[i]\
  \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
  \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
  \    The function should return the resulted string.\n    Examples\n           \
  \     \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('AsDf') == 'aSdF'\n    assert\
  \ candidate('1234') == '4321'\n    assert candidate('ab') == 'AB'\n    assert candidate('#a@C')\
  \ == '#A@c'\n    assert candidate('#AsdfW^45') == '#aSDFw^45'\n    assert candidate('#6@2')\
  \ == '2@6#'\n    assert candidate('#$a^D') == '#$A^d'\n    assert candidate('#ccc')\
  \ == '#CCC'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
completions: ["    if not s:\n        return s\n    if not any(c.isalpha() for c in\
    \ s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else\
    \ c.upper() for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\nprint(solve(\"abc\"))\nprint(solve(\"\
    abc123\"))\nprint(solve(\"123\"))", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if s.isalpha():\n     \
    \   return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return ''.join([i.lower() if i.isupper() else i.upper() for\
    \ i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return \"\".join([i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if not any(c.isalpha() for c in s):\n     \
    \   return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for\
    \ c in s)\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n  \
    \      return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    return\
    \ ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return ''.join([i.swapcase() for i in s])\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\nprint(solve(\"\
    abc\"))\nprint(solve(\"abc123\"))\nprint(solve(\"abc!123\"))\nprint(solve(\"\"\
    ))\nprint(solve(\"123\"))\nprint(solve(\"123!abc\"))\nprint(solve(\"123!abc!\"\
    ))\nprint(solve(\"123!abc!@\"))\nprint(solve(\"123!abc!@#$\"))\nprint(solve(\"\
    123!abc!@#$%^&*()\"))\nprint(solve(\"123!abc!@#$%^&*()_+\"))\nprint(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\
    \\:;'<>?,./\"))\nprint(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`\"))\n\
    print(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`123\"))\nprint(solve(\"\
    123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`123abc\"))\nprint(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\
    \\:;'<>?,./~`123abcABC\"))\nprint(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`123abcABC!@#\"\
    ))\nprint(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`123abcABC!@#123\"))\n\
    print(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`123abcABC!@#123ABC\"))\n\
    print(solve(\"123!abc!@#$%^&*()_+-=[]{}|\\\\:;'<>?,./~`123abcABC!@#123ABC!@#\"\
    ))", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\nprint(solve(\"abc\"))\nprint(solve(\"abC\"))\nprint(solve(\"123\"\
    ))\nprint(solve(\"\"))\nprint(solve(\"aBc\"))\nprint(solve(\"aBc123\"))\nprint(solve(\"\
    123aBc\"))\nprint(solve(\"123aBc456\"))\nprint(solve(\"1234567890\"))\nprint(solve(\"\
    abcdefghijklmnopqrstuvwxyz\"))\nprint(solve(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n\
    print(solve(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(solve(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"))\nprint(solve(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+\"))\n\
    print(solve(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[]{}|\\\
    \\:;'<>?,./\"))\nprint(solve(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[]{}|\\\
    \\:;'<>?,./~`\"))\nprint(solve(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[]{}|\\\
    \\:;'<>?,./~` \"))\nprint(solve(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP",
  "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ \"\".join([i.lower() if i.isupper() else i.upper() for i in s])\n\n", "    if\
    \ not s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n     \
    \   return s.swapcase()\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    return s.swapcase()\
    \ if s.isalpha() else s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if not s:\n     \
    \   return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n\
    \            s[i] = s[i].swapcase()\n    return ''.join(s)\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n", "    if not s.isalpha():\n  \
    \      return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if not s:\n        return\
    \ s\n    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if s.isalpha():\n     \
    \   return s.swapcase()\n    else:\n        return s[::-1]\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if not s.isalpha():\n     \
    \   return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n", "    if not s:\n        return s\n    if not\
    \ any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if s.isalpha():\n     \
    \   return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n    return\
    \ s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    return s[::-1]\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n",
  "    if not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.swapcase() for i in s])\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n",
  "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if not s:\n        return s\n    if not any(c.isalpha() for c in s):\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return ''.join([i.lower() if i.isupper() else i.upper() for\
    \ i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.swapcase() for i in s])\n\n", "    if not s:\n    \
    \    return s\n    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if not s.isalpha():\n \
    \       return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper() else i.upper()\
    \ for i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n", "    if not s:\n        return s\n    if not s.isalpha():\n        return\
    \ s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n",
  "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if s.isalpha():\n    \
    \    return s.swapcase()\n    else:\n        return s[::-1]\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n", "    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if s.isalpha():\n     \
    \   return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if not s.isalpha():\n        return\
    \ s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper() else i.upper()\
    \ for i in s])\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return ''.join(i.lower() if i.isupper() else i.upper()\
    \ for i in s)\n\n", "    if len(s) == 0:\n        return s\n    else:\n      \
    \  if s.isalpha():\n            return s[::-1]\n        else:\n            return\
    \ ''.join([i.swapcase() if i.isalpha() else i for i in s])\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n", "    if not\
    \ s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n     \
    \   return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    return ''.join(i.lower()\
    \ if i.isupper() else i.upper() for i in s)\n\n", "    if s.isalpha():\n     \
    \   return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(ch.lower() if ch.isupper() else ch.upper() for ch in s)\n\n",
  "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n  \
    \      return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if not s.isalpha():\n     \
    \   return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n", "    if not s:\n        return s\n    if not\
    \ s.isalpha():\n        return s[::-1]\n    return \"\".join(\n        [i.upper()\
    \ if i.islower() else i.lower() for i in s]\n    )\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n", "    if s.islower() or s.isupper():\n \
    \       return s[::-1]\n    else:\n        return s.swapcase()\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    else:\n        return \"\".join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return ''.join([i.swapcase() for i\
    \ in s])\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\nprint(solve(\"abc\"))\nprint(solve(\"123\"\
    ))\nprint(solve(\"abc123\"))\nprint(solve(\"\"))\n", "    if s.isalpha():\n  \
    \      return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n", "    # if\
    \ s is empty, return empty string\n    if len(s) == 0:\n        return ''\n  \
    \  # if s is not empty, reverse the string\n    else:\n        # if s is a string\
    \ of letters, reverse the case of each letter\n        if s.isalpha():\n     \
    \       return s.swapcase()\n        # if s is not a string of letters, reverse\
    \ the string\n        else:\n            return s[::-1]\n", "    if not s:\n \
    \       return s\n    if not s.isalpha():\n        return s[::-1]\n    return\
    \ ''.join(i.lower() if i.isupper() else i.upper() for i in s)\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ not s:\n        return s\n    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if not s:\n        return s\n\
    \    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.swapcase() for i in s])\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n", "    if not\
    \ s:\n        return s\n    if not any(c.isalpha() for c in s):\n        return\
    \ s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in\
    \ s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n    \
    \    return s[::-1]\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return s.swapcase()\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if\
    \ s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n \
    \       return s[::-1]\n\n", "    if not s:\n        return s\n    if not s.isalpha():\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if not s.isalpha():\n     \
    \   return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    else:\n        return s.swapcase()\n", "    if not\
    \ s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n\n", "    if not s.isalpha():\n\
    \        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper()\
    \ for c in s)\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if not s.isalpha():\n     \
    \   return s[::-1]\n    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\nprint(solve(\"\
    abc\"))\nprint(solve(\"abc123\"))\nprint(solve(\"123\"))", "    if not s:\n  \
    \      return s\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\
    \    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    return s[::-1]\n\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n",
  "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n",
  "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return s.swapcase()\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n\
    \        return s[::-1]\n\n", "    if s.isalpha():\n        return s.swapcase()\n\
    \    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if s.isalpha():\n\
    \        return s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if\
    \ s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]\n\
    \n", "    if s.isalpha():\n        return s.swapcase()\n    else:\n        return\
    \ s[::-1]\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return ''.join([i.lower() if i.isupper() else i.upper() for i in s])\n\
    \n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n        return\
    \ s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n    return\
    \ \"\".join([i.lower() if i.isupper() else i.upper() for i in s])\n\n", "    if\
    \ not s.isalpha():\n        return s[::-1]\n    else:\n        return ''.join([i.lower()\
    \ if i.isupper() else i.upper() for i in s])\n", "    if not s.isalpha():\n  \
    \      return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return ''.join([i.lower() if i.isupper() else i.upper() for\
    \ i in s])\n\n", "    if not s.isalpha():\n        return s[::-1]\n    else:\n\
    \        return s.swapcase()\n\n", "    if not s.isalpha():\n        return s[::-1]\n\
    \    else:\n        return s.swapcase()\n\n", "    if s.isalpha():\n        return\
    \ s.swapcase()\n    else:\n        return s[::-1]\n\n", "    if not s:\n     \
    \   return s\n    if not s.isalpha():\n        return s[::-1]\n    return ''.join(c.lower()\
    \ if c.isupper() else c.upper() for c in s)\n\n", "    if not s.isalpha():\n \
    \       return s[::-1]\n    else:\n        return ''.join([i.lower() if i.isupper()\
    \ else i.upper() for i in s])\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
