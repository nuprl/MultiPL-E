name: HumanEval_17_parse_music
language: py
results:
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3vnota5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpo3vnota5.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpo3vnota5.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxwadkou.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprxwadkou.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmprxwadkou.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = music_string.split()\n    beats = []\n    for note in notes:\n  \
    \      if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n\
    \            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n\ndef check(candidate):\n    assert candidate('') == []\n \
    \   assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u4asjgi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5u4asjgi.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp5u4asjgi.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcysu992w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcysu992w.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpcysu992w.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskxk2x3g.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpskxk2x3g.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpskxk2x3g.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hayhfnk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9hayhfnk.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp9hayhfnk.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuyae25r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmuyae25r.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpmuyae25r.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvew3rglq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvew3rglq.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpvew3rglq.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd7vew1lq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpd7vew1lq.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpd7vew1lq.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdj3x6a61.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdj3x6a61.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpdj3x6a61.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdj43apx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjdj43apx.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpjdj43apx.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkk8fud7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnkk8fud7.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpnkk8fud7.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3xmy6db.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf3xmy6db.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpf3xmy6db.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq7na38p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwq7na38p.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpwq7na38p.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3q901pj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj3q901pj.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpj3q901pj.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeb1vv0rk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeb1vv0rk.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpeb1vv0rk.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpty_kzb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkpty_kzb.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpkpty_kzb.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError('Invalid note')\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(\"Unknown note\")\n    return beats\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = music_string.split(' ')\n    beats = []\n    for note in notes:\n\
    \        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n\
    \            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .|\
    \ .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(f'Unknown note: {note}')\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(f'Unknown note {note}')\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o|o|')\n    music_string = music_string.replace('.|',\
    \ '.|.|.|')\n    music_string = music_string.replace('o', 'o|o|o|o|')\n    music_string\
    \ = music_string.replace('|', '')\n    return [len(x) for x in music_string.split('.')]\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1u13gz3g.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1u13gz3g.py\", line 29,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp1u13gz3g.py\", line\
    \ 22, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppb6lziq_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppb6lziq_.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmppb6lziq_.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3k1ltad.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp3k1ltad.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpp3k1ltad.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n\
    \nprint(parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpfh64wo4r.py\", line 16\n    print(parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\n\
    \                      ^\nSyntaxError: unterminated string literal (detected at\
    \ line 16)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyet2qko.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqyet2qko.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqyet2qko.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5x5nnyhr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5x5nnyhr.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp5x5nnyhr.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfujbdfr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsfujbdfr.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpsfujbdfr.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o o')\n    music_string = music_string.replace('.|',\
    \ '. .')\n    music_string = music_string.replace('o', '4')\n    music_string\
    \ = music_string.replace('.', '1')\n    music_string = music_string.split()\n\
    \    music_string = [int(i) for i in music_string]\n    return music_string\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs7qzalf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjs7qzalf.py\", line 30,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpjs7qzalf.py\", line\
    \ 25, in check\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    # Hint: You can use `if` and `elif`\
    \ to check for different characters\n    # Hint: You can use `for` loop to iterate\
    \ over characters in the string\n    # Hint: You can use `list.append()` to add\
    \ elements to a list\n    # Hint: You can use `len()` to get the length of a list\n\
    \    # Hint: You can use `range()` to iterate over a list\n    # Hint: You can\
    \ use `list.index()` to get index of a character in a string\n    # Hint: You\
    \ can use `list.insert()` to insert an element to a list\n    # Hint: You can\
    \ use `list.remove()` to remove an element from a list\n    # Hint: You can use\
    \ `list.pop()` to remove an element from a list\n    # Hint: You can use `list.count()`\
    \ to count number of elements in a list\n    # Hint: You can use `list.sort()`\
    \ to sort elements in a list\n    # Hint: You can use `list.reverse()` to reverse\
    \ elements in a list\n    # Hint: You can use `list.extend()` to extend a list\
    \ with another list\n    # Hint: You can use `list.copy()` to copy a list\n  \
    \  # Hint: You can use `list.clear()` to clear a list\n    # Hint: You can use\
    \ `list.append()` to add elements to a list\n    # Hint: You can use `list.append()`\
    \ to add elements to a list\n    # Hint: You can use `list.append()` to add elements\
    \ to a list\n    # Hint: You can use `list.append()` to add elements to a list\n\
    \    # Hint: You can use `list.append()` to add elements to a list\n    # Hint:\
    \ You can use `list.append()` to add elements to a list\n    # Hint: You can use\
    \ `list.append()` to add elements to a list\n    # Hint: You can use `list.append()`\
    \ to add elements to a list\n    # Hint: You can use `list.append()` to\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppp_axtdq.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmppp_axtdq.py\", line 47,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmppp_axtdq.py\", line\
    \ 40, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4kh8d_v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe4kh8d_v.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpe4kh8d_v.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqozjfdqq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqozjfdqq.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqozjfdqq.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptj2m2e_8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptj2m2e_8.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmptj2m2e_8.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0cucrq0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu0cucrq0.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpu0cucrq0.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wwu47g6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8wwu47g6.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8wwu47g6.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqekrcn3x.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqekrcn3x.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqekrcn3x.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split('\
    \ ')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz976hm3a.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpz976hm3a.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpz976hm3a.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb89pb7tv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb89pb7tv.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpb89pb7tv.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprq05_dme.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprq05_dme.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmprq05_dme.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lf7bzof.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1lf7bzof.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp1lf7bzof.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpubvck83q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpubvck83q.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpubvck83q.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjpj4wuf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxjpj4wuf.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpxjpj4wuf.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_dw397q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7_dw397q.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp7_dw397q.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm5xj597q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm5xj597q.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpm5xj597q.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijow2n9g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpijow2n9g.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpijow2n9g.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9nacc91.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk9nacc91.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpk9nacc91.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88q6x_pa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp88q6x_pa.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp88q6x_pa.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp565w6_qz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp565w6_qz.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp565w6_qz.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me!\n    return []\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0kalxqi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpy0kalxqi.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpy0kalxqi.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp706ghzgy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp706ghzgy.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp706ghzgy.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrnb3g4y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcrnb3g4y.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpcrnb3g4y.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_q6cnrk9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_q6cnrk9.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp_q6cnrk9.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqf9300o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprqf9300o.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmprqf9300o.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzcyutxl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqzcyutxl.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqzcyutxl.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # Your code goes here\n    # You can add additional functions if needed\n\
    \    # You can add additional classes if needed\n    # Tip: you might want to\
    \ use regular expressions\n    # See: https://docs.python.org/3/library/re.html\n\
    \    # See: https://docs.python.org/3/howto/regex.html\n    # See: https://regex101.com/\n\
    \    #\n    # You can write additional tests in 'exercises/music/tests.py'\n \
    \   # You can find some sample music strings in 'exercises/music/music.txt'\n\
    \    #\n    # Good luck!\n    pass\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzn7kdu0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdzn7kdu0.py\", line 35,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpdzn7kdu0.py\", line\
    \ 28, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.|',\
    \ '.')\n    music_string = music_string.replace('o', '4')\n    music_string =\
    \ music_string.replace('.', '1')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace('|', ' ')\n    music_string = music_string.split()\n\
    \    music_string = [int(i) for i in music_string]\n    return music_string\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpor1edn2g.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpor1edn2g.py\", line 32,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpor1edn2g.py\", line\
    \ 26, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(f'Unknown note: {note}')\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvi13pp_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprvi13pp_.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmprvi13pp_.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o o')\n    music_string = music_string.replace('.|',\
    \ '. .')\n    music_string = music_string.replace('o', '4')\n    music_string\
    \ = music_string.replace('.', '1')\n    music_string = music_string.split()\n\
    \    return [int(i) for i in music_string]\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkfs652h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzkfs652h.py\", line 29,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpzkfs652h.py\", line\
    \ 24, in check\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_7rse9g.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph_7rse9g.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmph_7rse9g.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    return []\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70h_j1_8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp70h_j1_8.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp70h_j1_8.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5b9bs80k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5b9bs80k.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp5b9bs80k.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sxvne_z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9sxvne_z.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp9sxvne_z.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmple7936e7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmple7936e7.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmple7936e7.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55xfzowq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp55xfzowq.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp55xfzowq.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [1 if x == '.|' else 2 if x == 'o|' else 4 for x in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpof09wykb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpof09wykb.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpof09wykb.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp494zri59.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp494zri59.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp494zri59.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp064o2zoi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp064o2zoi.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp064o2zoi.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # YOUR CODE HERE\n    return []\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx9tkkh7m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpx9tkkh7m.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpx9tkkh7m.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd54qqhev.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd54qqhev.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpd54qqhev.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1iz8qver.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1iz8qver.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp1iz8qver.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for i in music_string:\n        if i == 'o':\n          \
    \  beats.append(4)\n        elif i == 'o|':\n            beats.append(2)\n   \
    \     elif i == '.|':\n            beats.append(1)\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lbenx44.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8lbenx44.py\", line 32,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8lbenx44.py\", line\
    \ 27, in check\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split(' '):\n        if note ==\
    \ 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError('Invalid note')\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofh18qll.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpofh18qll.py\", line 34,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpofh18qll.py\", line\
    \ 27, in check\n    assert candidate('') == []\n  File \"/tmp/tmpofh18qll.py\"\
    , line 23, in parse_music\n    raise ValueError('Invalid note')\nValueError: Invalid\
    \ note\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdoaha3u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwdoaha3u.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpwdoaha3u.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjij2y2xm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjij2y2xm.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpjij2y2xm.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpolzqgcxm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpolzqgcxm.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpolzqgcxm.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split(' '):\n        if note ==\
    \ 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(\"Unknown note: {}\".format(note))\n    return beats\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj9m0rkq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxj9m0rkq.py\", line 34,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpxj9m0rkq.py\", line\
    \ 27, in check\n    assert candidate('') == []\n  File \"/tmp/tmpxj9m0rkq.py\"\
    , line 23, in parse_music\n    raise ValueError(\"Unknown note: {}\".format(note))\n\
    ValueError: Unknown note: \n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw0c_vmni.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw0c_vmni.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpw0c_vmni.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1eexfl3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe1eexfl3.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpe1eexfl3.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzb7rw0xh.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzb7rw0xh.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpzb7rw0xh.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25vwi620.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp25vwi620.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp25vwi620.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8i6nkuem.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8i6nkuem.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8i6nkuem.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp299e9qtj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp299e9qtj.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp299e9qtj.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperrgkycs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmperrgkycs.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmperrgkycs.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0yplp7v0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0yplp7v0.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp0yplp7v0.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_utk6ufe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_utk6ufe.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp_utk6ufe.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp864gjv1q.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp864gjv1q.py\", line 23,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp864gjv1q.py\", line\
    \ 16, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4vc65pb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg4vc65pb.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpg4vc65pb.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmto4bj9_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmto4bj9_.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpmto4bj9_.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beat_list = []\n    for note in music_string.split():\n        if note ==\
    \ 'o':\n            beat_list.append(4)\n        elif note == 'o|':\n        \
    \    beat_list.append(2)\n        elif note == '.|':\n            beat_list.append(1)\n\
    \    return beat_list\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .|\
    \ .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl8ny8plq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpl8ny8plq.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpl8ny8plq.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe1s5hezh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe1s5hezh.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpe1s5hezh.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg25rfpdk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg25rfpdk.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpg25rfpdk.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxequpad.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqxequpad.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqxequpad.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa1elewpy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa1elewpy.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpa1elewpy.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_e4l_lkc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_e4l_lkc.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp_e4l_lkc.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt5wtaj9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxt5wtaj9.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpxt5wtaj9.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxl6gbgl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsxl6gbgl.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpsxl6gbgl.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_jngm77.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpy_jngm77.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpy_jngm77.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_seeabsq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_seeabsq.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp_seeabsq.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvr10drdy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvr10drdy.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpvr10drdy.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybazuyuw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpybazuyuw.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpybazuyuw.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrjfp738.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptrjfp738.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmptrjfp738.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6j_64z3n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6j_64z3n.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp6j_64z3n.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpud2i20l0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpud2i20l0.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpud2i20l0.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', '1')\n    music_string = music_string.replace('o',\
    \ '4')\n    music_string = music_string.replace('.|', '0')\n    music_string =\
    \ music_string.replace('|', '')\n    music_string = music_string.split()\n   \
    \ music_string = [int(i) for i in music_string]\n    return music_string\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqv0z3jyf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqv0z3jyf.py\", line 30,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpqv0z3jyf.py\", line\
    \ 25, in check\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqcybiye.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnqcybiye.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpnqcybiye.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz9gjhm58.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz9gjhm58.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpz9gjhm58.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp566d3rjj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp566d3rjj.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp566d3rjj.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa13b4g74.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa13b4g74.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpa13b4g74.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxvfwij6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpyxvfwij6.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpyxvfwij6.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7m2hodp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf7m2hodp.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpf7m2hodp.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90y0pu1t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp90y0pu1t.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp90y0pu1t.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vjc87zo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8vjc87zo.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8vjc87zo.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkguidcqg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkguidcqg.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpkguidcqg.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nqv8fkc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7nqv8fkc.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp7nqv8fkc.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvaxv5te0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpvaxv5te0.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpvaxv5te0.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [1, 2, 4]\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuw5igtb6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuw5igtb6.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpuw5igtb6.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoirfw8go.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoirfw8go.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpoirfw8go.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6gzf6c1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk6gzf6c1.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpk6gzf6c1.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h4d40wz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6h4d40wz.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp6h4d40wz.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(f'Unknown note: {note}')\n    return beats\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.|',\
    \ '.')\n    music_string = music_string.replace('o', '4')\n    music_string =\
    \ music_string.replace('.', '1')\n    music_string = music_string.replace('|',\
    \ ' ')\n    music_string = music_string.split()\n    music_string = [int(i) for\
    \ i in music_string]\n    return music_string\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgs3wvr4g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgs3wvr4g.py\", line 31,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpgs3wvr4g.py\", line\
    \ 27, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.|',\
    \ '.')\n    music_string = music_string.replace('o', '4')\n    music_string =\
    \ music_string.replace('.', '1')\n    music_string = music_string.replace('|',\
    \ ' ')\n    music_string = music_string.split()\n    music_string = [int(i) for\
    \ i in music_string]\n    return music_string\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpauhpldzd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpauhpldzd.py\", line 31,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpauhpldzd.py\", line\
    \ 27, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split():\n        if note == 'o':\n\
    \            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError(f'Invalid note: {note}')\n    return beats\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3r9penyb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3r9penyb.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp3r9penyb.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2go6dr42.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2go6dr42.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp2go6dr42.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjae1f_3h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjae1f_3h.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpjae1f_3h.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = music_string.split('|')\n    beats = []\n    for note in notes:\n\
    \        if note == 'o':\n            beats.append(4)\n        elif note == 'o.':\n\
    \            beats.append(2)\n        elif note == '.o':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        elif note ==\
    \ '|.':\n            beats.append(1)\n        elif note == '||':\n           \
    \ beats.append(0)\n        else:\n            beats.append(0)\n    return beats\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpigyxky2h.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpigyxky2h.py\", line 41,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpigyxky2h.py\", line\
    \ 34, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return []\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hng06_x.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9hng06_x.py\", line 23,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp9hng06_x.py\", line\
    \ 17, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50s416ve.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp50s416ve.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp50s416ve.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lov2hpa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8lov2hpa.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8lov2hpa.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzk_ykl6n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzk_ykl6n.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpzk_ykl6n.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2ykdxvi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpx2ykdxvi.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpx2ykdxvi.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtny5lnq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdtny5lnq.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpdtny5lnq.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8k_79a9q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8k_79a9q.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8k_79a9q.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfn_hmtg1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfn_hmtg1.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpfn_hmtg1.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26j3_xjk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp26j3_xjk.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp26j3_xjk.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_1n1bgw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg_1n1bgw.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpg_1n1bgw.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ttyqea8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp8ttyqea8.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8ttyqea8.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7p6_fr1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpb7p6_fr1.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpb7p6_fr1.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me\n    pass\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw55lbnqs.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpw55lbnqs.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpw55lbnqs.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp710d_tfo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp710d_tfo.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp710d_tfo.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi39rs0h6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi39rs0h6.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpi39rs0h6.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split('\
    \ ')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80vidrud.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp80vidrud.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp80vidrud.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn746fhnb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpn746fhnb.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpn746fhnb.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcm2se9a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphcm2se9a.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmphcm2se9a.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = music_string.split(' ')\n    beats = []\n    for note in notes:\n\
    \        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n\
    \            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n\ndef check(candidate):\n    assert candidate('') == []\n \
    \   assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1do9lmny.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1do9lmny.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp1do9lmny.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvxarzr4r.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvxarzr4r.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpvxarzr4r.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split('|')]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2z5ffb4y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp2z5ffb4y.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp2z5ffb4y.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp936gt6ll.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp936gt6ll.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp936gt6ll.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split(' '):\n        if note ==\
    \ 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError('Invalid note: {}'.format(note))\n    return beats\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3zuk0oio.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3zuk0oio.py\", line 34,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp3zuk0oio.py\", line\
    \ 27, in check\n    assert candidate('') == []\n  File \"/tmp/tmp3zuk0oio.py\"\
    , line 23, in parse_music\n    raise ValueError('Invalid note: {}'.format(note))\n\
    ValueError: Invalid note: \n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jpejch5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2jpejch5.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp2jpejch5.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni4v_nti.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpni4v_nti.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpni4v_nti.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35w00gzs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp35w00gzs.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp35w00gzs.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split('\
    \ ')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg3vfryje.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg3vfryje.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpg3vfryje.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7yr8x60k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7yr8x60k.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp7yr8x60k.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposmobo1u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmposmobo1u.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmposmobo1u.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xo4jp1q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8xo4jp1q.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8xo4jp1q.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_i4t65bu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_i4t65bu.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp_i4t65bu.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    # Hint: you can use str.split() to split\
    \ string into list of characters\n    # Hint: you can use str.strip() to remove\
    \ whitespaces\n\n    # TODO: remove this line and implement the function\n   \
    \ raise NotImplementedError(\"Function parse_music not implemented\")\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnh_aww9h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnh_aww9h.py\", line 30,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpnh_aww9h.py\", line\
    \ 23, in check\n    assert candidate('') == []\n  File \"/tmp/tmpnh_aww9h.py\"\
    , line 19, in parse_music\n    raise NotImplementedError(\"Function parse_music\
    \ not implemented\")\nNotImplementedError: Function parse_music not implemented\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4m79i1cq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4m79i1cq.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp4m79i1cq.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qvb2gth.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9qvb2gth.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp9qvb2gth.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml5dnuxu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpml5dnuxu.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpml5dnuxu.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhwn7ae6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyhwn7ae6.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpyhwn7ae6.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzm9354o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphzm9354o.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmphzm9354o.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: Implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvlbiofx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptvlbiofx.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmptvlbiofx.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9mraub5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd9mraub5.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpd9mraub5.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    beats = []\n    for note in music_string.split(' '):\n        if note ==\
    \ 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n\
    \        elif note == '.|':\n            beats.append(1)\n        else:\n    \
    \        raise ValueError('Invalid note')\n    return beats\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjmxmj_r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpwjmxmj_r.py\", line 35,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpwjmxmj_r.py\", line\
    \ 28, in check\n    assert candidate('') == []\n  File \"/tmp/tmpwjmxmj_r.py\"\
    , line 23, in parse_music\n    raise ValueError('Invalid note')\nValueError: Invalid\
    \ note\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_hsvt46.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp_hsvt46.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpp_hsvt46.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdd7hpugc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdd7hpugc.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpdd7hpugc.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr2m8uzn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcr2m8uzn.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpcr2m8uzn.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_96ul5i.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd_96ul5i.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpd_96ul5i.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf09oenbe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf09oenbe.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpf09oenbe.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ghzv3xi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3ghzv3xi.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp3ghzv3xi.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n  \
    \  return [notes[note] for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8golkkge.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8golkkge.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8golkkge.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1dksh33.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt1dksh33.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpt1dksh33.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    return []\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57p5dy7n.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp57p5dy7n.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp57p5dy7n.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me!\n    return []\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnugk_vwz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnugk_vwz.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpnugk_vwz.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split('\
    \ ')]\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzy2erne.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphzy2erne.py\", line 24,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmphzy2erne.py\", line\
    \ 17, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ygfltbf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0ygfltbf.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp0ygfltbf.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kmbbg5j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7kmbbg5j.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp7kmbbg5j.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    notes = music_string.split()\n    beats = []\n    for note in notes:\n  \
    \      if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n\
    \            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n\ndef check(candidate):\n    assert candidate('') == []\n \
    \   assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_list = []\n    for note in music_string:\n        if note == 'o':\n\
    \            music_list.append(4)\n        elif note == 'o|':\n            music_list.append(2)\n\
    \        elif note == '.|':\n            music_list.append(1)\n    return music_list\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a0vjqvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4a0vjqvf.py\", line 32,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp4a0vjqvf.py\", line\
    \ 27, in check\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99by805i.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp99by805i.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp99by805i.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfi703o7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzfi703o7.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpzfi703o7.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2zpomu0b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2zpomu0b.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp2zpomu0b.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    music_string = music_string.replace('o|', 'o|o|')\n    music_string = music_string.replace('.|',\
    \ '.|.|.|')\n    music_string = music_string.replace('o', 'o|o|o|o|')\n    music_string\
    \ = music_string.replace('.', '.|.|.|.|')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '4')\n    music_string = music_string.replace('.',\
    \ '1')\n    music_string = music_string.split()\n    music_string = [int(i) for\
    \ i in music_string]\n    return music_string\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbxn89wz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptbxn89wz.py\", line 33,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmptbxn89wz.py\", line\
    \ 27, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirvopnsc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpirvopnsc.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpirvopnsc.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
    \    \"\"\" Input to this function is a string representing musical notes in a\
    \ special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n        \"\"\"\n\
    \    # TODO: implement me!\n    pass\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9v5bddum.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9v5bddum.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp9v5bddum.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  exit_code: -1
  status: Exception
