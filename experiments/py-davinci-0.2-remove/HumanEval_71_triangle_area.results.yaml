name: HumanEval_71_triangle_area
language: py
results:
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7rj576p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf7rj576p.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpf7rj576p.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpf7rj576p.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_74nzdc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt_74nzdc.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpt_74nzdc.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpt_74nzdc.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ssfvcc0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4ssfvcc0.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4ssfvcc0.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp4ssfvcc0.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrwwbv3o.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyrwwbv3o.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpyrwwbv3o.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpyrwwbv3o.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4l5cdhow.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4l5cdhow.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4l5cdhow.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp4l5cdhow.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gt84adw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5gt84adw.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp5gt84adw.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp5gt84adw.py\"\
    , line 12, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b\
    \ + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n  \
    \  assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(5, 4, 3))\nprint(triangle_area(5, 4, 8))\nprint(triangle_area(5,\
    \ 4, -3))\nprint(triangle_area(5, 4, 0))\nprint(triangle_area(5, 4, 1))\nprint(triangle_area(5,\
    \ 4, 2))\nprint(triangle_area(5, 4, 3))\nprint(triangle_area(5, 4, 4))\nprint(triangle_area(5,\
    \ 4, 5))\nprint(triangle_area(5, 4, 6))\nprint(triangle_area(5, 4, 7))\nprint(triangle_area(5,\
    \ 4, 8))\nprint(triangle_area(5, 4, 9))\nprint(triangle_area(5, 4, 10))\nprint(triangle_area(5,\
    \ 4, 11))\nprint(triangle_area(5, 4, 12))\nprint(triangle_area(5, 4, 13))\nprint(triangle_area(5,\
    \ 4, 14))\nprint(triangle_area(5, 4, 15))\nprint(triangle_area(5, 4, 16))\nprint(triangle_area(5,\
    \ 4, 17))\nprint(triangle_area(5, 4, 18))\nprint(triangle_area(5, 4, 19))\nprint(triangle_area(5,\
    \ 4, 20))\nprint(triangle_area(5, 4, 21))\nprint(triangle_area(5, 4, 22))\nprint(triangle_area(5,\
    \ 4, 23))\nprint(triangle_area(5, 4, 24))\nprint(triangle_area(5,\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4ydy2hot.py\", line 47\n    print(triangle_area(5,\n \
    \                      ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxa8l8t1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzxa8l8t1.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpzxa8l8t1.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpzxa8l8t1.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(5,\
    \ 4, 3))\nprint(triangle_area(3, 4, -1))\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: "2.9\n6.0\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 3))\nprint(triangle_area(3, 4, 10))\nprint(triangle_area(3, 4, -1))\nprint(triangle_area(7,\
    \ 4, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(5,\
    \ 4, 3))\nprint(triangle_area(10, 10, 10))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp3zrefwbi.py\", line 48\n    print(triangle_area(3,\n \
    \                      ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(5,\
    \ 4, 3))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(10, 10, 10))\nprint(triangle_area(3,\
    \ 4, -5))\nprint(triangle_area(1, 1, 3))\nprint(triangle_area(2, 3, 8))\nprint(triangle_area(7,\
    \ 4, 3))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "2.9\n6.0\n6.0\n43.3\n-1\n-1\n-1\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(5, 4, 3))\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqu3rpv55.py\", line\
    \ 16, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpqu3rpv55.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgs0kgmkk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgs0kgmkk.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpgs0kgmkk.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpgs0kgmkk.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgenftf3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwgenftf3.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwgenftf3.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpwgenftf3.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtfbsn10.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphtfbsn10.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmphtfbsn10.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmphtfbsn10.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(2, 2, 3))\nprint(triangle_area(2,\
    \ 2, 4))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3, 4, 6))\nprint(triangle_area(3,\
    \ 4, 7))\nprint(triangle_area(3, 4, 8))\nprint(triangle_area(3, 4, 9))\nprint(triangle_area(3,\
    \ 4, 10))\nprint(triangle_area(3, 4, 11))\nprint(triangle_area(3, 4, 12))\nprint(triangle_area(3,\
    \ 4, 13))\nprint(triangle_area(3, 4, 14))\nprint(triangle_area(3, 4, 15))\nprint(triangle_area(3,\
    \ 4, 16))\nprint(triangle_area(3, 4, 17))\nprint(triangle_area(3, 4, 18))\nprint(triangle_area(3,\
    \ 4, 19))\nprint(triangle_area(3, 4, 20))\nprint(triangle_area(3, 4, 21))\nprint(triangle_area(3,\
    \ 4, 22))\nprint(triangle_area(3, 4, 23))\nprint(triangle_area(3, 4, 24))\nprint(triangle_area(3,\
    \ 4, 25))\nprint(triangle_area(3, 4, 26))\nprint(triangle_area(3, 4, 27))\nprint(triangle_area(3,\
    \ 4, 28))\nprint(triangle_area(3, 4, 29))\nprint(triangle_area(3, 4, 30))\nprint(triangle\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxl5gp4xb.py\", line 48\n    print(triangle\n         ^\n\
    SyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(3, 4, 10))\nprint(triangle_area(5,\
    \ 5, 5))\nprint(triangle_area(5, 4, 3))\nprint(triangle_area(5, 4, 2))\nprint(triangle_area(5,\
    \ 4, 1))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdc11akr.py\", line\
    \ 17, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmppdc11akr.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(5, 4, 3))\nprint(triangle_area(10,\
    \ 20, 30))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(1, 1, 2))\nprint(triangle_area(1,\
    \ 2, 2))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(1, 2, 4))\nprint(triangle_area(1,\
    \ 2, 5))\nprint(triangle_area(1, 2, 6))\nprint(triangle_area(1, 2, 7))\nprint(triangle_area(1,\
    \ 2, 8))\nprint(triangle_area(1, 2, 9))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1,\
    \ 2, 11))\nprint(triangle_area(1, 2, 12))\nprint(triangle_area(1, 2, 13))\nprint(triangle_area(1,\
    \ 2, 14))\nprint(triangle_area(1, 2, 15))\nprint(triangle_area(1, 2, 16))\nprint(triangle_area(1,\
    \ 2, 17))\nprint(triangle_area(1, 2, 18))\nprint(triangle_area(1, 2, 19))\nprint(triangle_area(1,\
    \ 2, 20))\nprint(triangle_area(1, 2, 21))\nprint(triangle_area(1, 2, 22))\nprint(triangle_area(1,\
    \ 2, 23))\nprint(triangle_area(1, 2, 24))\nprint(triangle_area(1, 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp_ydlfusp.py\", line 48\n    print(triangle_area(1, 2\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ikxvyqn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5ikxvyqn.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp5ikxvyqn.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp5ikxvyqn.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8,\
    \ 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2,\
    \ 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6,\
    \ 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2,\
    \ 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvgzw9ve.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwvgzw9ve.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwvgzw9ve.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpwvgzw9ve.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(3, 4, 10))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "6.0\n-1\n0.43\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7wb6mpiq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7wb6mpiq.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7wb6mpiq.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp7wb6mpiq.py\"\
    , line 12, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n    return round(area, 2) if area > 0 else -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvuav52xz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvuav52xz.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpvuav52xz.py\", line\
    \ 17, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpvuav52xz.py\"\
    , line 12, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, -5))\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm04yjmsg.py\", line\
    \ 16, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpm04yjmsg.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n    if area > 0:\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(1,\
    \ 2, 4))\nprint(triangle_area(1, 2, -4))\nprint(triangle_area(1, 2, 0))\nprint(triangle_area(1,\
    \ 2, -1))\n\nprint(\"\\n\")\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6dub__57.py\", line\
    \ 19, in <module>\n    print(triangle_area(1, 2, 4))\n  File \"/tmp/tmp6dub__57.py\"\
    , line 12, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(3, 4, -5))\nprint(triangle_area(0, 2, 3))\nprint(triangle_area(3,\
    \ 4, 'a'))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n-1\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj8ycw3f5.py\", line\
    \ 22, in <module>\n    print(triangle_area(3, 4, 'a'))\n  File \"/tmp/tmpj8ycw3f5.py\"\
    , line 10, in triangle_area\n    if a + b > c and a + c > b and b + c > a:\nTypeError:\
    \ '>' not supported between instances of 'int' and 'str'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkldedgf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxkldedgf.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxkldedgf.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpxkldedgf.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(3, 4, 10))\nprint(triangle_area(3,\
    \ 4, -1))\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n   \
    \ assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n  \
    \  assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n  \
    \  assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgl8irszj.py\", line\
    \ 16, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpgl8irszj.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    # write your code here\n    if a + b > c and a + c > b and b + c > a:\n\
    \        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))\
    \ ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 3))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(1,\
    \ 2, 1))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(1,\
    \ 2, 2))\nprint(triangle_area(1, 2, 1))\nprint(triangle_area(1, 1, 1))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_isszsw.py\", line\
    \ 17, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpd_isszsw.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(7,\
    \ 2, 2))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "0.97\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfti9twbm.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfti9twbm.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfti9twbm.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpfti9twbm.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1y4rgyct.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1y4rgyct.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp1y4rgyct.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp1y4rgyct.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprgrurwkq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprgrurwkq.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmprgrurwkq.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmprgrurwkq.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkhizflav.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkhizflav.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpkhizflav.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpkhizflav.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqde6n35w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqde6n35w.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpqde6n35w.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpqde6n35w.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(5, 4, 3))\nprint(triangle_area(4,\
    \ 3, 5))\nprint(triangle_area(3, 5, 4))\nprint(triangle_area(10, 10, 10))\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n0.43\n-1\n6.0\n6.0\n6.0\n43.3\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(2, 2, 8))\nprint(triangle_area(3, 4, -1))\nprint(triangle_area(0,\
    \ 0, 0))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(2, 2, 8))\nprint(triangle_area(3, 4, -1))\nprint(triangle_area(0,\
    \ 0, 0))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(2, 2, 8))\nprint(triangle_area(3, 4, -1))\nprint(triangle_area(0,\
    \ 0, 0))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(2, 2, 8))\nprint(triangle_area(3, 4, -1))\nprint(triangle_area(0,\
    \ 0, 0))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(2, 2, 8))\nprint(triangle_area(3, 4, -1))\nprint(triangle_area(0,\
    \ 0, 0))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4,\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqb88o34x.py\", line 46\n    print(triangle_area(3, 4,\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(2, 2, 3))\nprint(triangle_area(5,\
    \ 4, 3))\nprint(triangle_area(5, 4, 2))\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n0.43\n1.98\n6.0\n3.8\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(7,\
    \ 2, 2))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(5,\
    \ 4, 3))\nprint(triangle_area(2, 4, 6))\nprint(triangle_area(0, 0, 0))\nprint(triangle_area(3,\
    \ 4, -5))\nprint(triangle_area(1, 1, 3))\nprint(triangle_area(2, 4, 2))\nprint(triangle_area(5,\
    \ 4, 6))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "0.97\n-1\n-1\n2.9\n6.0\n-1\n-1\n-1\n-1\n-1\n9.92\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(2,\
    \ 4, 2))\nprint(triangle_area(7, 2, 2))\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: "2.9\n-1\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(3, 4, -5))\nprint(triangle_area(0, 2, 3))\nprint(triangle_area(3,\
    \ 4, 'a'))\nprint(triangle_area(3, 4, '5'))\nprint(triangle_area(3, 4, 5.0))\n\
    print(triangle_area(3, 4, 5.5))\nprint(triangle_area(3, 4, 5.6))\nprint(triangle_area(3,\
    \ 4, 5.7))\nprint(triangle_area(3, 4, 5.8))\nprint(triangle_area(3, 4, 5.9))\n\
    print(triangle_area(3, 4, 6))\nprint(triangle_area(3, 4, 7))\nprint(triangle_area(3,\
    \ 4, 8))\nprint(triangle_area(3, 4, 9))\nprint(triangle_area(3, 4, 10))\nprint(triangle_area(3,\
    \ 4, 11))\nprint(triangle_area(3, 4, 12))\nprint(triangle_area(3, 4, 13))\nprint(triangle_area(3,\
    \ 4, 14))\nprint(triangle_area(3, 4, 15))\nprint(triangle_area(3, 4, 16))\nprint(triangle_area(3,\
    \ 4, 17))\nprint(triangle_area(3, 4, 18))\nprint(triangle_area(3, 4, 19))\nprint(triangle_area(3,\
    \ 4, 20))\nprint(triangle_area(3, 4, 21))\nprint(triangle_area(3, 4, 22))\nprint(triangle_area(3,\
    \ 4, 23))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp213dtwkn.py\", line\
    \ 17, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmp213dtwkn.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(3, 4, 10))\nprint(triangle_area(5,\
    \ 4, 3))\nprint(triangle_area(10, 10, 10))\nprint(triangle_area(5, 4, 8))\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplb76wft2.py\", line\
    \ 16, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmplb76wft2.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(7,\
    \ 2, 2))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(2, 2, 2))\nprint(triangle_area(1,\
    \ 3, 2))\nprint(triangle_area(2, 4, 6))\nprint(triangle_area(0, 0, 0))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(10, 11, 12))\nprint(triangle_area(5, 4, 2))\nprint(triangle_area(8,\
    \ 15, 17))\nprint(triangle_area(3, 4, 8))\nprint(triangle_area(7, 12, 8))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(9, 9, 9))\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(5,\
    \ 6, 7))\nprint(triangle_area(8, 9, 10))\nprint(triangle_area(11, 12, 13))\nprint(triangle_area(14,\
    \ 15, 16))\nprint(triangle_area(17, 18, 19))\nprint(triangle_area(20, 21, 22))\n\
    print(triangle_area(23, 24, 25))\nprint(triangle_area(26, 27, 28))\nprint(triangle_area(29,\
    \ 30, 31))\nprint(triangle_area(32, 33, 34))\nprint(triangle_area(35, 36, 37))\n\
    print(triangle_area(38, 39, 40))\nprint(triangle_area(41, 42, 43))\nprint(triangle_area(44,\
    \ 45, 46))\nprint(triangle_area(47, 48\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpx0vco8yd.py\", line 48\n    print(triangle_area(47, 48\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y2lqkim.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_y2lqkim.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_y2lqkim.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp_y2lqkim.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptymeri_l.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptymeri_l.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptymeri_l.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmptymeri_l.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47drb2sq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp47drb2sq.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp47drb2sq.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp47drb2sq.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a+b > c and a+c > b and b+c > a:\n        s = (a+b+c)/2\n       \
    \ area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwlty2mz9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwlty2mz9.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwlty2mz9.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpwlty2mz9.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48i0r40r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp48i0r40r.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp48i0r40r.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp48i0r40r.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 2, 4))\nprint(triangle_area(1, 2, 5))\nprint(triangle_area(1,\
    \ 2, 6))\nprint(triangle_area(1, 2, 7))\nprint(triangle_area(1, 2, 8))\nprint(triangle_area(1,\
    \ 2, 9))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 11))\nprint(triangle_area(1,\
    \ 2, 12))\nprint(triangle_area(1, 2, 13))\nprint(triangle_area(1, 2, 14))\nprint(triangle_area(1,\
    \ 2, 15))\nprint(triangle_area(1, 2, 16))\nprint(triangle_area(1, 2, 17))\nprint(triangle_area(1,\
    \ 2, 18))\nprint(triangle_area(1, 2, 19))\nprint(triangle_area(1, 2, 20))\nprint(triangle_area(1,\
    \ 2, 21))\nprint(triangle_area(1, 2, 22))\nprint(triangle_area(1, 2, 23))\nprint(triangle_area(1,\
    \ 2, 24))\nprint(triangle_area(1, 2, 25))\nprint(triangle_area(1, 2, 26))\nprint(triangle_area(1,\
    \ 2, 27))\nprint(triangle_area(1, 2, 28))\nprint(triangle_area(1, 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpd8l30qe3.py\", line 48\n    print(triangle_area(1, 2\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmj0nb5yj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmj0nb5yj.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmj0nb5yj.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpmj0nb5yj.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        p = (a + b\
    \ + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n  \
    \  assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 2, 4))\nprint(triangle_area(1, 2, 5))\nprint(triangle_area(1,\
    \ 2, 6))\nprint(triangle_area(1, 2, 7))\nprint(triangle_area(1, 2, 8))\nprint(triangle_area(1,\
    \ 2, 9))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 11))\nprint(triangle_area(1,\
    \ 2, 12))\nprint(triangle_area(1, 2, 13))\nprint(triangle_area(1, 2, 14))\nprint(triangle_area(1,\
    \ 2, 15))\nprint(triangle_area(1, 2, 16))\nprint(triangle_area(1, 2, 17))\nprint(triangle_area(1,\
    \ 2, 18))\nprint(triangle_area(1, 2, 19))\nprint(triangle_area(1, 2, 20))\nprint(triangle_area(1,\
    \ 2, 21))\nprint(triangle_area(1, 2, 22))\nprint(triangle_area(1, 2, 23))\nprint(triangle_area(1,\
    \ 2, 24))\nprint(triangle_area(1, 2, 25))\nprint(triangle_area(1, 2, 26))\nprint(triangle_area(1,\
    \ 2, 27))\nprint(triangle_area(1, 2, 28))\nprint(triangle_area(1, 2, 29))\nprint(triangle_area(1,\
    \ 2, 30))\nprint(triangle_area(1, 2, 31))\nprint(triangle_area(1, 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpxq8o_ccf.py\", line 48\n    print(triangle_area(1, 2\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sdl9bk3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5sdl9bk3.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp5sdl9bk3.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp5sdl9bk3.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n    return round(area, 2) if area > 0 else -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpun8qwv4n.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpun8qwv4n.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpun8qwv4n.py\", line\
    \ 17, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpun8qwv4n.py\"\
    , line 12, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 6))\nprint(triangle_area(3, 4, 7))\nprint(triangle_area(3, 4, 8))\nprint(triangle_area(3,\
    \ 4, 9))\nprint(triangle_area(3, 4, 10))\nprint(triangle_area(3, 4, 11))\nprint(triangle_area(3,\
    \ 4, 12))\nprint(triangle_area(3, 4, 13))\nprint(triangle_area(3, 4, 14))\nprint(triangle_area(3,\
    \ 4, 15))\nprint(triangle_area(3, 4, 16))\nprint(triangle_area(3, 4, 17))\nprint(triangle_area(3,\
    \ 4, 18))\nprint(triangle_area(3, 4, 19))\nprint(triangle_area(3, 4, 20))\nprint(triangle_area(3,\
    \ 4, 21))\nprint(triangle_area(3, 4, 22))\nprint(triangle_area(3, 4, 23))\nprint(triangle_area(3,\
    \ 4, 24))\nprint(triangle_area(3, 4, 25))\nprint(triangle_area(3, 4, 26))\nprint(triangle_area(3,\
    \ 4, 27))\nprint(triangle_area(3, 4, 28))\nprint(triangle_area(3, 4, 29))\nprint(triangle_area(3,\
    \ 4, 30))\nprint(triangle_area(3, 4, 31))\nprint(triangle_area(3, 4, 32))\nprint(triangle_area(3,\
    \ 4, 33))\nprint(triangle_area(3, 4, 34))\nprint(triangle_area(3, 4\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnfbi1wte.py\", line 48\n    print(triangle_area(3, 4\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 2, 4))\nprint(triangle_area(1, 2, 5))\nprint(triangle_area(1,\
    \ 2, 6))\nprint(triangle_area(1, 2, 7))\nprint(triangle_area(1, 2, 8))\nprint(triangle_area(1,\
    \ 2, 9))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 11))\nprint(triangle_area(1,\
    \ 2, 12))\nprint(triangle_area(1, 2, 13))\nprint(triangle_area(1, 2, 14))\nprint(triangle_area(1,\
    \ 2, 15))\nprint(triangle_area(1, 2, 16))\nprint(triangle_area(1, 2, 17))\nprint(triangle_area(1,\
    \ 2, 18))\nprint(triangle_area(1, 2, 19))\nprint(triangle_area(1, 2, 20))\nprint(triangle_area(1,\
    \ 2, 21))\nprint(triangle_area(1, 2, 22))\nprint(triangle_area(1, 2, 23))\nprint(triangle_area(1,\
    \ 2, 24))\nprint(triangle_area(1, 2, 25))\nprint(triangle_area(1, 2, 26))\nprint(triangle_area(1,\
    \ 2, 27))\nprint(triangle_area(1, 2, 28))\nprint(triangle_area(1, 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6g4ryar0.py\", line 48\n    print(triangle_area(1, 2\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbn1j0vqx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbn1j0vqx.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpbn1j0vqx.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpbn1j0vqx.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 2, 4))\nprint(triangle_area(1, 2, 5))\nprint(triangle_area(1,\
    \ 2, 6))\nprint(triangle_area(1, 2, 7))\nprint(triangle_area(1, 2, 8))\nprint(triangle_area(1,\
    \ 2, 9))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 11))\nprint(triangle_area(1,\
    \ 2, 12))\nprint(triangle_area(1, 2, 13))\nprint(triangle_area(1, 2, 14))\nprint(triangle_area(1,\
    \ 2, 15))\nprint(triangle_area(1, 2, 16))\nprint(triangle_area(1, 2, 17))\nprint(triangle_area(1,\
    \ 2, 18))\nprint(triangle_area(1, 2, 19))\nprint(triangle_area(1, 2, 20))\nprint(triangle_area(1,\
    \ 2, 21))\nprint(triangle_area(1, 2, 22))\nprint(triangle_area(1, 2, 23))\nprint(triangle_area(1,\
    \ 2, 24))\nprint(triangle_area(1, 2, 25))\nprint(triangle_area(1, 2, 26))\nprint(triangle_area(1,\
    \ 2, 27))\nprint(triangle_area(1, 2, 28))\nprint(triangle_area(1, 2, 29))\nprint(triangle_area(1,\
    \ 2, 30))\nprint(triangle_area(1, 2, 31))\nprint(triangle_area(1, 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2_ygzx0i.py\", line 48\n    print(triangle_area(1, 2\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6rcv6fy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk6rcv6fy.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpk6rcv6fy.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpk6rcv6fy.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 1, 1))\nprint(triangle_area(3, 4, -5))\nprint(triangle_area(0, 4, 5))\nprint(triangle_area(3,\
    \ 4, 's'))\nprint(triangle_area('a', 'b', 'c'))\nprint(triangle_area(1, 1, 3))\n\
    print(triangle_area(2, 4, 2))\nprint(triangle_area(5, 4, 3))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "6.0\n0.43\n-1\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5njsd0s.py\", line\
    \ 22, in <module>\n    print(triangle_area(3, 4, 's'))\n  File \"/tmp/tmpz5njsd0s.py\"\
    , line 10, in triangle_area\n    if a + b > c and a + c > b and b + c > a:\nTypeError:\
    \ '>' not supported between instances of 'int' and 'str'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyc94ytq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphyc94ytq.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmphyc94ytq.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmphyc94ytq.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadcprqsa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpadcprqsa.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpadcprqsa.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpadcprqsa.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxevoj68p.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxevoj68p.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxevoj68p.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpxevoj68p.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhz3egzy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqhz3egzy.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpqhz3egzy.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpqhz3egzy.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\nprint(triangle_area(2, 3, 4))\nprint(triangle_area(2,\
    \ 3, 10))\nprint(triangle_area(2, 3, -4))\nprint(triangle_area(2, 3, 0))\nprint(triangle_area(2,\
    \ 3, 1))\nprint(triangle_area(2, 3, 2))\nprint(triangle_area(2, 3, 3))\nprint(triangle_area(2,\
    \ 3, 4))\nprint(triangle_area(2, 3, 5))\nprint(triangle_area(2, 3, 6))\nprint(triangle_area(2,\
    \ 3, 7))\nprint(triangle_area(2, 3, 8))\nprint(triangle_area(2, 3, 9))\nprint(triangle_area(2,\
    \ 3, 10))\nprint(triangle_area(2, 3, 11))\nprint(triangle_area(2, 3, 12))\nprint(triangle_area(2,\
    \ 3, 13))\nprint(triangle_area(2, 3, 14))\nprint(triangle_area(2, 3, 15))\nprint(triangle_area(2,\
    \ 3, 16))\nprint(triangle_area(2, 3, 17))\nprint(triangle_area(2, 3, 18))\nprint(triangle_area(2,\
    \ 3, 19))\nprint(triangle_area(2, 3, 20))\nprint(triangle_area(2, 3, 21))\nprint(triangle_area(2,\
    \ 3, 22))\nprint(triangle_area(2, 3, 23))\nprint(triangle_area(2, 3, 24))\nprint(triangle_area(2,\
    \ 3, 25))\nprint(triangle_area(2, 3, 26))\nprint(triangle_area(2,\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsbdj5gmq.py\", line 48\n    print(triangle_area(2,\n \
    \                      ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw07hdzl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjw07hdzl.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpjw07hdzl.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpjw07hdzl.py\"\
    , line 12, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) /\
    \ 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 1, 1))\nprint(triangle_area(1, 2, 2))\nprint(triangle_area(1,\
    \ 2, 3))\nprint(triangle_area(1, 2, 4))\nprint(triangle_area(1, 2, 5))\nprint(triangle_area(1,\
    \ 2, 6))\nprint(triangle_area(1, 2, 7))\nprint(triangle_area(1, 2, 8))\nprint(triangle_area(1,\
    \ 2, 9))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(1, 2, 11))\nprint(triangle_area(1,\
    \ 2, 12))\nprint(triangle_area(1, 2, 13))\nprint(triangle_area(1, 2, 14))\nprint(triangle_area(1,\
    \ 2, 15))\nprint(triangle_area(1, 2, 16))\nprint(triangle_area(1, 2, 17))\nprint(triangle_area(1,\
    \ 2, 18))\nprint(triangle_area(1, 2, 19))\nprint(triangle_area(1, 2, 20))\nprint(triangle_area(1,\
    \ 2, 21))\nprint(triangle_area(1, 2, 22))\nprint(triangle_area(1, 2, 23))\nprint(triangle_area(1,\
    \ 2, 24))\nprint(triangle_area(1, 2, 25))\nprint(triangle_area(1, 2, 26))\nprint(triangle_area(1,\
    \ 2, 27))\nprint(triangle_area(1, 2, 28))\nprint(triangle_area(1, 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpr5_clj11.py\", line 47\n    print(triangle_area(1, 2\n\
    \                       ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bkdtvf9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3bkdtvf9.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp3bkdtvf9.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp3bkdtvf9.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n            \"\
    \"\"\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) /\
    \ 2\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnr_20w9w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnr_20w9w.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpnr_20w9w.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpnr_20w9w.py\"\
    , line 12, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
