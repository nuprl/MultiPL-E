name: HumanEval_63_fibfib
language: py
results:
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    a = 0\n    b = 0\n    c = 1\n    for i in range(3,\
    \ n+1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    return c\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  pass\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57z95vo6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp57z95vo6.py\", line 22,\
    \ in test_check\n    check(fibfib)\n  File \"/tmp/tmp57z95vo6.py\", line 13, in\
    \ check\n    assert candidate(2) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    a = 0\n    b = 0\n    c = 1\n    for i in range(3,\
    \ n+1):\n        a, b, c = b, c, a+b+c\n    return c\n\n\ndef check(candidate):\n\
    \    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5)\
    \ == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert\
    \ candidate(12) == 274\n    assert candidate(14) == 927\n\ndef test_check():\n\
    \    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    a = 0\n    b = 0\n    c = 1\n    for i in range(3,\
    \ n + 1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    return c\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    if n == 3:\n        return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12)\
    \ == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    if n == 3:\n        return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12)\
    \ == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  a, b, c = 0, 0, 1\n    for i in range(n):\n        a, b, c = b, c, a + b +\
    \ c\n    return a\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n \
    \   assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\ndef check(candidate):\n    assert\
    \ candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) ==\
    \ 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert\
    \ candidate(12) == 274\n    assert candidate(14) == 927\n\ndef test_check():\n\
    \    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return\
    \ 1\n    a = 0\n    b = 0\n    c = 1\n    for i in range(3, n+1):\n        d =\
    \ a + b + c\n        a = b\n        b = c\n        c = d\n    return c\n\n\ndef\
    \ check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    if n == 3:\n        return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12)\
    \ == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    a = 0\n    b = 0\n    c = 1\n    for i in range(3,\
    \ n+1):\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n\
    \    return c\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    if n == 3:\n        return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2)\
    \ == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert\
    \ candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12)\
    \ == 274\n    assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  pass\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wa1jhqy.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0wa1jhqy.py\", line 21,\
    \ in test_check\n    check(fibfib)\n  File \"/tmp/tmp0wa1jhqy.py\", line 12, in\
    \ check\n    assert candidate(2) == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    if n > 2:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert\
    \ candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) ==\
    \ 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert\
    \ candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    \ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1)\
    \ == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert\
    \ candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14)\
    \ == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n ==\
    \ 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\
    def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) ==\
    \ 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10)\
    \ == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n\
    def test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a\
    \ sequence similar to the Fibbonacci sequnece that's defined as follows:\n   \
    \ fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n                \"\"\"\n  \
    \  if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif\
    \ n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n   \
    \ assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8)\
    \ == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n   \
    \ assert candidate(14) == 927\n\ndef test_check():\n    check(fibfib)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
