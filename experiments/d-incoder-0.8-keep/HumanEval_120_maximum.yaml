name: HumanEval_120_maximum
language: d
prompt: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
  \ integer k, return a sorted list \n    of length k with the maximum k numbers in\
  \ arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output:\
  \ [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n    \
  \    Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1,\
  \ -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the\
  \ array will be in the range of [1, 1000].\n        2. The elements in the array\
  \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \n\
  */\nlong[] maximum(long[] arr, long k) \n"
tests: "unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
  \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
  \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
  \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
  \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
  \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L,\
  \ 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L,\
  \ 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
  \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
  \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
  \ main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
