name: HumanEval_144_simplify
language: d
prompt: "import std.math;\n/*\nYour task is to implement a function that will simplify\
  \ the expression\n    x * n. The function returns True if x * n evaluates to a whole\
  \ number and False\n    otherwise. Both x and n, are string representation of a\
  \ fraction, and have the following format,\n    <numerator>/<denominator> where\
  \ both numerator and denominator are positive whole numbers.\n\n    You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n\n  \
  \  simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n \
  \   simplify(\"7/10\", \"10/2\") = False\n    \n*/\nbool simplify(string x, string\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = simplify;\n\n    assert(candidate(\"1/5\"\
  , \"5/1\") == true);\n    assert(candidate(\"1/6\", \"2/1\") == false);\n    assert(candidate(\"\
  5/1\", \"3/1\") == true);\n    assert(candidate(\"7/10\", \"10/2\") == false);\n\
  \    assert(candidate(\"2/10\", \"50/10\") == true);\n    assert(candidate(\"7/2\"\
  , \"4/2\") == true);\n    assert(candidate(\"11/6\", \"6/1\") == true);\n    assert(candidate(\"\
  2/3\", \"5/2\") == false);\n    assert(candidate(\"5/2\", \"3/5\") == false);\n\
  \    assert(candidate(\"2/4\", \"8/4\") == true);\n    assert(candidate(\"2/4\"\
  , \"4/2\") == true);\n    assert(candidate(\"1/5\", \"5/1\") == true);\n    assert(candidate(\"\
  1/5\", \"1/5\") == false);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
