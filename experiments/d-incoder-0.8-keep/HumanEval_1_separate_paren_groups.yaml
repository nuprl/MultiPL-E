name: HumanEval_1_separate_paren_groups
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Input to this function is a\
  \ string containing multiple groups of nested parentheses. Your goal is to\n   \
  \ separate those group into separate strings and return the list of those.\n   \
  \ Separate groups are balanced (each open brace is properly closed) and not nested\
  \ within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('(\
  \ ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \n*/\nstring[] separate_paren_groups(string\
  \ paren_string) \n"
tests: "unittest\n{\n    alias candidate = separate_paren_groups;\n\n    assert(candidate(\"\
  (()()) ((())) () ((())()())\") == [\"(()())\", \"((()))\", \"()\", \"((())()())\"\
  ]);\n    assert(candidate(\"() (()) ((())) (((())))\") == [\"()\", \"(())\", \"\
  ((()))\", \"(((())))\"]);\n    assert(candidate(\"(()(())((())))\") == [\"(()(())((())))\"\
  ]);\n    assert(candidate(\"( ) (( )) (( )( ))\") == [\"()\", \"(())\", \"(()())\"\
  ]);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
