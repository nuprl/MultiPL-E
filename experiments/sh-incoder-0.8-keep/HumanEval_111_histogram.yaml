name: HumanEval_111_histogram
language: sh
prompt: "#!/bin/bash\n# Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n# of the letter with the most repetition and containing the\
  \ corresponding count.\n# If several letters have the same occurrence, return all\
  \ of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b\
  \ b b b a') == {'b': 4}\n# histogram('') == {}\n#\n# $1 is a string\nhistogram()\
  \ {\n"
tests: "}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
  ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\\
  ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
  \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
  \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
  }\n\nrun_test"
completions: ["  local items=\"$1\"\n  local histogram=\"{}\"\n  local letter\n  local\
    \ count\n  local counts\n  for letter in $items; do\n    count=0\n    counts=\"\
    \"\n    for c in $items; do\n      [[ $c = \"$letter\" ]] && { count=$((count\
    \ + 1)); counts=\"$counts $((count+1))\"; }\n    done\n    histogram[$letter]=\"\
    $counts\"\n  done\n  echo \"$histogram\"", "  local lower\n  local char\n  local\
    \ count\n  lower=$1\n  lower=${lower//[^[:alpha:]]/}\n  count=$lower\n  count=1\n\
    \  while [[ $lower ]]; do\n    lower=${lower//[^[:alpha:]]/}\n    count=$(( count\
    \ + 1 ))\n  done\n  local result\n  result=()\n  local i\n  for (( i = 0; i <\
    \ ${#lower}; i++ )); do\n    char=${lower:$i:1}\n    result+=(\"${char}\")\n \
    \ done\n  printf '{\"%s\": %d}\\n' \"${result[*]}\" ${count}", "  local item=$1\n\
    \  local count=0\n  local word=\n  IFS=$'\\t' read -ra words <<< \"$item\"\n \
    \ for word in \"${words[@]}\"; do\n    ((count++))\n  done\n  echo \"${words[0]}=${count}\"",
  "  declare -A histo\n  for x in $1 \n  do\n    if [ -z \"$histo[$x]\" ] ; then\n\
    \      histo[$x]=1\n    else\n      histo[$x]=$((histo[$x]+1))\n    fi\n  done\n\
    \  sort -k 2 -n | tail -n 1", "  local IFS=' '\n  local -n array=(\"$@\")\n  local\
    \ counts\n  local -A freq\n\n  local char\n  local len\n\n  local max\n\n  local\
    \ maxIndex\n  local maxCount\n  local index\n  local count\n\n  freq=(\n    $(for\
    \ char in \"${array[@]}\"; do [[ \"$char\" =~ ^([a-zA-Z]*) ]] || return 1; \\\n\
    \      printf '%s\\n' \"${!char}\" | wc -l || return 1; done)\n  )\n  for ((index=0;index<${#freq[@]};index++));\
    \ do\n    ((counts[${freq[index]}]++))\n  done\n  max=${#freq[@]}\n  maxIndex=0\n\
    \  for ((index=0;index<${#freq[@]};index++)); do\n    count=${freq[index]}\n \
    \   if [[ ${counts[$index]} -gt ${max} ]]; then\n      max=count\n      maxIndex=$index\n\
    \    fi\n  done\n\n  maxCount=${freq[$maxIndex]}\n  maxFreq=${freq[$maxIndex]}\n\
    \n  freq=(\n    $(for char in \"${array[@]}\"; do [[ \"$char\" =~ ^([a-zA-Z]*)\
    \ ]] || return 1; \\\n      printf '%s\\n' \"${!char}\" | awk -F= '{print $2}';\
    \ done)\n  )\n  for ((index=0;index<${#freq[@]};index++)); do\n    ((count=${freq[index]}));\
    \ if ((count < maxFreq)); then\n      maxFreq=${count}\n      maxIndex=$index\n\
    \    fi\n  done\n\n  maxFreq=${freq[$maxIndex]}\n  maxIndex=${freq[$maxIndex]}\n\
    \n  freq=(\n    $(for char in \"${array[@]}\"; do [[ \"$char\" =~ ^([a-zA-Z]*)\
    \ ]] || return 1; \\\n      printf '%s\\n' \"${!char}\" | awk -F= '{print $1}';\
    \ done)\n  )\n  for ((index=0;index<${#freq[@]};index++)); do\n    ((counts[${freq[index]}]++))\n\
    \  done\n  max=${#freq[@]}\n  maxIndex=0\n  for ((index=0;index<${#freq[@]};index++));\
    \ do\n    count=${freq[index]}\n    if [[ ${counts[$index]} -gt ${max} ]]; then\n\
    \      max=count\n      maxIndex=$index\n    fi\n", "    local line\n    local\
    \ words\n    local letter\n    local count\n    local max\n    local hist\n\n\
    \    hist=()\n    words=($1)\n    for word in ${words[@]}; do\n        local count=0\n\
    \        for letter in ${word}; do\n            ((count+=1))\n        done\n \
    \       hist+=(\"${letter}=${count}\")\n    done\n    max=${#hist[@]}\n    for\
    \ (( i=0; i<max; i++ )); do\n        echo ${hist[i]}\n    done", "  local word\n\
    \n  local dict\n  local tmp\n  local count\n  local max\n  local letter\n  local\
    \ counts\n\n  local word\n  local letters\n\n  local word\n  local tmp\n  local\
    \ letter\n  local count\n  local max\n  local letters\n\n  local word\n  local\
    \ tmp\n  local letter\n  local count\n  local max\n  local letters\n\n  local\
    \ word\n  local tmp\n  local letter\n  local count\n  local max\n  local letters\n\
    \n  local word\n  local tmp\n  local letter\n  local count\n  local max\n  local\
    \ letters\n\n  if [[ -z \"$1\" ]]; then\n    return 1\n  fi\n  words=(\"$1\")\n\
    \  word=${words[0]}\n  tmp=${word}\n  max=0\n  count=0\n  counts=()\n\n  while\
    \ [[ \"${tmp}\" != \"\" ]]; do\n    count=$((count + 1))\n    tmp=${word}\n  \
    \  letters=()\n    for letter in ${word}; do\n      letters[${#letters[@]}]=${letter}\n\
    \    done\n    tmp=${word}\n    for letter in ${words[@]}; do\n      tmp=${word}\n\
    \      max=$(( ${#letters[@]} > ${max} ? ${#letters[@]} : ${max} ))\n      tmp=${word}\n\
    \    done\n    counts[${#counts[@]}]=${count}\n    word=${words[${#words[@]} +\
    \ 1]}\n  done\n  echo ${counts[@]}", "    local letters\n    letters=$1\n    local\
    \ histo\n    histo=()\n    local count\n    count=0\n    while read -r letter;\
    \ do\n        ((count+=1))\n    done < <(sort -k 1 <<<\"$letters\" | uniq -c |\
    \ sort -nr | head -n 1)\n\n    while read -r letter; do\n        ((histo[$letter]++))\n\
    \    done < <(sort -k 1 <<<\"$letters\" | uniq -c | sort -nr | head -n 1 | awk\
    \ '{print $1}')\n\n    local return\n    return=()\n    for key in ${!histo[*]};\
    \ do\n        return+=( \"${key}\" ${histo[$key]} )\n    done\n    export histo\n\
    \    export count\n    export return", "  local str=$1\n  local dict key\n  IFS='\
    \ ' read -r -d '' -a array <<< \"$str\"\n  key=${array[0]}\n  (( array[${#array[@]}\
    \ - 1] )) && key+=\"${array[0]}\"\n  dict=${array[@]:1}\n  echo \"$key\"\n  while\
    \ IFS= read -r -d '' key; do\n    count=${#dict[@]}\n    [ $count -gt 0 ] &&\n\
    \      (( dict[$key] += 1 )) ||\n      (( dict[$key] = 1 )) ||\n      (( dict[$key]\
    \ += 1 ))\n  done <<< \"${!dict[@]}\"", "    local tmp=${1:-}\n    local count=0\n\
    \    local result={}\n    # Loop over all chars in string\n    for (( i = 0; i\
    \ < ${#tmp}; i++ )); do\n        # Split the string on space and take the first\
    \ element only\n        local letter=${tmp:$i:1}\n        # Count occurences of\
    \ this letter\n        (( count++ ))\n        # Increment the count if present\n\
    \        if [[ -n \"${result[$letter]}\" ]]; then\n            result[$letter]=$((result[$letter]\
    \ + 1))\n        else\n            result[$letter]=1\n        fi\n    done\n \
    \   # Return the dictionary as a new dictionary\n    echo \"${result[@]}\"", " \
    \  local letters\n   letters=$(echo $1 | tr ' ' '\\n')\n   local counts\n   counts=()\n\
    \   for letter in $letters\n   do\n       if [[ ! -z $counts[$letter] ]]\n   \
    \    then\n           counts[$letter]+=1\n       else\n           counts[$letter]=1\n\
    \       fi\n   done\n   echo \"${letters[*]} ${counts[*]}\"", "  local IFS= read\
    \ -r -a array <<< \"$1\"\n  local counts # counts is an associative array (hash\
    \ table)\n  local maxlen # maxlen is the maximum key length\n  local letter #\
    \ letter is variable that stores the current key\n  local maxcount # maxcount\
    \ is used to store the highest count\n  local i # i is index in the array\n  local\
    \ j # j is index in the counts hash table\n  local k # k is index in the counts\
    \ hash table\n\n  counts=() # create an empty array to store counts\n  maxlen=0\
    \  # create an empty variable to store max key length\n\n  # initialize counts\
    \ hash table with empty pairs\n  for i in \"${!array[@]}\"; do\n    (( counts[array[i]]++))\n\
    \  done\n\n  # loop through counts hash table, find the max and max key\n  # update\
    \ the max key length if it's greater than maxlen\n  for i in \"${!counts[@]}\"\
    ; do\n    (( counts[$i] )) && { maxcount=\"$i\"; maxlen=\"${#array[@]}\"; }\n\
    \  done\n\n  # loop through the array and count letters greater than maxlen\n\
    \  # remember to not increment letter\n  for i in \"${!array[@]}\"; do\n    ((\
    \ counts[$i] )) && { letter=\"${array[$i]}\"; if (( letter > maxlen )) && { maxcount=\"\
    $i\"; maxlen=\"${#array[@]}\"; letter=$letter }; else { letter=$letter }; }\n\
    \  done\n\n  # return the max key and the count\n  printf '%s\\n' \"${maxcount}\"",
  "  # Trim whitespace, sort the letters and count the letters\n  local count=\"${1//\
    \ }\"\n  local sorted_count=\"$(sort <<< \"${count}\" | uniq -c)\"\n  local sorted_letters=\"\
    $(sort <<< \"${sorted_count}\" | cut -d \" \" -f 1)\"\n\n  # Convert the letters\
    \ back to their original form, storing the results in an array\n  local histo=\"\
    $(\n    IFS=$'\\n'\n    for histo in \"${sorted_letters[@]}\"; do\n      echo\
    \ \"${histo}\"\n    done <<< \"${sorted_count[@]}\"\n  )\"\n\n  # Remove non-unique\
    \ elements and return the result\n  echo \"${histo[@]}\"", "  local counts=()\n\
    \  local lower\n  local max=0\n  local letter\n  local count\n  for lower in ${1//\
    \ }; do\n    count=${#counts[@]}\n    if (( ${#counts[@]} < 0 )); then\n     \
    \ counts[${#counts[@]}]=$lower\n    elif (( ${#counts[@]} > 0 )); then\n     \
    \ (( counts[${#counts[@]}]++ ))\n    else\n      counts[${#counts[@]}]=1\n   \
    \ fi\n    if (( ( ${#counts[@]} > max )); then\n      max=${#counts[@]}\n    \
    \  letter=${lower}\n    fi\n  done\n  echo ${counts[@]}", "  local -n histo=${1}\n\
    \  histo=(${histo//[[:space:]]/})\n  local count\n  for ((i=0; i < \"${#histo[@]}\"\
    ; ++i)); do\n    [[ -z \"${histo[i]}\" ]] && break\n    (( count[${histo[i]}]++\
    \ ))\n  done\n  echo \"${!count[@]}\"", "  echo \"$1\" | sort -u | awk '{ count[$1]++;\
    \ maxcount = maxcount>count[$1] ? maxcount : count[$1] }\n          END { for\
    \ (letter in count) print letter, count[letter], maxcount }'", "    local L=(${1//[[:space:]]})\n\
    \    local COUNT=()\n\n    for i in \"${!L[@]}\"; do\n        COUNT[$i]=\"${COUNT[$i]}\
    \ ${L[i]}\"\n    done\n\n    for i in \"${!COUNT[@]}\"; do\n        local COUNT=$i\n\
    \        local L=(${COUNT//[[:space:]]})\n\n        if [[ ${COUNT} == 0 ]]; then\n\
    \            unset COUNT\n            unset L\n        fi\n    done\n\n    if\
    \ [[ ${#COUNT[@]} -eq 0 ]]; then\n        unset COUNT\n        unset L\n    fi\n\
    \    sort -u ${COUNT[@]}", "    local string=\"$1\"\n    local counts=()\n\n \
    \   string=\"$( echo \"$string\" | tr '[:upper:]' '[:lower:]' )\"\n\n    for letter\
    \ in \"${string}\" ; do\n        counts=( \"${counts[@]}\" \"$letter\" )\n   \
    \ done\n\n    local sortedCount\n    local count\n    for count in \"${counts[@]}\"\
    \ ; do\n        sortedCount=$(( sortedCount + count ))\n    done\n\n    local\
    \ sortedLetter\n    local letter\n    for sortedCount in \"${counts[@]}\" ; do\n\
    \        if (( sortedCount > 0 )); then\n            break\n        else\n   \
    \         sortedLetter=\"${counts[@]}\"\n        fi\n    done\n\n    local output\n\
    \    for count in \"${counts[@]}\" ; do\n        if [ \"${count}\" -eq \"${sortedCount}\"\
    \ ]; then\n            letter=\"${sortedLetter}\"\n            output=\"$(\n \
    \           echo \"${output}\" \"$letter\" \"$count\"\n        )\"\n        fi\n\
    \    done\n\n    eval \"$output\"", "  local IFS=' '\n  local histo=\"$(echo \"\
    $1\" | tr ' ' '\\n' | sort | uniq -c | sort -n | tail -n 1)\"\n  local histo2=\"\
    $(echo \"$histo\" | awk '{print $1}')\"\n  local histo3=\"$(echo \"$histo\" |\
    \ awk '{print $2}')\"\n  local histo4=\"$(echo \"$histo\" | awk '{print $3}')\"\
    \n  local histo5=\"$(echo \"$histo\" | awk '{print $4}')\"\n  local histo6=\"\
    $(echo \"$histo\" | awk '{print $5}')\"\n  local histo7=\"$(echo \"$histo\" |\
    \ awk '{print $6}')\"\n  local histo8=\"$(echo \"$histo\" | awk '{print $7}')\"\
    \n  local histo9=\"$(echo \"$histo\" | awk '{print $8}')\"\n  local histo10=\"\
    $(echo \"$histo\" | awk '{print $9}')\"\n  local histo11=\"$(echo \"$histo\" |\
    \ awk '{print $10}')\"\n  local histo12=\"$(echo \"$histo\" | awk '{print $11}')\"\
    \n  local histo13=\"$(echo \"$histo\" | awk '{print $12}')\"\n  local histo14=\"\
    $(echo \"$histo\" | awk '{print $13}')\"\n  local histo15=\"$(echo \"$histo\"\
    \ | awk '{print $14}')\"\n  local histo16=\"$(echo \"$histo\" | awk '{print $15}')\"\
    \n  local histo17=\"$(echo \"$histo\" | awk '{print $16}')\"\n  local histo18=\"\
    $(echo \"$histo\" | awk '{print $17}')\"\n  local histo19=\"$(echo \"$histo\"\
    \ | awk '{print $18}')\"\n  local histo20=\"$(echo \"$histo\" | awk '{print $19}')\"\
    \n  local histo21=\"$(echo \"$histo\" | awk '{print $20}')\"\n  local histo22=\"\
    $(echo \"$histo\" | awk '{print $21}')\"\n  local histo23=\"$(echo \"$histo\"\
    \ | awk '{print $22}')\"\n  local histo24=\"$(echo \"$histo\" | awk '{print $23}')\"\
    \n  local histo25=\"$(echo \"$histo\" | awk '{print $24}')\"\n  local histo26=\"\
    $(echo \"$histo\" | awk '{print $25}')\"\n  local histo27=\"$(echo \"$histo\"\
    \ | awk '{print $26}')\"\n  local histo28=\"$(echo \"", "  local i result letter\n\
    \  declare -A count\n  for ((i=1; i<=$1; i++)); do\n    result=( $i  ) # store\
    \ the current result of the for loop in a variable\n    for letter in ${result[@]};\
    \ do\n      ((count[$letter]+=1))\n    done\n  done\n  echo \"$result\""]
stop_tokens:
- "\n}"
