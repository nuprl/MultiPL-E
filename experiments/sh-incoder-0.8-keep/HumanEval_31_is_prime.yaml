name: HumanEval_31_is_prime
language: sh
prompt: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
  # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n\
  # >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n#\
  \ False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n"
tests: "}\n\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n\
  \    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"13441\") = \"true\"\
  \ ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\"\
  \ ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\"\
  \ ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"\
  true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate \"77\"\
  ) = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\nrun_test"
completions: ["  if [ $# -eq 0 ] ; then\n    return 1\n  fi\n  local i\n  local prime\n\
    \  local limit\n  local found\n  local count\n\n  # prime <= sqrt($1)\n  limit=$(echo\
    \ \"$1 >> 1\" | bc)\n  found=0\n  count=0\n  while [ $found -eq 0 ]; do\n    prime=$((\
    \ $1 + $(echo \"(($1 % $2) >> 1) - 1\" | bc) ))\n    if [ $prime -eq 0 ]; then\n\
    \      found=1\n    else\n      if [ $count -ge $limit ]; then\n        return\
    \ 0\n      fi\n      prime_test=$(( $prime % $2 ))\n      if [ $prime_test -eq\
    \ 0 ]; then\n        found=1\n      fi\n    fi\n    ((count++))\n  done\n  return\
    \ 1", "  if [ \"$1\" -eq \"$1\" ]\n  then\n    echo \"False\"\n  else\n    primes=(\
    \ $(echo \"$1\" | awk '{print sqrt($1); exit 1}') )\n    for p in \"${primes[@]}\"\
    ; do\n      if [ \"$p\" -gt \"$1\" ]; then\n        break\n      fi\n    done\n\
    \    if [ \"$p\" -eq \"$1\" ]; then\n      echo \"True\"\n    else\n      echo\
    \ \"False\"\n    fi\n  fi", "    local n=$1 p=$2\n    if [ $n -lt 2 -a $n -lt\
    \ $((n+2)) ]\n    then\n        return 0\n    fi\n    for n in $(seq 2 $((n-1))\
    \ ); do\n        if [ $(echo \"$p*$n >=$p\" | bc -l) -eq 0 ]\n        then\n \
    \           return 0\n        fi\n    done\n    return 1", "    local n=$1\n \
    \   # make sure n is positive\n    if [ $n -lt 1 ]; then\n        echo \"Usage:\
    \ is_prime <integer>\"\n        exit 1\n    fi\n    # make sure n is a natural\
    \ number\n    if [ $n -gt 3 ]; then\n        echo \"Usage: is_prime <integer>\"\
    \n        exit 1\n    fi\n    local d=$(( (n-1) / 2 ))\n    while [ $d -le $n\
    \ ]; do\n        [ $((n % $d)) -eq 0 ] && return 0;\n        d=$(( d + 1 ))\n\
    \    done\n    return 1", '  [ $1 -gt 0 ] 2>/dev/null && echo true || echo false',
  "    local i\n    for i in `seq 1 $1`; do\n        if (( $(($1 % $i)) > 0 )); then\n\
    \            return 1\n        fi\n    done\n    return 0", "\t[ $(echo \"$1 |\
    \ bc\" |\n\t\tawk 'BEGIN {\n\t\t\tfor (i = 2; i <= sqrt($1); i++) {\n\t\t\t\t\
    if ($1 % i == 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 1;\n\
    \t\t}') -eq 0 ]", "  # Exit if $1 is not a number.\n  if [[ ! \"$1\" =~ ^[0-9]+$\
    \ ]]; then\n    echo \"Invalid input '$1'\"\n    return 1\n  fi\n  # Exit if $1\
    \ is less than 2.\n  if [[ ! $1 < 2 ]]; then\n    echo \"$1 is not a positive\
    \ integer\"\n    return 1\n  fi\n\n  # Check all even numbers up to $1 up to sqrt($1).\n\
    \  for ((i = 3; i <= $1; i+=2)); do\n    # Check if $i is a prime.\n    if [[\
    \ $(echo $((i%2)) == $0 ]]; then\n      echo \"$1 is not a prime\"\n      return\
    \ 1\n    fi\n  done\n  # No need to check for odd numbers, since all even numbers\
    \ > 2 are prime.\n  return 0", "  local i prime_or_no\n  prime_or_no=$1\n  if\
    \ [ -z \"$prime_or_no\" ]; then return 1; fi\n  \n  for (( i = 3; $i <= prime_or_no;\
    \ i = i + 2 )); do\n    (( prime_or_no == i )) || return 0;\n  done\n\n  return\
    \ 1;", "    local i isprime j\n    local N=$1\n\n    echo $N\n\n    for ((i =\
    \ 3; i * i <= N; i += 2)); do\n        if ((N % i) == 0) {\n            return\
    \ 1\n        fi\n    done\n    # i == N\n    return 0", "\t# Prime numbers contain\
    \ only even numbers and 1\n\tif [ $1 -lt 2 -o $1 -gt 7 ]; then\n\t\techo \"False\
    \ ($1)\"\n\t\treturn 1\n\tfi\n\tfor i in {2..7}\n\tdo\n\t\tif [ $(($1 % $i)) -eq\
    \ 0 ]; then\n\t\t\techo \"True ($i)\"\n\t\t\treturn 0\n\t\tfi\n\tdone\n\techo\
    \ \"False ($1)\"\n\treturn 1", "  if [ $# -ne 1 ]; then\n    echo \"Usage: is_prime\
    \ <integer>\"\n    exit 1\n  fi\n  isprime=false\n  is_int=0\n  # Test if $1 is\
    \ a valid integer\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    is_int=1\n  fi\n  # Test\
    \ if $1 is a prime\n  for i in $(seq 1 $1); do\n    if [ $(( $1 % $i )) == 0 ];\
    \ then\n      isprime=true\n      break\n    fi\n  done\n  echo \"$1 $is_int\"",
  "    test $1 -eq 1 && echo \"true\" || echo \"false\";\n    test $1 -eq 2 && echo\
    \ \"true\" || echo \"false\";\n    test $1 -eq 3 && echo \"true\" || echo \"false\"\
    ;\n    test $1 -eq 4 && echo \"true\" || echo \"false\";\n    test $1 -eq 5 &&\
    \ echo \"true\" || echo \"false\";\n    test $1 -eq 6 && echo \"true\" || echo\
    \ \"false\";\n    test $1 -eq 7 && echo \"true\" || echo \"false\";\n    test\
    \ $1 -eq 8 && echo \"true\" || echo \"false\";\n    test $1 -eq 9 && echo \"true\"\
    \ || echo \"false\";\n    test $1 -eq 10 && echo \"true\" || echo \"false\";\n\
    \    test $1 -eq 11 && echo \"true\" || echo \"false\";\n    test $1 -eq 12 &&\
    \ echo \"true\" || echo \"false\";\n    test $1 -eq 13 && echo \"true\" || echo\
    \ \"false\";\n    test $1 -eq 14 && echo \"true\" || echo \"false\";\n    test\
    \ $1 -eq 15 && echo \"true\" || echo \"false\";\n    test $1 -eq 16 && echo \"\
    true\" || echo \"false\";\n    test $1 -eq 17 && echo \"true\" || echo \"false\"\
    ;\n    test $1 -eq 18 && echo \"true\" || echo \"false\";\n    test $1 -eq 19\
    \ && echo \"true\" || echo \"false\";\n    test $1 -eq 20 && echo \"true\" ||\
    \ echo \"false\";\n    test $1 -eq 21 && echo \"true\" || echo \"false\";\n  \
    \  test $1 -eq 22 && echo \"true\" || echo \"false\";\n    test $1 -eq 23 && echo\
    \ \"true\" || echo \"false\";\n    test $1 -eq 24 && echo \"true\" || echo \"\
    false\";\n    test $1 -eq 25 && echo \"true\" || echo \"false\";\n    test $1\
    \ -eq 26 && echo \"true\" || echo \"false\";\n    test $1 -eq 27 && echo \"true\"\
    \ || echo \"false\";\n    test $1 -eq 28 && echo \"true\" || echo \"false\";\n\
    \    test $1 -eq 29 && echo \"true\" || echo \"false\";\n    test $1 -eq 30 &&\
    \ echo \"true\" || echo \"false\";\n    test $1 -eq 31 && echo \"true\" || echo\
    \ \"false\";\n    test $1 -eq 32 && echo \"true\" || echo \"false\";\n    test ",
  "\tlocal n i\n\n\tfor n in $(seq 2 $1)\n\tdo\n\t\ti=$n\n\t\twhile [ $((i % $n))\
    \ -eq 0 ]\n\t\tdo\n\t\t\ti=$((i + 1))\n\t\tdone\n\t\tif [ $i -le $n ]; then\n\t\
    \t\techo \"$n is a prime!\"\n\t\t\treturn 0\n\t\telse\n\t\t\techo \"$n is NOT\
    \ a prime!\"\n\t\t\treturn 1\n\t\tfi\n\tdone", "  local n=$1\n  shift\n  local\
    \ p\n  local i\n  for i in $(seq 2 $n-1); do\n    # Skip even numbers\n    if\
    \ [ $i -eq 0 ] ; then\n      continue\n    fi\n    # Skip even numbers\n    if\
    \ [ $((n % $i)) -eq 0 ] ; then\n      return 0\n    fi\n  done\n  # If we get\
    \ here, it's prime.\n  return 1", "    local -r x=\"$1\"\n    local -r y=\"$2\"\
    \n    local -r i\n    local -r j\n    local -r r\n    local -r n\n    local -r\
    \ k\n    local -r c\n    local -r p\n    local -r q\n\n    # Small primes\n  \
    \  if [ \"$y\" = \"0\" ] || [ \"$y\" = \"1\" ]; then\n        return 0\n    fi\n\
    \n    # Powers of two\n    if [ \"$y\" = \"2\" ]; then\n        return 0\n   \
    \ fi\n\n    # Odd numbers\n    if [ \"$y\" = \"3\" ]; then\n        return 0\n\
    \    fi\n\n    # Larger than a power of 2\n    if [ \"$y\" = \"4\" ]; then\n \
    \       return 0\n    fi\n\n    # No ones in list\n    if [ \"$y\" = \"5\" ];\
    \ then\n        return 0\n    fi\n\n    # Only odd numbers\n    if [ \"$y\" =\
    \ \"6\" ]; then\n        return 0\n    fi\n\n    # Only divisible by primes below\
    \ our number\n    if [ \"$y\" = \"7\" ]; then\n        return 0\n    fi\n\n  \
    \  # Larger than a power of 3\n    if [ \"$y\" = \"8\" ]; then\n        return\
    \ 0\n    fi\n\n    # No twos in list\n    if [ \"$y\" = \"9\" ]; then\n      \
    \  return 0\n    fi\n\n    # Larger than a power of 5\n    if [ \"$y\" = \"10\"\
    \ ]; then\n        return 0\n    fi\n\n    # Larger than a power of 6\n    if\
    \ [ \"$y\" = \"11\" ]; then\n        return 0\n    fi\n\n    # Larger than a power\
    \ of 7\n    if [ \"$y\" = \"12\" ]; then\n        return 0\n    fi\n\n    # Larger\
    \ than a power of 8\n    if [ \"$y\" = \"13\" ]; then\n        return 0\n    fi\n\
    \n    # Larger than a power of 9\n    if [ \"$y\" = \"14\" ]; then\n        return\
    \ 0\n    fi\n\n    # Larger than a power of 10\n    if [ \"$y\" = \"15\" ]; then\n\
    \        return 0\n    fi\n\n    # Larger than a power of 11\n    if [ \"$y\"\
    \ = \"16\" ]; then\n        return 0\n    fi\n\n    # Larger than a power of 12\n\
    \    if [ \"$y\" = \"17\" ]; then\n        return 0\n    fi\n\n    # Larger than\
    \ a power of 13\n    if [ \"$y\" = \"18\" ]; then\n        return 0\n    fi\n\n\
    \    # Larger than a power of 14\n    if [ \"$y\" = \"19\" ]; then\n        return\
    \ 0\n    fi\n\n    # Larger than a power of 15\n    if [ \"$y\" = \"20\" ]; then\n\
    \        return 0\n    fi\n\n    # Larger than a power of 16\n    if [ \"$y\"\
    \ = \"21\" ]; then\n        return 0\n    fi\n\n    # Larger than a power of 17\n\
    \    if [ \"$y\" = \"22\" ]; then\n        return 0\n    fi\n\n    # Larger than\
    \ a power of 18\n    if [ \"$y\" = \"23\" ]; then\n        return 0\n    fi\n\n\
    \    # Larger than a power of 19\n    if [ \"$y\" = \"", "    local i\n\n    for\
    \ (( i = 1; i <= $1; i++ )); do\n        [[ $(dig +short a +short $1 +noall +an)\
    \ =~ (^|#)([0-9])$i ]] || return 0\n    done\n\n    return 1", "    local n=$1\n\
    \    local d=$(( (n - 1) / 2 ))\n    for (( x = 2; x <= d; x++ )); do\n      \
    \  if [ $((n % x)) -eq 0 ]; then\n            return false\n        fi\n    done\n\
    \    return true", "  local number=$1\n\n  # The first few primes are easy, since\
    \ they divide evenly. Then\n  # we have the pentagonal numbers and those can be\
    \ evenly divided\n  # without remainder\n  if [[ $number -lt 2 ]] || [[ $number\
    \ -gt $((sqrt($number) + 1)) ]]; then\n    return 1\n  fi\n\n  # Don't do anything\
    \ for primes less than 2\n  if [[ $number -lt 2 ]]; then\n    return 0\n  fi\n\
    \n  # Don't even try for primes larger than the square root\n  if [[ $number -gt\
    \ $((sqrt($number) + 1)) ]]; then\n    return 1\n  fi\n\n  # Don't even try for\
    \ primes that are not divisible by 2 or 3\n  if [[ $number -gt 3 ]]; then\n  \
    \  return 1\n  fi\n\n  local i\n  local count\n  for (( i = 3; i <= $((sqrt($number))\
    \ + 2); i++ )); do\n    local j\n    local count\n    for (( j = 2; j <= i; j++\
    \ )); do\n      if [[ $(($number % $j)) -eq 0 ]]; then\n        return 0\n   \
    \   fi\n    done\n  done\n\n  return 1", "  local x n\n  x=$1\n  (( $# > 2 ))\
    \ && return $0\n  if (( x < 2 )); then\n    return $0\n  fi\n  if (( x <= (( $RANDOM\
    \ % $x )) )); then\n    return $0\n  fi\n  for x in 2 $(($x-1)); do\n    if ((\
    \ $(( x * $x )) -eq ( $n )); then\n      break\n    fi\n    if (( $n % $x ));\
    \ then\n      return $0\n    fi\n  done\n  return $0"]
stop_tokens:
- "\n}"
