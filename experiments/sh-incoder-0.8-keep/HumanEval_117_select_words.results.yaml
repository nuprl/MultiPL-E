language: sh
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local string=$1\n  local count=$2\n\n  #\
    \ return an empty list if the string does not contain enough words\n  if [ \"\
    ${#string}\" -lt \"$2\" ]\n  then\n    echo \"\"\n  else\n    # remove all white\
    \ spaces from the string\n    string=\"${string//[[:space:]]/}\"\n\n    # remove\
    \ all empty strings\n    string=\"${string//[[:space:]]/}\"\n\n    # split the\
    \ string into words and save it in a new variable\n    local words=( ${string//[^[:space:]]/\
    \ } )\n\n    # return an empty array if the number of words does not match\n \
    \   if [ ${#words[@]} -ne $count ]\n    then\n      echo \"\"\n    else\n    \
    \  # return the words\n      echo \"${words[@]}\"\n    fi\n  fi\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  declare -a arr=()\n  local line=$1\n  local\
    \ count=$2\n\n  while [[ \"$line\" =~ ^\\S* ]]; do\n    arr=( \"${arr[@]}\" \"\
    $line\" )\n    line=${line#* }\n  done\n\n  if [ \"$count\" -gt 0 ]; then\n  \
    \  for word in \"${arr[@]}\"; do\n      if [ \"$count\" -eq $(echo \"$word\" |\
    \ awk '{print length}') ]; then\n        echo \"$word\"\n        return\n    \
    \  fi\n    done\n  fi\n\n  echo \"$arr[@]\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=19 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660054819
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local str=\"$1\"\n  local count=\"$2\"\n\
    \  local words=\"\"\n\n  while true; do\n    local word=$(echo \"$str\" | grep\
    \ -o \"[a-zA-Z]\" | wc -w)\n    \n    if [[ \"$word\" -eq \"$count\" ]]; then\n\
    \      words=\"$words $word\"\n      str=\"$str\" | grep -E -o \"[a-zA-Z]$\" ||\
    \ break\n    else\n      str=\"$str\" | grep -E -o \"[a-zA-Z]$\" || break\n  \
    \  fi\n  done\n  echo \"$words\"\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local string=\"$1\"\n    local num=\"$2\"\
    \n    local words\n    local word\n\n    # Your code goes here\n    words=()\n\
    \    word=\"\"\n    for i in \"${string//[^a-zA-Z]}\" ; do\n        if [ \"$i\"\
    \ == \"$word\" ]; then\n            words=(\"${words[@]}\" \"${i}\")\n       \
    \ else\n            if [ \"$i\" == \"$word\" ] && [ \"$num\" -eq \"0\" ]; then\n\
    \                words=(\"${words[@]}\" \"${i}\")\n            else\n        \
    \        if [ \"$i\" == \"$word\" ] && [ \"$num\" -gt \"0\" ]; then\n        \
    \            words=(\"${words[@]}\" \"${i}\")\n                else\n        \
    \            if [ \"$i\" == \"$word\" ] && [ \"$num\" -lt \"0\" ]; then\n    \
    \                    words=(\"${words[@]}\" \"${i}\")\n                    else\n\
    \                        if [ \"$i\" == \"$word\" ]; then\n                  \
    \          words=(\"${words[@]}\" \"${i}\")\n                        fi\n    \
    \                fi\n                fi\n            fi\n        fi\n    done\n\
    \    echo ${words[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local string=\"$1\"\n    local n=\"$2\"\
    \n    local words=()\n    local count=1\n    while [ \"$n\" -eq \"$count\" ];\n\
    \    do \n        local parts=()\n        for part in $string; do\n          \
    \  if [[ \"$part\" =~ ([[:alpha:]] | [[:space:]])[$n]]\n            then\n   \
    \             parts+=\"$part\"\n            fi\n        done\n        words+=(${parts//[[:space:]]/})\n\
    \        count=$(( $count + 1 ))\n    done\n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpry__phbg.sh: line 25: syntax error in conditional expression

    /tmp/tmpry__phbg.sh: line 26: syntax error near `then''

    /tmp/tmpry__phbg.sh: line 26: `            then''

    '
  stdout: ''
  timestamp: 1660054814
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local STRING=${1}\n    local INDEX=${2}\n\
    \    local LENGTH=${#STRING}\n    local STRING2=${STRING:-}\n    local INDEX2=${INDEX:-}\n\
    \    local LENGTH2=${LENGTH:-}\n    local WORDLIST\n    if [[ -z \"${STRING2}\"\
    \ ]]; then\n        echo \"No string!\"\n        exit\n    fi\n    if [[ -z \"\
    ${INDEX2}\" ]]; then\n        echo \"No index integer!\"\n        exit\n    fi\n\
    \    if [[ -z \"${LENGTH2}\" ]]; then\n        echo \"No length of string!\"\n\
    \        exit\n    fi\n    local i=0\n    while [[ $i -lt $LENGTH2 ]]; do\n  \
    \      local j=0\n        while [[ $j -lt ${#STRING2} ]] && [[ $j -gt $INDEX ]]\
    \ && [[ $j -le $LENGTH ]] && [[ ${#WORDLIST[@]} -eq 0 ]]; then\n            local\
    \ k=0\n            while [[ $k -lt ${#STRING2} ]] && [[ $k -gt $INDEX ]] && [[\
    \ $k -le $LENGTH ]] && [[ ${#WORDLIST[@]} -eq 0 ]]; then\n                if [[\
    \ ${STRING2[$k]} != \"${STRING2[$j]}\" ]]; then\n                    WORDLIST+=(${STRING2[$k]})\
    \ #push\n                fi\n                ((k++))\n            done\n     \
    \       if [[ $j -eq $INDEX ]]; then\n                break\n            fi\n\
    \            j=$((${j}+1))\n        done\n        ((i++))\n    done\n    echo\
    \ ${WORDLIST[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpysymkk69.sh: line 39: syntax error near unexpected token `then''

    /tmp/tmpysymkk69.sh: line 39: `        while [[ $j -lt ${#STRING2} ]] && [[ $j
    -gt $INDEX ]] && [[ $j -le $LENGTH ]] && [[ ${#WORDLIST[@]} -eq 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660054814
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local s=$1\n    local n=$2\n    local str\n\
    \    local array\n    array=()\n    while [[ $s != \"\" ]]\n    do\n        str=$(echo\
    \ $s | grep -o \"[^ ]*$\")\n        if [[ $str == \"\" ]]\n        then\n    \
    \        str=$(echo $s | grep -o \"[^ ]$\")\n        fi\n        array=(\"${array[@]}\"\
    \ $str)\n        s=$(echo $s | grep -o \"[^ ]*$\")\n    done\n    echo \"${array[*]:$(($n-1))}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660054819
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local string count=0\n    local word=''\n\
    \    local temp=''\n    local strings=''\n    local wordlist=''\n    local word=''\n\
    \    local string=''\n    local word_counter=''\n    local word_counter_word=''\n\
    \    local word_counter_key=''\n    local temp_count=''\n    local temp_key=''\n\
    \    local temp_letter=''\n    local temp_key2=''\n    local temp_key3=''\n  \
    \  local temp_key4=''\n    local temp_key5=''\n    local temp_key6=''\n    local\
    \ temp_key7=''\n    local temp_key8=''\n    local temp_key9=''\n    local temp_key10=''\n\
    \    local temp_key11=''\n    local temp_key12=''\n    local temp_key13=''\n \
    \   local temp_key14=''\n    local temp_key15=''\n    local temp_key16=''\n  \
    \  local temp_key17=''\n    local temp_key18=''\n    local temp_key19=''\n   \
    \ local temp_key20=''\n    local temp_key21=''\n    local temp_key22=''\n    local\
    \ temp_key23=''\n    local temp_key24=''\n    local temp_key25=''\n    local temp_key26=''\n\
    \    local temp_key27=''\n    local temp_key28=''\n    local temp_key29=''\n \
    \   local temp_key30=''\n    local temp_key31=''\n    local temp_key32=''\n  \
    \  local temp_key33=''\n    local temp_key34=''\n    local temp_key35=''\n   \
    \ local temp_key36=''\n    local temp_key37=''\n    local temp_key38=''\n    local\
    \ temp_key39=''\n    local temp_key40=''\n    local temp_key41=''\n    local temp_key42=''\n\
    \    local temp_key43=''\n    local temp_key44=''\n    local temp_key45=''\n \
    \   local temp_key46=''\n    local temp_key47=''\n    local temp_key48=''\n  \
    \  local temp_key49=''\n    local temp_key50=''\n    local temp_key51=''\n   \
    \ local temp_key52=''\n    local temp_key53=''\n    local temp_key54=''\n    local\
    \ temp_key55=''\n    local temp_key56=''\n    local temp_key57=''\n    local temp_key58=''\n\
    \    local temp_key59=''\n    local temp_key60=''\n    local temp_key61=''\n \
    \   local temp_key62=''\n    local temp_key63=''\n    local \n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    string=\"$1\"\n    n=\"$2\"\n    arr=(\
    \ ${string//[[:blank:]]/ })\n    arr=( ${arr[*]//[[:upper:]] })\n    arr=( ${arr[@]//[[:lower:]]\
    \ })\n    arr=( ${arr[@]//[[:digit:]] })\n    arr=( ${arr[@]//[[:punct:]] })\n\
    \    arr=( ${arr[@]//[[:alpha:]] })\n    arr=( ${arr[@]//[[:punct:]] })\n    arr=(\
    \ ${arr[@]//[[:blank:]]/ })\n    arr=( ${arr[*]//[[:alpha:]] })\n    arr=( ${arr[@]//[[:space:]]\
    \ })\n    arr=( ${arr[@]//[[:digit:]] })\n    arr=( ${arr[@]//[[:lower:]] })\n\
    \    arr=( ${arr[@]//[[:upper:]] })\n    arr=( ${arr[@]//[[:alpha:]] })\n    arr=(\
    \ ${arr[@]//[[:space:]] })\n    arr=( ${arr[@]//[[:digit:]] })\n    arr=( ${arr[@]//[[:punct:]]\
    \ })\n    arr=( ${arr[@]//[[:alpha:]] })\n    arr=( ${arr[@]//[[:punct:]] })\n\
    \    arr=( ${arr[@]//[[:blank:]] })\n    arr=( ${arr[@]//[[:space:]] })\n    arr=(\
    \ ${arr[@]//[[:digit:]] })\n    arr=( ${arr[@]//[[:lower:]] })\n    arr=( ${arr[@]//[[:upper:]]\
    \ })\n    arr=( ${arr[@]//[[:alpha:]] })\n    arr=( ${arr[@]//[[:space:]] })\n\
    \    arr=( ${arr[@]//[[:digit:]] })\n    arr=( ${arr[@]//[[:punct:]] })\n    arr=(\
    \ ${arr[@]//[[:alpha:]] })\n    arr=( ${arr[@]//[[:punct:]] })\n    arr=( ${arr[@]//[[:blank:]]\
    \ })\n    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local s n r\n  s=\"${1//[^a-zA-Z ]}\"\n \
    \ n=\"${2}\"\n  r=()\n  while [[ ${#s} -ge $n ]]; do\n    s=${s//[^a-zA-Z ]/ }\n\
    \    r+=(${s// /})\n  done\n  echo \"${r[@]}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660054819
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local str=\"$1\"\n    local n=\"$2\"\n\
    \    local list=()\n    local c=1\n    local word\n\n    [[ -z $str ]] && return\
    \ 0\n\n    [[ -z $n ]] && return 0\n\n    while [[ \"$c\" -lt \"$n\" ]]; do\n\
    \        word=\"$( echo $str | sed \"s/$/ $c/\" | tr \" \" \"\\n\" | grep -c -c\
    \ -c -c )\n        list+=(\"$word\")\n        let c+=1\n    done\n\n    [[ \"\
    $c\" -eq \"$n\" ]] && list+=(\"$str\")\n    echo \"${list[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyjh2un4l.sh: line 49: unexpected EOF while looking for matching
    `"''

    /tmp/tmpyjh2un4l.sh: line 53: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054814
- exit_code: -1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local s=$1\n  local n=$2\n  local x=\n  local\
    \ y=\n  local result=\n  \n  x=$s\n  while [ $n -gt 0 ]\n  do\n    if [ $n -eq\
    \ 1 ]\n    then\n      if [[ $x =~ [aeiouAEIOU] ]] \n      then\n        result=\"\
    $result$x\"\n      fi\n    elif [[ $x =~ [aeiouAEIOU] ]] \n    then\n      result=\"\
    $result$x\"\n      x=$x$y\n      y=\n    elif [[ $x =~ [aeiouAEIOU] ]] \n    then\n\
    \      result=\"$result$x\"\n      x=$x$y\n      y=\n      n=$((n-1))\n    else\n\
    \      x=$x$y\n      y=\n      n=$((n-1))\n    fi\n  done\n  \n  result=${result%??}\n\
    \n  echo \"$result\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660054819
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n\tlocal input=\"${1}\"\n\tlocal length=\"${2}\"\
    \n\tlocal output=\"\"\n\n\tif [[ ${#input} = 0 ]]; then\n\t\toutput=\"\"\n\telse\n\
    \t\toutput=$(grep -o -P \"\\<$length\\>\" <<< \"${input}\" | tr -d '[:space:]')\n\
    \tfi\n\t\n\techo \"${output}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local string=$1\n  local number=$2\n  \n\
    \  if [[ ${string#} != \"\" ]]; then\n    \n    # Convert the string into an array\
    \ of words using split\n    words=$(echo \"${string}\" | sed 's/[\\[\\] ]/ /g'\
    \ | tr '[:upper:]' '[:lower:]' | sed 's/ //g')\n    \n    # Loop through the array\
    \ of words and return an array containing the words\n    # that contain exactly\
    \ $number consonants.\n    result=()\n    word=''\n    for word in $words\n  \
    \  do\n      if [[ ${word// } == $number ]]\n      then\n        result+=(\"$word\"\
    )\n      fi\n    done\n\n    # Return the result array to the caller\n    echo\
    \ \"${result[@]}\"\n  fi\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local words=$1\n    local num_words=$2\n\
    \    local result=()\n    local letter=\"a\"\n    while [ $num_words -gt 0 ]\n\
    \    do\n        if [[ $words == \"$letter\" ]] ; then\n            result=(\"\
    $words\")\n            break\n        fi\n        if [[ ${#result[@]} -eq 0 ]]\
    \ ; then\n            result=(\"$words\")\n            break\n        fi\n   \
    \     if [[ ${#result[@]} -ge 2 ]] ; then\n            result=(${result[@]} \"\
    $words\")\n            break\n        fi\n        letter=$(expr $letter + 1)\n\
    \        words=\"$words\"\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local line=\"$1\"\n  local n=\"$2\"\n\n \
    \ if [[ -z $line ]]; then\n    return 0\n  fi\n\n  local word\n  local i=0 j=0\n\
    \  local words=()\n\n  while [[ \"$line\" =~ ([^[:space:]]+) ]] && [[ $i -lt $n\
    \ ]]; do\n    word=\"${BASH_REMATCH[1]}\"\n    words[$j]=\"$word\"\n    i=$((i+1))\n\
    \    line=\"${line#$word}\"\n    j=$((j+1))\n  done\n\n  return \"${words[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_mblpd63.sh: line 36: return: Mary: numeric argument required

    '
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local i\n    local words\n    local result\n\
    \n    # $1 is a string\n    # $2 is an integer\n    words=(${1//[[:space:]]/})\n\
    \    i=$2\n    result=()\n\n    while [[ $i -ne 0 ]]; do\n        [[ \"${#words[@]}\"\
    \ -eq \"$i\" ]] && result=(\"${result[@]}\" \"$words[@]\") \n        (( ${#result[@]}\
    \ - 1 ))\n        let i-=1\n    done\n\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n    local string=$1\n    local num_consonant=$2\n\
    \    local words\n\n    words=$(echo $string | sed -r 's/[[:upper:]]/[[:lower:]]/g'\
    \ | tr [A-Z] [a-z])\n\n    for word in $words\n    do\n        echo $word\n  \
    \  done\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n\tlocal str=$1\n\tlocal n=$2\n\tlocal words=\"\
    \"\n\t\n\tif [[ -z $str || $n -lt 1 || $n > ${#str} ]]; then\n\t\techo \"invalid\
    \ input\"\n\t\treturn 1\n\tfi\n\n\tlocal c=\"a\"\n\tlocal p=\"z\"\n\tlocal e=\"\
    A\"\n\tlocal t=\"Z\"\n\tlocal i=\"a\"\n\tlocal s=\"z\"\n\n\twhile [[ ${#str} -gt\
    \ 0 ]]; do\n\t\tif [[ -z $words ]]; then\n\t\t\twords=\"$str\"\n\t\telse\n\t\t\
    \twords=\"$words$i\"\n\t\tfi\n\t\n\t\tlocal j=0\n\t\tfor ((j=0;j<${#str};j++));do\n\
    \t\t\tif [[ ${str:$j:1} == \"$c\" || ${str:$j:1} == \"$p\" || ${str:$j:1} == \"\
    $e\" || ${str:$j:1} == \"$t\" || ${str:$j:1} == \"$i\" ]]; then\n\t\t\t\tlet j=$((j+1))\n\
    \t\t\t\tcontinue\n\t\t\tfi\n\n\t\t\tif [[ -z $words ]]; then\n\t\t\t\twords=\"\
    $str\"\n\t\t\telse\n\t\t\t\twords=\"$words$s\"\n\t\t\tfi\n\t\tdone\n\t\tlet str=${str:0:$((j+1))}\n\
    \tdone\n\n\tlocal i=1\n\tfor ((i=0;i<${#words};i++));do\n\t\tif [[ ${words:$i:1}\
    \ == \"$c\" || ${words:$i:1} == \"$p\" || ${words:$i:1} == \"$e\" || ${words:$i:1}\
    \ == \"$t\" || ${words:$i:1} == \"$i\" ]]; then\n\t\t\tlet i=$((i+1))\n\t\t\t\
    continue\n\t\tfi\n\n\t\tif [[ -z $words ]]; then\n\t\t\twords=\"$str\"\n\t\telse\n\
    \t\t\twords=\"$words$s\"\n\t\tfi\n\tdone\n\n\techo $words\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054814
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    # select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"\
    simple white space\", 2) ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n# select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n#\n# $1 is a string\n# $2\
    \ is an integer\nselect_words() {\n  local s=$1\n  local n=$2\n  local i=1\n \
    \ local new_string\n  local list_to_return\n  \n  while [ $i -le $n ]; do\n  \
    \  new_string=`echo $s | cut -c$i | sed 's/ //g'`\n    list_to_return+=$(echo\
    \ $new_string | grep -c \"[^aeiouAEIOU]\") \n    s=$new_string\n    i=$((i+1))\n\
    \  done\n  \n  list_to_return=$(echo $s | cut -c$i)\n  list_to_return=$(echo $list_to_return\
    \ | sed 's/ //g')\n  list_to_return=$(echo $list_to_return | sed 's/[^aeiouAEIOU]//g')\n\
    \  list_to_return=$(echo $list_to_return | sed 's/AEIOUaeiouAEIOU//g')\n  list_to_return=$(echo\
    \ $list_to_return | sed 's/aeiouAEIOU/A/g')\n  list_to_return=$(echo $list_to_return\
    \ | sed 's/AaeiouAEIOU/a/g')\n  list_to_return=$(echo $list_to_return | sed 's/aeiouAEIOU/A/g')\n\
    \  list_to_return=$(echo $list_to_return | sed 's/AaeiouAEIOU/a/g')\n  list_to_return=$(echo\
    \ $list_to_return | sed 's/aeiouAEIOU/A/g')\n  list_to_return=$(echo $list_to_return\
    \ | sed 's/AaeiouAEIOU/a/g')\n  list_to_return=$(echo $list_to_return | sed 's/aeiouAEIOU/A/g')\n\
    \  list_to_return=$(echo $list_to_return | sed 's/aeiouAEIOU/a/g')\n  list_to_return=$(echo\
    \ $list_to_return | sed 's/AaeiouAEIOU/a/g')\n  list_to_return=$(echo $list_to_return\
    \ | sed 's/aeiouAEIOU/A/g')\n  list_to_return=$(echo $list_to_return | sed 's/aeiouAEIOU/a/g')\n\
    \  list_to_return=$(echo $list_to_return | sed 's/AaeiouAEIOU/a/g')\n  list_to_return=$(echo\
    \ $list_to_return | sed 's/aeiouAEIOU/A/g')\n  list_to_return=$(echo $list_to_return\
    \ | sed 's/aeiouAEIOU/a/g')\n  list_to_return=$(echo $list_\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp56j4djpx.sh: line 48: unexpected EOF while looking for matching
    `)''

    /tmp/tmp56j4djpx.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054814
