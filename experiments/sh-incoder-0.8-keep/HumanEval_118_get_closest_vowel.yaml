name: HumanEval_118_get_closest_vowel
language: sh
prompt: "#!/bin/bash\n# You are given a word. Your task is to find the closest vowel\
  \ that stands between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# get_closest_vowel(\"yogurt\") ==>\
  \ \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\"\
  ) ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\n#\n# $1 is a string\nget_closest_vowel()\
  \ {\n"
tests: "}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
  u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\
  \" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\"\
  \ ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\"\
  \ ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\"\
  \ ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\
  \" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
completions: ["    local word count\n    word=$1\n    count=${#word}\n    count=$((count\
    \ % 2))\n    if [ $count -eq 0 ]; then\n        echo ${word:$((count)):1}\n  \
    \  else\n        echo ${word:$((count - 1)):1}\n    fi", "    local vowels=\"\
    AEIOUYaeiouy\";\n    local string=$1;\n    local vowel_consonant=\"[${vowels}]\"\
    ;\n    local consonant_vowel=\"[^${vowels}]\";\n    local consonant_consonant=\"\
    [^${vowel_consonant}]\";\n    local vowel_word=\"[^${consonant_vowel}]\";\n  \
    \  local consonant_word=\"[^${vowel_word}]\";\n    local vowel_start=\"[^${consonant_word}]\"\
    ;\n    local consonant_end=\"[^${vowel_start}]\";\n    local vowel_end=\"[^${consonant_end}]\"\
    ;\n    local consonant_start=\"[^${vowel_end}]\";\n    local consonant_end1=\"\
    [^${consonant_end}]\";\n    local vowel_end1=\"[^${consonant_end}]\";\n    local\
    \ vowel_end2=\"[^${consonant_end}]\";\n    local consonant_end2=\"[^${vowel_end}]\"\
    ;\n    local consonant_start1=\"[^${vowel_end1}]\";\n    local consonant_end3=\"\
    [^${consonant_end2}]\";\n    local vowel_end3=\"[^${consonant_end1}]\";\n    local\
    \ vowel_end4=\"[^${consonant_end1}]\";\n    local consonant_end4=\"[^${vowel_end3}]\"\
    ;\n    local consonant_start2=\"[^${vowel_end4}]\";\n    local consonant_end5=\"\
    [^${consonant_end4}]\";\n    local vowel_end5=\"[^${consonant_end2}]\";\n    local\
    \ vowel_end6=\"[^${consonant_end2}]\";\n    local consonant_start3=\"[^${vowel_end5}]\"\
    ;\n    local consonant_end7=\"[^${consonant_end6}]\";\n    local vowel_end7=\"\
    [^${consonant_end3}]\";\n    local vowel_end8=\"[^${consonant_end3}]\";\n    local\
    \ consonant_start4=\"[^${vowel_end7}]\";\n    local consonant_end9=\"[^${consonant_end8}]\"\
    ;\n    local vowel_end9=\"[^${consonant_end4}]\";\n    local vowel_start10=\"\
    [^${consonant_end9}]", "\tlocal line=${1:-NULL}\n\tlocal vowel=\"\"\n\tlocal vowel_found=\"\
    \"\n\tlocal consonant=\"bcdfghjklmnpqrstvwxyz\"\n\tlocal consonant_found=\"\"\n\
    \tlocal vowel_distance=\"\"\n\tlocal consonant_distance=\"\"\n\tlocal consonant_count=0\n\
    \tlocal vowel_count=0\n\tlocal consonant_found=0\n\tfor char in $line; do\n\t\t\
    if [[ \"$char\" == [aeiouAEIOU] ]]; then\n\t\t\tconsonant_found=1\n\t\t\tbreak\n\
    \t\tfi\n\tdone\n\tif [ \"$consonant_found\" == \"0\" ]; then\n\t\treturn $vowel\n\
    \tfi\n\tlocal last_char=\"\"\n\tlocal current_char=\"\"\n\tlocal consonant_start=\"\
    \"\n\tlocal vowel_start=\"\"\n\tlocal vowel_end=\"\"\n\tlocal vowel_distance=0\n\
    \tlocal consonant_distance=0\n\tlocal consonant_count=0\n\tlocal vowel_count=0\n\
    \tlocal consonant_found=0\n\tlocal vowel_found=0\n\tfor char in $line; do\n\t\t\
    last_char=$char\n\t\tcurrent_char=$char\n\t\tconsonant_found=0\n\t\tfor consonant\
    \ in $consonant; do\n\t\t\tif [ \"$current_char\" == $consonant ]; then\n\t\t\t\
    \tconsonant_found=1\n\t\t\t\tconsonant_distance=$((consonant_distance+1))\n\t\t\
    \t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif [ \"$consonant_found\" == \"0\" ]; then\n\
    \t\t\tvowel_found=0\n\t\t\tbreak\n\t\tfi\n\t\tcurrent_char=$last_char\n\tdone\n\
    \tif [ \"$consonant_found\" == \"0\" ]; then\n\t\treturn $vowel\n\tfi\n\tfor consonant\
    \ in $consonant; do\n\t\tif [ \"$consonant_found\" == \"1\" ]; then\n\t\t\tif\
    \ [ \"$consonant_distance\" -lt \"$vowel_distance\" ]; then\n\t\t\t\tvowel_distance=$consonant_distance\n\
    \t\t\t\tvowel_found=1\n\t\t\t\tvowel_start=$consonant_start\n\t\t\t\tvowel_end=$consonant_end\n\
    \t\t\tfi\n\t\tfi\n\t\tif [ \"$consonant_found\" == \"0\" ]; then\n\t\t\tbreak\n\
    \t\tfi\n\t\tlast_char=$consonant\n\t\tcurrent_char=$consonant\n\t\tconsonant_found=0\n\
    \t\tfor vowel in $vowel; do\n\t\t\tif [ \"$current_char\" == $vowel ]; then\n\t\
    \t\t\tconsonant_found=1\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif [ \"$consonant_found\"\
    \ == \"", "\tlocal vowels_count=0;\n\tlocal vowels_str=\"\";\n\tlocal current_vowel=\"\
    \";\n\tlocal i=0;\n\tlocal j=0;\n\n\tvowels_count=${#1} - 2;\n\n\techo \"vowels_count\
    \ : \" $vowels_count ;\n\techo \"$1\"\n\tfor ((i = 1; i <= $vowels_count; i++))\n\
    \tdo\n\t\techo \"i : \" $i ;\n\n\t\tif [ \"${1:i}\" = \"A\" ] || [ \"${1:i}\"\
    \ = \"E\" ] || [ \"${1:i}\" = \"I\" ] || [ \"${1:i}\" = \"O\" ] || [ \"${1:i}\"\
    \ = \"U\" ] || [ \"${1:i}\" = \"a\" ] || [ \"${1:i}\" = \"e\" ] || [ \"${1:i}\"\
    \ = \"i\" ] || [ \"${1:i}\" = \"o\" ] || [ \"${1:i}\" = \"u\" ] ;\n\t\tthen\n\t\
    \t\techo \"A\";\n\t\t\tvowels_str=$vowels_str ${1:i} ;\n\t\tfi\n\tdone\n\n\techo\
    \ \"vowels_str : \" $vowels_str ;\n\techo \"vowels_count : \" $vowels_count ;\n\
    \n\techo \"\" ;\n\techo \"vowels_str len : \" ${#vowels_str} ;\n\techo \"vowels_str\
    \ substr : ${vowels_str: -1}\";\n\t\n\tcurrent_vowel=${vowels_str:-1} ;\n\techo\
    \ \"\" ;\n\techo \"current_vowel : \" $current_vowel ;\n\techo \"vowels_count\
    \ : \" $vowels_count ;\n\n\techo \"\" ;\n\techo \"vowels_str len : \" ${#current_vowel}\
    \ ;\n\techo \"vowels_str substr : ${current_vowel}\";\n\t\n\tfor ((j = $vowels_count\
    \ ; j >=1 ; j--))\n\tdo\n\t\techo \"j : \" $j ;\n\n\t\tif [ \"${1:j}\" = \"A\"\
    \ ] || [ \"${1:j}\" = \"E\" ] || [ \"${1:j}\" = \"I\" ] || [ \"${1:j}\" = \"O\"\
    \ ] || [ \"${1:j}\" = \"U\" ] || [ \"${1:j}\" = \"a\" ] || [ \"${1:j}\" = \"e\"\
    \ ] || [ \"${1:j}\" = \"i\" ] || [ \"${1:j}\" = \"o\" ] || [ \"${1:j}\" = \"u\"\
    \ ] ;\n\t\tthen\n\t\t\techo \"B\";\n\t\t\tcurrent_vowel=${current_vowel:-1:1}\
    \ ;\n\t\tfi\n\tdone\n\n\techo \"current_vowel : \" $current_vowel ;\n\techo \"\
    vowels_count : \" $vowels_count ;\n\n\t", "    local vowels=\"aeiouAEIOU\"\n \
    \   local string=\"$1\"\n    local result\n\n    # Check if the string is empty\n\
    \    [ -z \"$string\" ] && return 1\n\n    # Check if the string only contains\
    \ letters\n    [ -z \"${string//[!a-z]/}\" ] && return 1\n\n    local i\n    for\
    \ (( i=0; i<${#string}-1; i++ )); do\n        # Check if the current character\
    \ is a consonant\n        if [[ ${string:$i:1} =~ [[:alpha:]]* ]]; then\n    \
    \        local j\n            # Check if the current character is the last character\n\
    \            if [[ ${string:$i:1} =~ [a-z]* ]]; then\n                local k\n\
    \                # Check if the previous character is a vowel\n              \
    \  for (( j=i-1; j>0; j-- )); do\n                    if [[ \"$vowels\" = \"$string${j:1}\"\
    * ]]; then\n                        local k\n                        # Check if\
    \ the previous character is a consonant\n                        if [[ ${string:$j:1}\
    \ =~ [[:alpha:]]* ]]; then\n                            result=\"${string:$j:1}\"\
    \n                            break\n                        fi\n            \
    \        fi\n                done\n                # Check if the character before\
    \ the end of the string is a consonant\n                for (( j=i; j<${#string};\
    \ j++ )); do\n                    if [[ \"$vowels\" = \"$string${j:1}\"* ]]; then\n\
    \                        result=\"${string:$j:1}\"\n                        break\n\
    \                    fi\n                done\n            # Check if the current\
    \ character is the first character\n            elif [[ ${string:$i:1} =~ [a-z]*\
    \ ]]; then\n                local k\n                # Check if the next character\
    \ is a vowel\n                for (( j=i+1; j<${#string}; j++ )); do\n       \
    \             if [[ \"$vowels\" = \"$string${j:1}\"* ]]; then\n              \
    \          local k\n                        # Check if the next character is a\
    \ consonant\n                        if [[ ${string:$j:1} =~ [[:alpha:]]* ]];\
    \ then\n                            result=\"${string:$j:1}\"\n              \
    \              break\n                        fi\n                    fi\n   \
    \             done\n            # Check if the character before the beginning\
    \ of the string is a consonant\n            elif [[ ${string:$i:1} =~ [a-z]* ]];\
    \ then\n                local k\n                # Check if the previous character\
    \ is a vowel\n                for (( j=i-1; j>0; j-- )); do\n                \
    \    if [[ \"$vowels\" = \"$string${j:1}\"* ]]; then\n                       \
    \ local k\n                        # Check if the previous character is a consonant\n\
    \                        if [[ ${string:$j:1} =~ [[:alpha:]]* ]]; then\n     \
    \                       result=\"${string:$j:1}\"\n                          \
    \  break\n                        ", "        \n   local word=$1\n   local index=0\n\
    \   \n   local foundVowel\n\n   foundVowel=$(expr \"$word\" : '.*[AEIOUYaeiouy].*'\
    \ )\n   while [ \"$foundVowel\" != \"yes\" ]\n   do\n      index=$(( $index +\
    \ 1 ))\n      foundVowel=$(expr \"$word\" : '.*[aeiouy].*' | head -n $index )\n\
    \   done\n   foundVowel=$(expr \"$word\" : '.*[AEIOUYaeiouy].*' )\n   echo $foundVowel",
  "  \n  # Your code goes here:\n  echo $1 | awk '{for(i=length($1)-1;i>0;i--){if($i~/[aeiou]/){return\
    \ $i}}}'", "  local vowels=(\"a\" \"i\" \"o\" \"u\" \"A\" \"I\" \"O\" \"U\")\n\
    \  local vowels_count=${#vowels[@]}\n  local word=$1\n  local consonant_count=1\n\
    \  local vowels_index=0 # index of vowel to look for\n  local consonant_index=0\
    \ # index of consonant to look for\n  local consonant_left=0 # index of consonant\
    \ to the left of consonant_index\n  local consonant_right=consonant_count-1 #\
    \ index of consonant to the right of consonant_index\n  local vowel_left=0 # index\
    \ of vowel to the left of vowel_index\n  local vowel_right=vowels_count-1 # index\
    \ of vowel to the right of vowel_index\n  local consonant_word=${word:0:1}\n \
    \ local vowel_word=${word:1:1}\n  local vowel_met_consonant=false\n  local consonant_met_vowel=false\n\
    \n  # consonant is between consonant and consonant_left\n  until [[ ${consonant_word}\
    \ == ${consonant_word:0:1} ]] || \\\n    [[ ${consonant_word} == ${consonant_word:1:1}\
    \ ]] || \\\n    [[ ${consonant_word} == ${consonant_word:2:1} ]]; then\n    consonant_word=${consonant_word:1:1}\n\
    \    consonant_count=$((consonant_count-1))\n    consonant_index=$((consonant_index-1))\n\
    \  done\n\n  # vowel is between vowel and vowel_left\n  until [[ ${vowel_word}\
    \ == ${vowel_word:0:1} ]] || \\\n    [[ ${vowel_word} == ${vowel_word:1:1} ]]\
    \ || \\\n    [[ ${vowel_word} == ${vowel_word:2:1} ]]; then\n    vowel_word=${vowel_word:1:1}\n\
    \    vowels_count=$((vowels_count-1))\n    vowels_index=$((vowels_index-1))\n\
    \  done\n\n  # vowel is between consonant and consonant_right\n  until [[ ${vowel_word}\
    \ == ${vowel_word:0:1} ]] || \\\n    [[ ${vowel_word} == ${vowel_word:1:1} ]]\
    \ || \\\n    [[ ${vowel_word} == ${vowel_word:2:1} ]]; then\n    vowel_word=${vowel_word:2:1}\n\
    \    vowels_count=$((vowels_count-1))", "\tlocal vowel_found=''\n\tlocal vowels='aeiouAEIOU'\n\
    \tfor (( i=$#;i>0;i-- )); do\n\t\tlocal first_consonant=${1:0:1}\n\t\tlocal second_consonant=${1:1:1}\n\
    \t\tif [[ \"$first_consonant\" = \"$second_consonant\" ]]; then\n\t\t\tlocal vowel_in_first_consonant_count=0\n\
    \t\t\tlocal vowel_in_second_consonant_count=0\n\t\t\tfor (( i=1;i<=${#vowels};i++\
    \ )); do\n\t\t\t\tlocal vowel=${vowels:$i:1}\n\t\t\t\tif [[ \"$first_consonant\"\
    \ = \"$vowel\" ]]; then\n\t\t\t\t\tvowel_in_first_consonant_count=$(( ${vowel_in_first_consonant_count}+1\
    \ ))\n\t\t\t\tfi\n\t\t\t\tif [[ \"$second_consonant\" = \"$vowel\" ]]; then\n\t\
    \t\t\t\tvowel_in_second_consonant_count=$(( ${vowel_in_second_consonant_count}+1\
    \ ))\n\t\t\t\tfi\n\t\t\tdone\n\t\t\tvowel_found=$(( ${#vowels}*( ${vowel_in_first_consonant_count}/${#first_consonant}\
    \ ) + (( ${vowel_in_second_consonant_count}/${#second_consonant} )*${vowel_in_first_consonant_count}+${vowel_in_second_consonant_count}*${#second_consonant}\
    \ ))\n\t\t\tif [[ \"$vowel_found\" -gt \"$vowel\" ]]; then\n\t\t\t\tbreak\n\t\t\
    \tfi\n\t\tfi\n\tdone\n\techo $vowel_found", "    local vowels=\"a e i o u\"\n\
    \    local str=\"$1\"\n    local i=1\n    local output=\"\"\n    local vowel_count=0\n\
    \    local vowel_index=0\n    while [ $i -le $strlen ]; do\n        local vowel=${vowels:$i:1}\n\
    \        local last_con=${str:$i:1}\n        if [[ ${str#*$vowel} == *$last_con\
    \ ]]; then\n            ((vowel_count++))\n            vowel_index=$i\n      \
    \  fi\n        ((i++))\n    done\n\n    if [[ $vowel_count == 0 ]]; then\n   \
    \     output=\"\"\n    else\n        output=${str:$vowel_index:1}\n    fi\n\n\
    \    echo \"$output\"", "    local string=\"$1\"\n    local length=${#string}\n\
    \n    if [ $length -gt 1 ]; then\n        local vowels=\"a e i o u A E I O U\"\
    \n        local i=$((${#vowels}-1))\n        local count=0\n        local vowel=${vowels:$i:1}\n\
    \        local vowel_count=0\n        for ((i=$((${#vowels} - 1)); i >= 0; i--));\
    \ do\n            if [[ \"$string\" == \"$vowels\" ]]; then\n                break\n\
    \            fi\n            if [[ \"$vowel\" == \"$string\" ]]; then\n      \
    \          count=$((count + 1))\n                vowel_count=$((vowel_count +\
    \ 1))\n                if [[ \"$count\" -gt \"$vowel_count\" ]]; then\n      \
    \              vowel=${vowels:$i:1}\n                    vowel_count=$((vowel_count\
    \ + 1))\n                    break\n                fi\n            fi\n     \
    \   done\n        if [[ \"$count\" -eq 0 ]]; then\n            return \"\"\n \
    \       fi\n        echo \"$vowel\"\n    else\n        return \"\"\n    fi", " \
    \   local vowels=\"aeiouAEIOU\"\n    local vowel_found=\"\"\n    local first_char=\"\
    ${1}\"\n\n    # Get the first char\n    local first_char_lower=\"${first_char,,}\"\
    \n    first_char_lower=${first_char_lower,,}\n\n    local first_char_upper=\"\
    ${first_char_lower,,}\"\n\n    local first_char_upper=\"${first_char_upper,,}\"\
    \n\n    local first_char_lower=\"${first_char_lower,,}\"\n\n    # Find the vowel\
    \ between the first char with the rest of the string\n    local first_char_upper=\"\
    ${first_char_upper,,}\"\n    local first_char_lower=\"${first_char_lower,,}\"\n\
    \n    for (( i=0; i < ${#first_char}; i++ )); do\n        local char=\"${first_char:$i:1}\"\
    \n        local next_char=\"${first_char:$((i+1)):1}\"\n        local next_char_upper=\"\
    ${next_char,,}\"\n        local next_char_lower=\"${next_char,,}\"\n\n       \
    \ if [[ \"$char\" == \"$first_char\" ]]; then\n            local vowel=\"${vowels:$((i+1)):1}\"\
    \n            local vowel_lower=\"${vowels:$((i+1)):1}\"\n            local vowel_upper=\"\
    ${vowels:$((i+1)):1}\"\n            local vowel_found_upper=\"${vowel_found,,}\"\
    \n            local vowel_found_lower=\"${vowel_found,,}\"\n            if [[\
    \ \"$next_char_upper\" == \"$vowel\" && \"$vowel_found_upper\" == \"$vowel\" ]];\
    \ then\n                vowel_found=\"$vowel\"\n                first_char_upper=\"\
    $vowel\"\n            elif [[ \"$next_char_lower\" == \"$vowel\" && \"$vowel_found_lower\"\
    \ == \"$vowel\" ]]; then\n                vowel_found=\"$vowel\"\n           \
    \     first_char_lower=\"$vowel\"\n            fi\n        fi\n    done\n    echo\
    \ \"$vowel_found\"", "    local i vowel=\"a\"\n    for (( i=0; i<${#1}; i++ ));\
    \ do\n      vowel=${1:$i:1}\n      if [[ \"${vowel}\" == \"a\" || \"${vowel}\"\
    \ == \"e\" || \"${vowel}\" == \"i\" || \"${vowel}\" == \"o\" || \"${vowel}\" ==\
    \ \"u\" ]]; then\n        echo \"$vowel\"\n        break\n      else\n       \
    \ (( i++ ))\n      fi\n    done", "    [[ ${#1} -lt 2 ]] && echo \"Invalid Input\"\
    \ && exit 1\n    local str=\"$1\"\n    local i\n\n    for (( i=1; i <= ${#str};\
    \ i++ )); do\n        [[ ${str:$i:1} = \"a\" ]] || [[ ${str:$i:1} = \"e\" ]] ||\
    \ [[ ${str:$i:1} = \"i\" ]] || [[ ${str:$i:1} = \"o\" ]] || [[ ${str:$i:1} = \"\
    u\" ]] || [[ ${str:$i:1} = \"A\" ]] || [[ ${str:$i:1} = \"E\" ]] || [[ ${str:$i:1}\
    \ = \"I\" ]] || [[ ${str:$i:1} = \"O\" ]] || [[ ${str:$i:1} = \"U\" ]]\n    done\n\
    \n    [[ ${str:0:1} = \"a\" ]] && echo \"a\" || echo \"z\"", "    local vowels=(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n    local vowels_count=${#vowels[*]}\n\
    \    local current_vowel=${1}\n\n    if [ -z \"$1\" ] || [[ -z \"$current_vowel\"\
    \ ]] || [[ -z \"$vowels_count\" ]]; then\n        echo \"Invalid input!\"\n  \
    \      return\n    fi\n\n    local num_vowels=${#current_vowel}\n\n    local i\n\
    \    local j\n    local max_vowel_index=-1\n\n    local max_vowel_char\n\n   \
    \ for ((i=0; i < num_vowels; i++)); do\n        if [[ ${current_vowel:${#current_vowel}\
    \ - $num_vowels} == $current_vowel ]]; then\n            break\n        fi\n\n\
    \        max_vowel_index=$i\n        max_vowel_char=${current_vowel:${#current_vowel}\
    \ - $num_vowels}\n\n        for ((j=i; j < num_vowels; j++)); do\n           \
    \ local current_char=${current_vowel:${#current_vowel} - $num_vowels}\n      \
    \      local vowel=${vowels[$j]}\n\n            if [[ \"${current_char}\" == \"\
    $max_vowel_char\" ]]; then\n                break\n            fi\n        done\n\
    \n        if [[ -z \"${vowels[$max_vowel_index]}\" ]]; then\n            break\n\
    \        fi\n    done\n\n    echo \"$max_vowel_index\"", "  local vowels=\"aeiouAEIOU\"\
    \n  local input=\"$1\"\n  local output=\"\"\n  # remove space between vowels\n\
    \  local vowels_no_spaces=\"$vowels\"\n  local vowels_spaced=\"$(echo \"$vowels\"\
    \ | sed -e 's/\\s/_/g')\"\n  # remove \"g\" after the vowels\n  local vowels_no_spaces=\"\
    ${vowels_no_spaces//g}\"\n  # get consonant positions from the right\n  local\
    \ consonant_positions=\"$(grep \"$vowels_spaced\" <<< \"$input\" |\n    sed -e\
    \ 's/^[^ ]* //' -e 's/[^ ]* *$//' -e 's/^ *//' -e 's/ *$//')\"\n  # consonant\
    \ positions are in the form of start-end\n  for consonant_position in $consonant_positions;\
    \ do\n    # get the start and end index of consonant position\n    local start_index=$(expr\
    \ \"$consonant_position\" : '.*\\(..\\)' | cut -d. -f1)\n    local end_index=$(expr\
    \ \"$consonant_position\" : '.*\\(..\\)' | cut -d. -f2)\n    # get the index of\
    \ closest vowel between start and end index\n    local closest_vowel=\"$(expr\
    \ \"$start_index\" + \"$end_index\" - 1 \\\n      | awk \"BEGIN {print tolower(substr($0,\
    \ $1, 1))}\")\"\n    if [[ \"$closest_vowel\" == \"$vowels_no_spaces\" ]]; then\n\
    \      output=\"$closest_vowel\"\n      break\n    fi\n  done\n  echo \"$output\"",
  "        word=$1\n        vowel=$2\n        len=$#\n        echo $((len / 2))\n\
    \        if [ $len -eq 1 ]\n        then\n                echo -n $vowel\n   \
    \     elif [ $len -eq 2 ]\n        then\n                echo -n \"\"\n      \
    \  elif [ $len -gt 2 ]\n        then\n                let \"i=$len / 2 - 1\"\n\
    \                let \"j=i + 1\"\n                if [[ $vowel =~ $vowel[$i] ]]\n\
    \                then\n                        echo -n $vowel\n              \
    \  else\n                        echo \"\"\n                fi\n             \
    \   get_closest_vowel $word $j $j+1 $len\n        fi", "  local str=$1\n  local\
    \ vowels=\"aAiIuU\"\n  local i=${#str}-1\n  local vowel_found=\"\"\n  \n  while\
    \ [ $i -ge 0 ]; do\n    if [[ ${vowels:$i:1} == ${str}[${#str}-1] ]]; then\n \
    \     vowel_found=${vowels:$i:1}\n      break\n    fi\n    i=$(( ${i} - 1 ))\n\
    \  done\n  \n  echo $vowel_found", "    local str=\"$1\"\n    local vowel=`echo\
    \ $str | cut -d 'x' -f1 | cut -d 'x' -f2-`\n    local consonant=`echo $str | cut\
    \ -d 'x' -f2-`\n    if [[ \"$str\" =~ \"[a-Z]\" ]]; then\n        if [[ \"$consonant\"\
    \ = \"z\" || \"$consonant\" = \"Z\" ]]; then\n            echo \"$vowel\"\n  \
    \      fi\n    fi", "  # Write your code here\n  \n  var=$1\n  a=\"abcdefghijklmnopqrstuvwxyz\"\
    \n  b=\"bcdfghjklmnpqrstvwxyz\"\n  c=\"gdfhjklmnpqrstvwxyz\"\n  d=\"hgfedcbavxyz\"\
    \n  e=\"jlmpqrs\"\n  f=\"lmnopqrstuvwxyz\"\n  g=\"nopqrstuvwxyz\"\n  h=\"pqrstuvwxyz\"\
    \n  i=\"rstuvwxyz\"\n  j=\"uvwxyz\"\n  k=\"vwxyz\"\n  l=\"xyz\"\n  m=\"z\"\n \
    \ n=\"b\"\n  o=\"a\"\n  p=\"c\"\n  q=\"d\"\n  r=\"e\"\n  s=\"f\"\n  t=\"g\"\n\
    \  u=\"h\"\n  v=\"i\"\n  w=\"j\"\n  x=\"k\"\n  y=\"l\"\n  z=\"m\"\n  A=\"n\"\n\
    \  B=\"o\"\n  C=\"p\"\n  D=\"q\"\n  E=\"r\"\n  F=\"s\"\n  G=\"t\"\n  H=\"u\"\n\
    \  I=\"v\"\n  J=\"w\"\n  K=\"x\"\n  L=\"y\"\n  M=\"z\"\n  O=\"A\"\n  P=\"B\"\n\
    \  Q=\"C\"\n  R=\"D\"\n  S=\"E\"\n  T=\"F\"\n  U=\"G\"\n  V=\"H\"\n  W=\"I\"\n\
    \  X=\"J\"\n  Y=\"K\"\n  Z=\"L\"\n  a=\"bcdfghjklmnpqrstvwxyz\"\n  b=\"dfhjklmnpqrstvwxyz\"\
    \n  c=\"hjklmnpqrstvwxyz\"\n  d=\"jklmnpqrstvwxyz\"\n  e=\"lmnpqrstvwxyz\"\n \
    \ f=\"mnprstvwxyz\"\n  g=\"pqrsstuvwxyz\"\n  h=\"qrsstuvwxyz\"\n  i=\"rstuwxyz\"\
    \n  j=\"stuvwxyz\"\n  k=\"vwxyz\"\n  l=\"xyz\"\n  m=\"z\"\n  n=\"b\"\n  o=\"a\"\
    \n  p=\"c\"\n  q=\"d\"\n  r"]
stop_tokens:
- "\n}"
