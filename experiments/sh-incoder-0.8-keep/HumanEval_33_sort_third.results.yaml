language: sh
name: HumanEval_33_sort_third
results:
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n  local i\n  local\
    \ n=$#\n  local n2=$(wc -l <<< \"$1\")\n  local arr\n  arr=($*)\n  arr+=(${arr[0]})\n\
    \  ((n2--))\n  for i in \"${arr[@]:0:n-2}\"; do\n    if [[ $((i%3)) == 0 ]]; then\n\
    \      ((n++))\n      arr[$n-1]=${arr[$n-1]}\n    fi\n  done\n  arr+=(${arr[$n-1]})\n\
    \  arr=($(sort <<<\"${arr[*]}\"))\n  printf '%s\\n' \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\
    \ 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\"\
    ) = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8\
    \ 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6lwt7nga.sh: line 19: n-2: substring expression < 0

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local l l_sorted\n\
    \    l_sorted=$(sort -k 3 --field-separator=\" \" <<< \"${@}\")\n    local i\n\
    \    for ((i = 0; i < ${#l_sorted}; i+=3)); do\n        l_sorted[i+3]=$(echo \"\
    ${l_sorted[i]}\" | tr ' ' '-' | sed 's/-//')\n    done\n    echo \"${l_sorted[@]}\"\
    \n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"\
    5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\"\
    ) = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4\
    \ 8 9 5 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local _L $1\n\
    \    local i j prev next nl value\n    _L=$1\n    for (( i = 0; i < ${#_L}; i++\
    \ )); do\n        value=${_L:$i:1}\n        # first pass, find non-divisible values\n\
    \        prev=${_L:$(( i - 1 )):1}\n        next=${_L:$(( i + 1 )):1}\n      \
    \  if [[ \"$prev\" =~ ^[0-9]+$ ]] && [[ \"$next\" =~ ^[0-9]+$ ]]; then\n     \
    \       nl=false\n        fi\n        if [[ \"$value\" =~ ^[0-9]+$ ]] && [[ \"\
    $prev\" =~ ^[0-9]+$ ]]; then\n            nl=true\n        fi\n        if [[ \"\
    $nl\" = true ]]; then\n            # print first non-divisible value\n       \
    \     echo \"$value\"\n            (( i++ ))\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\
    \ 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\"\
    ) = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8\
    \ 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_buw_273.sh: line 12: local: `5'': not a valid identifier

    /tmp/tmp_buw_273.sh: line 12: local: `6'': not a valid identifier

    /tmp/tmp_buw_273.sh: line 12: local: `3'': not a valid identifier

    /tmp/tmp_buw_273.sh: line 12: local: `4'': not a valid identifier

    /tmp/tmp_buw_273.sh: line 12: local: `8'': not a valid identifier

    /tmp/tmp_buw_273.sh: line 12: local: `9'': not a valid identifier

    /tmp/tmp_buw_273.sh: line 12: local: `2'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local i l m'\n\
    \    declare -i c=0\n    l=\"${1}\"\n    m=3\n    for (( i=0; i<${#l}; i++ ));\
    \ do\n        l[$i]=$((l[$i]))\n        if [ $(($i % m)) -eq 0 ]; then\n     \
    \       ((c++))\n            l[$i]=$((l[$i]))\n        fi\n    done\n    local\
    \ i''\n    for((i = 0; i<${#l}; i++)); do\n        if [ $(($i % m)) -eq 0 ]; then\n\
    \            l[$i]=$((l[$i]))\n        fi\n    done\n    for((i = 0; i<${#l};\
    \ i++)); do\n        l[$i]=$((l[$i]))\n        if [ $((i%m)) -eq 0 ]; then\n \
    \           l[$i]=$((l[$i]))\n        fi\n    done\n    l'=\"${l[@]}\"\n    if\
    \ [ $c -eq 0 ]; then\n        l'=\"\"'\n    else\n        l'=\"${l[@]}\"\n   \
    \ fi\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate\
    \ \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3\
    \ 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6\
    \ 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk3cyqpo7.sh: line 39: unexpected EOF while looking for matching
    `''''

    /tmp/tmpk3cyqpo7.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n\tlocal l\n\tlocal\
    \ i\n\tlocal j\n\tl=\"$1\"\n\tllen=${#l}\n\tllen2=${llen/3}\n\tlist2=\"$(echo\
    \ $l | sed 's/ /, /g')\"\n\t# first step is to separate out the indicies that\
    \ should be sorted\n\tlist2=\"$(echo $list2 | sed 's/^/1, /; s/ /, /')\n\tlist3=\"\
    $(echo $list2 | sed 's/^/0, /; s/ /, /')\n\t# then sort by indicies that should\
    \ be sorted\n\tlist3=\"$(echo $list3 | sed 's/^/2, /; s/ /, /')\n\tlist4=\"$(echo\
    \ $list3 | sed 's/^/0, /; s/ /, /')\n\t# then sort by values at the indicies that\
    \ should be sorted\n\tlist4=\"$(echo $list4 | sed 's/^/1/; s/ /, /')\n\tlist5=\"\
    $(echo $list4 | sed 's/^/2/; s/ /, /')\n\t# then remove the unwanted indicies\n\
    \tlist5=\"${list5%?}\"\n\t# finally sort by indicies that are divisible by three\n\
    \tlist5=\"${list5#?}\"\n\tlist5=\"${list5%?}\"\n\tlist5=\"${list5#?}\"\n\t# print\
    \ out the sorted list\n\techo \"$list5\n\tlist5=$list4\n\tlist5=$list3\n\tlist5=$list2\n\
    \tlist5=$list\n\tlist5=$list\n\tlist5=$list\n\tlist5=$list\"\n}\n\ncandidate()\
    \ {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\
    \ 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\"\
    ) = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8\
    \ 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n  l=$1\n  i=0\n\
    \  declare -A a\n  for i in {0..${#l[@]}}; do\n    (( ! (i % 3)) )) && let a[$i]+=$i\n\
    \  done\n  for j in {0..${#l[@]}}; do\n    (( ${l[j]} != ${a[j]} )) && let a[$j]+=$j\n\
    \  done\n  for i in {0..${#a[@]}}; do\n    (( ! (i % 3)) )) && let l[${a[i]}]-=$i\n\
    \  done\n  for i in {0..${#a[@]}}; do\n    (( ${a[i]} != ${a[i+1]} )) && let l[${a[i]}]-=$i+1\n\
    \  done\n  for i in {0..${#a[@]}}; do\n    (( ${a[i]} != ${a[i-1]} )) && let l[${a[i]}]-=$i-1\n\
    \  done\n  for i in {0..${#a[@]}}; do\n    (( ${a[i]} != ${a[-i]} )) && let l[${a[i]}]-=$i\n\
    \  done\n  for i in {0..${#a[@]}}; do\n    (( ${a[i]} != ${a[${#a[@]} + i-1]}\
    \ )) && let l[${a[i]}]-=$i\n  done\n  for i in {0..${#a[@]}}; do\n    (( ${a[i]}\
    \ != ${a[${#a[@]} + i+1]} )) && let l[${a[i]}]-=$i\n  done\n  for i in {0..${#a[@]}};\
    \ do\n    (( ${a[i]} != ${a[${#a[@]} + ${#a[@]} + i-1]} )) && let l[${a[i]}]-=$i\n\
    \  done\n  for i in {0..${#a[@]}}; do\n    (( ${a[i]} != ${a[${#a[@]} + ${#a[@]}\
    \ + i+1]} )) && let l[${a[i]}]-=$i\n  done\n  for i in {0..${#a[@]}}; do\n   \
    \ (( ${a[i]} != ${a[${#a[@]} + ${#a[@]} + ${#a[@]} + i-1]} )) && let l[${a[i]}]-=$i\n\
    \  done\n  for i in {0..${#\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\"\
    \ ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate\
    \ \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9\
    \ 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp__7qzyaf.sh: line 16: syntax error near unexpected token `)''

    /tmp/tmp__7qzyaf.sh: line 16: `    (( ! (i % 3)) )) && let a[$i]+=$i''

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local L=\"\
    $1\"\n    local i i2 i3 i4 i5 i6 i7 i8 i9 i10 i11\n\n    echo \"${L}\" | {\n \
    \       if [[ $# -eq 0 ]]\n        then\n            echo \"No arguments passed\"\
    \n            echo \"Usage: $0 [space-separated list]\"\n            echo \"Example:\
    \ $0 a b c d e\"\n            exit 1\n        fi\n\n        i=1\n        while\
    \ [[ $i -lt $#3 ]]\n        do\n            echo \"${L}\" | awk -v ind=\"${i}\"\
    \ '{\n                if (( $ind % 3 ))\n                then\n              \
    \      i3[$ind]\n                else\n                    i4[$ind]\n        \
    \        fi\n            }'\n            ((i++))\n        done\n\n        i=1\n\
    \        while [[ $i -lt $#3 ]]\n        do\n            echo \"${L}\" | awk -v\
    \ ind=\"${i}\" '{\n                if (( $ind % 3 ))\n                then\n \
    \                   i5[$ind]\n                else\n                    i6[$ind]\n\
    \                fi\n            }'\n            ((i++))\n        done\n\n   \
    \     i=1\n        while [[ $i -lt $#3 ]]\n        do\n            echo \"${L}\"\
    \ | awk -v ind=\"${i}\" '{\n                if (( $ind % 3 ))\n              \
    \  then\n                    i7[$ind]\n                else\n                \
    \    i8[$ind]\n                fi\n            }'\n            ((i++))\n     \
    \   done\n\n        i=1\n        while [[ $i -lt $#3 ]]\n        do\n        \
    \    echo \"${L}\" | awk -v ind=\"${i}\" '{\n                if (( $ind % 3 ))\n\
    \                then\n                    i9[$ind]\n                else\n  \
    \                  i10[$ind]\n                fi\n            }'\n           \
    \ ((i++))\n        done\n\n        i=1\n        while [[ $i -lt $#3 ]]\n     \
    \   do\n            echo \"${L}\" | awk -v ind=\"${i}\" '{\n                if\
    \ (( $ind % 3 ))\n                then\n                    i11[$ind]\n      \
    \          else\n                    i10[$ind]\n                fi\n         \
    \   }'\n            ((i++))\n        done\n    }\n\n    local i3 i4 i5 i6 i7 i8\
    \ i9 i10 i11\n\n    for i3 in \"${i3[@]}\"; do\n        echo \"${L}\" | awk -v\
    \ ind=\"${i3}\" '{\n            if (i3==ind\n}\n\ncandidate() {\n    sort_third\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"\
    2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\"\
    \ ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate\
    \ \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbkaf8g4s.sh: line 98: unexpected EOF while looking for matching
    `''''

    /tmp/tmpbkaf8g4s.sh: line 115: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n\tlocal l n i\n\
    \tread -r -a l <<<\"$1\"\n\tn=${#l[@]}\n\tfor (( i=0; i<n-1; i++ )); do\n\t\t\
    (( i % 3 )) && l[$i]=\"${l[$i]}\"\n\tdone\n\tsort --nocheck-order <<<\"${l[@]}\"\
    \n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"\
    5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\"\
    ) = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4\
    \ 8 9 5 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: unrecognized option ''--nocheck-order''

    Try ''sort --help'' for more information.

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n  # Split the input\
    \ into an array where each element is separated by spaces.\n  IFS=$' ' read -r\
    \ -a l <<< \"$1\"\n  # Reverse the array and sort it.\n  l1=${l[@]}\n  l1=(${l1[@]//,/\
    \ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n\
    \  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n\
    \  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/\
    \ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n\
    \  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n\
    \  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/\
    \ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n\
    \  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n\
    \  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(${l1[@]//,/ })\n  l1=${l1[@]}\n  l1=(\n\
    }\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9\
    \ 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9\
    \ 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph0c5mijx.sh: line 61: syntax error near unexpected token `(''

    /tmp/tmph0c5mijx.sh: line 61: `candidate() {''

    /tmp/tmph0c5mijx.sh: line 62: sort_third: command not found

    /tmp/tmph0c5mijx.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmph0c5mijx.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n\tlocal l l'\n\n\
    \tset -- $1\n\n\tl=( $1 )\n\n\tfor i in ${!l[@]}\n\tdo\n\t\t(( $i % 3 )) && l'[$i]=\"\
    ${l[$i]}\"\n\tdone\n\tunset i\n\n\tfor i in ${!l[@]}\n\tdo\n\t\tl[$i]=$(( l[$i]\
    \ / 3 ))\n\tdone\n\n\tsort -nr <<< \"${l[@]}\"\n}\n\ncandidate() {\n    sort_third\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"\
    2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\"\
    \ ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate\
    \ \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpz2v24_ei.sh: line 21: syntax error near unexpected token `done'\n\
    /tmp/tmpz2v24_ei.sh: line 21: `\tdone'\n"
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local a=${1}\n\
    \    local b=${2}\n    local c=1\n    local d=0\n\n    while [ $c -le ${#a} ]\n\
    \    do\n        [ $(( $c % 3 )) -ne 0 ] && {\n            # sort by increasing\
    \ value of third digit\n            local e=$(( $c % 3 ))\n            local f=${a[$d]}\n\
    \            a[$d]=$e\n            a[$d]=$f\n            [[ \"$d\" -eq \"${#a}\"\
    \ ]] && break\n        }\n\n        [ $c -eq ${#a} ] && {\n            echo $a\n\
    \            echo \"done\"\n            break\n        }\n\n        local f=${a[$d]}\n\
    \        a[$d]=$f\n        (( d++ ))\n        c=$(( $c+1 ))\n    done\n\n    echo\
    \ $a\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate\
    \ \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3\
    \ 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6\
    \ 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    # Read in list\
    \ from first argument\n    read -a list <<< $1\n    length=${#list[@]}\n\n   \
    \ # Loop to find the indicies at which we should sort\n    for i in $(seq 0 $((length-1)));\
    \ do\n        # Do we still need to sort?\n        if [[ $((i%3)) -ne 0 ]]; then\n\
    \            continue\n        fi\n\n        # Store values in list\n        third=${list[i]}\n\
    \        value=${list[i+1]}\n\n        # Sort only if the values are different,\
    \ otherwise continue as usual\n        if [[ \"$third\" != \"$value\" ]]; then\n\
    \            sort -n <<< \"$third $value\"\n            ((i=i+2))\n          \
    \  continue\n        fi\n\n        # Otherwise, continue as usual\n        ((i=i+2))\n\
    \    done\n\n    # Return sorted list to caller\n    echo \"${list[*]}\"\n}\n\n\
    candidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9\
    \ 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9\
    \ 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local _l _newL\n\
    \    set -l\n    for _i in $1 ; do\n        if [ \"$_i\" -eq \"$(($_i/3))\" ];\
    \ then\n            continue 2\n        fi\n        echo \"$_i\"\n    done\n}\n\
    \ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9\
    \ 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9\
    \ 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu3k0shrw.sh: line 13: set: -l: invalid option

    set: usage: set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n\tlocal a b c d\
    \ e f g h i\n\ta=( \"${!1}\" )\n\ti=${#a[@]}\n\t[ \"$i\" -gt 1 ] || return\n\t\
    b=$(( 3 * i ))\n\tc=$(( 2 * i ))\n\td=${#a[@]}\n\t[ \"$d\" -gt 0 ] && e=$(( d\
    \ - 1 ))\n\tf=$(( b - d ))\n\tg=$(( b - c ))\n\th=${#a[@]}\n\t[ \"$h\" -gt 0 ]\
    \ && j=$(( h - 1 ))\n\tk=$(( b - h ))\n\twhile true; do\n\t\t[[ \"$i\" -gt \"\
    $g\" ]] && break 3\n\t\t[[ \"$i\" -lt \"$h\" ]] && break 2\n\t\ta[$i]=$(( b -\
    \ i ))\n\t\ti=$(( i + 1 ))\n\tdone\n\tfor i in $(seq 0 $e); do\n\t\t[[ $k -lt\
    \ $i ]] && break\n\t\ta[$i]=$(( b - i ))\n\t\ti=$(( i + 1 ))\n\tdone\n\tfor i\
    \ in $(seq 0 $f); do\n\t\t[[ $k -lt $i ]] && break\n\t\ta[$i]=$(( b - i ))\n\t\
    \ti=$(( i + 1 ))\n\tdone\n\tfor i in $(seq 0 $j); do\n\t\t[[ $k -lt $i ]] && break\n\
    \t\ta[$i]=$(( b - i ))\n\t\ti=$(( i + 1 ))\n\tdone\n\tfor i in $(seq 0 $k); do\n\
    \t\t[[ $k -lt $i ]] && break\n\t\ta[$i]=$(( b - i ))\n\t\ti=$(( i + 1 ))\n\tdone\n\
    \tfor i in $(seq 0 $c); do\n\t\t[[ $k -lt $i ]] && break\n\t\ta[$i]=$(( b - i\
    \ ))\n\t\ti=$(( i + 1 ))\n\tdone\n\tfor i in $(seq 0 $d); do\n\t\t[[ $k -lt $i\
    \ ]] && break\n\t\ta[$i]=$(( b - i ))\n\t\ti=$(( i + 1 ))\n\tdone\n\tfor i in\
    \ $(seq 0 $h); do\n\t\t[[ $k -lt $i ]] && break\n\t\ta[$i]=$(( b - i ))\n\t\t\
    i=$(( i + 1 ))\n\tdone\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n \
    \   [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate\
    \ \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9\
    \ 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjl9ldlsp.sh: line 13: 5 6 3 4 8 9 2: invalid variable name

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n  local tmp i\n\
    \  local list=\"$1\"\n  local result\n  result=()\n  for i in \"${list[@]}\";\
    \ do\n    if ((i % 3) == 0)\n    then\n      tmp=${list[i]}\n      list[i]=${list[i+1]}\n\
    \      list[i+1]=$tmp\n    fi\n    IFS= read -r -a result <<< \"$list\"\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\"\
    \ ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate\
    \ \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9\
    \ 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpslzcxf0q.sh: line 17: syntax error near unexpected token `==''

    /tmp/tmpslzcxf0q.sh: line 17: `    if ((i % 3) == 0)''

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 2
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local l l'\
    \ i i j l j l l k l l1 l2 l3 l l4 l5 l6 l7 l8 l9 l10\n    for (( j=0; j<${#1};\
    \ j++ )); do\n        l=\"${1}[j]\"\n        l1=\"${1}[j-1]\"\n        l2=\"${1}[j-2]\"\
    \n        l3=\"${1}[j-3]\"\n        l4=\"${1}[j-4]\"\n        l5=\"${1}[j-5]\"\
    \n        l6=\"${1}[j-6]\"\n        l7=\"${1}[j-7]\"\n        l8=\"${1}[j-8]\"\
    \n        l9=\"${1}[j-9]\"\n        l10=\"${1}[j-10]\"\n        i=\"$(( j-2 ))\"\
    \n        j=\"$(( j-3 ))\"\n        k=\"$(( j-4 ))\"\n        l=\"${1}[j]\"\n\
    \        l=\"${1}[j-1]\"\n        l=\"${1}[j-2]\"\n        l=\"${1}[j-3]\"\n \
    \       l=\"${1}[j-4]\"\n        l=\"${1}[j-5]\"\n        l=\"${1}[j-6]\"\n  \
    \      l=\"${1}[j-7]\"\n        l=\"${1}[j-8]\"\n        l=\"${1}[j-9]\"\n   \
    \     l=\"${1}[j-10]\"\n        l=\"${1}[j-1]\"\n        l=\"${1}[j-2]\"\n   \
    \     l=\"${1}[j-3]\"\n        l=\"${1}[j-4]\"\n        l=\"${1}[j-5]\"\n    \
    \    l=\"${1}[j-6]\"\n        l=\"${1}[j-7]\"\n        l=\"${1}[j-8]\"\n     \
    \   l=\"${1}[j-9]\"\n        l=\"${1}[j-10]\"\n        l=\"${1}[j]\"\n       \
    \ l=\"${1}[j-1]\"\n        l=\"${1}[j-2]\"\n        l=\"${1}[j-3]\"\n        l=\"\
    ${1}[j-4]\"\n        l=\"${1}[j-5]\"\n        l=\"${1}[j-6]\"\n        l=\"${1}[j-7]\"\
    \n        l=\"${1}[j-8]\"\n        l=\"${1}[j-9]\"\n        l=\"${1}[j-10]\"\n\
    \        l=\"${1}[j-1]\"\n        l=\"${1}[j-2]\"\n        l=\"${1}[j-3]\"\n \
    \       l=\"${1}[j-4]\"\n        l=\"${1}[j-5]\"\n        l=\"${1}[j-6]\"\n  \
    \      l=\"${1}[j-7]\"\n        l=\"${1}[j-8]\"\n        l=\"${1}[j-9]\"\n   \
    \     l=\"${1}[j-10]\"\n        l=\"${1}[j]\"\n        l=\"${1}[j-1]\"\n     \
    \   l=\"${1}[j-2]\"\n        l=\"${1}[j-3]\"\n        l=\"${1}[j-4]\"\n      \
    \  l=\"${1}[j-\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate\
    \ \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3\
    \ 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6\
    \ 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4ya1epz8.sh: line 12: unexpected EOF while looking for matching
    `''''

    /tmp/tmp4ya1epz8.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=\"$1\"\
    \n  local i=0\n  while [ $i -lt ${#l} ]; do\n    if [ ${l[$i]} -eq ${l[$((i%3))]}\
    \ ]; then\n      l[$i]=$((${l[$i]} + ${l[$((i%3))]}))\n    fi\n    ((i++))\n \
    \ done\n  echo ${l[@]}\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n \
    \   [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate\
    \ \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9\
    \ 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpotz9wxtc.sh: line 15: [: too many arguments

    /tmp/tmpotz9wxtc.sh: line 16: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=\"$1\"\
    \n  local length=\"$(( ${#l} / 3 ))\"\n  local i\n  for (( i = 0; i < $length;\
    \ i++ )); do\n    local j=$(( i + 1 ))\n    if [[ ${l[i]} -gt ${l[j]} ]]; then\n\
    \      l[$j]=\"${l[i]}\"\n      l[i]=\"${l[j]}\"\n    fi\n  done\n  sort -n \"\
    ${l[@]}\"\n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate\
    \ \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3\
    \ 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6\
    \ 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpimkaselm.sh: line 17: [[: 5 6 3 4 8 9 2: syntax error in expression
    (error token is "6 3 4 8 9 2")

    sort: cannot read: ''5 6 3 4 8 9 2'': No such file or directory

    '
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n    local indicies\n\
    \    indicies=( $1 )\n    local j=0\n    for i in \"${!indicies[@]}\"; do\n  \
    \      (( i % 3 )) && continue\n        indicies[i]=$j\n        j=$(( j + 1 ))\n\
    \    done\n    echo ${indicies[*]}\n}\n\ncandidate() {\n    sort_third \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8\
    \ 9 5\" ]]\n    [[ $(candidate \"5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n   \
    \ [[ $(candidate \"5 6 9 4 8 3 2\") = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate\
    \ \"5 6 3 4 8 9 2 1\") = \"2 6 3 4 8 9 5 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054664
- exit_code: 1
  program: "#!/bin/bash\n# This function takes a list l and returns a list l' such\
    \ that\n# l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n# to\
    \ the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1,\
    \ 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4,\
    \ 8, 9, 5]\n#\n# $1 is a space-separated list\nsort_third() {\n\tlocal l=\"$1\"\
    \n\tlocal len=\"$(${#l[@]})\"\n\tlocal thirds=(\"${!l[@]:3}\")\n\tlocal result=\"\
    $(for ((i = 0; i < len; i++)); do echo \"${l[i]}\"; done | sort -nk ${thirds[@]})\"\
    \n}\n\ncandidate() {\n    sort_third \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5 6 3 4 8 9 2\") = \"2 6 3 4 8 9 5\" ]]\n    [[ $(candidate \"\
    5 8 3 4 6 9 2\") = \"2 8 3 4 6 9 5\" ]]\n    [[ $(candidate \"5 6 9 4 8 3 2\"\
    ) = \"2 6 9 4 8 3 5\" ]]\n    [[ $(candidate \"5 6 3 4 8 9 2 1\") = \"2 6 3 4\
    \ 8 9 5 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe3rrk3sj.sh: line 13: 1: command not found

    /tmp/tmpe3rrk3sj.sh: line 14: 5 6 3 4 8 9 2: invalid variable name

    '
  stdout: ''
  timestamp: 1660054664
