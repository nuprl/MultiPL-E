name: HumanEval_145_order_by_points
language: sh
prompt: "#!/bin/bash\n# Write a function which sorts the given list of integers\n\
  # in ascending order according to the sum of their digits.\n# Note: if there are\
  \ several items with similar sum of their digits,\n# order them based on their index\
  \ in original list.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11]\n# >>> order_by_points([]) == []\n#\n# $1 is a space-separated\
  \ list\norder_by_points() {\n"
tests: "}\n\ncandidate() {\n    order_by_points \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"1 11 -1 -11 -12\") = \"-1 -11 1 -12 11\" ]]\n    [[ $(candidate\
  \ \"1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46\") = \"0 2 3 6 53 423 423\
  \ 423 1234 145 37 46 56 463 3457\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
  \ $(candidate \"1 -11 -32 43 54 -98 2 -3\") = \"-3 -32 -98 -11 1 2 43 54\" ]]\n\
  \    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11\") = \"1 10 2 11 3 4 5 6 7 8 9\" ]]\n\
  \    [[ $(candidate \"0 6 6 -76 -21 23 4\") = \"-76 -21 0 4 23 6 6\" ]]\n}\n\nrun_test"
completions: ['  # write your code', "    local inlist=$1\n    local sum=0\n    local\
    \ i\n    # Store list of elements with same sum of digits in an array.\n    #\
    \ This is done by sorting the list and then iterating through\n    # the array\
    \ to find the first element with the same sum\n    local i_list=($(echo \"${inlist}\"\
    \ | tr \" \" \"\\n\" | sort -n))\n    for ((i=0; i<${#i_list[@]}; i++)) ; do\n\
    \        sum=$(expr $sum + ${i_list[i]})\n    done\n    # Now sort list according\
    \ to the sum\n    # This is done by sorting elements based on their index in original\
    \ list\n    local out_list=($(echo \"${inlist}\" | tr \" \" \"\\n\" | sort -n\
    \ | sort -k 2 -g))\n    for ((i=0; i<${#out_list[@]}; i++)) ; do\n        (( sum\
    \ -= ${out_list[i]} ))\n        echo \"${out_list[i]}\"\n    done", "    local\
    \ i=1\n    local sum\n    local tmp\n    local sorted=0\n\n    while [[ $i -le\
    \ ${#1[@]} ]]; do\n        sum=${1[i]}\n        tmp=${1[i]}\n        (( i++ ))\n\
    \n        if [[ $sum -eq 0 ]]; then\n            sorted=1\n            break\n\
    \        fi\n\n        while [[ $tmp -eq 0 ]]; do\n            tmp=${1[i]}\n \
    \           (( i++ ))\n        done\n\n        if [[ $tmp -gt $sum ]]; then\n\
    \            tmp=$sum\n        fi\n\n        sorted=0\n        (( i++ ))\n   \
    \ done\n\n    if [[ $sorted -eq 1 ]]; then\n        for j in `seq 1 ${i}`; do\n\
    \            tmp=${1[i]}\n            (( i++ ))\n\n            while [[ $tmp -eq\
    \ 0 ]]; do\n                tmp=${1[i]}\n                (( i++ ))\n         \
    \   done\n            tmp=$((tmp*10))\n            if [[ $tmp -gt $sum ]]; then\n\
    \                tmp=$sum\n            fi\n            sorted=0\n            ((\
    \ i++ ))\n        done\n    fi\n    for j in `seq 1 ${i}`; do\n        echo ${1[j]}\n\
    \    done", "    local -r lines=$1;\n    local i num\n    local -a sorted_list;\n\
    \    local -A sums_by_digit\n\n    # Sort the input list\n    while IFS= read\
    \ -r line; do\n        # Iterate over all numbers in input list\n        for ((i\
    \ = 0; i < ${#lines[@]}; i++)); do\n            # Sum up all the digits in current\
    \ number\n            num=${lines[$i]}\n            sums_by_digit[$((num % 10))]=$((num\
    \ % 10))\n            ((num/= 10))\n        done\n\n        # Create a \"virtual\"\
    \ list with sums\n        # in sorted order\n        sorted_list+=(\"${!sums_by_digit[@]}\"\
    )\n    done < <(printf '%s\\n' \"${lines[@]}\" | \\\n             sort -n -k 2\
    \ \\\n                 | awk '{printf \"%d \", $1}')\n\n    # Sort sums according\
    \ to ascending order\n    local j=0\n    while [[ $j -lt ${#sorted_list[@]} ]];\
    \ do\n        let \"sums_by_digit[sorted_list[j]] += sums_by_digit[sorted_list[j+1]];\
    \ j+=2\"\n    done\n\n    # Re-order the original list with sums\n    # in ascending\
    \ order\n    for ((i = 0; i < ${#lines[@]}; i++)); do\n        ((num = $sums_by_digit[$((${lines[$i]}\
    \ % 10))]))\n        lines[$i]=${num}\n    done\n\n    # Return an ordered list\n\
    \    printf '%s\\n' \"${lines[@]}\"", "  local input=\"$1\"\n  local result\n\
    \  # sort using tail -r\n  result=$(tail -r \"$input\" | sort -n)\n  # sort using\
    \ head\n  result=$(head -r \"$input\" | sort -n)\n  # sort using awk\n  result=$(echo\
    \ \"$input\" | awk '{n=split($0, arr, \"[[:digit:]]\"); asort(arr); for(i=1;i<n;i++){print\
    \ arr[i]}}')\n  # sort using sort.sh\n  result=$(sort -n \"$input\")\n  return\
    \ \"$result\"", "    local -r points=\"${1}\"\n    local -n arr=( )\n    local\
    \ var\n    local sum\n    local i\n    local cnt\n    local tmp\n    for cnt in\
    \ \"${points[@]}\"; do\n        tmp=$(( cnt % 10 ))\n        sum=$(( sum + tmp\
    \ ))\n        arr+=( \"${sum}\" )\n        (( cnt /= 10 ))\n    done\n    for\
    \ ((i = 0; i < ${#points[@]}; ++i)); do\n        if [[ ${arr[i]} -gt ${arr[i+1]}\
    \ ]]; then\n            tmp=${arr[i]}\n            arr[i]=${arr[i+1]}\n      \
    \      arr[i+1]=${tmp}\n        fi\n    done\n    echo \"${arr[@]}\"", "    local\
    \ -n arr=$1\n    local -n sum\n\n    # create dictionary to store sum of points\n\
    \    sum=()\n    for i in ${!arr[@]}; do\n        sum+=(\"$i\")\n    done\n  \
    \  \n    # sort by sum of points\n    sort -n -k 2 <<<\"${sum[*]}\"", "    local\
    \ LIST\n    LIST=\"$1\"\n    local SCORE\n    SCORE=$(echo \"$LIST\" | sed 's/^[\
    \ ]*//g;s/[ ]*$//g')\n    local INDEX\n    INDEX=$(echo \"$LIST\" | sed 's/^[\
    \ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g')\n    local TMP\n    TMP=$(echo \"$LIST\"\
    \ | sed 's/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[\
    \ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[\
    \ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[\
    \ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[\
    \ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[\
    \ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[\
    \ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[\
    \ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[\
    \ ]*$//g;s/^[ ]*//g;s/[ ]*$//g;s/^[ ]*//g;s/[ ]*$//g", "  local IFS=$'\\n'  #\
    \ Input field separator to the variable IFS.\n  local sum=()                #\
    \ Sum of digits stored in variable sum.\n  local n=0                    # Number\
    \ of input integers stored in variable n.\n  local a=0                    # Array\
    \ variable which will hold input integers.\n  local b=0                    # Array\
    \ variable which will hold indexes of input integers.\n  local digit=0       \
    \        # Array variable which will hold digits of the current integer.\n  local\
    \ index=0               # Array variable which will hold index of current integer.\n\
    \  local res=\"\"                # Result variable which will hold the sorted\
    \ list.\n\n  a=( $1 )\n  n=$(( ${#a[@]} - 1 ))\n  for i in \"${!a[@]}\"; do\n\
    \    (( b++ ))\n    digit=$(expr $i % 10)\n    sum[$digit]+=$digit\n    res=\"\
    $res ${a[$index]}\"\n    ((a[$index])=$(( (${sum[$digit]}*10) + ${a[$index]})\
    \ ))\n    (( index++ ))\n  done\n  echo \"$res\"", "    local sorted_list=\"\"\
    \n    local sum\n    local len\n    local index\n    local i\n\n    IFS=\"\n\"\
    \ read -ra ADDR <<< \"$1\"\n    # Sort all elements according to their sum of\
    \ their digits\n    for (( i = 0; i < ${#ADDR[@]}; i++ )); do\n        sum=0\n\
    \        len=${#ADDR[i]}\n        for (( j = 0; j < len; j++ )); do\n        \
    \    (( sum += ${ADDR[i][j]} ))\n        done\n        [[ ${sum} -gt 0 ]] || continue\n\
    \        index=\"${i}\"\n        ADDR[i]=()\n        ADDR[i]=(\"${ADDR[i][@]}\"\
    \ \"$index\")\n    done\n\n    IFS=\n    for i in ${!ADDR[@]}; do\n        sorted_list+=\"\
    ${ADDR[i][$((${i}%2))]}\" \"${ADDR[i][$((${i}%2))+1]}\"\n    done\n    echo \"\
    $sorted_list\"", "    local items=$1\n    local sum=0\n    local count=0\n   \
    \ local tmp\n    local sorted\n    local i\n\n    # initialize sum and count\n\
    \    for i in ${items[@]}; do\n        sum=$((sum+i))\n        count=$((count+1))\n\
    \    done\n\n    sorted=()\n    # sort items based on their sum of digits and\
    \ index\n    for i in ${items[@]}; do\n        tmp=$((i%10))\n        sorted[$i]=$((sum+tmp))\n\
    \        sum=$((sum+tmp))\n        count=$((count-1))\n    done\n\n    # sort\
    \ them based on the sorted index\n    for i in \"${!sorted[@]}\"; do\n       \
    \ sorted[$i]=${sorted[$i]}\n    done\n\n    # return the sorted list\n    echo\
    \ \"${sorted[@]}\"", "  local list=(\"${1}\")\n  local sorted_list=\"\"\n  local\
    \ sorted_index=\"\"\n  local i=0 j=0\n  while [ $i -lt ${#list[*]} ]; do\n   \
    \ sorted_index=\"${sorted_index}${i}\"\n    sorted_list=\"${sorted_list}${list[$i]}\"\
    \n    (( ++i ))\n  done\n  local length=\"${#sorted_list}\"\n  while [ $j -lt\
    \ $length ]; do\n    local index=0\n    local value=0\n    while [ $index -lt\
    \ $length ] && [ $value -lt 10 ]; do\n      local next_digit=${sorted_index:$index:1}\n\
    \      (( value *= 10 ))\n      (( value += next_digit ))\n      (( index += 1))\n\
    \    done\n    local current_digit=${sorted_index:$index:1}\n    local sum=0\n\
    \    local sum_index=0\n    while [ $sum_index -lt $length ] && [ $sum -lt 10\
    \ ]; do\n      local next_digit=${sorted_list:$sum_index:1}\n      (( sum += next_digit\
    \ ))\n      (( sum_index += 1))\n    done\n    local result\n    if [ $sum ==\
    \ $current_digit ]; then\n      result=${sorted_index:$index:1}\n    fi\n    if\
    \ [ \"$result\" != \"\" ]; then\n      echo \"$result\"\n    fi\n  done", "  local\
    \ sorted_list sums\n  local i j result\n  sums=$( echo \"$1\" | tr \" \" \"\\\
    n\" | sort -n | awk '{for (i=1; i<=NF; i++) sums[i] += $i}END{for (j=1; j<=length(sums);\
    \ j++) print sums[j], j}' ) # Get sum of digits per item\n  # Sort list based\
    \ on sums\n  sorted_list=$( echo \"$1\" | tr \" \" \"\\n\" | sort -n -k${#sums[*]}\
    \ -k1n | awk '{for (i=1; i<=NF; i++) print sums[i]+$i, $i}' ) # Print list with\
    \ sum per item\n  result=$( echo \"$sorted_list\" | tr \" \" \"\\n\" ) # Remove\
    \ sums\n  echo \"$result\"", "  local digits=$(( $1 | perl -nE 'say map { /\\\
    d+/ ? length : $_ }'\n                      | sort | sed 's/^/-/g'\n         \
    \             | sed 's/-$//g') )\n  echo -n \"$digits\" | sort -n", "  local digits=$(\
    \ echo \"$1\" | sed 's/^ *//g' | sed 's/ *$//g' )\n  local sorted_digits=$( echo\
    \ \"$digits\" | sort -n | uniq )  || return 1\n  local tmp\n  local tmp_digit\n\
    \  local index=0 num_digits=${#sorted_digits[@]}\n  while [ $index -lt $num_digits\
    \ ]; do\n    tmp=${sorted_digits[index]}\n    tmp_digit=$( echo \"$tmp\" | sed\
    \ 's/^\\([0-9]*\\)$/\\1/' )\n    if [[ $tmp_digit -eq $sorted_digits[index+1]\
    \ ]]; then\n      tmp_digit=$( echo \"$tmp\" | sed 's/^\\([0-9]*\\)$/2/' )\n \
    \   fi\n    if [[ $tmp_digit -eq $sorted_digits[index-1] ]]; then\n      tmp_digit=$(\
    \ echo \"$tmp\" | sed 's/^\\([0-9]*\\)$/3/' )\n    fi\n    echo ${sorted_digits[index]:0:$((\
    \ index - 1 ))}${tmp_digit}${sorted_digits[index+1]:$(( index + 1 ))}\n    index=$((\
    \ index + 2 ))\n  done\n  echo ${sorted_digits[index]}", "  local order=''\n \
    \ local items=$1\n  local digits=`echo $items | awk -F, '{print $NF}'`\n  local\
    \ -n count=$2\n\n  for item in $items; do\n    local sum=`echo $item | awk '{print\
    \ $1*$1 + $2*$2 + $3*$3 + $4*$4}' | bc`\n    if (( sum > 0 )) ; then\n      local\
    \ tmp=${item/+/}\n      count[${tmp}]=$(( count[${tmp}] + 1 ))\n      order=`echo\
    \ $order $tmp | sed -e 's/ /+/g'`\n    fi\n  done\n\n  echo $order | sed -e 's/+/\
    \ /g' | tr ' ' '+'", '    # TODO', "  local i\n  local res\n  local -n arr=$1\n\
    \n  local -A sorted\n  for i in \"${arr[@]}\"; do\n    sorted[$i]=$((10#${i}${i}${i}))\n\
    \  done\n\n  res=${sorted[*]}\n  res=${res[@]}\n  echo \"${res[@]}\"", "    local\
    \ sorted_items=()\n    local num_digits=${1:-1000}\n    for (( i=1; i<${#num_digits};\
    \ i++ )); do\n        # Compute sum of digits of current digit\n        local\
    \ current_sum=0\n        for (( j=0; j<${num_digits:$i:1}; j++ )); do\n      \
    \      current_sum=$(( ${current_sum} * 10 ))\n            current_sum=$(( ${current_sum}\
    \ + ${num_digits:$i:$j:1} ))\n        done\n        # Put the current digit into\
    \ correct position in sorted list\n        for (( j=0; j<${#sorted_items[@]};\
    \ j++ )); do\n            [[ \"${sorted_items[j]:1}\" = \"${current_sum}\"* ]]\
    \ && break\n        done\n        sorted_items+=(\"${num_digits:$i:$j}\")\n  \
    \  done\n    # Sort list based on sum of digits\n    local new_items=()\n    local\
    \ prev_item=\"\"\n    for (( i=1; i<${#sorted_items[@]}; i++ )); do\n        [[\
    \ \"${sorted_items[i]:1}\" != \"${prev_item}\"* ]] && new_items+=(\"${prev_item}\"\
    \ \"${sorted_items[i]:1}\")\n        prev_item=\"${sorted_items[i]:1}\"\n    done\n\
    \    echo \"${new_items[*]}\"", "    local -n nums=\"$1\"\n    local sum\n   \
    \ local -a sorted_nums\n    for num in \"${nums[@]}\"; do\n        sum=0\n   \
    \     while (( num > 0 )); do\n            (( num % 10 )) && sum=$(( sum + num\
    \ % 10 ))\n            (( num = num / 10 ))\n        done\n        (( sum > 0\
    \ )) && sorted_nums[sum]=\"$num\"\n    done\n    local sorted_key=\"${sorted_nums[@]}\"\
    \n    local -n unsorted_key=\"${sorted_key[@]}\"\n    local index=0\n    local\
    \ key\n    for key in \"${unsorted_key[@]}\"; do\n        unsorted_key[$index]=\"\
    ${unsorted_key[$index]} ${key}\"\n        index=$(( $index + 1 ))\n    done\n\
    \    sort --numeric-sort --key=${sorted_key[0]}"]
stop_tokens:
- "\n}"
