language: sh
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    (( $# == 1 )) && { echo \"Usage: even_odd_count <value>\"; return 1;\
    \ }\n    (( $# == 2 )) && { echo \"Usage: even_odd_count <value> <count>\"; return\
    \ 1; }\n\n    if [[ ( $# == 1 ) && ( $1 =~ ^[0-9]+$ ) ]]; then\n        (( $#\
    \ == 1 )) && { echo \"Usage: even_odd_count <value>\"; return 1; }\n\n       \
    \ local -i cnt=0\n        local -i even=0\n        local -i odd=0\n        local\
    \ -i num=$1\n\n        while [[ $num ]]; do\n            case $num in\n      \
    \      0)\n                return 1\n                ;;\n            *)\n    \
    \            even=$(( $even + $(( $num % 10 )) ))\n                odd=$(( $odd\
    \ + $(( $num % 2 )) ))\n                num=$(( $num / 10 ))\n               \
    \ cnt=$(( $cnt + 1 ))\n                ;;\n            esac\n        done\n\n\
    \        (( $cnt % 2 )) && { echo \"ERROR: Invalid input value\"; return 1; }\n\
    \n        echo \"$even / $odd\"\n    fi\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local digit=$1\n    local count=0\n    while [ $digit -gt 0 ]; do\n \
    \       digit=$(( $digit/10 ))\n        count=$(( $count+1 ))\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local i\n    local even\n    local odd\n    local n\n\n    # check if\
    \ integer is positive\n    if [ ${1} -ge 0 ]; then\n        i=$1\n    else\n \
    \       echo \"invalid input\"\n        exit 0\n    fi\n    # check if integer\
    \ is 0 or 1\n    if [ ${i} -eq 0 ]; then\n        echo \"invalid input\"\n   \
    \     exit 0\n    fi\n    # find number of even and odd digits\n    n=$(echo \"\
    ${i}\" | bc)\n    # check if number of even and odd digits are 0\n    if [ ${n}\
    \ -eq 0 ]; then\n        echo \"invalid input\"\n        exit 0\n    fi\n    #\
    \ find even digits\n    even=$(echo \"${i}\" | awk '{print ($2 % 2)}')\n    #\
    \ find odd digits\n    odd=$(echo \"${i}\" | awk '{print ($2 % 2)}')\n    # return\
    \ tuple with number of even and odd digits\n    echo -en '('\n    echo \"${n}\"\
    \n    echo ', '\n    echo \"${even}\"\n    echo ', '\n    echo \"${odd}\"\n  \
    \  echo ')'\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even=0\n  local odd=0\n  if (( number < 0)); then\n\
    \    number=-number\n    shift\n  fi\n  while (( number > 0 )); do\n    (( number\
    \ > 0 )) && odd++\n    (( number % 2 )) && even++\n    number=$(( number / 2 ))\n\
    \  done\n  printf \"(%d, %d)\\n\" $even $odd\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpliovmuwb.sh: line 17: odd++: command not found

    /tmp/tmpliovmuwb.sh: line 18: even++: command not found

    /tmp/tmpliovmuwb.sh: line 17: odd++: command not found

    /tmp/tmpliovmuwb.sh: line 18: even++: command not found

    /tmp/tmpliovmuwb.sh: line 17: odd++: command not found

    /tmp/tmpliovmuwb.sh: line 18: even++: command not found

    '
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local val=$1\n  local cnt\n\n  cnt=$(echo \"$val\" | awk '{print ($1 %\
    \ 2 == 0 ? \"even\" : \"odd\")}')\n  echo \"$cnt\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local n=$1\n  local even=0\n  local odd=0\n  for (( i = 1; i <= $n; i++\
    \ )); do\n    (( n % 2 == 0 )) && even=$((even+1))\n    (( n % 2 != 0 )) && odd=$((odd+1))\n\
    \  done\n  echo -n \"even:\"\n  echo $even\n  echo -n \"odd:\"\n  echo $odd\n\
    }\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n\
    \    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"\
    3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"\
    -2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    # Your code here\n    echo $(( $1 / 10 ))\n    echo $(( $1 % 10 ))\n\
    }\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n\
    \    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"\
    3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"\
    -2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    echo \"$1\"\n    echo \"$1\"\n    local even\n    local odd\n    local\
    \ count\n\n    # convert to string to remove white spaces\n    local my_str=$1\n\
    \    my_str=${my_str//[[:space:]]/}\n\n    if [[ \"$my_str\" =~ ([0-9]+) ]]\n\
    \    then\n        even=$((${BASH_REMATCH[1]}))\n        odd=$((${my_str#$1}))\n\
    \        count=$((${even}+${odd}))\n    else\n        echo 'Parameter Error'\n\
    \    fi\n\n    echo \"$count\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n  local even_count=0\n  local odd_count=0\n\n  for i in\
    \ $(seq 0 9 );do\n    local test_number=$(( $number/$i ))\n    (( $test_number\
    \ % 2 == 0 )) && even_count=$(( $even_count + 1 ))\n    (( $test_number % 2 !=\
    \ 0 )) && odd_count=$(( $odd_count + 1 ))\n  done\n\n  echo -n \"(\"\n  (( even_count\
    \ > 0 )) && echo -n $even_count\n  (( odd_count > 0 )) && echo -n \", \" $odd_count\n\
    \  echo \")\"\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"\
    1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
    \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxrg4aaud.sh: line 14: 7/0 : division by 0 (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local x=\"$1\"\n    local n=\"$(( x ))\"\n    local even_odd=0\n    while\
    \ [ $n -gt 0 ]; do\n        [ \"$(( (n % 2) != 0 ))\" -eq 0 ] && (( even_odd++\
    \ ))\n        [ \"$(( (n % 2) != 0 ))\" -eq 1 ] && (( even_odd-- ))\n        ((\
    \ n-- ))\n    done\n    echo \"$even_odd\"\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local n=\"$1\"\n    local evens=0\n    local odds=0\n    while [ \"${n}\"\
    \ -gt 0 ] ; do\n        local c=\"${n}\"\n        n=$(( ${n} / 10 ))\n       \
    \ if [ ${n} == 0 ] ; then\n            evens=$(( ${evens} + 1 ))\n        fi\n\
    \    done\n    while [ \"${n}\" -lt 0 ] ; do\n        local c=\"${n}\"\n     \
    \   n=$(( ${n} / 10 ))\n        if [ ${n} == 0 ] ; then\n            odds=$((\
    \ ${odds} + 1 ))\n        fi\n    done\n    echo \"(${evens}, ${odds})\"\n}\n\n\
    candidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local number=$1\n    local even_odd\n\n    even_odd=$(echo $number |\
    \ sed 's/\\(.\\).*\\(.\\)/\\2 \\1/')\n\n    if [ \"$even_odd\" == \"00 00\" ];\
    \ then\n        echo \"0\"\n    elif [ \"$even_odd\" == \"00 10\" ]; then\n  \
    \      echo \"1\"\n    elif [ \"$even_odd\" == \"10 00\" ]; then\n        echo\
    \ \"2\"\n    elif [ \"$even_odd\" == \"10 10\" ]; then\n        echo \"3\"\n \
    \   elif [ \"$even_odd\" == \"11 00\" ]; then\n        echo \"4\"\n    elif [\
    \ \"$even_odd\" == \"11 10\" ]; then\n        echo \"5\"\n    elif [ \"$even_odd\"\
    \ == \"01 10\" ]; then\n        echo \"6\"\n    elif [ \"$even_odd\" == \"01 01\"\
    \ ]; then\n        echo \"7\"\n    elif [ \"$even_odd\" == \"10 01\" ]; then\n\
    \        echo \"8\"\n    elif [ \"$even_odd\" == \"10 11\" ]; then\n        echo\
    \ \"9\"\n    fi\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local n=$1\n    while (( n > 0 )) ; do\n        let \"n--\"\n       \
    \ let \"t=$n%10\"\n        let \"t--\"\n        if [ $t = 0 ]; then\n        \
    \    echo 0;\n            let \"n=$n/10\"\n            let \"n--\"\n        fi\n\
    \        let \"t=$n%10\"\n        let \"t--\"\n        if [ $t = 0 ]; then\n \
    \           echo 1;\n            let \"n=$n/10\"\n            let \"n--\"\n  \
    \      fi\n    done\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\"\
    ) = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: -1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    echo \"Input an integer to be analyzed:\"\n    read x\n    even=0\n \
    \   odd=0\n    digits=0\n    while [ \"$x\" -gt 0 ]\n    do\n        digits=`expr\
    \ $digits + 1`\n        y=$( echo $x / 10 )\n        x=$( echo $x %% 10 )\n  \
    \      if [ \"$y\" -eq 0 ]\n        then\n            even=`expr $even + 1`\n\
    \        elif [ \"$y\" -gt 0 ]\n        then\n            odd=`expr $odd + 1 `\n\
    \        fi\n    done\n\n    echo \"The even digits count is $even\"\n    echo\
    \ \"The odd digits count is $odd\"\n\n}\n\ncandidate() {\n    even_odd_count \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[\
    \ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\")\
    \ = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=30 encoding='utf-8'>
  timestamp: 1660054759
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local number=$1\n\n  while [ $number -gt 0 ]; do\n    odd=0\n    even=0\n\
    \n    for ((i=1; i<$number; i++)); do\n      ((odd+=( $number % i ))) \n     \
    \ ((even+=( $number / i ))) \n    done\n\n    number=$(($number/2))\n\n    echo\
    \ \"$even, $odd\"\n  done\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local n=$1\n    while [ $n -gt 0 ]; do\n        (( n /= 10 ))\n     \
    \   (( n %= 10 ))\n    done\n}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n   \
    \ [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\"\
    \ ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local n=$1\n  local even\n  local odd\n  while (( n > 0 )) ; do\n    ((\
    \ even++))\n    local remainder=$(( n % 10 ))\n    (( n /= 10 ))\n    (( odd++))\n\
    \  done\n  printf \"( %d, %d )\\n\" \"$even\" \"$odd\"\n}\n\ncandidate() {\n \
    \   even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"\
    3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate\
    \ \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate\
    \ \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
- exit_code: 2
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n  local n=$1\n  (( n % 2 == 0 && n > 0 )) || return (1,0)\n  (( n % 2 !=\
    \ 0 && n > 0 )) && return (0,1)\n  (( n % 2 == 0 && n > 0 )) && return (1,1)\n\
    \  (( n % 2 != 0 && n > 0 )) && return (0,0)\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyn_dv4ph.sh: line 10: syntax error near unexpected token `1,0''

    /tmp/tmpyn_dv4ph.sh: line 10: `  (( n % 2 == 0 && n > 0 )) || return (1,0)''

    '
  stdout: ''
  timestamp: 1660054754
- exit_code: 2
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local n=\"$1\"\n    local even=0\n    local odd=0\n    local i\n    for\
    \ ((i=0;i<=n/2;i++))\n    do\n        ((even+=(n%2==0)?1:0))\n        ((odd+=(n%2!=0))\n\
    \    done\n    echo $even\n    echo $odd\n}\n\ncandidate() {\n    even_odd_count\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate \"3452\") = \"2\
    \ 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[ $(candidate \"-345821\"\
    ) = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\" ]]\n    [[ $(candidate \"\
    -45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") = \"1 0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbzaqp8qj.sh: line 20: syntax error near unexpected token `}''

    /tmp/tmpbzaqp8qj.sh: line 20: `}''

    '
  stdout: ''
  timestamp: 1660054754
- exit_code: 1
  program: "#!/bin/bash\n# Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n# Example:\n# even_odd_count(-12) ==> (1,\
    \ 1)\n# even_odd_count(123) ==> (1, 2)\n#\n# $1 is an integer\neven_odd_count()\
    \ {\n    local i=$1\n    local even_count=0\n    local odd_count=0\n\n    while\
    \ (( $i < 0 )) ; do\n        (( $i % 2 == 0 )) && even_count=$even_count+1\n \
    \       (( $i % 2 == 1 )) && odd_count=$odd_count+1\n        i=$(expr $i + 1)\n\
    \    done\n\n    echo \"even: $even_count, odd: $odd_count\"\n}\n\ncandidate()\
    \ {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n    [[ $(candidate\
    \ \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"3 3\" ]]\n    [[\
    \ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\") = \"1 0\"\
    \ ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1 0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054754
