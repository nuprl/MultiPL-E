name: HumanEval_157_right_angle_triangle
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ True if the three\n# sides form a right-angled triangle, False otherwise.\n# A\
  \ right-angled triangle is a triangle in which one angle is right angle or \n# 90\
  \ degree.\n# Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1,\
  \ 2, 3) == False\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\n\
  right_angle_triangle() {\n"
tests: "}\n\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"\
  1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\"\
  \ ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"\
  7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\"\
  \ ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate\
  \ \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") =\
  \ \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test"
completions: ["\t(( $2 <= $1 || $2 > $3 )) && return 0\n\t(( $3 == $1 || $3 == $2\
    \ )) && return 0\n\t(( $1 == $3 )) && return 0\n\t(( $2 == $3 )) && return 0\n\
    \t(( $1 == $2 )) && return 0\n\t(( $1 == $3 )) && return 0\n\t(( $2 == $3 )) &&\
    \ return 0\n\t(( $1 == $2 && $2 == $3 )) && return 1\n\treturn 0", "    if ((\
    \ $# != 3 )) || (( $1 > $3 )) || (( $2 > $3 ))\n    then\n        echo \"Bad Arguments:\
    \ $1, $2, $3\"\n        echo \"Wrong number of arguments\"\n        exit 1\n \
    \   fi\n    declare -i A\n    declare -i B\n    declare -i C\n    ((A=$1))\n \
    \   ((B=$2))\n    ((C=$3))\n    ((AB_C=A+B))\n    ((AC_C=A+C))\n    if (( AB_C\
    \ == AC_C )) \n    then\n        echo \"Triangle $1 $2 $3 IS A RIGHT ANGLE TRIANGLE\"\
    \n        return 1\n    else\n        echo \"Triangle $1 $2 $3 IS NOT A RIGHT\
    \ ANGLE TRIANGLE\"\n        return 0\n    fi", "    if (( [ $1 = $3 ]) && ( [\
    \ $2 = $4 ]) && ( [ $3 = $5 ]) )\n    then\n        return 1\n    else\n     \
    \   return 0\n    fi", "    [ \"$1\" -eq \"$2\" ] && [ \"$1\" -eq \"$3\" ] &&\
    \ [ \"$2\" -eq \"$3\" ] && return 0\n    [ $(( $(echo \"$2 > $1\" | bc -l) - $(echo\
    \ \"$1 > $3\" | bc -l) )) -gt 0 ] || return 1", "\tlocal a=$1\n\tlocal b=$2\n\t\
    local c=$3\n\t\n\t[[ $a -eq 0 ]] && echo True || echo False\n\t[[ $b -eq 0 ]]\
    \ && echo True || echo False\n\t[[ $c -eq 0 ]] && echo True || echo False\n\t\n\
    \t[ $a -gt $b ] && [ $a -gt $c ] && [ $b -gt $c ] && return 1 || return 0", " \
    \ local a b c \n  a=$1\n  b=$2\n  c=$3\n\n  if (( $a < b )); then\n    if (( $b\
    \ < c )); then\n      return 0\n    elif (( $c == 0 )); then\n      return 0\n\
    \    else\n      return 1\n    fi\n  else \n    if (( $b < c )); then\n      return\
    \ 1\n    elif (( $c == 0 )); then\n      return 1\n    else\n      return 0\n\
    \    fi\n  fi", "  local a b\n  a=$1\n  b=$2\n  c=$3\n  if ((b * b <= a * c) &&\
    \ (b * b > c * a)) {\n    return 1\n  else\n    return 0\n  fi", "    local side1=$1\n\
    \    local side2=$2\n    local side3=$3\n    ((side1 < side2) && (side1 < side3))\
    \ || return 1\n    ((side2 < side3)) || return 1\n    return 0", "    local a\
    \ b c\n    a=$1\n    b=$2\n    c=$3\n    if [[ $a == $b ]] || [[ $a == $c ]] ||\
    \ [[ $b == $c ]]; then\n        return 1\n    else\n        return 0\n    fi",
  '    echo $((($1-1)*($2-2)+($3-1)))', "    a=$1\n    b=$2\n    c=$3\n    test $a\
    \ -gt $b -a $a -gt $c -a $c -gt $b -a $b -gt $a -a $c -gt $c \\\n         -a $a\
    \ -gt $c \\\n         -a $a -gt $c \\\n         -a $b -gt $a \\\n         -a $b\
    \ -gt $c \\\n         -a $c -gt $a \\\n         -a $c -gt $c \\\n         -a $b\
    \ -gt $c \\\n         -a $b -gt $a \\\n         -a $c -gt $a \\\n         -a $c\
    \ -gt $c \\\n         -a $b -gt $a \\\n         -a $b -gt $c \\\n         -a $c\
    \ -gt $a \\\n         -a $c -gt $c", "\tlocal length=$1\n\tlocal a=$2\n\tlocal\
    \ b=$3\n\tlocal c=$(($a + $b))\n\tlocal d=$(($a - $b))\n\tlocal e=$(($c - $d))\n\
    \n\tif [ $a -eq $b ] || [ $b -eq $c ] || [ $c -eq $d ]; then\n\t\treturn 1\n\t\
    elif [ $c -eq $d ] || [ $d -eq $e ] || [ $e -eq $b ]; then\n\t\treturn 0\n\telif\
    \ [ $a -eq $b ] || [ $c -eq $d ] || [ $e -eq $b ]; then\n\t\treturn 0\n\telse\n\
    \t\treturn 1\n\tfi", "    local _length1=$1\n    local _length2=$2\n    local\
    \ _length3=$3\n    local _length4=$((_length1 + _length2 + _length3))\n    local\
    \ _length5=$((_length2 + _length3 + _length4))\n    local _length6=$((_length3\
    \ + _length4 + _length5))\n    local _length7=$((_length4 + _length5 + _length6))\n\
    \    if [ $_length7 -eq $((_length1 * _length2 * _length3)) ]\n        then\n\
    \        echo 1\n    else\n        echo 0\n    fi", "    local side_1=$1\n   \
    \ local side_2=$2\n    local side_3=$3\n\n    if [ $side_1 -le $side_2 -a $side_1\
    \ -le $side_3 -a $side_2 -le $side_3 ]; then\n        return 0\n    elif [ $side_2\
    \ -le $side_1 -a $side_2 -le $side_3 -a $side_1 -le $side_3 ]; then\n        return\
    \ 0\n    elif [ $side_3 -le $side_1 -a $side_3 -le $side_2 -a $side_1 -le $side_3\
    \ ]; then\n        return 0\n    elif [ $side_1 -eq $side_2 -a $side_1 -eq $side_3\
    \ -a $side_2 -eq $side_3 ]; then\n        return 1\n    elif [ $side_2 -eq $side_1\
    \ -a $side_2 -eq $side_3 -a $side_1 -eq $side_3 ]; then\n        return 1\n  \
    \  elif [ $side_3 -eq $side_1 -a $side_3 -eq $side_2 -a $side_1 -eq $side_3 ];\
    \ then\n        return 1\n    elif [ $side_1 -eq $side_2 -a $side_1 -eq $side_3\
    \ -a $side_2 -eq $side_3 ]; then\n        return 0\n    elif [ $side_2 -eq $side_1\
    \ -a $side_2 -eq $side_3 -a $side_1 -eq $side_3 ]; then\n        return 0\n  \
    \  elif [ $side_3 -eq $side_1 -a $side_3 -eq $side_2 -a $side_1 -eq $side_3 ];\
    \ then\n        return 0\n    fi\n\n    return 1", "  (( $1 == $2 )) && \\\n \
    \ (( $1 == $3 )) && \\\n  (( $2 == $3 )) && \\\n  (( $1 + $2 + $3 == 18)) && \\\
    \n  (( $1 * $2 * $3 == 45)) && \\\n  (( $2 * $3 * $1 == 45)) && \\\n  (( $3 *\
    \ $1 * $2 == 45))", "  local a b c\n  a=$1\n  b=$2\n  c=$3\n\n  if (( b == 0 ));\
    \ then\n    return 1\n  fi\n\n  if (( c == 0 )); then\n    return 0\n  fi\n\n\
    \  # If the sides are equal, then it's a right angle triangle\n  if (( b == c\
    \ )); then\n    return 1\n  fi\n\n  # If the smaller side is greater than the\
    \ greater side,\n  # then the triangle is NOT right-angled.\n  if (( a > b ));\
    \ then\n    return 0\n  fi\n\n  # If the greater side is greater than the smaller\
    \ side,\n  # then it's a right angle triangle.\n  if (( a > c )); then\n    return\
    \ 1\n  fi\n\n  # If the equal sides are equal, then it's a right angle triangle.\n\
    \  if (( a == b )); then\n    return 1\n  fi", "    triangle_sides=$1\n    side_of_first_side=$2\n\
    \    side_of_second_side=$3\n    echo -n $side_of_first_side\n    [ $side_of_first_side\
    \ -le $triangle_sides ] && echo -n \"|\" \n    [ $side_of_second_side -le $triangle_sides\
    \ ] && echo -n \"|\" \n    [ $side_of_first_side -le $side_of_second_side ] &&\
    \ echo -n \"|\"\n    [ $side_of_second_side -le $side_of_second_side ] && echo\
    \ -n \"|\"\n    echo -n $side_of_second_side\n    [ $side_of_first_side -le $side_of_second_side\
    \ ] && echo -n \"|\" \n    [ $side_of_second_side -le $side_of_first_side ] &&\
    \ echo -n \"|\" \n    [ $side_of_first_side -le $triangle_sides ] && echo -n \"\
    |\" \n    [ $side_of_second_side -le $triangle_sides ] && echo -n \"|\"\n    [\
    \ $side_of_first_side -le $triangle_sides ] && echo -n \"|\" \n    [ $side_of_second_side\
    \ -le $triangle_sides ] && echo -n \"|\" ", '  test "$(( $1 - $2 ))" -gt 0 &&
    test "$(( $1 - $3 ))" -gt 0 && test "$(( $2 - $3 ))" -gt 0', "    local a=$1\n\
    \    local b=$2\n    local c=$3\n    if (( b < 0 )); then\n        echo \"$0:\
    \ invalid b value $b.\"\n        return 1\n    fi\n    if (( a < 0 )); then\n\
    \        echo \"$0: invalid a value $a.\"\n        return 1\n    fi\n    if ((\
    \ c < 0 )); then\n        echo \"$0: invalid c value $c.\"\n        return 1\n\
    \    fi\n    if (( b == 0 )); then\n        echo \"$0: invalid b value $b.\"\n\
    \        return 1\n    fi\n    if (( a == 0 )); then\n        echo \"$0: invalid\
    \ a value $a.\"\n        return 1\n    fi\n    if (( c == 0 )); then\n       \
    \ echo \"$0: invalid c value $c.\"\n        return 1\n    fi\n    return ($a +\
    \ $b > $c + $a)", "    (( $1 == 3 )) && (( $2 == 3 )) && (( $3 == 3 )) || \\\n\
    \        (( $1 == 2 )) && (( $2 == 1 )) && (( $3 == 3 )) || \\\n        (( $1\
    \ == 1 )) && (( $2 == 2 )) && (( $3 == 3 )) || \\\n        (( $1 == 1 )) && ((\
    \ $2 == 1 )) && (( $3 == 2 )) || \\\n        (( $1 == 1 )) && (( $2 == 1 )) &&\
    \ (( $3 == 1 )) || \\\n        (( $1 == 0 )) && (( $2 == 1 )) && (( $3 == 2 ))\
    \ || \\\n        (( $1 == 0 )) && (( $2 == 1 )) && (( $3 == 1 )) || \\\n     \
    \   (( $1 == 0 )) && (( $2 == 0 )) && (( $3 == 2 )) || \\\n        (( $1 == 0\
    \ )) && (( $2 == 0 )) && (( $3 == 1 ))"]
stop_tokens:
- "\n}"
