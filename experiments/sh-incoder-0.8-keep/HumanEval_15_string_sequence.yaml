name: HumanEval_15_string_sequence
language: sh
prompt: "#!/bin/bash\n# Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n\
  # '0 1 2 3 4 5'\n#\n# $1 is an integer\nstring_sequence() {\n"
tests: "}\n\ncandidate() {\n    string_sequence \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"3\") = \"0 1 2 3\" ]]\n\
  \    [[ $(candidate \"10\") = \"0 1 2 3 4 5 6 7 8 9 10\" ]]\n}\n\nrun_test"
completions: ["    local n=$1\n    local s\n    s=\"${n}\"\n    while (( \"$s\" <\
    \ \"$n\" )) ; do\n        s=\"$s $(( n+1 ))\"\n    done\n    echo $s", "  local\
    \ n=$1\n  local s=\"\"\n  for (( i = 0; i <= n; i++ )); do\n    s+=$(( i==0 ?\
    \ \"0\" : \"${s}\" ))\n  done\n  echo \"$s\"", "  local n=$1\n  local sequence=\"\
    \"\n\n  for i in $(seq 1 $n); do\n    sequence+=\"$i \"\n  done\n  echo $sequence",
  "  local n=$1; shift;\n  seq=''; for ((i=0; i<n; ++i)) seq+=$1; echo $seq;", "\t\
    local i=0\n\twhile [ \"$i\" -lt \"$1\" ]; do\n\t\techo \"$i\"\n\t\ti=$[$i+1]\n\
    \tdone", "  local number=$1\n  local n=$2\n  local output=''\n  local i\n\n  ((n--))\n\
    \  while [ $n -gt 0 ]; do\n    ((n--))\n    output=$output$((number++))\n  done\n\
    \  echo $output", "    # check if argument is an integer\n    if [ \"$1\" -eq\
    \ \"0\" ]; then\n        # return an empty string\n        echo \"0\"\n    elif\
    \ [ \"$1\" -ge \"5\" ]; then\n        # return the number starting from 0 upto\
    \ $1 inclusive\n        echo $(( $1 - 1 ))\n    else\n        echo \"0$(( 1 ))\"\
    \n    fi", "\tlocal -i n=$1\n\tlocal i output\n\toutput=''\n\ti=0\n\twhile [ $i\
    \ -lt $n ]; do\n\t\toutput=$output' '$((i++))\n\tdone\n\techo $output", "    local\
    \ n=$1\n    local i\n    local str\n    local delimiter=' '\n\n    i=$((n-1))\n\
    \    eval \"str=\\${$i}\"\n    while [ $n -gt 0 ]; do\n        eval \"str=\\\"\
    $delimiter$str\\\"\"\n        ((n--))\n        eval \"str=\\\"$delimiter$str\\\
    \"\"\n        ((i--))\n        eval \"str=\\\"$delimiter$str\\\"\"\n        ((i--))\n\
    \        eval \"str=\\\"$delimiter$str\\\"\"\n        ((i--))\n        eval \"\
    str=\\\"$delimiter$str\\\"\"\n        ((i--))\n        eval \"str=\\\"$delimiter$str\\\
    \"\"\n        ((i--))\n    done\n\n    eval \"str=$delimiter$str\"", "    local\
    \ i\n    local str=\"\"\n    for ((i=0; i<$1; i++)); do\n        str=\"$str $((++i))\"\
    \n    done\n    echo \"$str\"", "  # Check if $1 is an integer\n  (( $# == 1 ))\
    \ && echo '' && return\n  # Create empty string variable\n  string=\"\"\n  # Loop\
    \ through numbers from 0 to $1 inclusive\n  for i in $(seq 0 $1); do\n    string=\"\
    $string $i\"\n  done\n  echo \"$string\"", "\tlocal number=$1\n\tlocal i\n\tlocal\
    \ str=\"\"\n\t\n\tfor ((i=1; i<$number; i++)); do\n\t\tstr+=$i\n\tdone\n\t\n\t\
    echo $str", "    # $1 is always less than or equal to $2\n    # $2 defaults to\
    \ 0\n    # $3 defaults to '0'\n    local n=$2 || 0;\n    local str=$3 || \"\"\
    ;\n    local seq=\"\";\n    local i;\n    for (( i=0; i<n; i++ )); do\n      \
    \  seq=\"${seq} $(( n ))\";\n    done\n    echo $seq;", "  local i result=''\n\
    \  for ((i=1; i<$1; i++)); do\n    result+=$i' '\n  done\n  echo $result", "\t\
    local n=$1\n\tlocal s=\"\"\n\tfor ((i=0; i<${n}; i++)); do\n\t\ts+=$((i+1))\n\t\
    done\n\techo \"${s}\"", "  local n=$1\n  local s\n  s=''\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n\
    \  (( n-- > 0 )) || return\n  (( n-- > 0 )) || return\n  (( ", "  local n=\"$1\"\
    ; shift\n  echo \"$n\" | sed 's/^\\(.\\{1\\}\\)\\(.\\{1\\}\\)\\(.\\{1\\}\\)\\\
    (.\\{1\\}\\)\\(.\\{1\\}\\)\\(.\\{1\\}\\)\\(.\\{1\\}\\)$/0 \\1 \\2 \\3 \\4 \\5\
    \ \\6/'", "  local n=$1\n  echo -n \"$n\"\n  for i in $(seq 1 $n); do\n    echo\
    \ -n \" $i\"\n  done\n  echo", '  echo "${!1}"', "  # Trick to avoid passing variables\
    \ straight into \"echo\"\n  seq=$(seq ${1})\n  echo $seq"]
stop_tokens:
- "\n}"
