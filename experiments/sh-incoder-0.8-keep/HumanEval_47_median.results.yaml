language: sh
name: HumanEval_47_median
results:
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n\tlocal list_name=$1\n\t# Convert $list_name\
    \ into a space-separated string.\n\t# We do this to handle some special cases\
    \ with negative numbers:\n\t#   median([-1,1,-3]) -->  median of -1, 1 and -3\n\
    \t#   median([1,-3,5]) -->  median of 1 and -3 and 5\n\t# To do this, we use a\
    \ subshell and invoke the command via a pipe.\n\t#   echo $list_name | sed 's/,/\
    \ /g' | sort | uniq -c | sort -n | tail -1\n\t# The outer pipe passes the input\
    \ list name as $list_name to the subshell, which\n\t# converts the space-separated\
    \ string into a set of space-separated integers\n\t# (by removing commas).  The\
    \ inner pipe passes the space-separated integers back\n\t# to the main shell to\
    \ sort and uniq them, counting them, and get the last\n\t# one which will be the\
    \ median.\n\t# The inner sort and uniq could also be done with a for loop.  In\
    \ the\n\t# inner loop, we assign each space-separated integer to a variable and\
    \ use\n\t# Bash's arithmetic expansion to get the median.  However, Bash does\
    \ not\n\t# allow variable names to be used that start with numbers, so we use\n\
    \t# ${#list_name[@]} to get the number of elements in the list.  This is\n\t#\
    \ the total number of elements before we remove the header line.\n\tlocal num_elements=${#list_name[@]}\n\
    \tlocal median\n\tif [ $num_elements == 0 ]\n\tthen\n\t\techo \"Empty list!\"\n\
    \t\texit 1\n\tfi\n\tlocal nums num_ones\n\tlocal num_nonones\n\tlocal num_unique\n\
    \tlocal median_values\n\tlocal new_list median_list\n\tlocal median_value\n\t\
    local x\n\n\t# Sort the space-separated list to facilitate median calculation.\n\
    \techo \"$list_name\" | sed 's/,/ /g' | sort | uniq -c | sort -n | tail -1\n\n\
    \t# Output the median, if any.\n\tif [ $num_elements -gt 1 ]\n\tthen\n\t\t# Use\
    \ Bash arithmetic expansion to get the median.\n\t\tmedian=$(($num_elements /\
    \ 2))\n\t\tmedian_values=( $( echo \"$list_name\" | sed 's/,/ /g' | sort | uniq\
    \ -c | sort -n | tail -1) )\n\t\tnum_unique=$(( ${#median_values[@]} - 1 ))\n\t\
    \tnum_ones=$(( ${#median_values[@]} - num_unique ))\n\t\tnum_nonones=$(( ${\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwfzmxnmc.sh: line 54: unexpected EOF while looking for matching
    `)''

    /tmp/tmpwfzmxnmc.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local -n l=$1\n    local sum=$((\
    \ (( ${#l} + 0 )/2 )) )\n    local median=0\n    local i\n    local j\n    local\
    \ sorted\n\n    for i in `seq 0 $(( $sum - 1 ))`\n    do\n        sorted=( ${l[@]:$i:1}\
    \ )\n        sorted=(${sorted[@]#-})\n        j=( ${#sorted[@]} )\n        median=$((\
    \ $median + ${sorted[((j-1))]} ))\n    done\n\n    median=$(( $median / $(( $sum\
    \ - $( echo \"${#l[@]}\" ) ) ) ))\n\n    echo \"$median\"\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm0ix1vkn.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    /tmp/tmpm0ix1vkn.sh: command substitution: line 11: syntax error near unexpected
    token `/2''

    /tmp/tmpm0ix1vkn.sh: command substitution: line 11: `( (( ${#l} + 0 )/2 )) ''

    /tmp/tmpm0ix1vkn.sh: line 25: -: command not found

    /tmp/tmpm0ix1vkn.sh: line 25: 0 /  : syntax error: operand expected (error token
    is "/  ")

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local -n l=$1; shift\n    local n=\"\
    ${#l[@]}\"\n    if [ $n -lt 2 ]\n    then\n        echo \"$n\"\n        return\n\
    \    fi\n    local sorted=($(sort -g <<<\"${l[@]}\"))\n    local median=\"$sorted[((${#sorted[@]}\
    \ - 1) * (${sorted[@]/$sorted[0]} + $n / 2))]\"\n    echo \"$median\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0sx65fu8.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local elements=($(printf \"%.0f\\n\"\
    \ \"${@}\" | sort -nr))\n  local len=${#elements[@]}\n  ((len%2)) && echo \"$((len/2))\"\
    \ && return ${elements[$((len/2))]}\n  ((len%2)) && return $((${elements[len/2]}+${elements[len-1]}+${elements[len/2]}))\n\
    }\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2b6p2zvi.sh: line 10: printf: 3 1 2 4 5: invalid number

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local -n arr=$1\n    local len sum\n\
    \    local -a sorted_arr\n    local median\n    local i\n\n    len=${#arr[@]}\n\
    \    sum=${len}\n    sorted_arr=( ${arr[@]} )\n    median=${sorted_arr[$((len\
    \ / 2))]}\n    for ((i = 3; i <= len; i += 2)); do\n        sum=$((sum + ${sorted_arr[$i]}))\n\
    \    done\n    median=$((sum / 2))\n    return $median\n}\n\ncandidate() {\n \
    \   median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprvoaq3tn.sh: line 10: local: `3 1 2 4 5'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local n=$#\n    local median_value\n\
    \    IFS=', ' read -a array <<< \"$1\"\n    local len=$(( ${#array[@]} / 2 ))\n\
    \    if [ $n -eq $len ] ; then\n        median_value=\"${array[$((len-1))]}\"\n\
    \    fi\n    median_value=\"${array[$((len-1))]}\"\n    for (( i = $(( ${#array[@]}\
    \ - 1 )); i >= $(( len - 1 )); i-- )); do\n        if [ -z \"${array[$i]}\" ]\
    \ ; then\n            median_value=\"${array[$i]}\"\n            break\n     \
    \   fi\n        median_value=\"${array[$i]}\"\n    done\n    median_value=$(echo\
    \ \"$median_value\" | bc -l)\n    echo \"$median_value\"\n}\n\ncandidate() {\n\
    \    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\"\
    ) = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n  \
    \  [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local total=0\n    local list\n \
    \   local i median\n    list=$1\n    median=0\n    for i in ${!list}; do\n   \
    \     total=$((total+${list[$i]}))\n        if [[ $i -eq 0 ]]; then\n        \
    \    median=$total\n        fi\n    done\n    median=$((total/${#list}))\n   \
    \ return $median\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4\
    \ 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpz7hgwtnr.sh: line 15: 3 1 2 4 5: invalid variable name

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local numbers=(\"${@}\")\n    local\
    \ num=${#numbers[@]}\n    if (($# > 1)); then\n        return\n    fi\n    ((\
    \ ${num} % 2 == 0 )) && return 0\n    (( ${num} % 2 == 1 )) && return ${numbers[($num-1)/2]}\n\
    \    (( num == 0 )) && return 0\n    echo \"Illegal number of arguments\"\n  \
    \  exit\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000\
    \ 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpvten7g8d.sh: line 16: return: too many arguments

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    sort $1 | tail -n 1\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local list=\"$1\"\n    local median=0\n\
    \n    # Sum all elements into a single variable.\n    # Avoids empty list\n  \
    \  if [ \"$list\" = \"$list\" ]; then\n        return 0\n    fi\n\n    for ((i=0;\
    \ i<${#list}; i++)); do\n        if [ \"${list[i]}\" -gt 0 ]; then\n         \
    \   median=$((median + ${list[i]}))\n        fi\n    done\n\n    median=$((median\
    \ / ${#list}))\n\n    echo \"$median\"\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local l tmp\n    tmp=$(echo \"$1\"\
    \ | tr \",\" \"\\n\")\n    l=$(echo \"$tmp\" | wc -l)\n    echo \"$tmp\" | tr\
    \ \" \" \"\\n\" | sort -nr | head -n $l | tail -n 1\n}\n\ncandidate() {\n    median\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\"\
    \ ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate\
    \ \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  awk 'BEGIN {\n    # convert first arg\
    \ to an array and sort it\n    l=( \"$1\" );\n    n = asorti(l);\n    # return\
    \ the median\n    print l[n/2];\n  }'\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:4: fatal: asorti: first argument not an array

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local list=$1\n    local len=${#list[@]}\n\
    \    if [ \"${len}\" -eq \"0\" ]; then\n        return\n    fi\n    local sorted=($(sort\
    \ -nrk \"$list\"))\n    local middle=$(( ((len + 1) / 2) + 1 ))\n    local median=$(echo\
    \ \"${sorted[$middle]}\" | cut -f1)\n    return \"$median\"\n}\n\ncandidate()\
    \ {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2\
    \ 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n\
    \    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n\
    \    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "sort: stray character in field spec: invalid field specification \u2018\
    3 1 2 4 5\u2019\n/tmp/tmpw614m3nc.sh: line 18: return: : numeric argument required\n"
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local l\n  local median\n  if [ $#\
    \ -eq 0 ]; then\n    echo 'error: no list provided'\n    return 1\n  fi\n  l=\"\
    $( echo \"$1\" | sed -e 's/^[ \\t]*//' -e 's/[ \\t]*$//' )\" # trim whitespace\
    \ from both ends\n  median=\"$( echo \"$l\" | sort -nr | head -1 | sed -e 's/^[\
    \ \\t]*//' -e 's/[ \\t]*$//' )\" # median of a sorted list\n  return \"$median\"\
    \n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\"\
    \ ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk7npqh0x.sh: line 18: return: 3 1 2 4 5: numeric argument required

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local array=(${@})\n  if (( ${#array[@]}\
    \ % 2)); then\n      echo \"error: number of parameters is even\" >&2\n      return\n\
    \  fi\n  local half=$(echo ${#array[@]}/2)\n  local middle=${array[$((${half}+1))]}\n\
    \  (( ${middle} > ${array[half]} )) && middle=${array[half]}\n  local median\n\
    \  local val\n  for (( i=1; i<${half}; i++ )); do\n      val=${array[i]}\n   \
    \   (( val > ${middle} )) && val=${middle}\n      (( val < ${array[half-1]} ))\
    \ && val=${array[half-1]}\n      (( median == 0 )) && median=$(( $val + $middle\
    \ ))\n      (( median > $val )) && median=$val\n      (( median < $val )) && median=$val\n\
    \  done\n  echo $median\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'error: number of parameters is even

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local array=($@)\n    echo \"${array[@]}\
    \ | sort -nk 1 -g | tail -n 1\"\n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 2
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n  local list_arg i\n  list_arg=$1\n \
    \ for i in $(echo $list_arg | sed 's/,/ /g'); do\n    if [ -z \"$i\" -o \"$i\"\
    \ == \"-\" -o \"$i\" == \"--\" ]; then\n      echo \"$list_arg cannot be empty\"\
    \n      exit 1\n    fi\n  done\n  list_arg=$(echo $list_arg | sed 's/-/ /g')\n\
    \  list_arg=$(echo $list_arg | sed 's/--/ /g')\n  list_arg=$(echo $list_arg |\
    \ sed 's/\\/ /g')\n  list_arg=$(echo $list_arg | sed 's/\\ /|/')\n  list_arg=$(echo\
    \ $list_arg | sed 's/\\|/ /g')\n  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\\
    )/ /g')\n  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo\
    \ $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\\
    ([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n\
    \  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo\
    \ $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\\
    ([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n\
    \  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo\
    \ $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\\
    ([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n\
    \  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo\
    \ $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\\
    ([0-9]*\\)/\\1/g')\n  list_arg=$(echo $list_arg | sed 's/\\([0-9]*\\)/\\1/g')\n\
    \  list_arg=$(echo $list_arg | \n}\n\ncandidate() {\n    median \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpikjcjatq.sh: line 40: unexpected EOF while looking for matching
    `)''

    /tmp/tmpikjcjatq.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local total=0\n    local count=0\n\
    \    local median\n    for e in ${1//,/ }; do\n        ((count++))\n        total=$((total+e))\n\
    \    done\n    median=$((total/count))\n}\n\ncandidate() {\n    median \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[\
    \ $(candidate \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\")\
    \ = \"5\" ]]\n    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"\
    8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n\tlocal l sum\n\tl=$( printf \"%s\\n\"\
    \ \"$@\" )\n\tsum=$( echo \"$l\" | awk '{ sum += $1; print sum / NR; }' )\n\t\
    echo \"$l\" | awk '{ if (NR % 2 == 0) print ($1 + $2)/2; else print ($1 + $2)\
    \ }'\n}\n\ncandidate() {\n    median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate \"-10 4 6 1000 10\
    \ 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\") = \"7\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054516
- exit_code: 1
  program: "#!/bin/bash\n# Return median of elements in the list l.\n# >>> median([3,\
    \ 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n#\n# $1\
    \ is a space-separated list\nmedian() {\n    local i len\n    local median\n \
    \   local count\n\n    len=\"${#1}\"\n\n    if [ \"$len\" -eq 0 ]; then\n    \
    \    return 1\n    fi\n\n    count=0\n    median=\"$(echo \"$1\" | sed -n '$!s/^[!-]*\\\
    ([0-9]*\\) .*$/\\1/p')\"\n\n    for ((i=1; i<=$len; i++)) ; do\n        ((count+=1))\n\
    \n        if [ \"$(echo \"$1\" | sed -n \"$i!p\")\" != \"$(echo \"$1\" | sed -n\
    \ \"$(($i-1))!p\")\" ]; then\n            median=\"$median, $(echo \"$1\" | sed\
    \ -n \"$(($i-1))!p\")\"\n        fi\n    done\n\n    # Remove leading comma and\
    \ space\n    median=\"${median#?}\"\n    median=\"${median%?}\"\n    median=\"\
    ${median%,}\"\n\n    echo ${median}\n}\n\ncandidate() {\n    median \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 1 2 4 5\") = \"3\" ]]\n    [[ $(candidate\
    \ \"-10 4 6 1000 10 20\") = \"8.0\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"6 5\") = \"5.5\" ]]\n    [[ $(candidate \"8 1 3 9 9 2 7\"\
    ) = \"7\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 2: invalid usage of line address 0

    '
  stdout: ''
  timestamp: 1660054516
