language: sh
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n  local _score_a=(${1:(-2)})\n  local _score_c=(${1:(-2)})\n\
    \  local _score_b=()\n  local _guesses=()\n  local _guess_a\n  local _guess_b\n\
    \  local _diff\n  local _n\n\n  read -a _score_a <<< \"$1\" # read the first array\
    \ into the variable _score_a\n  read -a _score_c <<< \"$1\" # read the second\
    \ array into the variable _score_c\n  _n=${#_score_a[@]}\n  _n=${#_score_c[@]}\n\
    \  _guess_a=()\n  _guess_b=()\n  _diff=()\n  for ((i=1; i<=$_n && i<=$_n; i++\
    \ )); do\n    _guess_a+=(${_score_a[i]})\n    _guess_b+=(${_score_c[i]})\n  done\n\
    \  unset _score_a _score_c _n i\n\n  for ((i=1; i<=$_n; i++ )); do\n    _diff[i]=${_guess_a[i]}-${_guess_b[i]}\n\
    \    if [ \"$_guess_a[i]\" != \"$_guess_b[i]\" ]; then\n      _diff[i]=$((_diff[i]<0\
    \ ? _diff[i] : _diff[i]>0 ? -_diff[i] : _diff[i]==0 ? 0 : _diff[i]))\n    fi\n\
    \  done\n  for ((i=1; i<=$_n; i++ )); do\n    if [ \"$_guess_a\" != \"$_guess_b\"\
    \ ]; then\n      _diff[$i]=$((_diff[$i]<0 ? _diff[$i] : _diff[$i]>0 ? -_diff[$i]\
    \ : _diff[$i]==0 ? 0 : _diff[$i]))\n    fi\n  done\n\n  unset _guess_a _guess_b\
    \ _diff _n\n  echo \"${_diff[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") =\
    \ \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"\
    0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmmfw3n78.sh: line 38: ((: i<=: syntax error: operand expected (error
    token is "<=")

    /tmp/tmpmmfw3n78.sh: line 44: ((: i<=: syntax error: operand expected (error token
    is "<=")

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local score guess result\n    for ((i=0;i < ${#1}; i++))\n\
    \    do\n        score=${1:$i}\n        guess=${2:$i}\n        result=${score:$i:1}\n\
    \        if [[ \"$result\" == \"$guess\" ]]\n        then\n            result=0\n\
    \        else\n            result=`expr $guess - $score`\n        fi\n       \
    \ echo \"$result $guess\"\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\nexpr: syntax error:\
    \ unexpected argument \u20183\u2019\nexpr: syntax error: unexpected argument \u2018\
    3\u2019\nexpr: syntax error: unexpected argument \u20184\u2019\nexpr: syntax error:\
    \ unexpected argument \u20184\u2019\nexpr: syntax error: unexpected argument \u2018\
    2\u2019\nexpr: syntax error: unexpected argument \u20182\u2019\nexpr: syntax error:\
    \ unexpected argument \u2018-2\u2019\nexpr: syntax error: unexpected argument\
    \ \u2018-2\u2019\n"
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local score1 scores\n    local guessese1 guesses\n  \
    \  local nummatches nummatches_\n    local i k\n    local score2 scores\n    local\
    \ guessese2 guesses\n    local nummatches2 nummatches_\n\n    # remove all spaces\n\
    \    score1=( $1 )\n    score2=( $2 )\n\n    guessese1=( $2 )\n    guessese2=(\
    \ $1 )\n\n    # remove all spaces\n    guesses=( $guessese1 )\n    guesses=( $guessese2\
    \ )\n\n    nummatches_=( $( echo ${#guesses[@]} ) )\n    nummatches=( $( echo\
    \ ${#score1[@]} ) )\n\n    scores=( $( echo ${#score1[@]}* 0 ) )\n\n    # loop\
    \ over guesses and scores\n    for((i=0;i<$nummatches_;++i)); do\n        for((k=0;k<$nummatches;++k));\
    \ do\n            # if we have two matches\n            if [ ${guesses[k]} -eq\
    \ ${scores[k]} ]; then\n                # increase the score by 1\n          \
    \      scores[k+1]=$((${scores[k+1]}+1))\n                # remove this guess\n\
    \                guesses[k]=$((${guesses[k]}-1))\n            fi\n        done\n\
    \    done\n\n    # sort based on score\n    scores=( $( echo ${scores[@]} | sort\
    \ -k 2 -n) )\n    # sort based on guess\n    guesses=( $( echo ${guesses[@]} |\
    \ sort -k 2 -n) )\n\n    # return values\n    echo ${guesses[@]}\n    echo ${scores[@]}\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpht70xx0n.sh: line 44: [: -eq: unary operator expected

    /tmp/tmpht70xx0n.sh: line 44: [: -eq: unary operator expected

    /tmp/tmpht70xx0n.sh: line 44: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n  local a b\n  local -a scores=()\n  local -a guesses=()\n\
    \  while read -r line; do\n    scores+=($line)\n  done < \"$1\"\n  while read\
    \ -r line; do\n    guesses+=($line)\n  done < \"$2\"\n  a=( \"${!scores[@]}\"\
    \ )\n  b=( \"${!guesses[@]}\" )\n  local len=\"$(( ${#a[@]} < ${#b[@]} ? ${#a[@]}:\
    \ ${#b[@]} ))\"\n  declare -a result results[$len]\n  for (( i=0; i<$len; i++\
    \ )); do\n    result=$(( ${guesses[$i]} - ${scores[$i]} ))\n    results[$i]=$result\n\
    \  done\n  local res\n  for (( i=0; i<$len; i++ )); do\n    res=${results[$i]}\n\
    \    results[$i]=$(( ${res} == 0 ? 0 : \"${res}${results[$i]}\" ))\n  done\n \
    \ echo \"${results[@]}\"\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0\
    \ 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0\
    \ 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate\
    \ \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpts929vyp.sh: line 15: 1 2 3 4 5 1: No such file or directory

    /tmp/tmpts929vyp.sh: line 15: 1 2 3 4 2 -2: No such file or directory

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n  local scores\n  local guesses\n  local result\n\n  scores=${1:-}\n\
    \  guesses=${2:-}\n  result=( ${#scores[*]} )\n  for (( i = 0; i < ${#scores[*]};\
    \ i++ )); do\n    if [ ${guesses[*]} != ${scores[i]} ]; then\n      result[$i]=$((\
    \ ${guesses[$i]} - ${scores[i]} ))\n    fi\n  done\n\n  echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoz8h20er.sh: line 24: [: too many arguments

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local i j\n    local result\n    local i j\n    local\
    \ ii jj\n\n    # Convert the lists of scores and guesses into lists\n    local\
    \ score_list=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local guess_list=$(echo\
    \ \"$2\" | tr '[:upper:]' '[:lower:]')\n\n    # Initialize an index counter\n\
    \    local ii=0\n    local jj=0\n    local score_count\n\n    local guesses\n\
    \    local guessed_scores\n    local difference\n    local difference\n\n    #\
    \ Loop over the scores and guesses\n    while [ $ii < ${#score_list[*]} ]; do\n\
    \        # Loop over each guess in the guess\n        while [ $jj < ${#guess_list[*]}\
    \ ]; do\n            # If this is the first guess, increment the counter by one\n\
    \            if [ $jj == 0 ]; then\n                score_count=$((score_count\
    \ + 1))\n            # Otherwise increment the counter by one\n            elif\
    \ [ $jj -ne ${#guess_list[*]} ]; then\n                score_count=$((score_count\
    \ + 1))\n            # Otherwise this the first guess of the second guess\n  \
    \          else\n                guesses=\"${guesses:-$((guesses + 1))}\"\n  \
    \              guessed_scores=\"${guessed_scores:-$((guessed_scores + score_list[$ii]))}\"\
    \n                difference=$((guess - guessed_scores))\n                guessed_scores=\"\
    ${guessed_scores:-$((guessed_scores + score_list[$ii]))}\"\n                difference=$((difference\
    \ + $((score_list[$ii] * (guessed_scores - score_list[$ii])))))\n            \
    \    difference=$((difference + $((score_list[$ii] * (guessed_scores - score_list[$ii])))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $((guessed_scores - score_list[$ii]))))\n\
    \                difference=$((difference + $\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphl37k7ds.sh: line 61: unexpected EOF while looking for matching
    `)''

    /tmp/tmphl37k7ds.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n  local scores guesses len\n  scores=( $1 )\n  guesses=(\
    \ $2 )\n  len=${#scores[@]}\n  result=()\n  for ((i=0; i<len; i++))\n    do\n\
    \      result[i]=${guesses[i]}-${scores[i]}\n    done\n  result\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcfoa7bbq.sh: line 25: result: command not found

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local scores guesses score\n    scores=( $1 )\n    guesses=(\
    \ $2 )\n    length=${#scores[@]}\n    \n    result=()\n    \n    for (( i=0; i<length;\
    \ ++i )); do\n        score=${scores[i]}\n        guess=${guesses[i]}\n      \
    \  \n        if [ \"$score\" -eq \"$guess\" ]; then\n            result+=( 0 )\n\
    \            continue\n        fi\n        \n        result+=( $(( score - guess\
    \ )) )\n    done\n    \n    return \"${result[@]}\"\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphj6pieo4.sh: line 35: return: too many arguments

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    declare -i i=0\n    declare -i len1=$(( ${#1} ))\n  \
    \  declare -i len2=$(( ${#2} ))\n    declare -i result\n    while [ $i -lt $len1\
    \ ]; do\n        result=$(( ${result} + abs( ${2[$i]} - ${1[$i]} )${!result}))\n\
    \        i=$(( i+1 ))\n    done\n    declare -i j=0\n    while [ $j -lt $len2\
    \ ]; do\n        result=$(( ${result} + abs( ${2[$j]} - ${1[$j]} )${!result}))\n\
    \        j=$(( j+1 ))\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzkojflr9.sh: line 21:  ${result} + abs( ${2[$i]} - ${1[$i]} )${!result}:
    bad substitution

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local score guess difference\n    for i in {1..$#1};\n\
    \    do\n        score=$( echo $( echo $1 $2 | tr \" \" \"\\n\" | sort | uniq\
    \ -c | awk '{print $2}' ) )\n        guess=$( echo $( echo $1 $2 | tr \" \" \"\
    \\n\" | sort | uniq -c | awk '{print $1}' ) )\n        difference=$( echo \"abs($guess\
    \ - $score)\"|bc)\n        echo -n \"$difference \"\n    done\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 2
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local score_list guesses total\n    score_list=$1; guesses=$2;\
    \ total=${#score_list}\n    local i j guess score\n    for ((i=0; i < total; i++))\n\
    \    do\n        if ((i == 0)); then\n            score=0\n        elif ((guesses[i]\
    \ == score_list[i])); then\n            score=score+0;\n        else\n       \
    \     score=score-abs(guesses[i]-score_list[i])\n        fi\n    done\n    echo\
    \ $score\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl3q6_dup.sh: line 26: syntax error near unexpected token `(''

    /tmp/tmpl3q6_dup.sh: line 26: `            score=score-abs(guesses[i]-score_list[i])''

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local score guess diff diff diff score1 score2\n    local\
    \ -a results\n    local -n i=0 score=$((${#${1[1]}} + 1)) guess=$((${#${2[1]}}\
    \ + 1))\n    local -n j=0 diff=0 diff2=0 score1=$((${#${1[1]}} + 1)) score2=$((${#${2[1]}}\
    \ + 1))\n    results=()\n    for ((i=0; i<${#score[@]}; i++)); do\n        diff=0\n\
    \        diff2=0\n        for ((j=0; j<${#score[@]}; j++)); do\n            if\
    \ [ $((j<i)) -eq 1 ]; then\n                diff=$((diff + ${score[$i]} - ${score[$j]}))\n\
    \                diff2=$((diff2 + ${guess[$i]} - ${guess[$j]}))\n            fi\n\
    \        done\n        results[${i}]=$((diff > 0 ? diff : diff2))\n    done\n\
    \    sort -k 2 -n -k 3 -n -k 4 -n -k 5 \"${results[@]}\"\n}\n\ncandidate() {\n\
    \    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\
    \ 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\"\
    \ \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2\
    \ -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0\
    \ 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpavijr5r1.sh: line 18: ${#${1[1]}} + 1: bad substitution

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    # Your code here\n    local scores=\"$1\"\n    local\
    \ guesses=\"$2\"\n    local result\n    local i j\n    local diff diff count\n\
    \    # loop over each guess and add it to result\n    for (( i=0; i<${#guesses};\
    \ i++ )); do\n        if [[ -n ${guesses[i]} ]]; then\n            if (( i < ${#scores}\
    \ )) ; then\n                diff=( $(echo \"${guesses[i]} - ${scores[i]}\" |\
    \ bc -l) )\n                if [[ \"${diff}\" -eq \"0\" ]]; then\n           \
    \         result[i]=0\n                else\n                    result[i]=( ${diff}\
    \ )\n                fi\n            else\n                diff=( $(echo \"${guesses[i]}\"\
    \ - \"${scores[i]}\" | bc -l) )\n                result[i]=( ${diff} )\n     \
    \       fi\n        else\n            result[i]=0\n        fi\n    done\n    \n\
    \    # return result if every guesses are correct\n    for (( i=0; i<${#result};\
    \ i++ )); do\n        if (( ${result[i]} -eq 0 )) ; then\n            return \"\
    ${result[@]}\"\n        fi\n    done\n}\n\ncandidate() {\n    compare \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\"\
    ) = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") =\
    \ \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n\
    \    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmp0sse250c.sh: line 43: ((: 0 -eq 0 : syntax error in expression (error
    token is "0 ")

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local scores=$1\n    local guesses=$2\n\n    # Sort the\
    \ scores\n    local -r score_length=${#scores[@]}\n    local -r guesses_length=${#guesses[@]}\n\
    \    local -r sorted_scores=($(sort -n <(echo \"${scores[@]}\") | sed 's/ /+/g'))\n\
    \n    # Sort guesses by ascending length\n    local -r guesses_sort_length=${#sorted_guesses[@]}\n\
    \    local -r guesses_sorted=($(sort -n <(echo \"${guesses[@]}\") | sed 's/ /+/g'))\n\
    \n    # Build array\n    local -r res=($(\n      for i in $(seq 0 $((guesses_sort_length-1));\
    \ do \n        local -ra curr=${guesses_sorted[$i]}\n        local -ra next=${guesses_sorted[$((i+1))]}\n\
    \        if [[ \"${curr}\" == \"${next}\" ]]; then\n          local diff=0 \n\
    \        else\n          local diff=${next}-${curr}\n        fi\n        local\
    \ -ra curr_index=0\n        local -ra next_index=0\n        for j in $(seq 0 $((score_length-1));\
    \ do\n          local curr_index=$(echo \"${sorted_scores[j]}\" | sed 's/ /+/g'\
    \ | sed 's/0/1/g' | sed 's/1/0/g')\n          local next_index=$(echo \"${sorted_scores[j]}\"\
    \ | sed 's/ /+/g' | sed 's/0/1/g' | sed 's/1/0/g')\n          local diff_arr[$curr_index]+=$((diff\
    \ * $((guesses_length-1))))\n          local diff_arr[$next_index]+=$((diff *\
    \ $((guesses_length-1))))\n          curr_index=$next_index\n        done\n  \
    \    done\n    ))\n\n    # Return result\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4russz3d.sh: line 29: unexpected EOF while looking for matching
    `)''

    /tmp/tmp4russz3d.sh: line 67: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local i j\n    local a\n    local b\n    local result\n\
    \n    a=( $1 )\n    b=( $2 )\n\n    for i in \"${a[@]}\"; do\n        j=${#a[@]}\n\
    \        if [ \"$i\" -lt \"$j\" ]; then\n            result=$(( j - i ))\n   \
    \     else\n            result=0\n        fi\n        for (( i=0; i<j; i++ ));\
    \ do\n            if [ \"$i\" = \"$j\" ]; then\n                if [ \"$i\" =\
    \ \"$i\" ]; then\n                    result=0\n                    break\n  \
    \              else\n                    result=$(( result + abs( b[$i] - a[i]\
    \ ) ))\n                fi\n            fi\n        done\n    done\n\n    echo\
    \ $result\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n \
    \   [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n   \
    \ [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"\
    1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n\tset -f\n\tnum=$((${#1}))\n\tguess=($1)\n\tscore=($2)\n\t\
    res=$((${#score[*]}))\n\tdiff=$((${#guess[*]}))\n\toffset=$((${#guess[*]}))\n\t\
    for i in $(seq 0 $(($diff-1))); do\n\t\tres=$(($res - ${#guess[$i]}))\n\t\toffset=$(($offset\
    \ + $i))\n\tdone\n\techo $((${#guess[*]}))\n}\n\ncandidate() {\n    compare \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4\
    \ 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0\
    \ 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2\
    \ 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n        local scores guesses\n        scores=($1)\n     \
    \   guesses=($2)\n        local result\n\n        result=()\n        declare -i\
    \ cnt=0\n        local s\n        local g\n        local gcnt=0\n        local\
    \ g_i\n        local g_j\n        local g_s\n        local g_g\n        local\
    \ g_gt\n        local g_gt2\n        local g_gt1\n        local g_gt_s\n     \
    \   local g_gt_g\n        local g_gt_gt\n        local g_gt_gt2\n        local\
    \ g_gt_gt1\n        local g_gt_gt_s\n        local g_gt_gt_g\n        local g_gt_gt_gt\n\
    \        local g_gt_gt_gt2\n        local g_gt_gt_gt1\n        local g_gt_gt_gt_s\n\
    \        local g_gt_gt_gt_g\n        local g_gt_gt_gt_gt\n        local g_gt_gt_gt_gt2\n\
    \        local g_gt_gt_gt_gt1\n        local g_gt_gt_gt_gt_s\n        local g_gt_gt_gt_gt_g\n\
    \        local g_gt_gt_gt_gt_gt\n        local g_gt_gt_gt_gt_gt2\n        local\
    \ g_gt_gt_gt_gt_gt1\n        local g_gt_gt_gt_gt_gt_s\n        local g_gt_gt_gt_gt_gt_g\n\
    \        local g_gt_gt_gt_gt_gt_gt\n        local g_gt_gt_gt_gt_gt_gt2\n     \
    \   local g_gt_gt_gt_gt_gt_gt1\n        local g_gt_gt_gt_gt_gt_gt_s\n        local\
    \ g_gt_gt_gt_gt_gt_gt_g\n        local g_gt_gt_gt_gt_gt_gt_gt\n        local g_gt_gt_gt_gt_gt_gt_gt2\n\
    \        local g_gt_gt_gt_gt_gt_gt_gt1\n        local g_gt_gt_gt_gt_gt_gt_gt_s\n\
    \        local g_gt_gt_gt_gt_gt_gt_g_g\n        local g_gt_gt_gt_gt_gt_gt_gt_gt_g\n\
    \        local g_gt_gt_gt_gt_gt_gt_gt_gt_g\n        local g_gt_gt_gt_gt_gt_gt_gt_gt_g\n\
    \        local g_gt_gt_gt_gt_gt_gt_gt_gt_gt_g\n        local g_gt_gt_gt_gt_gt_gt_gt_gt_gt_g\n\
    \        local g_gt_gt_gt_gt_gt_gt_gt_gt_gt_g\n        local g_gt_gt_gt_gt_gt_gt_gt_gt_gt_g\n\
    \        local g_gt_gt_gt_gt_gt_gt_gt_gt_gt_g\n        local g_gt_gt_gt_gt_gt_gt_gt_gt_g_g_g\n\
    \        local g_gt_gt_gt_gt_gt_gt_gt_gt_gt_\n}\n\ncandidate() {\n    compare\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2\
    \ 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0\
    \ 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") =\
    \ \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local guesses=(\"${1#*[}\")\n    local scores=(\"${2#*[}\"\
    )\n    # Write your code here\n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"\
    0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0\
    \ 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n  \
    \  [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    echo \"${#1[@]} is ${#2[@]}\"\n    local n1=${#1[@]}\n\
    \    local n2=${#2[@]}\n    local diff\n    local m1 m2 score\n    local i j temp\n\
    \    \n    # set all values to zero\n    local m\n    for i in $(seq 0 $((n1-1))\
    \ ); do\n        m=0\n        for j in $(seq 0 $((n2-1)) ); do\n            if\
    \ [ \"$i\" -lt \"$j\" ]; then\n                m=$((m+${1[i]}-${2[j]}))\n    \
    \        else\n                m=$((m+${2[j]}-${1[i]}))\n            fi\n    \
    \    done\n        diff[$i]=$(( m<0 ? -m : m ))\n    done\n\n    # set all values\
    \ to zero again\n    local m\n    for j in $(seq 0 $((n2-1)) ); do\n        m=0\n\
    \        for i in $(seq 0 $((n1-1)) ); do\n            if [ \"$j\" -lt \"$i\"\
    \ ]; then\n                m=$((m+${1[i]}-${2[j]}))\n            else\n      \
    \          m=$((m+${2[j]}-${1[i]}))\n            fi\n        done\n        diff[$j]=$((\
    \ m<0 ? -m : m ))\n    done\n\n    # return the difference\n    echo \"${diff[@]}\"\
    \n}\n\ncandidate() {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"\
    0 0 0 0 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"-1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\"\
    ) = \"2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmps08b2xun.sh: line 16: ${#1[@]} is ${#2[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660054713
- exit_code: 1
  program: "#!/bin/bash\n# I think we all remember that feeling when the result of\
    \ some long-awaited\n# event is finally known. The feelings and thoughts you have\
    \ at that moment are\n# definitely worth noting down and comparing.\n# Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    # You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \n# Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n# the value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\n# example:\n\
    # compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\
    \ -> [4,4,1,0,0,6]\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
    \ list\ncompare() {\n    local x1 x2\n    local i=0\n    while [[ $i -lt ${#1[*]}\
    \ ]]; do\n        x1=$(echo \"${1}[$i]\" | cut -c1)\n        x2=$(echo \"${2}[$i]\"\
    \ | cut -c1)\n        ((i++))\n    done\n\n    local i2 i2len\n    local diff\n\
    \    local out\n\n    # loop over guesses\n    i2len=${#x2[*]}\n    while [[ $i2\
    \ -lt $i2len ]]; do\n        # match and keep track of difference\n        if\
    \ [[ \"${x1}\" == \"${x2[$i2]}\" ]]; then\n            diff=0\n        else\n\
    \            diff=$(echo \"${x1}-${x2[$i2]}\" | bc)\n        fi\n\n        # compare\
    \ guess\n        if [[ -z ${out[*]} ]]; then\n            out[0]=0\n        elif\
    \ [[ \"${out[$i2]}\" -eq 0 ]]; then\n            out[$i2]=0\n        elif [[ -z\
    \ ${out[*]} ]]; then\n            out[0]=0\n        elif [[ \"${out[$i2]}\" -lt\
    \ 0 ]]; then\n            out[$i2]=$(echo \"${diff}\")\n        else\n       \
    \     out[$i2]=$(echo \"${diff}\" | bc)\n        fi\n\n        # move to next\
    \ guess\n        let i2=$i2+1\n    done\n\n    echo \"${out[@]}\"\n}\n\ncandidate()\
    \ {\n    compare \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\
    \ 4 5 1\" \"1 2 3 4 2 -2\") = \"0 0 0 0 3 3\" ]]\n    [[ $(candidate \"0 0 0 0\
    \ 0 0\" \"0 0 0 0 0 0\") = \"0 0 0 0 0 0\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    -1 -2 -3\") = \"2 4 6\" ]]\n    [[ $(candidate \"1 2 3 5\" \"-1 2 3 4\") = \"\
    2 0 0 1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3uodjakz.sh: line 18: ${#1[*]}: bad substitution

    '
  stdout: ''
  timestamp: 1660054713
