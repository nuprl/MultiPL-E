language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local list_name=$1\n    local\
    \ max_count=$(echo $list_name | tr \" \" \"\\n\" | sort -n | uniq)\n    local\
    \ max_string=\"\"\n\n    for word in $list_name; do\n        local count_of_word=$(echo\
    \ $list_name | tr \" \" \"\\n\" | grep \"^$word$\" | wc -l)\n        if [ $count_of_word\
    \ -gt $max_count ]; then\n            max_count=$count_of_word\n            max_string=$word\n\
    \        fi\n    done\n\n    echo \"$max_string\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpokefb6jv.sh: line 18: [: name: integer expression expected

    /tmp/tmpokefb6jv.sh: line 18: [: name: integer expression expected

    /tmp/tmpokefb6jv.sh: line 18: [: name: integer expression expected

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local words=\"${1}\"\n    local\
    \ max_unique_chars=$(echo \"${words}\"|sort -u | wc -c)\n    local max_unique_chars_word=\"\
    \"\n    local max_unique_chars_count=0\n    local i=0\n    local j=0\n    while\
    \ [[ ${i} -le ${#words} ]]; do\n        j=0\n        local word=\"${words[i]}\"\
    \n        while [[ ${j} -le ${max_unique_chars} ]]; do\n            local unique_chars=\"\
    ${word:$j:1}\"\n            if [[ ${words} =~ \\^${unique_chars:0:1}[0-9]*$ ]];\
    \ then\n                local count=$(awk -v word=\"${word}\" -v unique_chars=\"\
    ${unique_chars}\" 'BEGIN{\n                    for (i=1; i<=length($word); i++)\
    \ {\n                        for (j=1; j<=length($unique_chars); j++) {\n    \
    \                        if ($i == substr($word,i,1) && substr($unique_chars,j,1)\
    \ == substr($word,i,1) ) {\n                                count++\n        \
    \                    }\n                        }\n                    }\n   \
    \                 print count > unique_chars ? count : unique_chars\n        \
    \        }')\n                if (( ${count} > ${max_unique_chars_count} )) ;\
    \ then\n                    max_unique_chars_count=\"${count}\"\n            \
    \        max_unique_chars_word=\"${word}\"\n                fi\n            fi\n\
    \            j=$(( j + 1 ))\n        done\n        i=$(( i + 1 ))\n    done\n\
    \    echo \"${max_unique_chars_word}\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  # Convert $1 to an array (read\
    \ from stdin if $1 is empty)\n  local array=( $1 )\n  # Create a variable with\
    \ the maximum number of characters\n  local maxchars=${#array[@]}\n  # Keep track\
    \ of characters already seen to keep track of duplicates\n  local chars=\"\"\n\
    \  # Loop through the array\n  for i in \"${array[@]}\"; do\n    # Count the characters\
    \ in the current string and increment it if\n    # the current character is unique\n\
    \    local count=${#i}\n    (( ${#chars} < ${#count} )) && chars=\"$chars$i\"\
    \ || chars=\"$i\"\n  done\n  # If maxchars is higher than the number of characters\
    \ in chars, return the\n  # chars\n  [ $maxchars -gt ${#chars} ] && echo $chars\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local list_var=\"$1\"\n    #\
    \ ${list_var[@]} will iterate through the list, so \"for list_var in $list_var\"\
    \ works\n    local max_var=\"\"\n    local max_count=0\n\n    for list_var in\
    \ \"$list_var\"; do\n        count=0\n        for word in $list_var; do\n    \
    \        ((count+=${#word}))\n        done\n        if [[ ${count} -gt ${max_count}\
    \ ]]; then\n            max_count=${count}\n            max_var=${list_var}\n\
    \        fi\n    done\n\n    echo \"${max_var}\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local IFS= read -r -d '' max\n\
    \    local maxlen=0\n    for word in \"$@\"; do\n        local len=${#word}\n\
    \        if [[ $len -gt $maxlen ]]; then\n            max=${word}\n          \
    \  maxlen=${len}\n        elif [[ $len -eq $maxlen ]]; then\n            if [[\
    \ $len -gt 1 ]]; then\n                if [[ $word < $max ]]; then\n         \
    \           max=$word\n                fi\n            fi\n        fi\n    done\n\
    \n    echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp003p8jk2.sh: line 12: local: `-r'': not a valid identifier

    /tmp/tmp003p8jk2.sh: line 12: local: `-d'': not a valid identifier

    /tmp/tmp003p8jk2.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local wordlist=\"$1\" count=0\n\
    \  local max=\"\" count1=0\n  local list=\"\"\n  local i=0\n\n  while [ \"$i\"\
    \ -le \"${#wordlist[@]}\" ]; do\n    list=\"$list ${wordlist[$i]}\"\n    i=$((i+1))\n\
    \  done\n\n  local last=\"\"\n  for word in $list ; do\n    if [ -z \"$max\" ]\
    \ ; then\n      max=\"$word\"\n      count1=1\n    else\n      count1=0\n    \
    \  for chars in $word ; do\n        if [ \"${#max}\" -gt \"${#chars}\" ] ; then\n\
    \          max=\"${chars}\"\n          count1=1\n        else\n          count1=0\n\
    \        fi\n      done\n    fi\n\n    if [ $count1 -eq 1 ] ; then\n      echo\
    \ $max\n      return\n    fi\n  done\n\n  echo $max\n  return\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local IFS=' '\n  local -a list\n\
    \  local maxlen=${#1}\n  local maxword=${1}\n\n  maxlen=0\n  for x in \"${list[@]}\"\
    ; do\n    local len=${#x}\n    if [[ $len > $maxlen ]]; then\n      maxlen=$len\n\
    \      maxword=$x\n    fi\n  done\n\n  echo \"${maxword}\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    maxlen=0\n    maxword=\"\"\n\
    \    for i in \"$1\"; do\n        (( ${#i} > maxlen )) && maxlen=\"${#i}\"\n \
    \   done\n    for i in \"$1\"; do\n        (( ${#i} > maxlen )) && maxword=\"\
    ${i}\"\n    done\n    echo ${maxword}\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local arg\n    for arg; do\n\
    \        echo -n \"$arg\"\n        echo \"$arg\"\n    done\n    local temp\n \
    \   temp=$(sort -R -n <<< \"$1\" | tail -n 1)\n    if [ -z \"$temp\" ]; then\n\
    \        return\n    fi\n    local temp2\n    temp2=$(sort -R -n <<< \"$temp\"\
    \ | head -n 1)\n    if [ -z \"$temp2\" ]; then\n        return\n    fi\n    local\
    \ temp3\n    temp3=$(sort -R -n <<< \"$temp2\" | head -n 1)\n    echo $temp3\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: options ''-nR'' are incompatible

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local array=\"$1\"\n  local max_unique=0\n\
    \  local max_index=-1\n  for i in \"${array[@]}\"; do\n    ((max_unique+=(${#i})))\n\
    \  done\n  for (( i=0; i<${#array[@]}; i++ )); do\n    (( ${#array[$i]} > max_unique\
    \ ))\n  done\n  echo \"${array[$max_index]}\" >&2\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4k_ly82s.sh: line 21: array: bad array subscript


    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local words max_count max_word\n\
    \  local counts=()\n\n  # Split the list into words\n  for word in $*; do\n  \
    \  counts=($word:g)\n  done\n\n  # Get the max count of unique characters\n  max_count=$(\
    \ printf \"%s\" ${counts[@]} | sort -n | tail -1 )\n\n  # Get the word with max\
    \ count of unique characters\n  for word in $*; do\n    counts=($word:g)\n   \
    \ if [ ${#counts[@]} -gt $max_count ]; then\n      max_word=$word\n      max_count=$(\
    \ printf \"%s\" ${counts[@]} | sort -n | head -1 )\n    fi\n  done\n\n  # Return\
    \ max_word or \"\" if there are no words\n  return $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv8tuw_5k.sh: line 26: [: string:g: integer expression expected

    /tmp/tmpv8tuw_5k.sh: line 26: [: string:g: integer expression expected

    /tmp/tmpv8tuw_5k.sh: line 26: [: string:g: integer expression expected

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local list=(\"$@\")\n    local\
    \ max=0\n    local chars=()\n    for word in ${list[*]}; do\n        local c=0\n\
    \        for c in \"${word}\"; do\n            c=$((c+1))\n            if [ $c\
    \ -gt $max ]; then\n                max=$c\n                chars=(\"${word}\"\
    )\n            fi\n        done\n    done\n    local result=\"${chars[@]}\"\n\
    \    echo \"${result}\" | sort -u | head -1\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local words max\n  local maxlen\n\
    \n  words=( \"$@\" )\n  maxlen=$(echo \"${#words[*]}\" | tr ' ' '\\n')\n  max=${words[0]}\n\
    \  for (( i=0; i < ${#words[@]}; i++ )); do\n    for (( j=0; j < ${#words[@]};\
    \ j++ )); do\n      if [[ \"${#${words[$i]}}\" -gt \"$maxlen\" ]]; then\n    \
    \    max=${words[$i]}\n        maxlen=$(( ${#max} + 1 ))\n      fi\n    done\n\
    \  done\n  echo \"$max\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp40alpu_u.sh: line 20: ${#${words[$i]}}: bad substitution

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local words=\"$1\"\n    # Count\
    \ number of unique characters\n    local count\n    count=0\n    for i in $words;\
    \ do\n        ((count+=${#i}))\n    done\n    if [ $count -gt 1 ]; then\n    \
    \    # Sort words\n        echo \"$words\" | sort -g | head -1\n    else\n   \
    \     echo \"$words\"\n    fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    # set -x\n    local list\n \
    \   list=( \"$@\" )\n    local i\n    local len\n    len=${#list[@]}\n    for\
    \ (( i=0; i<len; i++ )); do\n        count=$( echo \"${list[i]}\" | uniq | wc\
    \ -l )\n        if [ $count -gt $max ]; then\n            max=$count\n       \
    \     result=${list[i]}\n        fi\n    done\n    echo \"$result\"\n    return\
    \ 0\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgq3viwtx.sh: line 20: [: 1: unary operator expected

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local list_str=$1\n    local\
    \ count=0\n    local tmp=\n    local new_list=\n    local unique_chars=0\n   \
    \ # Loop through the list to check if there are multiple words\n    for list_element\
    \ in $list_str; do\n        count=$(echo $list_element | wc -w)\n        if [\
    \ \"$count\" -gt \"1\" ]; then\n            tmp=$list_element\n            break\n\
    \        fi\n    done\n    new_list=$tmp\n    \n    # loop through the list again\
    \ to find out which word has the highest number of unique characters\n    for\
    \ list_element in $list_str; do\n        count=$(echo $list_element | wc -w)\n\
    \        if [ \"$count\" -eq \"1\" ]; then\n            unique_chars=$(echo $list_element\
    \ | wc -c | cut -d ' ' -f1)\n            break\n        fi\n    done\n    \n \
    \   # compare unique chars to find out which word is higher lexicographically\n\
    \    if [ \"$unique_chars\" -gt \"$count\" ]; then\n        new_list=$list_str\n\
    \    else\n        echo \"$new_list\"\n    fi\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local L=(${1//,/ })\n    local\
    \ L2\n    local LEN=0\n    local MAX_CHAR\n    local WORD_1\n    local WORD_2\n\
    \    local WORD_3\n    local WORD_4\n    local WORD_5\n    local WORD_6\n    local\
    \ WORD_7\n    local WORD_8\n    local WORD_9\n    local WORD_10\n    local WORD_11\n\
    \    local WORD_12\n    local WORD_13\n    local WORD_14\n    local WORD_15\n\
    \    local WORD_16\n    local WORD_17\n    local WORD_18\n    local WORD_19\n\
    \    local WORD_20\n    local WORD_21\n    local WORD_22\n    local WORD_23\n\
    \    local WORD_24\n    local WORD_25\n    local WORD_26\n    local WORD_27\n\
    \    local WORD_28\n    local WORD_29\n    local WORD_30\n    local WORD_31\n\
    \    local WORD_32\n    local WORD_33\n    local WORD_34\n    local WORD_35\n\
    \    local WORD_36\n    local WORD_37\n    local WORD_38\n    local WORD_39\n\
    \    local WORD_40\n    local WORD_41\n    local WORD_42\n    local WORD_43\n\
    \    local WORD_44\n    local WORD_45\n    local WORD_46\n    local WORD_47\n\
    \    local WORD_48\n    local WORD_49\n    local WORD_50\n    local WORD_51\n\
    \    local WORD_52\n    local WORD_53\n    local WORD_54\n    local WORD_55\n\
    \    local WORD_56\n    local WORD_57\n    local WORD_58\n    local WORD_59\n\
    \    local WORD_60\n    local WORD_61\n    local WORD_62\n    local WORD_63\n\
    \    local WORD_64\n    local WORD_65\n    local WORD_66\n    local WORD_67\n\
    \    local WORD_68\n    local WORD_69\n    local WORD_70\n    local WORD_71\n\
    \    local WORD_72\n    local WORD_73\n    local WORD_74\n    local WORD_75\n\
    \    local WORD_76\n    local WORD_77\n    local WORD_78\n    local WORD_79\n\
    \    local WORD_80\n    local WORD_81\n    local WORD_82\n    local WORD_83\n\
    \    local WORD_84\n    local WORD_85\n    local WORD_86\n    local WORD_87\n\
    \    local WORD_88\n    local WORD_89\n    local WORD_90\n    local WORD_91\n\
    \    local WORD_92\n    local WORD_93\n    local WORD_94\n    local WORD_95\n\
    \    local WORD_96\n    local WORD_97\n    \n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local arglist=$1\n    local\
    \ max_count=0\n    local max_str=\"\"\n    local count\n    local str\n    for\
    \ str in $arglist; do\n        count=$(echo $str |tr \" \" |wc -w)\n        if\
    \ [ \"$count\" -gt \"$max_count\" ]; then\n            max_count=$count\n    \
    \        max_str=$str\n        fi\n    done\n    echo \"$max_str\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: missing operand after \u2018 \u2019\nTwo strings must be given when\
    \ translating.\nTry 'tr --help' for more information.\ntr: missing operand after\
    \ \u2018 \u2019\nTwo strings must be given when translating.\nTry 'tr --help'\
    \ for more information.\ntr: missing operand after \u2018 \u2019\nTwo strings\
    \ must be given when translating.\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n    local words=( \"$1\" )\n   \
    \ local max_unique=0\n    local max_word\n    local i\n    for ((i=0; i<${#words[@]};\
    \ i++))\n    do\n        let \"max_unique+=${#words[$i]}\"\n        if [ \"$max_unique\"\
    \ -gt \"$max_word\" ]\n        then\n            max_unique=$max_word\n      \
    \      max_word=$words[i]\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprvekrcbu.sh: line 19: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660054753
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# find_max([\"name\"\
    , \"of\", \"string\"]) == \"string\"\n# find_max([\"name\", \"enam\", \"game\"\
    ]) == \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n#\n\
    # $1 is a space-separated list\nfind_max() {\n  local word_list=\"${1}\" # a list\
    \ of words\n  local max_count=0\n  local max_word=\"\"\n  local max_index=0\n\
    \  local i\n  local word\n  for (( i=0; i < ${#word_list[@]}; i++ )); do\n   \
    \ word=${word_list[$i]}\n    # Count how many times a character appears in the\
    \ word and save it if it\n    # appears the maximum number of times.\n    count=${#word}\n\
    \    if (( $count > $max_count )); then\n      max_count=$count\n      max_word=$word\n\
    \      max_index=$i\n    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054753
