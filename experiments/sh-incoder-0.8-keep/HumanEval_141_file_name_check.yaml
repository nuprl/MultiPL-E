name: HumanEval_141_file_name_check
language: sh
prompt: "#!/bin/bash\n# Create a function which takes a string representing a file's\
  \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# file_name_check(\"example.txt\"\
  ) # => 'Yes'\n# file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\n#\n# $1 is a string\nfile_name_check() {\n"
tests: "}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
  ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
  \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
  \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
  ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
  ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate\
  \ \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
  ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
  \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
  all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n \
  \   [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
  ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n\
  \    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
  ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\"\
  ) = \"No\" ]]\n}\n\nrun_test"
completions: ["  if [[ \"$1\" =~ ^[0-9]+$ ]]\n    then\n      echo \"Yes\"\n  else\n\
    \    echo \"No\"\n  fi", "  echo \"$1\" | grep -Eq \"^[0-9]\\{1,3\\}$\" > /dev/null\n\
    \  if [ $? -eq 0 ]; then\n    echo \"$1\" | grep -Eq \"\\.$\" > /dev/null\n  \
    \  if [ $? -eq 0 ]; then\n      echo \"$1\" | grep -Eq \"^[^\\.].*$\" > /dev/null\n\
    \      if [ $? -eq 0 ]; then\n        echo \"$1\" | grep -Eq \"^[a-z]$\" > /dev/null\n\
    \        if [ $? -eq 0 ]; then\n          echo \"$1\" | grep -Eq \"^[a-z].*$\"\
    \ > /dev/null\n          if [ $? -eq 0 ]; then\n            echo \"$1\" | grep\
    \ -Eq \"^[A-Z]$\" > /dev/null\n            if [ $? -eq 0 ]; then\n           \
    \   echo \"$1\" | grep -Eq \"^[A-Z].*$\" > /dev/null\n              if [ $? -eq\
    \ 0 ]; then\n                echo \"$1\" | grep -Eq \"^[0-9a-zA-Z].*$\" > /dev/null\n\
    \                if [ $? -eq 0 ]; then\n                  echo \"$1\" | grep -Eq\
    \ \"^[0-9a-zA-Z].*$\" > /dev/null\n                  if [ $? -eq 0 ]; then\n \
    \                   echo \"$1\" | grep -Eq \"^[0-9a-zA-Z_-].*$\" > /dev/null\n\
    \                    if [ $? -eq 0 ]; then\n                      echo \"$1\"\
    \ | grep -Eq \"^[0-9a-zA-Z_-].*$\" > /dev/null\n                      if [ $?\
    \ -eq 0 ]; then\n                        echo \"$1\" | grep -Eq \"^[0-9a-zA-Z_-].*$\"\
    \ > /dev/null\n                        if [ $? -eq 0 ]; then\n               \
    \           echo \"$1\" | grep -Eq \"^[0-9a-zA-Z_-].*$\" > /dev/null\n       \
    \                 fi\n                      fi\n                    fi\n     \
    \             fi\n                fi\n              fi\n            fi\n     \
    \     fi\n        fi\n      fi\n    fi\n  fi", "  if [ -z \"$1\" ]; then\n   \
    \ echo \"Invalid file name!\"\n    exit 1\n  fi\n  if [ $(expr length \"$1\")\
    \ == 0 ]; then\n    echo \"Invalid file name!\"\n    exit 1\n  fi\n  if [ $(expr\
    \ length \"$1\" | cut -c -2 ) == \"..\" ]; then \n    echo \"Invalid file name!\"\
    \n    exit 1\n  fi\n  file_name=$(echo \"$1\" | awk -F. '{print $1}' | awk -F.\
    \ '{print substr($1,2)}')\n  if ! [[ $file_name =~ ^[a-zA-Z][0-9][a-zA-Z].*$ ]];\
    \ then\n    echo \"Invalid file name!\"\n    exit 1\n  fi\n  ext=$(echo \"$1\"\
    \ | awk -F. '{print $2}')\n  valid_ext=(\"txt\" \"exe\" \"dll\")\n  if ! [[ \"\
    ${valid_ext[*]}\" =~ \"${ext}\" ]]; then\n    echo \"Invalid file name!\"\n  \
    \  exit 1\n  fi\n  valid_len=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\"\
    \ \"8\" \"9\")\n  if ! [[ $(expr length \"$file_name\" | cut -c -2 ) != \"${valid_len}\"\
    \ ]]; then\n    echo \"Invalid file name!\"\n    exit 1\n  fi\n  if ! [[ $(expr\
    \ length \"$file_name\" | cut -c -4 ) != \"0\" ]]; then\n    echo \"Invalid file\
    \ name!\"\n    exit 1\n  fi\n  valid_file=(\"${file_name%.*}\")\n  if ! [[ ${valid_file[@]}\
    \ =~ ^([a-zA-Z][a-zA-Z][a-zA-Z])([a-zA-Z0-9]){3}$ ]]; then\n    echo \"Invalid\
    \ file name!\"\n    exit 1\n  fi", "    local file_to_check=$1\n    local check_string=\n\
    \    local dot=${file_to_check%%.*}\n    local dot_check=false\n    local substr_before=\n\
    \    local substr_after=\n    local substr_before_check=\n    local substr_after_check=\n\
    \    local return_string=\n\n    if [[ \"$file_to_check\" =~ ^[0-9]([0-9]$)$ ]];\
    \ then\n        echo \"$file_to_check\"\n        return_string='Yes'\n    else\n\
    \        echo \"$file_to_check\"\n        return_string='No'\n    fi\n    \n \
    \   if [[ \"$file_to_check\" =~ \\.$ ]]; then\n        echo \"$file_to_check\"\
    \n        dot_check=true\n    fi\n    \n    if [[ \"$dot_check\" == false ]];\
    \ then\n        echo \"$file_to_check\"\n        substr_before_check=\"^[^A-Za-z]\"\
    \n        substr_after_check=\"[^A-Za-z]\"\n    else\n        echo \"$file_to_check\"\
    \n        substr_before_check=\"^[^a-z]\"\n        substr_after_check=\"[^a-z]\"\
    \n    fi\n    \n    if [[ \"$file_to_check\" =~ $substr_before_check ]]; then\n\
    \        echo \"$file_to_check\"\n        substr_before=\"${BASH_REMATCH[0]}\"\
    \n    fi\n    \n    if [[ \"$file_to_check\" =~ $substr_after_check ]]; then\n\
    \        echo \"$file_to_check\"\n        substr_after=\"${BASH_REMATCH[0]}\"\n\
    \    fi\n    \n    if [[ \"$substr_before\" != \"\" ]]; then\n        if [[ \"\
    $file_to_check\" =~ ^$substr_before.* ]]; then\n            echo \"$file_to_check\"\
    \n            substr_before_check=\"$substr_before\"\n            return_string='Yes'\n\
    \        fi\n    fi\n    \n    if [[ \"$substr_after\" != \"\" ]]; then\n    \
    \    if [[ \"$file_to_check\" =~ $substr_after.* ]]; then\n            echo \"\
    $file_to_check\"\n            substr_after_check=\"$substr_after\"\n         \
    \   return_string='Yes'\n        fi\n    fi\n    \n    if [[ \"$substr_before_check\"\
    \ != \"\" ]]; then\n        if [[ \"$file_to_check\" =~ $substr_before_check.*\
    \ ]]; then\n            echo \"$file_to_check\"\n            substr_before_check=\"\
    $substr_before_check\"\n            return_string='Yes'\n        fi\n    fi\n\
    \    \n    if [[ \"$substr_after_check\" != \"\" ]]; then\n        if [[ \"$file_to_check\"\
    \ =~ $substr_after_check.* ]]; then\n", "  if [ ${#1} -gt 3 ]; then\n    echo\
    \ \"ERROR: file name should contains no more than three digits\"\n    exit 1\n\
    \  fi\n  if [ ${#1} -lt 2 ]; then\n    echo \"ERROR: file name should contains\
    \ one dot (.)\"\n    exit 1\n  fi\n  if [ ${#1} -eq 1 ] && [[ ${#1} != \"${#1}\"\
    \ ]]; then\n    echo \"ERROR: file name should contains no more than one dot (.)\"\
    \n    exit 1\n  fi\n  if [[ ${#1} =~ ^[0-9][0-9]$ ]]; then\n    echo \"ERROR:\
    \ file name should contains no more than one dot (.)\"\n    exit 1\n  fi\n  \n\
    \  if [[ ${#1} =~ ^[a-z][a-z] ]]; then\n    echo \"ERROR: file name should contains\
    \ no more than one dot (.)\"\n    exit 1\n  fi\n  \n  \n  if [[ ${#1} =~ \\.(txt|exe|dll)$\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi", "  if [[ ${#1} -gt\
    \ 3 ]]; then\n    echo \"Too many digits in ${1}\"\n    return 1\n  fi\n  if [[\
    \ \"${1}\" =~ ^[0-9]+$ ]]; then\n    if [[ \"${1}\" =~ ^[0-9]+ ]]; then\n    \
    \  echo \"Cannot have two or more digits in ${1}\"\n      return 1\n    fi\n \
    \ fi\n  if [[ \"${1}\" =~ (^| )\\.[^\\.]*$ ]]; then\n    if [[ \"${1}\" =~ ^.+\
    \ ]]; then\n      echo \"Cannot have a trailing dot '${1}' in ${1}\"\n      return\
    \ 1\n    fi\n  fi\n  if [[ \"${1}\" =~ ^[a-z][a-z] ]]; then\n    echo \"Invalid\
    \ char '${1}' in ${1}\"\n    return 1\n  fi\n  return 0", "  local file_name=$1\n\
    \  # Make sure there are not more than three digits in the file name\n  local\
    \ file_name_len=$(echo $file_name|wc -w)\n  if [ $file_name_len -gt 3 ]; then\n\
    \    echo \"$file_name_len > 3 digits in length\"\n    return 1\n  fi\n\n  # Make\
    \ sure there is only one dot in file name\n  local file_name_dot_index=$(echo\
    \ $file_name|grep -o '\\.')\n  if [ -z $file_name_dot_index ]; then\n    echo\
    \ \"No dots in file name\"\n    return 1\n  fi\n\n  # Make sure the substring\
    \ before dot is not empty, and it starts with a letter from the latin alphabetet\n\
    \  local file_name_before_dot=$(echo $file_name|cut -d '.' -f1)\n  if [ -z $file_name_before_dot\
    \ ]; then\n    echo \"Substring before dot is empty\"\n    return 1\n  fi\n\n\
    \  # Make sure the substring after dot is one of these: ['txt', 'exe', 'dll']\n\
    \  local file_name_after_dot=$(echo $file_name|cut -d '.' -f2)\n  local valid_extensions=(txt\
    \ exe dll)\n  local file_name_after_dot_length=$(echo $file_name_after_dot|wc\
    \ -w)\n  if [ $file_name_after_dot_length -gt 3 ]; then\n    echo \"$file_name_after_dot_length\
    \ > 3 extensions in length\"\n    return 1\n  fi\n\n  for valid_extension in \"\
    ${valid_extensions[@]}\"; do\n    if [ \"$valid_extension\" == \"$file_name_after_dot\"\
    \ ]; then\n      return 0\n    fi\n  done\n\n  echo \"$file_name_after_dot is\
    \ not a valid extension\"\n  return 1", "  local name=$1\n  local extension=\"\
    ${name##*.}\"\n  local first=\"${name%%.*}\"\n  if [[ \"$first\" == \"\" ]]\n\
    \  then\n    [[ \"$name\" == *\".*\" ]]\n  else\n    local length=\"${#first}\"\
    \n    if [[ ${first:0:1} == \"[\" ]]\n    then\n      echo \"$name is not a valid\
    \ file name.\"\n    else\n      if [[ \"$length\" -gt 3 ]]\n      then\n     \
    \   echo \"$name is not a valid file name.\"\n      else\n        local sub=\"\
    ${first%%.*}\"\n        if [[ ${sub:0:1} == \"[\" ]]\n        then\n         \
    \ echo \"$name is not a valid file name.\"\n        else\n          if [[ ${sub:0:1}\
    \ == \"-\" ]]\n          then\n            echo \"$name is not a valid file name.\"\
    \n          else\n            if [[ \"$sub\" =~ ^[a-z][a-z]*$ ]]\n           \
    \ then\n              if [[ \"$extension\" == *\".txt\" ]]\n              then\n\
    \                echo \"$name is a valid file name.\"\n              else\n  \
    \              if [[ \"$extension\" == *\".exe\" ]]\n                then\n  \
    \                echo \"$name is a valid file name.\"\n                else\n\
    \                  if [[ \"$extension\" == *\".dll\" ]]\n                  then\n\
    \                    echo \"$name is a valid file name.\"\n                  else\n\
    \                    echo \"$name is not a valid file name.\"\n              \
    \    fi\n                fi\n              fi\n            else\n            \
    \  echo \"$name is not a valid file name.\"\n            fi\n          fi\n  \
    \      fi\n      fi\n    fi\n  fi", "  local file_name=\"$1\"\n  local regex=\"\
    ^[0-9]+[a-zA-z].*\"\n  [[ \"$file_name\" =~ $regex ]] && \\\n    [[ \"$file_name\"\
    \ =~ .+\\.[a-z]+$ ]] && \\\n    [[ \"$file_name\" =~ .+\\.[a-z]+$ .+$ ]] && \\\
    \n    [[ \"$file_name\" =~ .+\\.[a-z]+$ ]] &&\n    echo \"Yes\"\n  else\n    echo\
    \ \"No\"\n  fi", "    local FILE_NAME=\"$1\"\n    local LENGTH=$(echo \"${FILE_NAME}\"\
    \ | wc -c)\n    if [[ ${LENGTH} -lt 3 ]]; then\n        echo \"No\"\n    else\n\
    \        if [[ \"${FILE_NAME}\" =~ ^[0-9].*$ ]]; then\n            echo \"No\"\
    \n        else\n            if [[ \"${FILE_NAME}\" =~ .* ]]; then\n          \
    \      if [[ \"${FILE_NAME}\" =~ ^[a-z].*$ ]]; then\n                    if [[\
    \ \"${FILE_NAME}\" =~ ^[a-zA-Z].*$ ]]; then\n                        echo \"Yes\"\
    \n                    else\n                        echo \"No\"\n            \
    \        fi\n                else\n                    echo \"No\"\n         \
    \       fi\n            else\n                echo \"No\"\n            fi\n  \
    \      fi\n    fi", "  # Remove leading and trailing space\n  file_name=$1\n \
    \ file_name=\"${file_name// /}\"\n  file_name=\"${file_name// /}\"\n\n  # Remove\
    \ spaces\n  file_name=\"${file_name//[[:space:]]/}\"\n  \n  # Remove leading dot\
    \ if present\n  if [[ ${file_name} == *\".\"* ]]; then\n    file_name=\"${file_name%.}\"\
    \n  fi\n\n  # Remove trailing dot if present\n  if [[ ${file_name} == *\".\"*\
    \ ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # Remove leading zero\
    \ if present\n  if [[ ${file_name} == *\".0\"* ]]; then\n    file_name=\"${file_name%.}\"\
    \n  fi\n\n  # Remove leading zeroes if present\n  if [[ ${file_name} == *\".0\"\
    * ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # Remove leading zeroes\
    \ if present\n  if [[ ${file_name} == *\".0\"* ]]; then\n    file_name=\"${file_name#*.}\"\
    \n  fi\n\n  # Remove leading '0' if present\n  if [[ ${file_name} == *\".0\"*\
    \ ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # Remove all digits and\
    \ dots from the file's name\n  file_name=\"${file_name//[^0-9\\.]/}\"\n\n  # Remove\
    \ leading '0' if present\n  if [[ ${file_name} == *\".0\"* ]]; then\n    file_name=\"\
    ${file_name#*.}\"\n  fi\n\n  # Remove leading '0' if present\n  if [[ ${file_name}\
    \ == *\".0\"* ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # Remove\
    \ leading '0' if present\n  if [[ ${file_name} == *\".0\"* ]]; then\n    file_name=\"\
    ${file_name#*.}\"\n  fi\n\n  # Remove leading '0' if present\n  if [[ ${file_name}\
    \ == *\".0\"* ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # Remove\
    \ trailing '0' if present\n  if [[ ${file_name} == *\".0\"* ]]; then\n    file_name=\"\
    ${file_name%.}\"\n  fi\n\n  # Remove trailing '0' if present\n  if [[ ${file_name}\
    \ == *\".0\"* ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # Remove\
    \ trailing '0' if present\n  if [[ ${file_name} == *\".0\"* ]]; then\n    file_name=\"\
    ${file_name#*.}\"\n  fi\n\n  # Remove trailing '0' if present\n  if [[ ${file_name}\
    \ == *\".0\"* ]]; then\n    file_name=\"${file_name#*.}\"\n  fi\n\n  # ", "  \
    \  local file=\"$1\"\n    echo \"Checking file: $file\"\n    local filename=${file##*/}\n\
    \    local ext=${filename##*.}\n    if [[ \"$ext\" != \"exe\" ]]\n    then\n \
    \       # Check that $file does not contain three digits (0-9).\n        if [[\
    \ \"$filename\" =~ ^([0-9])+$ ]]\n        then\n            echo \"Invalid file\
    \ name\"\n            exit 1\n        fi\n        # Check that $file does contain\
    \ exactly one dot ('.').\n        if [[ \"$filename\" =~ ^\\.+$ ]]\n        then\n\
    \            echo \"Invalid file name\"\n            exit 1\n        fi\n    \
    \    # Check that $file does not start with a blank character '#'.\n        if\
    \ [[ \"$filename\" =~ ^\\#.* ]]\n        then\n            echo \"Invalid file\
    \ name\"\n            exit 1\n        fi\n        # Check that $file does not\
    \ contain any dot characters '#' \n        if [[ \"$filename\" =~ ^#.* ]]\n  \
    \      then\n            echo \"Invalid file name\"\n            exit 1\n    \
    \    fi\n        # Check that $file does not contain any dot characters '.' \n\
    \        if [[ \"$filename\" =~ \\.$ ]]\n        then\n            echo \"Invalid\
    \ file name\"\n            exit 1\n        fi\n        # Check that $file does\
    \ not contain any dot characters '_' \n        if [[ \"$filename\" =~ _. ]]\n\
    \        then\n            echo \"Invalid file name\"\n            exit 1\n  \
    \      fi\n    else\n        # Check that $file does not contain three digits\
    \ (0-9).\n        if [[ \"$filename\" =~ ^([0-9])+$ ]]\n        then\n       \
    \     echo \"Invalid file name\"\n            exit 1\n        fi\n        # Check\
    \ that $file does contain exactly one dot ('.').\n        if [[ \"$filename\"\
    \ =~ ^\\.+$ ]]\n        then\n            echo \"Invalid file name\"\n       \
    \     exit 1\n        fi\n        # Check that $file does not start with a blank\
    \ character '#'.\n        if [[ \"$filename\" =~ ^\\#.* ]]\n        then\n   \
    \         echo \"Invalid file name\"\n            exit 1\n        fi\n       \
    \ # Check that $file does not contain any dot characters '#' \n        if [[ \"\
    $filename\" =~ ^#.* ]]\n        then\n            echo \"Invalid file name\"\n\
    \            exit 1\n        fi\n        # Check that $file does not contain any\
    \ dot characters '.' \n        if [[ \"$filename\" =~ \\.$ ]]\n        then\n\
    \            echo \"Invalid file name\"\n            exit 1\n        fi\n    \
    \    # Check that $file does not contain any dot characters '_' \n        if ",
  "  if [[ ${#1} != 6 ]]; then\n    echo \"ERROR: This script needs a file name as\
    \ a parameter!\"\n    exit 1\n  fi\n  if [[ ${#1} == \"${#1}\" ]]; then\n    echo\
    \ \"ERROR: Invalid file name provided! File name should not contain more than\
    \ 3 digits!\" \n    exit 1\n  fi\n  if [[ ${#1} == [0-9] ]]; then\n    echo \"\
    ERROR: Invalid file name provided! File name should contain exactly one dot '.'!\"\
    \ \n    exit 1\n  fi\n  local file\n  file=$1\n  local result\n  result=$(echo\
    \ $file | awk -F\".\" '{ if (NF==1) print substr($1,1,1); else print substr($1,2)\
    \ }')\n  if [[ \"$result\" == \"$result\" ]]; then\n    echo \"ERROR: Invalid\
    \ file name provided! Substring before dot should be empty!\" \n    exit 1\n \
    \ fi\n  result=$(echo $file | awk -F\".\" '{ if (NF==1) print substr($1,length($1)-1);\
    \ else print substr($1,length($1)-1) }')\n  if [[ \"$result\" == \"txt\" ]]; then\n\
    \    echo \"ERROR: Invalid file name provided! Substring after dot should be one\
    \ of these: txt, exe, dll!\" \n    exit 1\n  fi", "  local string=\"$1\"\n  local\
    \ digits=$(echo \"$string\" | sed -e 's/^[^0-9]\\+//g' -e 's/[^0-9]\\+$//g' -e\
    \ 's/^\\.//g')\n  local dots=$(echo \"$string\" | sed -e 's/^[^\\.]\\+//g' -e\
    \ 's/[^\\.]\\+$//g')\n  local name=$(echo \"$string\" | sed -e 's/^[^a-z\\.]\\\
    +//g' -e 's/[^a-z\\.]\\+$//g')\n  local firstletter=$(echo \"$name\" | head -c\
    \ 1)\n  local valid=yes\n  if [ \"$digits\" != \"0\" ]; then\n    valid=no\n \
    \ else\n    if [ \"$name\" != \"$string\" ]; then\n      valid=no\n    elif [\
    \ \"$firstletter\" != \"$firstletter\" ]; then\n      valid=no\n    elif [ \"\
    $dots\" != \".\" ]; then\n      valid=no\n    else\n      valid=yes\n    fi\n\
    \  fi\n  echo \"$valid\"", "    string=$1\n    if [[ $string =~ ([0-9][0-9][0-9])+\\\
    .txt$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "  local file=\"$1\";\n  [[ \"$file\" =~ ^[0-9]\\{3,\\}\\.[a-z][a-z][a-z]$ ]] ||\
    \ return 1;\n  [[ \"$file\" =~ ^[a-z]* ]] || return 1;\n  [[ \"$file\" =~ ^[a-z][a-z]*\
    \ ]] || return 1;\n  [[ -f \"$file\" ]] || return 1;\n  [[ -f \"${file%.*}\" ]]\
    \ || return 1;\n  [[ -f \"${file%.*}\" ]] || return 1;\n  [[ \"$file\" =~ ^[a-z][a-z]*\
    \ ]] || return 1;\n  [[ \"$file\" =~ ^[a-z]* ]] || return 1;\n  [[ \"$file\" =~\
    \ ^[a-z]* ]] || return 1;\n  return 1;", "  if [[ \"${1:0:3}\" != [0-9][0-9] ]];\
    \ then\n    echo \"No\" > $2\n  else\n    file_name_check_flag=1\n    for ((i=0;\
    \ i<${#1}; i++)); do\n      if [[ \"$i\" -ne 0 ]]; then\n        if [[ \"${1:i:1}\"\
    \ == \".\" ]]; then\n          if [[ \"${1:i:1}\" != \"\" ]]; then\n         \
    \   if [[ \"${1:i:1}\" == \"0\" ]]; then\n              file_name_check_flag=0\n\
    \              echo \"No\" > $2\n              break\n            else\n     \
    \         file_name_check_flag=1\n            fi\n          else\n           \
    \ file_name_check_flag=0\n            echo \"No\" > $2\n            break\n  \
    \        fi\n        else\n          file_name_check_flag=1\n          if [[ $1\
    \ =~ ^[a-zA-Z] ]]; then\n            if [[ \"$1\" =~ ^[a-zA-Z].* ]]; then\n  \
    \            if [[ \"$1\" =~ ^[a-zA-Z]. ]]; then\n                if [[ \"$1\"\
    \ =~ ^[a-zA-Z]..* ]]; then\n                  if [[ \"$1\" =~ ^[a-zA-Z]...* ]];\
    \ then\n                    file_name_check_flag=0\n                    echo \"\
    No\" > $2\n                    break\n                  else\n               \
    \     file_name_check_flag=1\n                  fi\n                else\n   \
    \               file_name_check_flag=1\n                fi\n              else\n\
    \                if [[ \"$1\" =~ ^[a-zA-Z]..* ]]; then\n                  if [[\
    \ \"$1\" =~ ^[a-zA-Z]. ]]; then\n                    file_name_check_flag=1\n\
    \                  else\n                    file_name_check_flag=0\n        \
    \            echo \"No\" > $2\n                    break\n                  fi\n\
    \                else\n                  file_name_check_flag=1\n            \
    \    fi\n              fi\n            else\n              file_name_check_flag=1\n\
    \            fi\n          else\n            file_name_check_flag=1\n        \
    \  fi\n        fi\n      fi\n    done\n  fi\n  cat $2", "\tlocal file_name file_ext\
    \ file_part file_name_check valid_check\n\tfile_name=$1\n\tfile_ext=\"${file_name##*.}\"\
    \n\tfile_part=\"${file_name%.*}\"\n\tfile_name_check=\"No\"\n\tvalid_check=\"\
    No\"\n\tcase \"$file_ext\" in\n\t\ttxt|exe|dll)\n\t\t\techo \"$file_ext\"\n\t\t\
    \tfile_name_check=\"Yes\"\n\t\t\tvalid_check=\"Yes\"\n\t\t\t;;\n\t\t*)\n\t\t\t\
    echo \"$file_ext\"\n\t\t\tfile_name_check=\"No\"\n\t\t\tvalid_check=\"No\"\n\t\
    \t\t;;\n\tesac\n\tcase \"$file_part\" in\n\t\t*)\n\t\t\techo \"$file_part\"\n\t\
    \t\tfile_name_check=\"No\"\n\t\t\tvalid_check=\"No\"\n\t\t\t;;\n\t\tesac\n\tcase\
    \ \"$file_name_check\" in\n\t\tYes)\n\t\t\techo \"$valid_check\"\n\t\t\tvalid_check=\"\
    $file_name_check\"\n\t\t\t;;\n\t\tNo)\n\t\t\techo \"$valid_check\"\n\t\t\tvalid_check=\"\
    $file_name_check\"\n\t\t\t;;\n\tesac", "  FILE_NAME=$1\n  if [[ $FILE_NAME =~\
    \ ^[0-9][0-9][0-9]\\.[a-z]+$ && \\\n   ! $FILE_NAME =~ ^[a-z]$ && \\\n   ! $FILE_NAME\
    \ =~ ^[a-z][a-z]*$ && \\\n   ! $FILE_NAME =~ ^[a-z][a-z][0-9]*$ && \\\n   ! $FILE_NAME\
    \ =~ ^[0-9][0-9]*\\.[a-z]*$ && \\\n   ! $FILE_NAME =~ ^[a-z][0-9]*\\.[a-z]*$ &&\
    \ \\\n   ! $FILE_NAME =~ ^[a-z][0-9][0-9]*\\.[a-z]*$ && \\\n   ! $FILE_NAME =~\
    \ ^[a-z]*\\.[a-z]*$ ]]\n  then\n    echo $FILE_NAME\n  else\n    echo $FILE_NAME\n\
    \  fi", "  file_name=$1\n  if [[ $file_name =~ (^[0-9]$)|(^[0-9][0-9][0-9][0-9][^0-9].*\\\
    ..*$)|(^[0-9][0-9][0-9][0-9][^0-9]$)|(^[0-9][0-9][0-9][0-9].*\\..*$) ]]; then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  fi"]
stop_tokens:
- "\n}"
