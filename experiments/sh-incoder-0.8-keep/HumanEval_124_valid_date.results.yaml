language: sh
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    if [ -z \"$date\" ]; then\n        return 0;\n   \
    \ fi\n    local IFS='-' read -r -a arr <<< \"$date\"\n    local valid=1\n    if\
    \ [[ ${#arr[*]} != 4 ]]; then\n        valid=0\n    fi\n    local months=0\n \
    \   local days=0\n    local years=0\n    for month in \"${arr[@]}\"; do\n    \
    \    (( months++ ))\n        if [[ \"$month\" -le 1 || \"$month\" -ge 12 ]]; then\n\
    \            valid=0\n            break\n        fi\n    done\n    for day in\
    \ \"${arr[@]}\"; do\n        (( days++ ))\n        if [[ \"$day\" -le 1 || \"\
    $day\" -ge 31 ]]; then\n            valid=0\n            break\n        fi\n \
    \   done\n    for year in \"${arr[@]}\"; do\n        (( years++ ))\n        if\
    \ [[ \"$year\" -le 1 || \"$year\" -ge 30 ]]; then\n            valid=0\n     \
    \       break\n        fi\n    done\n    if [[ $months -le 1 || $months -ge 12\
    \ ]]; then\n        valid=0\n    elif [[ $days -le 1 || $days -ge 31 ]]; then\n\
    \        valid=0\n    elif [[ $days -le 1 || $days -ge 30 ]]; then\n        valid=0\n\
    \    elif [[ $days -le 1 || $days -ge 29 ]]; then\n        valid=0\n    fi\n \
    \   if [[ $valid -eq 1 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptyylqxo6.sh: line 22: local: `-r'': not a valid identifier

    /tmp/tmptyylqxo6.sh: line 22: local: `-a'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660054574
- exit_code: -1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    read date\n    # Write your code here.\n    month=$(awk -F \"-\" '{print\
    \ $1}' <<< ${date:0:2})\n    day=$(awk -F \"-\" '{print $2}' <<< ${date:2:2})\n\
    \    year=$(awk -F \"-\" '{print $3}' <<< ${date:4:8})\n    if [ ${month} -le\
    \ 1 ] || [ ${month} -ge 12 ]; then\n        echo \"False\"\n    elif [ ${day}\
    \ -le 1 ] || [ ${day} -ge 31 ] || [ ${day} -le 30 ] || [ ${day} -ge 29 ]; then\n\
    \        echo \"False\"\n    elif [ ${month} -eq 2 ] && [ ${day} -eq 29 ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=10 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660054579
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date_check=( $1 )\n    local month_check=( $(date -d \"$1\" --date=\"\
    +%m\" ) )\n    local date_length=${#date_check[@]}\n    local month_length=${#month_check[@]}\n\
    \    local months=( {1..12} )\n    local months_length=${#months[@]}\n    local\
    \ days=( {1..31} )\n    local days_length=${#days[@]}\n    local days_in_month=(\
    \ {1..31} )\n    local days_in_month_length=${#days_in_month[@]}\n    local days_in_year=(\
    \ {1..366} )\n    local days_in_year_length=${#days_in_year[@]}\n    \n    if\
    \ [[ ${#date_check[@]} -eq 0 ]]; then\n        return 0;\n    fi\n    if [[ ${#month_check[@]}\
    \ -lt 1 || ${#month_check[@]} -gt 12 ]]; then\n        return 0;\n    fi\n   \
    \ if [[ ${#date_check[@]} != 2 ]]; then\n        return 0;\n    fi\n    if [[\
    \ ${#date_check[1]} != -2 ]]; then\n        echo \"Error: The date format should\
    \ be mm-dd-yyyy\"\n        return 0;\n    fi\n    if [[ ${#month_check[@]} -lt\
    \ 1 || ${#month_check[@]} -gt 12 ]]; then\n        echo \"Error: The months format\
    \ should be 1-12\"\n        return 0;\n    fi\n    if [[ ${#days_check[@]} -lt\
    \ 1 || ${#days_check[@]} -gt 31 ]]; then\n        echo \"Error: The days format\
    \ should be 1-31\"\n        return 0;\n    fi\n    if [[ ${#days_in_month[@]}\
    \ -lt 1 || ${#days_in_month[@]} -gt 31 ]]; then\n        echo \"Error: The days\
    \ in a month format should be 1-31\"\n        return 0;\n    fi\n    if [[ ${#days_in_year[@]}\
    \ -lt 1 || ${#days_in_year[@]} -gt 366 ]]; then\n        echo \"Error: The days\
    \ in a year format should be 1-366\"\n        return 0;\n    fi\n    \n    if\
    \ [[ ${date_length} -lt 1 || ${date_length} -gt 2 ]]; then\n        echo \"Error:\
    \ The date string is not valid.\"\n        return 0;\n    fi\n    if [[ ${month_length}\
    \ -lt 1 || ${month_length} -gt 12 ]]; then\n        echo \"Error: The months format\
    \ is not valid.\"\n        return 0;\n    fi\n    if [[ ${date_length} != 2 ]];\
    \ then\n        echo \"Error: The \n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9wjxkp83.sh: line 94: unexpected EOF while looking for matching
    `"''

    /tmp/tmp9wjxkp83.sh: line 98: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local months=$2\n  local years=$3\n  local days=$4\n\n\
    \  [[ -z \"$date\" ]] && return 1\n  [[ -z \"$months\" ]] && return 1\n  [[ -z\
    \ \"$years\" ]] && return 1\n  [[ -z \"$days\" ]] && return 1\n  [[ \"$months\"\
    \ -lt 1 ]] && return 1\n  [[ \"$months\" -gt 12 ]] && return 1\n  [[ \"$days\"\
    \ -lt 1 ]] && return 1\n  [[ \"$days\" -gt 31 ]] && return 1\n  [[ \"$months\"\
    \ -gt 2 ]] && return 1\n  [[ \"$days\" -gt 29 ]] && return 1\n\n  [[ \"$months\"\
    \ -le 12 ]] && [[ \"$years\" -le 31 ]] && [[ \"$days\" -le 31 ]] && return 0\n\
    \  [[ \"$months\" -le 12 ]] && [[ \"$years\" -le 30 ]] && [[ \"$days\" -le 30\
    \ ]] && return 0\n  [[ \"$months\" -le 12 ]] && [[ \"$years\" -le 29 ]] && [[\
    \ \"$days\" -le 29 ]] && return 0\n\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    date \"+%m-%d-%Y\" -d \"$1\" >/dev/null\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "date: invalid date \u201803-11-2000\u2019\n"
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  date=$date \\\n      date -d \"$date\" > /dev/null 2>&1\n\
    \  echo $?\n  if [ $? -eq 0 ]; then\n    local month=$( date -d \"$date\" +%m\
    \ )\n    local day=$( date -d \"$date\" +%d )\n    local year=$( date -d \"$date\"\
    \ +%Y )\n    [ \"$month\" -lt 1 ] || [ \"$month\" -gt 12 ] || [ \"$day\" -lt 1\
    \ ] || [ \"$day\" -gt 31 ] || [ \"$day\" -lt 30 ] || [ \"$month\" -lt 1 ] || [\
    \ \"$month\" -gt 12 ] || [ \"$year\" -lt 1 ] || [ \"$year\" -gt 100 ]\n  else\n\
    \    false\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "date: invalid date \u201803-11-2000\u2019\ndate: invalid date \u201803-11-2000\u2019\
    \ndate: invalid date \u201803-11-2000\u2019\n/tmp/tmpe2hj6tr8.sh: line 26: [:\
    \ : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression\
    \ expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh:\
    \ line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [:\
    \ : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression\
    \ expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh:\
    \ line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [:\
    \ : integer expression expected\n"
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  test -n \"$1\" && {\n    local valid=1\n    IFS=\"-\" read -ra dat <<<\
    \ \"$1\"\n    test ${#dat[@]} == 2 && {\n      local mm=${dat[0]}\n      local\
    \ dd=${dat[1]}\n      test \"$mm\" -ge 1 && test \"$mm\" -le 12 && test \"$dd\"\
    \ -ge 1 && test \"$dd\" -le 31 && {\n        local days_in_month=( $(date -d \"\
    $mm-$dd-2020\" +%k) )\n        test ${#days_in_month[@]} -ge 1 && test ${#days_in_month[@]}\
    \ -le 29 && {\n          local days_in_year=( $(date -d \"$mm-$dd-2020\" +%d)\
    \ )\n          test ${#days_in_year[@]} -ge 1 && test ${#days_in_year[@]} -le\
    \ 30 &&\n          {\n            valid=0\n          } || {\n            valid=1\n\
    \          }\n        } || {\n          valid=1\n        }\n      } || {\n   \
    \     valid=1\n      }\n    } || {\n      valid=1\n    }\n    test \"$valid\"\
    \ = 0\n  }\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054574
