language: sh
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    if [ -z \"$date\" ]; then\n        return 0;\n   \
    \ fi\n    local IFS='-' read -r -a arr <<< \"$date\"\n    local valid=1\n    if\
    \ [[ ${#arr[*]} != 4 ]]; then\n        valid=0\n    fi\n    local months=0\n \
    \   local days=0\n    local years=0\n    for month in \"${arr[@]}\"; do\n    \
    \    (( months++ ))\n        if [[ \"$month\" -le 1 || \"$month\" -ge 12 ]]; then\n\
    \            valid=0\n            break\n        fi\n    done\n    for day in\
    \ \"${arr[@]}\"; do\n        (( days++ ))\n        if [[ \"$day\" -le 1 || \"\
    $day\" -ge 31 ]]; then\n            valid=0\n            break\n        fi\n \
    \   done\n    for year in \"${arr[@]}\"; do\n        (( years++ ))\n        if\
    \ [[ \"$year\" -le 1 || \"$year\" -ge 30 ]]; then\n            valid=0\n     \
    \       break\n        fi\n    done\n    if [[ $months -le 1 || $months -ge 12\
    \ ]]; then\n        valid=0\n    elif [[ $days -le 1 || $days -ge 31 ]]; then\n\
    \        valid=0\n    elif [[ $days -le 1 || $days -ge 30 ]]; then\n        valid=0\n\
    \    elif [[ $days -le 1 || $days -ge 29 ]]; then\n        valid=0\n    fi\n \
    \   if [[ $valid -eq 1 ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptyylqxo6.sh: line 22: local: `-r'': not a valid identifier

    /tmp/tmptyylqxo6.sh: line 22: local: `-a'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660054574
- exit_code: -1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    read date\n    # Write your code here.\n    month=$(awk -F \"-\" '{print\
    \ $1}' <<< ${date:0:2})\n    day=$(awk -F \"-\" '{print $2}' <<< ${date:2:2})\n\
    \    year=$(awk -F \"-\" '{print $3}' <<< ${date:4:8})\n    if [ ${month} -le\
    \ 1 ] || [ ${month} -ge 12 ]; then\n        echo \"False\"\n    elif [ ${day}\
    \ -le 1 ] || [ ${day} -ge 31 ] || [ ${day} -le 30 ] || [ ${day} -ge 29 ]; then\n\
    \        echo \"False\"\n    elif [ ${month} -eq 2 ] && [ ${day} -eq 29 ]; then\n\
    \        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=10 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660054579
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date_check=( $1 )\n    local month_check=( $(date -d \"$1\" --date=\"\
    +%m\" ) )\n    local date_length=${#date_check[@]}\n    local month_length=${#month_check[@]}\n\
    \    local months=( {1..12} )\n    local months_length=${#months[@]}\n    local\
    \ days=( {1..31} )\n    local days_length=${#days[@]}\n    local days_in_month=(\
    \ {1..31} )\n    local days_in_month_length=${#days_in_month[@]}\n    local days_in_year=(\
    \ {1..366} )\n    local days_in_year_length=${#days_in_year[@]}\n    \n    if\
    \ [[ ${#date_check[@]} -eq 0 ]]; then\n        return 0;\n    fi\n    if [[ ${#month_check[@]}\
    \ -lt 1 || ${#month_check[@]} -gt 12 ]]; then\n        return 0;\n    fi\n   \
    \ if [[ ${#date_check[@]} != 2 ]]; then\n        return 0;\n    fi\n    if [[\
    \ ${#date_check[1]} != -2 ]]; then\n        echo \"Error: The date format should\
    \ be mm-dd-yyyy\"\n        return 0;\n    fi\n    if [[ ${#month_check[@]} -lt\
    \ 1 || ${#month_check[@]} -gt 12 ]]; then\n        echo \"Error: The months format\
    \ should be 1-12\"\n        return 0;\n    fi\n    if [[ ${#days_check[@]} -lt\
    \ 1 || ${#days_check[@]} -gt 31 ]]; then\n        echo \"Error: The days format\
    \ should be 1-31\"\n        return 0;\n    fi\n    if [[ ${#days_in_month[@]}\
    \ -lt 1 || ${#days_in_month[@]} -gt 31 ]]; then\n        echo \"Error: The days\
    \ in a month format should be 1-31\"\n        return 0;\n    fi\n    if [[ ${#days_in_year[@]}\
    \ -lt 1 || ${#days_in_year[@]} -gt 366 ]]; then\n        echo \"Error: The days\
    \ in a year format should be 1-366\"\n        return 0;\n    fi\n    \n    if\
    \ [[ ${date_length} -lt 1 || ${date_length} -gt 2 ]]; then\n        echo \"Error:\
    \ The date string is not valid.\"\n        return 0;\n    fi\n    if [[ ${month_length}\
    \ -lt 1 || ${month_length} -gt 12 ]]; then\n        echo \"Error: The months format\
    \ is not valid.\"\n        return 0;\n    fi\n    if [[ ${date_length} != 2 ]];\
    \ then\n        echo \"Error: The \n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9wjxkp83.sh: line 94: unexpected EOF while looking for matching
    `"''

    /tmp/tmp9wjxkp83.sh: line 98: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  local months=$2\n  local years=$3\n  local days=$4\n\n\
    \  [[ -z \"$date\" ]] && return 1\n  [[ -z \"$months\" ]] && return 1\n  [[ -z\
    \ \"$years\" ]] && return 1\n  [[ -z \"$days\" ]] && return 1\n  [[ \"$months\"\
    \ -lt 1 ]] && return 1\n  [[ \"$months\" -gt 12 ]] && return 1\n  [[ \"$days\"\
    \ -lt 1 ]] && return 1\n  [[ \"$days\" -gt 31 ]] && return 1\n  [[ \"$months\"\
    \ -gt 2 ]] && return 1\n  [[ \"$days\" -gt 29 ]] && return 1\n\n  [[ \"$months\"\
    \ -le 12 ]] && [[ \"$years\" -le 31 ]] && [[ \"$days\" -le 31 ]] && return 0\n\
    \  [[ \"$months\" -le 12 ]] && [[ \"$years\" -le 30 ]] && [[ \"$days\" -le 30\
    \ ]] && return 0\n  [[ \"$months\" -le 12 ]] && [[ \"$years\" -le 29 ]] && [[\
    \ \"$days\" -le 29 ]] && return 0\n\n  return 1\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    date \"+%m-%d-%Y\" -d \"$1\" >/dev/null\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "date: invalid date \u201803-11-2000\u2019\n"
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=$1\n  date=$date \\\n      date -d \"$date\" > /dev/null 2>&1\n\
    \  echo $?\n  if [ $? -eq 0 ]; then\n    local month=$( date -d \"$date\" +%m\
    \ )\n    local day=$( date -d \"$date\" +%d )\n    local year=$( date -d \"$date\"\
    \ +%Y )\n    [ \"$month\" -lt 1 ] || [ \"$month\" -gt 12 ] || [ \"$day\" -lt 1\
    \ ] || [ \"$day\" -gt 31 ] || [ \"$day\" -lt 30 ] || [ \"$month\" -lt 1 ] || [\
    \ \"$month\" -gt 12 ] || [ \"$year\" -lt 1 ] || [ \"$year\" -gt 100 ]\n  else\n\
    \    false\n  fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "date: invalid date \u201803-11-2000\u2019\ndate: invalid date \u201803-11-2000\u2019\
    \ndate: invalid date \u201803-11-2000\u2019\n/tmp/tmpe2hj6tr8.sh: line 26: [:\
    \ : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression\
    \ expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh:\
    \ line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [:\
    \ : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression\
    \ expected\n/tmp/tmpe2hj6tr8.sh: line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh:\
    \ line 26: [: : integer expression expected\n/tmp/tmpe2hj6tr8.sh: line 26: [:\
    \ : integer expression expected\n"
  stdout: ''
  timestamp: 1660054574
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  test -n \"$1\" && {\n    local valid=1\n    IFS=\"-\" read -ra dat <<<\
    \ \"$1\"\n    test ${#dat[@]} == 2 && {\n      local mm=${dat[0]}\n      local\
    \ dd=${dat[1]}\n      test \"$mm\" -ge 1 && test \"$mm\" -le 12 && test \"$dd\"\
    \ -ge 1 && test \"$dd\" -le 31 && {\n        local days_in_month=( $(date -d \"\
    $mm-$dd-2020\" +%k) )\n        test ${#days_in_month[@]} -ge 1 && test ${#days_in_month[@]}\
    \ -le 29 && {\n          local days_in_year=( $(date -d \"$mm-$dd-2020\" +%d)\
    \ )\n          test ${#days_in_year[@]} -ge 1 && test ${#days_in_year[@]} -le\
    \ 30 &&\n          {\n            valid=0\n          } || {\n            valid=1\n\
    \          }\n        } || {\n          valid=1\n        }\n      } || {\n   \
    \     valid=1\n      }\n    } || {\n      valid=1\n    }\n    test \"$valid\"\
    \ = 0\n  }\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054574
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    [[ $1 =~ ^[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{4}$ ]]\n    [[ $(date\
    \ -d $1 | grep -c \"^0\") -eq 1 ]]\n    [[ $(date -d $1 | grep -c \"^0\") -eq\
    \ 0 ]]\n    [[ $(date -d $1 | grep -c \"^1\") -eq 1 ]]\n    [[ $(date -d $1 |\
    \ grep -c \"^1\") -eq 0 ]]\n    [[ $(date -d $1 | grep -c \"^3\") -eq 1 ]]\n \
    \   [[ $(date -d $1 | grep -c \"^3\") -eq 0 ]]\n    [[ $(date -d $1 | grep -c\
    \ \"^5\") -eq 1 ]]\n    [[ $(date -d $1 | grep -c \"^5\") -eq 0 ]]\n    [[ $(date\
    \ -d $1 | grep -c \"^7\") -eq 1 ]]\n    [[ $(date -d $1 | grep -c \"^7\") -eq\
    \ 0 ]]\n    [[ $(date -d $1 | grep -c \"^8\") -eq 1 ]]\n    [[ $(date -d $1 |\
    \ grep -c \"^8\") -eq 0 ]]\n    [[ $(date -d $1 | grep -c \"^10\") -eq 1 ]]\n\
    \    [[ $(date -d $1 | grep -c \"^10\") -eq 0 ]]\n    [[ $(date -d $1 | grep -c\
    \ \"^12\") -eq 1 ]]\n    [[ $(date -d $1 | grep -c \"^12\") -eq 0 ]]\n    [[ $(date\
    \ -d $1 | grep -c \"^2\") -eq 1 ]]\n    [[ $(date -d $1 | grep -c \"^2\") -eq\
    \ 0 ]]\n    [[ $(date -d $1 | grep -c \"^4\") -eq 1 ]]\n    [[ $(date -d $1 |\
    \ grep -c \"^4\") -eq 0 ]]\n    [[ $(date -d $1 | grep -c \"^6\") -eq 1 ]]\n \
    \   [[ $(date -d $1 | grep -c \"^6\") -eq 0 ]]\n    [[ $(date -d $1 | grep -c\
    \ \"^9\") -eq 1 ]]\n    [[ $(date -d $1 | grep -c \"^9\") -eq 0 ]]\n    [[ $(date\
    \ -d $1 | grep -c \"^11\") -eq 1 ]]\n    [[ $(date -d $1 | grep \n}\n\ncandidate()\
    \ {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmptyfzc4hn.sh: line 44: unexpected EOF while looking for matching
    `)''\n/tmp/tmptyfzc4hn.sh: line 72: unexpected token `\xff'' in conditional command\n/tmp/tmptyfzc4hn.sh:
    line 72: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    local months=()\n    local days=(31 30 29 28 31 30\
    \ 31 30 31 30 31 30 31 30 31 30)\n    local months=(1 3 5 7 8 10 12 4 6 9 11 2\
    \ 4 6 9 11 2 4 6 9 11)\n    [[ ! $date ]] && echo \"invalid date : $date\" &&\
    \ return 1\n    [[ ${#date} < 6 ]] && echo \"invalid date : $date\" && return\
    \ 1\n    [[ \"${date:0:2}\" != $((${months[*]} % 12 )) ]] && echo \"invalid date\
    \ : $date\" && return 1\n    [[ \"${date:0:2}\" != $((${#months} % 12 )) ]] &&\
    \ echo \"invalid date : $date\" && return 1\n    [[ \"${date:0:2}\" != $((${#days}\
    \ % 30 )) ]] && echo \"invalid date : $date\" && return 1\n    [[ \"${date:0:2}\"\
    \ != $((${#days} % 29 )) ]] && echo \"invalid date : $date\" && return 1\n   \
    \ [[ \"${date:0:2}\" != $((${#days} % 28))  ]] && echo \"invalid date : $date\"\
    \ && return 1\n    [[ \"${date:0:2}\" != $((${months} % 12)) ]] && echo \"invalid\
    \ date : $date\" && return 1\n    [[ \"${date:0:2}\" != $((${months} % 11)) ]]\
    \ && echo \"invalid date : $date\" && return 1\n    [[ \"${date:0:2}\" != $((${months}\
    \ % 10)) ]] && echo \"invalid date : $date\" && return 1\n    [[ \"${date:0:2}\"\
    \ != $((${months} % 9)) ]] && echo \"invalid date : $date\" && return 1\n    [[\
    \ \"${date:0:2}\" != $((${months} % 8)) ]] && echo \"invalid date : $date\" &&\
    \ return 1\n    [[ \"${date:0:2}\" != $((${months} % 7)) ]] && echo \"invalid\
    \ date : $date\" && return 1\n    [[ \"${date:0:2}\" != $((${months} % 6)) ]]\
    \ && echo \"invalid date : $date\" && return 1\n    [[ \"${date:0:2}\" != $((${months}\
    \ % 5)) ]] && echo \"invalid date : $date\" && return 1\n    [[ \"${date:0:2}\"\
    \ != $((${months} % 4)) ]] && echo \"invalid date : $date\" && return 1\n    [[\
    \ \"${date:0:2}\" != $((${months} % 3)) ]\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4oey8dij.sh: line 38: syntax error in conditional expression\n/tmp/tmp4oey8dij.sh:
    line 38: syntax error near `]\''\n/tmp/tmp4oey8dij.sh: line 38: `    [[ "${date:0:2}"
    != $((${months} % 3)) ]\''\n'''
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=$1\n    local days_months=$2\n    local months_year=$3\n \
    \   local days_year=$4\n    local year=$5\n    local month=0\n    local day=0\n\
    \    local check_month=0\n    local check_year=0\n    local check_day=0\n    local\
    \ check_days_months=0\n    local check_days_year=0\n    local check_days_months_year=0\n\
    \    local check_days_months_years=0\n    local check_months=0\n    local check_years=0\n\
    \n    [[ $date != \"\" ]] || return 1\n    [[ $days_months != \"\" ]] || return\
    \ 1\n    [[ $months_year != \"\" ]] || return 1\n    [[ $days_year != \"\" ]]\
    \ || return 1\n    [[ $year != \"\" ]] || return 1\n\n    day=$(date -d \"$date\"\
    \ +%s)\n    month=$(date -d \"$date\" +%m)\n    year=$(date -d \"$date\" +%Y)\n\
    \    check_month=$(( month+1 ))\n    check_year=$(( year+1 ))\n    check_day=$((\
    \ day+1 ))\n    check_days_month=$(( day+days_months+1 ))\n    check_days_year=$((\
    \ day+days_year+1 ))\n    check_days_months_year=$(( day+days_months+days_year+1\
    \ ))\n    check_days_months_years=$(( day+days_months+days_year+days_months+1\
    \ ))\n    check_months=$(( month+months_year+1 ))\n    check_years=$(( year+months_year+1\
    \ ))\n    \n    if [[ \"$check_day\" -le \"31\" ]] || [[ \"$check_day\" -ge \"\
    30\" ]] || [[ \"$check_month\" -le \"12\" ]] || [[ \"$check_month\" -ge \"11\"\
    \ ]] || [[ \"$check_year\" -le \"9999\" ]] || [[ \"$check_year\" -ge \"2040\"\
    \ ]]; then\n        return 0\n    elif [[ \"$check_day\" -le \"29\" ]]; then\n\
    \        if [[ \"$check_month\" -le \"12\" ]]; then\n            return 0\n  \
    \      fi\n    elif [[ \"$check_day\" -le \"30\" ]]; then\n        if [[ \"$check_month\"\
    \ -le \"12\" ]]; then\n            if [[ \"$check_year\" -le \"9999\" ]]; then\n\
    \                return 0\n            fi\n        fi\n    elif [[ \"$check_day\"\
    \ -le \"31\" ]]; then\n\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpkvkfoslx.sh: line 68: syntax error near unexpected token `}''\n/tmp/tmpkvkfoslx.sh:
    line 68: `}''\n"'
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n   local DATE_STRING=$1\n   if [[ -z \"$DATE_STRING\" ]]; then\n      return\
    \ 0\n   fi\n   if [[ \"$DATE_STRING\" == *\\/* ]]; then\n      DATE_STRING=${DATE_STRING#*\\\
    /*}\n   fi\n   local DATE_ARR=( ${DATE_STRING//-/ } )\n   local MONTH_ARR=( ${DATE_ARR[0]//-/\
    \ } )\n   local DAY_ARR=( ${DATE_ARR[1]//-/ } )\n   local YEAR_ARR=( ${DATE_ARR[2]//-/\
    \ } )\n   if [[ \"${DAY_ARR[0]}\" == \"\" ]]; then\n      return 0\n   fi\n  \
    \ if [[ \"${DAY_ARR[1]}\" == \"\" ]]; then\n      return 0\n   fi\n   if [[ \"\
    ${DAY_ARR[2]}\" == \"\" ]]; then\n      return 0\n   fi\n   if [[ \"${MONTH_ARR[0]}\"\
    \ == \"\" ]]; then\n      return 0\n   fi\n   if [[ \"${MONTH_ARR[1]}\" == \"\"\
    \ ]]; then\n      return 0\n   fi\n   if [[ \"${MONTH_ARR[2]}\" == \"\" ]]; then\n\
    \      return 0\n   fi\n   if [[ \"${MONTH_ARR[0]}\" -lt 1 ]]; then\n      return\
    \ 0\n   fi\n   if [[ \"${MONTH_ARR[1]}\" -lt 3 ]]; then\n      return 0\n   fi\n\
    \   if [[ \"${MONTH_ARR[2]}\" -lt 3 ]]; then\n      return 0\n   fi\n   if [[\
    \ \"${MONTH_ARR[1]}\" -gt 12 ]]; then\n      return 0\n   fi\n   if [[ \"${MONTH_ARR[2]}\"\
    \ -gt 12 ]]; then\n      return 0\n   fi\n   if [[ \"${YEAR_ARR[2]}\" == \"\"\
    \ ]]; then\n      return 0\n   fi\n   if [[ \"${YEAR_ARR[1]}\" == \"\" ]]; then\n\
    \      return 0\n   fi\n   if [[ \"${YEAR_ARR[0]}\" == \"\" ]]; then\n      return\
    \ 0\n   fi\n   if [[ \"${YEAR_ARR[0]}\" -lt 1970 || \"${YEAR_ARR[0]}\" -gt 2020\
    \ ]]; then\n      return 0\n   fi\n   if [[ \"${DAY_ARR[1]}\" -lt 1 ]]; then\n\
    \      return 0\n   fi\n   if [[ \"${DAY_ARR[2]}\" -lt 1 ]]; then\n      return\
    \ 0\n   fi\n   if [[ \"${DAY_ARR[0]}\" -lt 1 ]]; then\n      return 0\n   fi\n\
    \   if [[ \"${DAY_ARR[1]}\" -gt 31 \n}\n\ncandidate() {\n    valid_date \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp4s2t9z2a.sh: line 83: syntax error in conditional expression\n/tmp/tmp4s2t9z2a.sh:
    line 84: syntax error near `}''\n/tmp/tmp4s2t9z2a.sh: line 84: `}''\n"'
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local d=\"${1%/*}\"\n    local e=\"${d##*/}\"\n    local ds=\"1 3 5 7\
    \ 8 10 12\"\n    local mes=\"4 6 9 11\"\n    local ye=\"2\"\n    local mos=\"\
    1 2\"\n    local yrs=\"4 6 9 11\"\n    local d1=${d##*-}\n    local mo1=${mos%-*}\n\
    \    local y1=${yrs%-*}\n    if [ -n \"${d}\" ]\n    then\n        if [ -n \"\
    ${e}\" ]\n        then\n            if [ -n \"${d1}\" ]\n            then\n  \
    \              if [ -n \"${ds}\" ]\n                then\n                   \
    \ if [ -n \"${mo1}\" ]\n                    then\n                        if [\
    \ -n \"${mes}\" ]\n                        then\n                            if\
    \ [ -n \"${ye}\" ]\n                            then\n                       \
    \         if [ -n \"${mos}\" ]\n                                then\n       \
    \                             if [ -n \"${yrs}\" ]\n                         \
    \           then\n                                        if [ -n \"${ds}\" ]\n\
    \                                        then\n                              \
    \              if [ -n \"${mes}\" ]\n                                        \
    \    then\n                                                if [ -n \"${ye}\" ]\n\
    \                                                then\n                      \
    \                              if [ -n \"${mos}\" ]\n                        \
    \                            then\n                                          \
    \              if [ -n \"${yrs}\" ]\n                                        \
    \                then\n                                                      \
    \      if [ -n \"${ds}\" ]\n                                                 \
    \           then\n                                                           \
    \     if [ -n \"${mes}\" ]\n                                                 \
    \               then\n                                                       \
    \             if [ -n \"${ye}\" ]\n                                          \
    \                          then\n                                            \
    \                            if [ -n \"${mos}\" ]\n                          \
    \                                              then\n                        \
    \                                                    if [ -n \"${yrs}\" ]\n  \
    \                                                                          then\n\
    \                                                                            \
    \    if [ -n \"${ds}\" ]\n                                                   \
    \                             then\n                                         \
    \                                           if [ -n \"${mes}\" ]\n           \
    \                                                                         then\n\
    \                                                                            \
    \            if [ -n \"${ye}\" ]\n                                           \
    \                                             then\n                         \
    \                                                                   if [ -n \"\
    ${mos}\" ]\n                                                                 \
    \                           then\n                                           \
    \                                                     if [ -n \"${yrs}\" ]\n \
    \                                                                            \
    \                   then\n                                                   \
    \                                                 if [ -n \"${ds}\" ]\n      \
    \                                                                            \
    \                  then\n                                                    \
    \                                                    if [ -n \"${mes}\" ]\n  \
    \                                                                            \
    \                          then\n                                            \
    \                                                                if [ -n \"${ye}\"\
    \ ]\n                                                                        \
    \                                    then\n                                  \
    \                                                                            \
    \  if [ -n \"${mos}\" ]\n                                                    \
    \                                                            then\n          \
    \                                                                            \
    \                              if [ -n \"${yrs}\" ]\n                        \
    \                                                                            \
    \                                then\n                                      \
    \                                                                            \
    \                      if [ -n \"${ds}\" ]\n                                 \
    \                                                                            \
    \                           then\n                                           \
    \                                                                            \
    \                     if [ -n \"${mes}\" ]\n                                 \
    \                                                                            \
    \                               then\n                                       \
    \                                                                            \
    \             \n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmppaa5j13q.sh: line 91: syntax error near unexpected token `}''\n/tmp/tmppaa5j13q.sh:
    line 91: `}''\n"'
  stdout: b''
  timestamp: 1660077837
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local month=$1\n  local day=$2\n  local year=$3\n  \n  if [[ -z $month\
    \ ]]\n  then\n    echo \"Error!!! Invalid date string!!!\"\n    return 0\n  fi\n\
    \  \n  if [[ ${month} -le 0 || ${month} -gt 12 ]]\n  then\n    echo \"Error!!!\
    \ Invalid month!!!\"\n    return 0\n  fi\n  \n  if [[ ${day} -le 1 || ${day} -gt\
    \ 31 ]]\n  then\n    echo \"Error!!! Invalid day!!!\"\n    return 0\n  fi\n  \n\
    \  if [[ ${day} -le 1 || ${day} -gt 30 ]]\n  then\n    echo \"Error!!! Invalid\
    \ day!!!\"\n    return 0\n  fi\n  \n  if [[ ${month} -le 1 || ${month} -gt 12\
    \ ]]\n  then\n    echo \"Error!!! Invalid month!!!\"\n    return 0\n  fi\n  \n\
    \  if [[ ${year} -lt 1 || ${year} -gt 3000 ]]\n  then\n    echo \"Error!!! Invalid\
    \ year!!!\"\n    return 0\n  fi\n  \n  local month_array=($(seq 1 12)) month_array_length=${#month_array[@]}\n\
    \  local month_array_index=0\n  local valid_month_flag=0\n  local days_in_month=`date\
    \ +%k`\n  \n  for month_count in $(seq 1 12)\n  do\n    if [[ ${month_array[month_array_index]}\
    \ -eq ${month} ]]\n    then\n      month_array_index=$((month_array_index+1))\n\
    \      valid_month_flag=1\n      break\n    fi\n    month_array_index=$((month_array_index+1))\n\
    \  done\n  \n  if [[ \"$valid_month_flag\" -eq 0 ]]\n  then\n    echo \"Error!!!\
    \ Invalid month!!!\"\n    return 0\n  fi\n  \n  local days_in_year=`date +%j`\n\
    \  \n  if [[ ${day} -gt ${days_in_month} ]]\n  then\n    echo \"Error!!! Invalid\
    \ day!!!\"\n    return 0\n  fi\n  \n  if [[ ${day} -lt 1 || ${day} -gt ${days_in_year}\
    \ ]]\n  then\n    echo \"Error!!! Invalid day!!!\"\n    return 0\n  fi\n  \n \
    \ return 1\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local DATE_STRING=$1\n    local VALID_DATE=$2\n    local DAYS_IN_YEAR=$3\n\
    \    local MONTHS_IN_YEAR=$4\n    local MONTHS_IN_QUARTER=$5\n    local QUARTERS=$6\n\
    \    local YEAR=$7\n\n    local DAYS_IN_QUARTER=$(( 31 * $QUARTERS ))\n\n    #\
    \ Check if the date string is empty or null, then return False \n    if [ -z \"\
    $DATE_STRING\" ] ; then\n        return $VALID_DATE\n    fi\n\n    # Check if\
    \ the date string is in the wrong format, then return False\n    if ! date -d\
    \ \"$DATE_STRING\" > /dev/null; then\n        return $VALID_DATE\n    fi\n\n \
    \   # Check if the month is a valid month or not\n    if [ `expr $MONTHS_IN_YEAR\
    \ + $MONTHS_IN_QUARTER + $DAYS_IN_QUARTER - $DAYS_IN_YEAR - $DAYS_IN_QUARTER +\
    \ 1` -lt 1 -a \\\n        [ `expr $MONTHS_IN_YEAR + $MONTHS_IN_QUARTER + $DAYS_IN_QUARTER\
    \ - $DAYS_IN_YEAR - $DAYS_IN_QUARTER + 1` -gt 12 ] -a \\\n        [ `expr $MONTHS_IN_YEAR\
    \ + $MONTHS_IN_QUARTER + $DAYS_IN_QUARTER - $DAYS_IN_YEAR - $DAYS_IN_QUARTER +\
    \ 1` -lt $MONTHS_IN_QUARTER -a \\\n        [ `expr $MONTHS_IN_YEAR + $MONTHS_IN_QUARTER\
    \ + $DAYS_IN_QUARTER - $DAYS_IN_YEAR - $DAYS_IN_QUARTER + 1` -gt $MONTHS_IN_YEAR\
    \ -a \\\n        [ `expr $MONTHS_IN_YEAR + $MONTHS_IN_QUARTER + $DAYS_IN_QUARTER\
    \ - $DAYS_IN_YEAR - $DAYS_IN_QUARTER + 1` -lt $MONTHS_IN_YEAR -a \\\n        [\
    \ `expr $MONTHS_IN_YEAR + $MONTHS_IN_QUARTER + $DAYS_IN_QUARTER - $DAYS_IN_YEAR\
    \ - $DAYS_IN_QUARTER + 1` -gt $MONTHS_IN_YEAR -a \\\n        [ `expr $MONTHS_IN_YEAR\
    \ + $MONTHS_IN_QUARTER + $DAYS_IN_QUARTER - $DAYS_IN_YEAR - $DAYS_IN_QUARTER +\
    \ 1` -lt $MONTHS_IN_YEAR -a \\\n        [ `expr\n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp3z5624zv.sh: line 46: unexpected EOF while looking for matching
    ``''\n/tmp/tmp3z5624zv.sh: line 74: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660077837
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date valid=0 msg=\"Invalid Date\"\n    local year=$(date +%Y)\n\
    \    local month=$(date +%m)\n    local day=$(date +%d)\n    \n    if [ -z $1\
    \ ]; then\n        echo $msg\n        exit 1\n    fi\n    if [ ${month} -eq 1\
    \ -o ${month} -eq 3 -o ${month} -eq 5 \\\n        -o ${month} -eq 7 -o ${month}\
    \ -eq 8 \\\n        -o ${month} -eq 10 -o ${month} -eq 12 \\\n        -a ${day}\
    \ -lt 1 -o ${day} -gt 31 \\\n        -a ${day} -lt 1 -o ${day} -gt 30 \\\n   \
    \     -a ${day} -lt 1 -o ${day} -gt 29 \\\n        -a ${month} -lt 1 -o ${month}\
    \ -gt 12  ]; then\n        echo $msg\n        exit 0\n    else\n        echo $msg\n\
    \        exit 1\n    fi\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077837
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    [[ ${1:-NULL} =~ ^[[:digit:]]+(\\.[[:digit:]]+)?$\n        || ${1:-NULL}\
    \ =~ ^[[:digit:]]+(\\.[[:digit:]]+)?-[[:digit:]]+(\\.[[:digit:]]+)?$\n       \
    \ || ${1:-NULL} =~ ^[[:digit:]]+(\\.[[:digit:]]+)?\\/[[:digit:]]+(\\.[[:digit:]]+)?-[[:digit:]]+(\\\
    .[[:digit:]]+)?$\n        || ${1:-NULL} =~ ^[[:digit:]]+(\\.[[:digit:]]+)?\\/[[:digit:]]+(\\\
    .[[:digit:]]+)?\\/[[:digit:]]+(\\.[[:digit:]]+)?$\n    ]]\n}\n\ncandidate() {\n\
    \    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\"\
    \ ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"\
    03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[\
    \ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\"\
    ) = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\"\
    \ ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077837
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n        local date=\"$1\"\n        local months=(\"01\" \"03\" \"05\" \"\
    07\" \"08\" \"10\" \"12\")\n        local days=(\"01\" \"03\" \"05\" \"07\" \"\
    08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"\
    03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"\
    10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"\
    05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"\
    12\" \"01\" \"03\" \"05\" \"07\" \"08\" \"10\" \"12\" \"01\" \"03\" \"05\" \"\
    07\" \"08\" \"10\" \"12\")\n        local months_check=0\n        local days_check=0\n\
    \        local years_check=0\n        local months_length=${#months[@]}\n    \
    \    local days_length=${#days[@]}\n        local years_length=${#years[@]}\n\
    \        local month=0\n        local day=0\n        local year=0\n        local\
    \ months_check=0\n        local days_check=0\n        local years_check=0\n  \
    \      local months_length=${#months[@]}\n        local days_length=${#days[@]}\n\
    \        local years_length=${#years[@]}\n        local check_day\n        local\
    \ check_month\n        local check_year\n        local check_month\n        local\
    \ check_year\n        local check_day\n        local check_month\n        local\
    \ check_year\n        local check_month\n        local check_year\n        local\
    \ check_day\n        local check_month\n        local check_year\n        local\
    \ check_day\n        local check_month\n        local check_year\n        local\
    \ check_day\n        local check_month\n        local check_year\n        local\
    \ check_day\n        local check_month\n        local check_year\n        local\
    \ check_month\n        local check_year\n        local check_day\n        local\
    \ check_month\n        local check_year\n        local check_month\n        local\
    \ check_year\n        local check_day\n        local check_month\n        local\
    \ check_year\n        local check_month\n        local check_year\n        local\
    \ check_day\n        local check_month\n        local check_year\n        local\
    \ check_month\n        local check_year\n        local check_day\n        local\
    \ check_month\n        local check_year\n        local check_month\n        local\
    \ check_year\n        local check_day\n        \n}\n\ncandidate() {\n    valid_date\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\"\
    \ ]]\n    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"\
    04-0-2040\") = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n\
    \    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\"\
    \ ]]\n    [[ $(candidate \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"\
    04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n\
    \    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate \"2003-04\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate\
    \ \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n    local date=\"$1\"\n\n    local date_pattern='^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$'\n\
    \    local date_re='^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$'\n\n \
    \   local date_parts=$(date -d \"$date\" '+%m-%d-%y')\n\n    [[ $date_parts =~\
    \ $date_pattern ]] || [[ $date_parts !~ $date_pattern ]] && echo \"$date is not\
    \ a valid date string!\" && return 1\n\n    local date_splits=$(echo \"$date_parts\"\
    \ | cut -d \"/\" -f 1)\n    local month_splits=$(echo \"$date_parts\" | cut -d\
    \ \"/\" -f 2)\n    local year=\"$(echo \"$date_parts\" | cut -d \"/\" -f 3)\"\n\
    \    local days=\"$(echo \"$date_parts\" | cut -d \"/\" -f 4)\"\n\n    local months_pattern='^(0[1-9]|1[012])$'\n\
    \    local month_re='^(0[1-9]|1[012])$'\n\n    local months=$(echo \"$month_splits\"\
    \ | tr '[:lower:]' '[:upper:]')\n\n    [[ $months =~ $months_pattern ]] || [[\
    \ $months !~ $months_pattern ]] && echo \"$months are not a valid month string!\"\
    \ && return 1\n\n    local months_splits=$(echo \"$months\" | cut -d \"-\" -f\
    \ 1)\n    local days_splits=$(echo \"$months\" | cut -d \"-\" -f 2)\n\n    [[\
    \ $days_splits ]] || [[ $days_splits !~ $date_pattern ]] && echo \"$days is not\
    \ in the correct format for month string!\" && return 1\n\n    [[ $days_splits\
    \ !~ $date_pattern ]] && echo \"$days is not in the correct format for month string!\"\
    \ && return 1\n\n    [[ $days_splits =~ $day_re ]] && echo \"$days is not in the\
    \ correct format for month string!\" && return 1\n\n    [[ $days_splits =~ $day_re\
    \ ]] && return 0\n\n    [[ $months_splits ]] || [[ $months_splits !~ $months_pattern\
    \ ]] && echo \"$months is not in the correct format for day string!\" && return\
    \ 1\n\n    [[ $months_splits !~ $months_pattern ]] && echo \"$months is not in\
    \ the correct format for day string!\" && return 1\n\n    [[ $months_splits =~\
    \ $month_re ]] && echo \"$months is not in the correct format for day string!\"\
    \ && \n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
    \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\"\
    \ ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\
    \") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[\
    \ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate\
    \ \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n\
    \    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\"\
    ) = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0dq_jwuh.sh: line 25: conditional binary operator expected\n/tmp/tmp0dq_jwuh.sh:
    line 25: syntax error near `!~\''\n/tmp/tmp0dq_jwuh.sh: line 25: `    [[ $date_parts
    =~ $date_pattern ]] || [[ $date_parts !~ $date_pattern ]] && echo "$date is not
    a valid date string!" && return 1\''\n'''
  stdout: b''
  timestamp: 1660077837
- exit_code: 2
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n\t[ \"$1\" ]\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]] ||\n\t[[ $1\
    \ =~ ^([0-9]{1,2})\\/([0-9]{1,2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{1,2})-([0-9]{1,2})-([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{1,2})\\/([0-9]{1,2})\\/([0-9]{4})$ ]] ||\n\t[[ $1\
    \ =~ ^([0-9]{1,2})-([0-9]{1,2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{1,2})\\\
    /([0-9]{1,2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\\
    /([0-9]{2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\/([0-9]{2})-([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\/([0-9]{2})-([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\\
    /([0-9]{2})-([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})\\/([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\\
    /([0-9]{2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})\\/([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$\
    \ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\/([0-9]{2})-([0-9]{4})$ ]] ||\n\t[[ $1 =~ ^([0-9]{2})\\\
    /([0-9]{2})-([0-9]{4})$ ]] ||\n\t\n}\n\ncandidate() {\n    valid_date \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n\
    \    [[ $(candidate \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate\
    \ \"01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\"\
    ) = \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpl1q3cmv7.sh: line 42: syntax error near unexpected token `}''\n/tmp/tmpl1q3cmv7.sh:
    line 42: `}''\n"'
  stdout: b''
  timestamp: 1660077837
- exit_code: 1
  program: "#!/bin/bash\n# You have to write a function which validates a given date\
    \ string and\n# returns True if the date is valid otherwise False.\n# The date\
    \ is valid if all of the following rules are satisfied:\n# 1. The date string\
    \ is not empty.\n# 2. The number of days is not less than 1 or higher than 31\
    \ days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or\
    \ higher than 30 days for months 4,6,9,11. And, the number of days is not less\
    \ than 1 or higher than 29 for the month 2.\n# 3. The months should not be less\
    \ than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n\
    # for example: \n# valid_date('03-11-2000') => True\n# valid_date('15-01-2012')\
    \ => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020') =>\
    \ True\n# valid_date('06/04/2020') => False\n#\n# $1 is a string\nvalid_date()\
    \ {\n  local date=\"$1\"\n  [[ \"$date\" != \"\" ]] || return 1\n  [[ \"$date\"\
    \ =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$ ]] || return\
    \ 2\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})$ ]] || return\
    \ 3\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})$ ]] || return 4\n  [[ \"$date\"\
    \ =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$ ]] || return\
    \ 5\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 6\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 7\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 8\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 9\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 10\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 11\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 12\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 13\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 14\n  [[ \"$date\" =~ ^([0-9]{1,2}|[0-9]{2})-([0-9]{1,2}|[0-9]{2})-([0-9]{4}|[0-9]{4})$\
    \ ]] || return 15\n\n}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"15-01-2012\") = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\"\
    \ ]]\n    [[ $(candidate \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"\
    01-01-2007\") = \"true\" ]]\n    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"04-31-3000\") =\
    \ \"false\" ]]\n    [[ $(candidate \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate\
    \ \"21-31-2000\") = \"false\" ]]\n    [[ $(candidate \"04-12-2003\") = \"true\"\
    \ ]]\n    [[ $(candidate \"04122003\") = \"false\" ]]\n    [[ $(candidate \"20030412\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2003-04\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2003-04-12\") = \"false\" ]]\n    [[ $(candidate \"04-2003\") = \"false\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660077837
