language: sh
name: HumanEval_147_get_max_triples
results:
- exit_code: -1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  read -p \"Input an Integer Number: \" n\n  if [ -z \"$n\" ]; then\n   \
    \ echo \"Input an Integer Number\"\n    return\n  fi\n  declare -a a\n  (( n =\
    \ n - 1 ))\n  a[0]=1\n  a[1]=1\n  for (( i = 2; i <= n; i++ )); do\n    a[i]=$((\
    \ i * i - i + 1 ))\n  done\n  declare -a b\n  declare -a c\n  c[1]=0\n  c[1]=$((\
    \ $n - 1 ))\n  while [ $(( $c[1] % 3 )) -ne 0 ]; do\n    a[$(( $c[1] % 3 ))]=$((\
    \ 2 * $a[$(( $c[1] % 3 ))] - 1 ))\n    c[1]=$(( $c[1] - 1 ))\n  done\n  declare\
    \ -i i=0\n  while [ $(( $c[i] % 3 )) -ne 0 ]; do\n    b[$(( $c[i] % 3 ))]=$((\
    \ $a[i] ))\n    (( i = i + 1 ))\n  done\n  echo ${b[@]}\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660054765
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=()\n\n    for (( i = 1; i <= n; i++ )); do\n\
    \        a+=( $i*$i - $i + 1 )\n    done\n    local k=0\n    for (( i = 1; i <=\
    \ n; i++ )); do\n        (( k++ ))\n        for (( j = 1; j <= i; j++ )); do\n\
    \            for (( k = 1; k <= j; k++ )); do\n                if (( a[ $i ] +\
    \ a[ $j ] + a[ $k ] % 3 == 0 )); then\n                    echo -n \"$i $j $k\"\
    \n                    (( k-- ))\n                fi\n            done\n      \
    \  done\n    done\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error
    token is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /tmp/tmpa4macczg.sh: line 26: ((: -: syntax error: operand expected (error token
    is "-")

    /tmp/tmpa4macczg.sh: line 26: ((: +: syntax error: operand expected (error token
    is "+")

    /'
  stdout: ''
  timestamp: 1660054760
- exit_code: -1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=($(for ((i=1; i<=$n; i++)); do echo ${i}; done))\n\
    \    local i=0\n    local j=0\n    local k=-1\n    local total=0\n    while ((\
    \ i < ${n} )); do\n        (( k = k + 1 ))\n        j=a[k]\n        (( j = j +\
    \ 1 ))\n        if (( j == i )); then\n            (( total+=1 ))\n        else\n\
    \            (( i=i ))\n        fi\n    done\n    echo $total\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660054765
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local sum\n  local count\n  local\
    \ count2\n  local count3\n  local count4\n  local count5\n  local count6\n  local\
    \ count7\n  local count8\n  local count9\n  local count10\n  local count11\n \
    \ local count12\n  local count13\n  local count14\n  local count15\n  local count16\n\
    \  local count17\n  local count18\n  local count19\n  local count20\n  local count21\n\
    \  local count22\n  local count23\n  local count24\n  local count25\n  local count26\n\
    \  local count27\n  local count28\n  local count29\n  local count30\n  local count31\n\
    \  local count32\n  local count33\n  local count34\n  local count35\n  local count36\n\
    \  local count37\n  local count38\n  local count39\n  local count40\n  local count41\n\
    \  local count42\n  local count43\n  local count44\n  local count45\n  local count46\n\
    \  local count47\n  local count48\n  local count49\n  local count50\n  local count51\n\
    \  local count52\n  local count53\n  local count54\n  local count55\n  local count56\n\
    \  local count57\n  local count58\n  local count59\n  local count60\n  local count61\n\
    \  local count62\n  local count63\n  local count64\n  local count65\n  local count66\n\
    \  local count67\n  local count68\n  local count69\n  local count70\n  local count71\n\
    \  local count72\n  local count73\n  local count74\n  local count75\n  local count76\n\
    \  local count77\n  local count78\n  local count79\n  local count80\n  local count81\n\
    \  local count82\n  local count83\n  local count84\n  local count85\n  local count86\n\
    \  local count87\n  local count88\n  local count89\n  local count90\n  local count91\n\
    \  local count92\n  local count93\n  local count94\n  local count95\n  local count96\n\
    \  local count97\n  local count98\n  local count\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=$2\n  local max_triples=$3\n  local i=$(( $n - 1\
    \ ))\n  local j=$(( $i - 1 ))\n  local k=$(( $i + 1 ))\n  \n  while [ $i -ge 0\
    \ ]; do\n    local triples=$((a[i]+a[j]+a[k]))\n    if [ $triples -gt $max_triples\
    \ ]; then\n      max_triples=$triples\n    fi\n    i=$(( $i - 1 ))\n    j=$((\
    \ $i - 1 ))\n    k=$(( $i + 1 ))\n  done\n  \n  echo $max_triples\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5wiqxqj4.sh: line 24: [: 0: unary operator expected

    /tmp/tmp5wiqxqj4.sh: line 24: [: 0: unary operator expected

    /tmp/tmp5wiqxqj4.sh: line 24: [: 0: unary operator expected

    /tmp/tmp5wiqxqj4.sh: line 24: [: 0: unary operator expected

    /tmp/tmp5wiqxqj4.sh: line 23: a: bad array subscript

    /tmp/tmp5wiqxqj4.sh: line 24: [: 0: unary operator expected

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n        local n=$1\n        local a=($(for ((i = 1; i <= n; i++))\n     \
    \           do echo $((i * i - i + 1)); done))\n        local count=0\n      \
    \  local count2=0\n        local count3=0\n        local count4=0\n        local\
    \ i\n        local j\n        local k\n        local count5=0\n        for ((i\
    \ = 1; i <= n; i++)) ; do\n                j=$((i * i - i + 1))\n            \
    \    for ((k = 1; k <= n; k++)) ; do\n                        (( count++))\n \
    \                       if ((i > k) && (j > k)) ; then\n                     \
    \           if ((j % 3 == 0)) && ((k % 3 == 0)) ; then\n                     \
    \                   ((count5++))\n                                fi\n       \
    \                 fi\n                done\n        done\n        echo ${count5}\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    /tmp/tmpoyieb8nm.sh: line 30: i: command not found

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=(${{1..n}});\n  local count=0\n  local i\n  for i\
    \ in ${{1..n}}; do\n    [[ \"$a\" =~ (^|[[:space:]]+\\([^[:space:]]*\\)[[:space:]]+([^[:space:]]*\\\
    )[[:space:]]+\\1)(.*) ]] &&\n    count=$(( count+1 ))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb97kfdz8.sh: line 20: unexpected EOF while looking for matching
    `)''

    /tmp/tmpb97kfdz8.sh: line 39: unexpected argument to conditional binary operator

    /tmp/tmpb97kfdz8.sh: line 39: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a\n    a=($(for ((i=1;i<$n;i++))\n    do\n    \
    \    echo $((i*i)+(i+1))\n    done))\n    local count\n    count=0\n    for i\
    \ in {1..$n}\n    do\n        for j in {1..$n}\n        do\n            found=false\n\
    \            for k in {1..$n}\n            do\n                if (( ($i == $j)\
    \ && ($j == $k) ))\n                then\n                    found=true\n   \
    \             fi\n            done\n            if $found\n            then\n\
    \                for k in {1..$n}\n                do\n                    if\
    \ (( $i != $k ) && ( $j != $k ) && ( $k != $i ))\n                    then\n \
    \                       let \"count+=1\"\n                    fi\n           \
    \     done\n            fi\n        done\n    done\n    echo \"$count\"\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn5jl6yxf.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: `(i*i)+(i+1)''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: `(i*i)+(i+1)''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: `(i*i)+(i+1)''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: syntax error near unexpected
    token `+''

    /tmp/tmpn5jl6yxf.sh: command substitution: line 22: `(i*i)+(i+1)''

    /tmp/tmpn5jl6yxf.sh: line 30: ((: ({1..5} == {1..5}) && ({1..5} == {1..5}) : syntax
    error: operand expected (error token is "{1..5} == {1..5}) && ({1..5} == {1..5})
    ")

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n\tarr=$1\n\tlen=$((${#arr[@]}))\n\tlet \"start=$((${#arr[@]} / 3))\"\n\t\
    let \"end=${#arr[@]}\"\n\tlet \"len=$end - $start\"\n\tlet \"max=0\"\n\tlet \"\
    c=0\"\n\tlet \"i=1\"\n\tlet \"j=1\"\n\tlet \"k=1\"\n\tlet \"a=0\"\n\twhile [ $i\
    \ -lt $len ]; do\n\t\tlet \"tmp=$i+$j+$k\"\n\t\tif [ $tmp -gt $max ]; then\n\t\
    \t\tmax=$tmp\n\t\t\tc=$i\n\t\tfi\n\t\tlet \"k=$k+1\"\n\t\tlet \"j=$j+1\"\n\t\t\
    let \"i=$i+1\"\n\tdone\n\tlet \"a=$c+$max\"\n\techo $a\n}\n\ncandidate() {\n \
    \   get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054760
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local -a a\n    local -i n maxTriples\n    \n    max=3\n\
    \    for ((i=1;i<=n;i++))\n    do\n        a[$i]=$(($i*$i-$i+1))\n    done\n \
    \   \n    for ((i=1;i<=n;i++))\n    do\n        for ((j=i+1;j<=n;j++))\n     \
    \   do\n            for ((k=j+1;k<=n;k++))\n            do\n                if\
    \ ((${a[$i]} >= ${a[$j]} && ${a[$j]} >= ${a[$k]} && ${a[$i]} + ${a[$j]} == ${a[$k]}))\
    \ then\n                    max=$((${max} + 1))\n                fi\n        \
    \    done\n        done\n    done\n    \n    echo \"$max\"\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxsp1tb26.sh: line 31: syntax error near unexpected token `then''

    /tmp/tmpxsp1tb26.sh: line 31: `                if ((${a[$i]} >= ${a[$j]} && ${a[$j]}
    >= ${a[$k]} && ${a[$i]} + ${a[$j]} == ${a[$k]})) then''

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n   local n=$1\n   local a=$2\n   local count\n   local i j\n   \n   a=$((a+1))\
    \ # Make the array start from 1\n   count=0\n   for i in $(seq 1 $n); do\n   \
    \   j=$((i+1))\n      for k in $(seq 1 $n); do\n         if (($i >  $k) && ($j\
    \ > $k)) && [ \"$((($a[i])+($a[j])+($a[k])))\" -eq \"$((3*(($i)*($i)+($j)*($j)+($k)*($k))))\"\
    \ ]; then\n            count=$(expr $count + 1)\n         fi\n      done\n   done\n\
    \   echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcub3vl2w.sh: line 25: 1: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 1: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 1: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 1: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 1: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 2: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 2: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 2: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 2: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 2: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 3: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 3: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 3: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 3: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 3: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 4: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 4: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 4: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 4: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 4: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 5: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 5: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 5: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 5: command not found

    /tmp/tmpcub3vl2w.sh: line 25: 5: command not found

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: -1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  echo \"Starting the function\"\n  echo \"$1\" | tr -cd \"[1-9]\" # remove\
    \ negative numbers\n  read -p \"Please input a number n > 0: \" n\n  local -i\
    \ a[ $n ]\n  for ((i=1; i <= $n; i++)) \n  do\n     a[i]=i*i - $i + 1\n  done\n\
    \  local -i i j k\n  local -a a\n  local -a a\n  local -a c\n  local -i t\n  local\
    \ -i n\n  local -i m\n  local -i a\n  local -i m\n  local -i b\n  local -i n\n\
    \  local -i i\n  local -i j\n  local -i k\n  local -i k\n  local -i c\n  local\
    \ -i j\n  local -i i\n  local -i j\n  local -i n\n  local -i k\n  local -i a\n\
    \  local -i b\n  local -i c\n  local -i i\n  local -i a\n  local -i b\n  local\
    \ -i c\n  local -i n\n  local -i m\n  local -i a\n  local -i n\n  local -i c\n\
    \  local -i a\n  local -i b\n  local -i n\n  local -i j\n  local -i j\n  local\
    \ -i k\n  local -i j\n  local -i c\n  local -i n\n  local -i m\n  local -i a\n\
    \  local -i a\n  local -i c\n  local -i n\n  local -i m\n  local -i a\n  local\
    \ -i n\n  local -i c\n  local -i a\n  local -i b\n  local -i c\n  local -i n\n\
    \  local -i m\n  local -i a\n  local -i n\n  local -i c\n  local -i a\n  local\
    \ -i b\n  local -i c\n  local -i n\n  local -i m\n  local -i a\n  local -i n\n\
    \  local -i c\n  local -i a\n  local -i b\n  local -i c\n  local -i n\n  local\
    \ -i m\n  local -i a\n  local -i n\n  local -i c\n  local -i a\n  local -i b\n\
    \  local -i c\n  local -i n\n  local -i m\n  local -i a\n  local -i n\n  local\
    \ -i c\n  local -i a\n  local -i b\n  local -i c\n  local -i n\n  \n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=12 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660054765
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=\"$1\"\n  local a\n  a=($(( n * (n + 1) / 2)))\n  for i in $(seq\
    \ 1 $n); do\n    for j in $(seq 0 $(( n - 1 ))); do\n      for k in $(seq 1 $n);\
    \ do\n        if [ $(expr $i + $j + $k) == $(expr $a) ]; then\n          echo\
    \ $(( $(expr $i) * $(expr $j) * $(expr $k)))\n        fi\n      done\n    done\n\
    \  done\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054761
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  n=$1\n  arr=()\n  for i in $(seq 1 $n); do\n    arr+=($i*$i-$i+1)\n  done\n\
    \  echo $(( ${arr[@]} % 3 ))\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvuwnyb6z.sh: line 20: 1*1-1+1 2*2-2+1 3*3-3+1 4*4-4+1 5*5-5+1 %
    3 : syntax error in expression (error token is "2*2-2+1 3*3-3+1 4*4-4+1 5*5-5+1
    % 3 ")

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local num_args=\"$1\"\n  local arr=()\n\n  for (( i=1; i<=\"$num_args\"\
    ; i++ ))\n  do\n    arr+=($i)\n  done\n\n  local i=0\n  local j=1\n  local k=1\n\
    \  while [[ $i -lt \"$num_args\" && $j -lt \"$num_args\" && $k -lt \"$num_args\"\
    \ ]]\n  do\n    if [ $arr[$i] + $arr[$j] + $arr[$k] -eq 0 ]\n    then\n      k=$((\
    \ $k + 1 ))\n    else\n      if [ $arr[$i] + $arr[$j] + $arr[$k] -lt 0 ]\n   \
    \   then\n        j=$(( $j + 1 ))\n      else\n        if [ $arr[$i] + $arr[$j]\
    \ + $arr[$k] -lt 0 ]\n        then\n          i=$(( $i + 1 ))\n        else\n\
    \          i=$(( $i + 1 ))\n          j=$(( $j + 1 ))\n          k=$(( $k + 1\
    \ ))\n        fi\n      fi\n    fi\n  done\n  printf \"$num_args is a multiple\
    \ of 3.\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsm4kysa6.sh: line 28: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 32: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 36: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 28: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 32: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 36: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 28: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 32: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 36: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 28: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 32: [: too many arguments

    /tmp/tmpsm4kysa6.sh: line 36: [: too many arguments

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: -1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    read -p \"n=$1\" n\n    local -a a\n    for ((i = 0; i < n; i++)) ; do\n\
    \        local j\n        for ((j = 0; j < i; j++)) ; do\n            local k\n\
    \            [[ -z $a[j] ]] && continue\n            for ((k = 0; k <= j; k++))\
    \ ; do\n                if ((($i + $j + $k) % 3 == 0)) ; then\n              \
    \      (( a[k]++ ))\n                    break\n                fi\n         \
    \   done\n        done\n    done\n    echo \"${#a[@]}\"\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=32 encoding='utf-8'>
  timestamp: 1660054765
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=($( seq 1 $n ))\n    local sum=0\n    local i\n\
    \    local j\n    local k\n    for ((i=1;i<=$n;i++)); do\n        for ((j=0;j<=$n;j++));\
    \ do\n            for ((k=0;k<=$n;k++)); do\n                if (( i+j+k > $n\
    \ )) ; then\n                    let \"sum+=( a[i] +a[j] +a[k] )%3\"\n       \
    \             let \"a[k]=0\"\n                    let \"a[j]=0\"\n           \
    \         let \"a[i]=0\"\n                fi\n            done\n        done\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a\n    local triples_sum=0\n    local max_triples=0\n\
    \    for ((i=1; i<=$n; i++)); do\n        a[i]=$((i*i-1))\n        triples_sum=$((triples_sum+$a[i]))\n\
    \    done\n    if [ $triples_sum -eq 0 ]; then\n        return 0;\n    fi\n  \
    \  local i=$((n-1));\n    while [[ $i -le 0 ]]; do\n        local j=$((n-$i))\n\
    \        local k=$((n-1))\n        while [[ $j -le 0 ]]; do\n            local\
    \ k=$((n-$j))\n            triples_sum=$((triples_sum+$a[$i]-$a[$j]-$a[$k]))\n\
    \            i=$((i+1));\n            j=$((n-$i));\n        done\n        local\
    \ k=$((n-1));\n        while [[ $k -le 0 ]]; do\n            local j=$((n-$k))\n\
    \            triples_sum=$((triples_sum+$a[$i]-$a[$j]-$a[$k]))\n            k=$((n-$j))\n\
    \        done\n        max_triples=$((max_triples+1))\n    done\n    return $max_triples\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo7xcimlm.sh: line 21: triples_sum+[i]: syntax error: operand expected
    (error token is "[i]")

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local -n line\n  local -a arr\n  arr=()\n  while IFS= read\
    \ -r line; do\n    arr+=(\"$line\")\n  done <<(for ((i=1; i<=$n; i++)); do echo\
    \ $i; done | sort)\n  unset IFS\n  local -i count=${#arr[@]}\n  printf \"%d\\\
    n\" \"$count\"\n  printf \"%s\\n\" \"${arr[@]}\"\n  printf \"%s\\n\" \"${arr[@]:1}\"\
    \n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeam0i924.sh: line 21: syntax error near unexpected token `(''

    /tmp/tmpeam0i924.sh: line 21: `  done <<(for ((i=1; i<=$n; i++)); do echo $i;
    done | sort)''

    '
  stdout: ''
  timestamp: 1660054760
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  declare -i n=$1\n  declare -i a[n]\n  declare -i i\n  declare -i j\n  declare\
    \ -i k\n  a[1]=1\n  a[2]=2\n  a[3]=3\n  a[4]=4\n  a[n]=$((n+1))\n  for i in $(seq\
    \ 1 $n); do\n    for j in $(seq 1 $n); do\n      for k in $(seq 1 $n); do\n  \
    \      if [ $i -eq $j ] && [ $j -eq $k ]; then continue; fi\n        a[$i]=$((\
    \ a[$i] + a[$j] + a[$k] ))\n      done\n    done\n  done\n  for i in $(seq 0 $n-1);\
    \ do\n    for j in $(seq 0 $n-1); do\n      for k in $(seq 0 $n-1); do\n     \
    \   if [ $i -eq $j ] && [ $j -eq $k ]; then continue; fi\n        if [ $a[ $i\
    \ ] -eq $a[ $j ] ]  && [ $a[ $i ] -eq $a[ $k ] ]; then continue; fi\n        ((\
    \ a[ $i ] % 3 == 0 )) && echo \"$a[$i] $a[ $j ] $a[ $k ]\"\n      done\n    done\n\
    \  done\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: invalid floating point argument: \u20185-1\u2019\nTry 'seq --help'\
    \ for more information.\n"
  stdout: ''
  timestamp: 1660054760
