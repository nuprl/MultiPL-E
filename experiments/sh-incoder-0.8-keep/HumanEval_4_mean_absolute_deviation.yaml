name: HumanEval_4_mean_absolute_deviation
language: sh
prompt: "#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the\
  \ average absolute difference between each\n# element and a centerpoint (mean in\
  \ this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0,\
  \ 2.0, 3.0, 4.0])\n# 1.0\n#\n# $1 is a space-separated list\nmean_absolute_deviation()\
  \ {\n"
tests: "}\n\ncandidate() {\n    mean_absolute_deviation \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"1.0 2.0\") = \"0.5\" ]]\n    [[ $(candidate \"1.0 2.0\
  \ 3.0 4.0\") = \"1.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"1.2\"\
  \ ]]\n}\n\nrun_test"
completions: ["\tnumbers=$1\n\tlet 'sum=0'\n\tfor x in $numbers\n\tdo\n\t    let 'sum=sum+x'\n\
    \tdone\n\tlet 'mdev=sum/${#numbers}'\n\tlet 'mad =$((${#number}-1))'\n\tlet 'mad\
    \ =$((${mdev} - ${mad}))'\n\tlet 'mdev=$((${mdev} * -1))'\n\tlet 'mdev=$((${mdev}\
    \ / ${#number}))'\n\tlet 'mdev=$((${mad} + ${mdev}))'\n\techo $mdev", "    local\
    \ item\n    for item; do\n        [[ $(echo \"$item - $1\" | bc -l) -gt 0 ]] &&\
    \ return 0\n    done\n    return 1", "  local x=\"${1}\"\n  shift\n  local mean=\"\
    ${1}\"\n  shift\n  local MAD=0\n  for x in $x; do\n    MAD=\"${MAD} $(echo \"\
    ($x - $mean)\" | bc -l | awk '{ print $2 }')\"\n  done\n  echo \"$MAD\"", "  \
    \  local l=${1+\"$@\"}\n    local sum=0\n    for ele in ${l}; do\n        sum=$((sum\
    \ + $((ele - $(( $(echo \"$sum / ${#l}\") )) )) )) )\n    done\n    echo $(( ${sum}\
    \ / ${#l} ))", "    declare -i n=0\n    declare -a arr=()\n    while IFS= read\
    \ -r line; do\n        if (( n++ > $1 )); then\n            declare -i i\n   \
    \         i=0\n        fi\n        arr[i++]=\"$line\"\n    done < <(paste -sd'|'\
    \ <(printf \"%.0f\\n\" ${arr[@]} | sort -n))\n\n    declare -i n\n    declare\
    \ -i i\n    declare -a arr=()\n    for n in \"${!arr[@]}\"; do\n        declare\
    \ -i n\n        declare -a arr=()\n        arr=(\"${arr[@]}\" $(( ${arr[$n]} -\
    \ ${arr[$(( $n - 1 ))]} / $n )))\n    done\n\n    declare -i n\n    declare -i\
    \ i\n    declare -a arr=()\n    for n in \"${!arr[@]}\"; do\n        declare -i\
    \ n\n        declare -a arr=()\n        arr=(\"${arr[@]}\" $(( ${arr[$n]} - ${arr[$((\
    \ $n - 1 ))]} / $n )))\n    done\n    printf \"%.2f\" $(echo \"${arr[@]}\" | bc\
    \ -l)", "    if [ $# != 1 ]\n    then\n        echo \"$0 <numbers>\"\n       \
    \ return 1\n    fi\n    declare -a numbers\n    numbers=( $1 )\n    echo ${numbers[@]}\
    \ | tr ' ' '\\n' | sort -n | awk 'BEGIN{count=0}\n    {\n        if (NR == 1)\
    \ {\n            sum = $0;\n        } else {\n            sum += $0\n        }\n\
    \        count++\n    }\n    END {\n        print (sum / count);\n    }'", " \
    \ local x\n  local x_mean\n  x=\"$1\"\n  x_mean=$(echo \"$x\" | tr '\\n' ',' |\
    \ sed 's/,$//' | tr '^' ' ')\n  echo \"$x_mean\"", "    local arr=(${1//,/ })\n\
    \    local arr_len=${#arr[@]}\n    local mean\n    local mad_sum\n\n    if [ \"\
    $arr_len\" -eq 1 ] ; then\n        echo \"$1\"\n        return 0\n    fi\n\n \
    \   local j=0\n    mean=$(echo \"scale=2 ; ${arr[*]}\" | bc -l)\n    for ((j=0;\
    \ j<$arr_len; j++)); do\n        mad_sum=$(echo \"scale=2 ; ${arr[j]} - ${mean}\"\
    \ | bc -l)\n        if [ $mad_sum -gt 0 ] ; then\n            mad_sum=$(($mad_sum\
    \ / $arr_len))\n        fi\n        arr[j]=$mad_sum\n    done\n\n    echo \"${arr[*]}\"",
  "\tlocal input_numbers=\"${1}\"\n\tlocal num_elements=\"${#input_numbers}\"\n\t\
    local sum=0\n\tlocal sum2=0\n\tlocal count=0\n\tlocal sum_deviation=0\n\n\tfor\
    \ ((i=0; i < ${num_elements}; i++)); do\n\t\tlocal element=$(echo ${input_numbers[i]}\
    \ | awk '{ print $1 }')\n\t\tlocal deviation=$(echo ${input_numbers[i]} | awk\
    \ '{ print $2 }')\n\t\tsum=$(echo \"${sum} + ${deviation}\" | bc -l)\n\t\tsum2=$(echo\
    \ \"${sum2} + ${deviation} * ${deviation}\" | bc -l)\n\t\tcount=$((${count} +\
    \ 1))\n\tdone\n\techo \"${sum / ${num_elements}}\"\n\techo \"${sum2 / ${num_elements}}\"\
    \n\techo \"${count}\"\n\techo \"${sum / ${count}}\"", "  read -r -a numbers <<<\
    \ \"$1\"\n  # Convert to float\n  numbers=( \"${numbers[@]}\" )\n  sum=0\n  for\
    \ number in \"${numbers[@]}\"; do\n    sum=$(( sum + $number ))\n  done\n  mean=$((\
    \ sum / ${#numbers[@]} ))\n  # Calculate MAD\n  output=0\n  for number in \"${numbers[@]}\"\
    ; do\n    output=$(( output + ${number} - $mean ))\n  done\n  echo $output", " \
    \   local input=$1\n    local input_len=$((${#input[@]}-1))\n    local sum=0\n\
    \    local mean\n    local mean1\n    local mean2\n    local deviation\n    local\
    \ deviation1\n    local deviation2\n    for i in $(seq 0 ${input_len}); do\n \
    \       mean=$(echo \"${input[$((i+1))]}\" | awk '{ SUM += $1 } END { print SUM\
    \ / NR; }')\n        mean1=$(echo \"${input[$((i+1))]}\" | awk '{ SUM += $1 }\
    \ END { print SUM / NR; }')\n        mean2=$(echo \"${input[$((i+1))]}\" | awk\
    \ '{ SUM += $1 } END { print SUM / NR; }')\n        deviation=$(echo \"${input[$((i+1))]}\"\
    \ | awk '{ SUM += ($1-mean)^2 } END { print SUM / NR; }')\n        deviation1=$(echo\
    \ \"${input[$((i+1))]}\" | awk '{ SUM += ($1-mean1)^2 } END { print SUM / NR;\
    \ }')\n        deviation2=$(echo \"${input[$((i+1))]}\" | awk '{ SUM += ($1-mean2)^2\
    \ } END { print SUM / NR; }')\n        sum=$((${sum}+$((${deviation}+${deviation1}+${deviation2}))))\n\
    \    done\n    echo $((${sum}/${input_len}))", "  local input_numbers=$1\n  local\
    \ input_mean=${input_numbers/,/+/g}\n  local input\n  local output\n  for input\
    \ in $input_numbers; do\n    output=$(echo $input | sed 's/,/ /g' | awk '{ print\
    \ $1-$input_mean}')\n    echo $output | bc\n  done", "  x=($@)\n  x_mean=$(awk\
    \ \"BEGIN { print ($1 + 0) / ${#x[*]} }\")\n  echo \"$(awk 'BEGIN { sum = 0; }\
    \ { for (i=1; i<=${#x[*]}; i++) { sum += abs(${x[i]} - ${x_mean}); } END { print\
    \ (sum / ${#x[*]}) }')\"", "\tlocal input=$1\n\n\tlocal mean mad sum1\n\tlocal\
    \ i mean1 iMAX jMAX diff diff sum2\n\n\tlocal input1=(${input//,/ })\n\tlocal\
    \ input2=(${input1[1]//,/ })\n\n\tfor (( i=0; i<${#input1[@]}; i++ )); do\n\t\t\
    if [[ ${input1[$i]} == \"\" ]]; then\n\t\t\techo \"Input '${input[$i]}' has a\
    \ leading space\" 1>&2\n\t\t\texit 1\n\t\tfi\n\t\tmean1=`echo $input1[$i] | awk\
    \ '{printf $1}'`\n\t\tmad=`echo $input1[$i] | awk '{printf $2}'`\n\tdone\n\n\t\
    for i in $(seq 0 1 ${#input1[@]-1}); do\n\t\tif [[ ${input1[$i]} == \"\" ]]; then\n\
    \t\t\techo \"Input '${input[$i]}' has a leading space\" 1>&2\n\t\t\texit 1\n\t\
    \tfi\n\t\tmean2=`echo $input1[$i] | awk '{printf $1}'`\n\t\tjMax=`echo $input1[$i]\
    \ | awk '{printf $2}'`\n\tdone\n\n\tmean=`echo $input1[0] | awk '{printf $1}'`\n\
    \n\tfor i in $(seq 0 1 ${#input1[@]}-2); do\n\t\tsum1=`echo $input1[$i] | awk\
    \ '{printf $1}'`\n\t\tsum2=`echo $input1[$i+1] | awk '{printf $1}'`\n\t\tif [\
    \ $(( $sum1 + $sum2 )) -ne 0 ]; then\n\t\t\tdiff=$(( $sum1 - $sum2 ))\n\t\tfi\n\
    \t\tmad =$(( $mad + ( $diff / $(( iMAX-i )) ) ))\n\tdone\n\tmad =$(( $mad + (\
    \ $input1[-1] - $mean ) ))\n\n\tif [ $mad -gt 0 ]; then\n\t\techo \"Mean Absolute\
    \ Deviation '$mean' is '$mad'\" 1>&2\n\telse\n\t\techo \"Mean Absolute Deviation\
    \ '$mean' is '0'\" 1>&2\n\tfi", "  local x=\"${1:?Usage: mean_absolute_deviation[x]\
    \ list}\"\n  # echo \"x='$x'\"\n  # echo \"x='${x//,/ }'\"\n  local x_mean=\"\
    ${x//,/ }\"\n  # echo \"x_mean='$x_mean'\"\n  local sum=\"${x//[^0-9]/}\"\n  #\
    \ echo \"sum='$sum'\"\n  echo \"${#x}\"\n  echo \"${#x_mean}\"\n  echo \"${#sum}\"\
    \n  echo \"${sum}\"\n  echo \"${#x}\"\n  echo \"${x_mean}\"\n  echo \"${sum}\"\
    \n  echo \"${sum} - ${x_mean}\"\n  echo \"${sum} - ${x_mean} / ${#x}\"\n  echo\
    \ \"${sum} - ${x_mean} / ${#x_mean}\"\n  echo \"${sum} - ${x_mean} / ${#sum}\"\
    \n  echo \"${sum} - ${x_mean} / ${#x_mean} / ${#x}\"\n  echo \"${sum} - ${x_mean}\
    \ / ${#x_mean} / ${#x_mean}\"\n  echo \"${sum} - ${x_mean} / ${#x_mean} / ${#sum}\"\
    \n  echo \"${sum} - ${x_mean} / ${#x_mean} / ${#x_mean} / ${#x}\"\n  echo \"${sum}\
    \ - ${x_mean} / ${#x_mean} / ${#x_mean} / ${#x_mean}\"\n  echo \"${sum} - ${x_mean}\
    \ / ${#x_mean} / ${#x_mean} / ${#sum}\"\n  echo \"${sum} - ${x_mean} / ${#x_mean}\
    \ / ${#x_mean} / ${#x_mean} / ${#x}\"\n  echo \"${sum} - ${x_mean} / ${#x_mean}\
    \ / ${#x_mean} / ${#x_mean} / ${#x_mean}\"\n  echo \"${sum} - ${x_mean} / ${#x_mean}\
    \ / ${#x_mean} / ${#x_mean} / ${#x_mean} / ${#x}\"\n  echo \"${sum} - ${x_mean}\
    \ / ${#x_mean} / ${#x_mean} / ${#x_mean} / ${#x_mean} / ${#x_mean}\"", "  local\
    \ l=$1\n  local x_mean=${l[0]}\n  local mad_sum=0\n  for i in $(seq 0 $((${#l[@]}\
    \ - 1))); do\n    ((mad_sum+=(${l[$i]}-${x_mean}))); done\n  echo \"scale=4; $mad_sum\
    \ / ${#l[@]}\";", "    local input_list=$1\n    local output_list\n\n    # Create\
    \ a list with the mean of the input list\n    for index in $( seq 0 $((${#input_list[@]}\
    \ -1)) ); do\n        output_list+=${input_list[index]} # append the value to\
    \ the list\n    done\n    output_list+=(${input_list[@]: -1}) # append the last\
    \ value too\n    local mean=${output_list[0]}\n    for element in \"${output_list[@]}\"\
    ; do\n        if [[ -z ${element} ]]; then\n            continue\n        fi\n\
    \        mean=$( echo \"$element - $mean\" | bc -l )\n    done\n    echo \"$mean\"",
  "  local numbers=\"$1\"\n  local mean=\"$2\"\n\n  local MAD=0\n\n  for number in\
    \ $numbers; do\n    MAD=$((MAD + abs($number - $mean)))\n  done\n  echo $MAD",
  "  # convert $1 into a list\n  local _list=\"$1\" # preserve $1\n  local _total=0\n\
    \  local _total2=0\n  # convert $1 into a list\n  local _list_len=${#_list[*]}\n\
    \  if [[ ${_list_len} -eq 0 ]]; then\n    return 0\n  fi\n  # for each item in\
    \ the list\n  for (( i=1; i<${_list_len}; i++ )); do\n    # get the ith number\
    \ and add it up\n    _total=${_total}${_list[$i]}\n    _total2=${_total2}${_list[$i]}\n\
    \  done\n  # get mean of _total and _total2\n  local _mean=$(( $_total / ${_list_len}\
    \ ))\n  # calculate MAD\n  local _mad=$(( ( $_total - $_mean ) * ( $_total - $_mean\
    \ ) ))\n  # return it\n  return $_mad", "\tinput_list=$1\n\tsum=0\n\tlen=${#input_list[@]}\n\
    \tfor i in $(seq 0 $((len - 1)))\n\tdo\n\t\tsum=$(($sum + ${input_list[i]} - ${input_list[i\
    \ + 1]}))\n\tdone\n\techo \"scale=4; $sum / $len\""]
stop_tokens:
- "\n}"
