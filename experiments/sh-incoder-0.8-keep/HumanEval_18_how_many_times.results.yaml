language: sh
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  local -n matches=$1\n\
    \  local -n string=$2\n  # Iterate each character in the string.\n  for (( i=0;\
    \ i<${#string}; i++ )); do\n    # Skip this character if it doesn't match the\
    \ string.\n    if [[ \"${string:$i:1}\" != \"${string:$i:1}\" ]]; then\n     \
    \ continue\n    fi\n    # Skip this character if it doesn't match the string.\n\
    \    if [[ \"${string:$i:1}\" == \"${string:$i:1}\" ]]; then\n      continue\n\
    \    fi\n    # Skip this character if it doesn't match the string.\n    if [[\
    \ \"${string:$i:1}\" != \"${string:$i:1}\" ]]; then\n      continue\n    fi\n\
    \    # Increase a counter if it matches.\n    matches[${string:$i:1}]+=1\n  done\n\
    \  # Return the number of matches.\n  echo \"${#matches[@]}\"\n}\n\ncandidate()\
    \ {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n \
    \   [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john\
    \ doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptsgaopt8.sh: line 13: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local i=1\n   \
    \ local len=$#\n    local substring=$1\n    local string=$2\n    while [ $i -lt\
    \ $len ]; do\n        if [[ $string =~ $substring ]]; then\n            echo \"\
    $i\"\n            return\n        fi\n        let i=$i+1\n    done\n    echo $len\n\
    }\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\"\
    ) = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate\
    \ \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local -r string=\"\
    $1\"\n    local -r substring=\"$2\"\n    case \"${string#*$substring}\" in\n \
    \       *\"$substring\"*) echo \"${#substring}\"\n            ;;\n        *)\n\
    \            echo \"0\"\n            ;;\n    esac\n}\n\ncandidate() {\n    how_many_times\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n\
    \    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\"\
    \ \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    # $1 is a string\n\
    \    # $2 is a string\n    # return number of times $2 can be found in $1 with\
    \ overlapping cases\n    local string=$1\n    local substring=$2\n    local substringCount=0\n\
    \    while [[ $string ]]; do\n        if [[ $substring != ${string%$substring}\
    \ ]]; then\n            substringCount=$substringCount+1\n        fi\n       \
    \ string=${string#*$substring}\n    done\n    echo \"$substringCount\"\n}\n\n\
    candidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n \
    \   [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john\
    \ doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=$1\n\
    \    local substring=$2\n    local count=0\n    for i in $(seq 0 $(expr length\
    \ $string - 1))\n    do\n        local teststring=$substring$string\n        [[\
    \ \"$teststring\" == \"${string:$i:1}\" ]]\n        ((count+=1))\n    done\n \
    \   echo \"$count\"\n}\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"\
    xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\"\
    \ ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20181\u2019\n"
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    # $1 is original\n\
    \    # $2 is substring\n    local -r orig=${1:-\"\"}\n    local -r substr=${2:-\"\
    \"}\n    [[ -z $orig ]] && echo \"ERROR: missing original\" && exit 1;\n    [[\
    \ -z $substr ]] && echo \"ERROR: missing substring\" && exit 1;\n    [[ \"$orig\"\
    \ =~ ^$substr ]] \\\n        && echo \"$((${#orig} / (${#orig} - ${#substr})))\"\
    \ \\\n        || echo \"ERROR: $orig contains $substr\"\n}\n\ncandidate() {\n\
    \    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[\
    \ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\"\
    \ \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: -1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=\"\
    $1\"\n    local pattern=\"$2\"\n    local i=0\n    local string_to_search=\"$pattern\"\
    \n    while [[ \"$string\" != '' ]]; do\n        [[ \"$string\" == \"$string_to_search\"\
    \ ]] && let i++\n        [[ \"$string\" == \"$string_to_search\" ]] && string_to_search=\"\
    ${string:3:}\"\n        [[ \"$string\" != \"$string_to_search\" ]] && string_to_search=\"\
    ${string:0:3}\"\n    done\n    echo $i\n}\n\ncandidate() {\n    how_many_times\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n\
    \    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\"\
    \ \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660054468
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=\"\
    $1\"\n    local pattern=\"$2\"\n    echo \"$(( ${#string} - ${#pattern} ))\"\n\
    }\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\"\
    ) = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate\
    \ \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  local str=\"$1\"\n\
    \  local pattern=\"$2\"\n  echo \"$((${#str} - ${#pattern}))\"\n}\n\ncandidate()\
    \ {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n \
    \   [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john\
    \ doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    [ \"$1\" ] || return\
    \ 1\n    [ \"$2\" ] || return 1\n    [ \"$1\" == \"$2\" ] || return 0\n\n    len1=\"\
    ${#1}\"\n    len2=\"${#2}\"\n    len=\"${len1}${len2}\"\n\n    result=1\n\n  \
    \  for ((i=1; i <= len; i++)); do\n        res=\"${1}$2\"\n        if [ \"$res\"\
    \ == \"$1\" ]; then\n            result=$((result+1))\n        elif [ \"$res\"\
    \ == \"$2\" ]; then\n            result=$((result-1))\n        fi\n        shift\n\
    \        shift\n    done\n\n    result\n}\n\ncandidate() {\n    how_many_times\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n\
    \    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\"\
    \ \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    [[ $1 =~ .*$2 ]]\
    \ || return\n    local len=${#1}\n    local i=$((len-${#2}+1))\n    local j=$((len-${#2}))\n\
    \    local ipos=0\n    local jpos=0\n    local count=0\n    while [ $i -le $len\
    \ ]; do\n        local sub=${1:i:$j}\n        if [[ $sub =~ $2 ]]; then\n    \
    \        ((count+=1))\n            ipos=$i\n            jpos=$j\n        fi\n\
    \        ((i++))\n        ((j--))\n    done\n    echo $((count+1))\n}\n\ncandidate()\
    \ {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n \
    \   [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john\
    \ doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=$1\n\
    \    local substring=$2\n    if [[ \"$string\" == \"\" ]]; then\n        return\
    \ 0\n    fi\n\n    if [[ \"$substring\" == \"\" ]]; then\n        return 0\n \
    \   fi\n\n    local string_cnt=0\n    local substring_cnt=0\n    for char in \"\
    ${string}\"; do\n        if [[ \"$char\" == \"$substring\" ]];then\n         \
    \   (( substring_cnt += 1 ))\n        else\n            (( string_cnt += 1 ))\n\
    \        fi\n    done\n\n    echo $(( substring_cnt + string_cnt ))\n}\n\ncandidate()\
    \ {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n \
    \   [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john\
    \ doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local STRING1=\"\
    ${1}\"\n    local STRING2=\"${2}\"\n    local STRING1=\"${STRING1}\"\n    local\
    \ STRING2=\"${STRING2}\"\n\n    local count=1\n    local maxcount=0\n    for ((\
    \ i=0; i <= ${#STRING1}; i++ )); do\n        local CHAR=\"${STRING1:$i:1}\"\n\
    \        local CHAR2=\"${STRING2:$i:1}\"\n        if [[ $CHAR !=  \"$CHAR2\" ]];\
    \ then\n            local count1=$count\n            (( count++ ))\n         \
    \   if [[ $count1 > $maxcount ]]; then\n                maxcount=$count1\n   \
    \         fi\n        fi\n    done\n    echo $maxcount\n}\n\ncandidate() {\n \
    \   how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    \ \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[\
    \ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\"\
    \ \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    echo \"$1 $2\"\
    \ | sort | uniq -c\n}\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"\
    xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\"\
    \ ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n\tlocal -r string=\"\
    ${1}\"\n\tlocal -r sub=\"${2}\"\n\tlocal -r count=\"${3:-1}\"\n\t[[ -z \"${string}\"\
    \ ]] && return 0\n\t[[ -z \"${sub}\" ]] && return 0\n\tlocal -r len=\"${#string}\"\
    \n\tlocal -i start\n\tlocal -r found=0\n\n\tfor ((start = 0; start < len; start++));\
    \ do\n\t\tlocal -r sub_offset=\"${start+1}\"\n\t\t[[ \"${string: -$sub_offset}\"\
    \ == \"${sub}\" ]] && found=\"$((found+1))\" || true\n\tdone\n\n\techo \"${found}\"\
    \n}\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\"\
    ) = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate\
    \ \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local a\n    a=(\
    \ ${1//$2} )\n    echo \"${#a[@]}\"\n}\n\ncandidate() {\n    how_many_times \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n \
    \   [[ $(candidate \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\"\
    \ \"cac\") = \"4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  string=$1\n  substring=$2\n\
    \  substring_length=$3\n  if [[ \"$substring\" == \"\" ]]; then\n    echo \"0\"\
    \n    return\n  fi\n  string=\"${string//$substring/$substring,}\"\n  while [[\
    \ \"$string\" != \"\" ]] && [[ \"$substring\" != \"$string\" ]] \n    do\n   \
    \   string=\"${string//$substring/$substring,}\"\n      substring=\"$substring,$substring_length\"\
    \n      substring_length=\"$substring_length-1\"\n    done\n  echo $((${#string}-1))\n\
    }\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"xyxyxyx\" \"x\"\
    ) = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\" ]]\n    [[ $(candidate\
    \ \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054463
- exit_code: 2
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local -i j=0\n\
    \    local -i i\n    local -i len1=$#\n    local -i len2=$((${#$1} + 1))\n   \
    \ local -i overlap=0\n    while (( i < len1 )); do\n        (( j+=1 ))\n     \
    \   i=$((i+1))\n        (( j+=1 ))\n        if (( i < len1 )); then\n        \
    \    (( overlap=overlap + ( ${#1}[ $i ] && ${#2}[ $(( i - 1 )) ] &&\n        \
    \        ( ${#1}[ $i ] && ${#2}[ $(( i - 1 )) ] ) ))\n        fi\n    done\n \
    \   echo ${overlap}\n}\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"\
    xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\"\
    \ ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmphvy6nft5.sh: line 24: syntax error near unexpected token `('\n\
    /tmp/tmphvy6nft5.sh: line 24: `( overlap=overlap + ( ${#1}[ $i ] && ${#2}[ $((\
    \ i - 1 )) ] &&\n                ( ${#1}[ $i ] && ${#2}[ $(( i - 1 )) ] ) ))'\n"
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  echo \"$1 $2\" |\
    \ tr $2 $1 | wc -l\n}\n\ncandidate() {\n    how_many_times \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate \"\
    xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"4\"\
    \ ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: missing operand after \u2018x\u2019\nTwo strings must be given when\
    \ translating.\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660054463
- exit_code: 1
  program: "#!/bin/bash\n# Find how many times a given substring can be found in the\
    \ original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n\
    # >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\n\
    #\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n\techo $(grep -n -F\
    \ -e \"$1\" $2 | cut -d: -f1)\n}\n\ncandidate() {\n    how_many_times \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\" \"x\") = \"0\" ]]\n    [[ $(candidate\
    \ \"xyxyxyx\" \"x\") = \"4\" ]]\n    [[ $(candidate \"cacacacac\" \"cac\") = \"\
    4\" ]]\n    [[ $(candidate \"john doe\" \"john\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: x: No such file or directory

    '
  stdout: ''
  timestamp: 1660054463
