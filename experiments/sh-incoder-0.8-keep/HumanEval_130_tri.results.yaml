language: sh
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    echo \"$1\" | awk '{print $2}'\
    \ > ${1}\n    echo -n \"\\n\"\n    for ((n=3;n<=$1;n+=2));do\n        echo $n\n\
    \    done\n    for ((n=2;n<=$1;n+=2));do\n        echo $n\n    done\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  shift\n  local sum=1\n\
    \  local nsum=1\n  local msum=0\n  local msum2=0\n  local msum3=0\n  local msum4=0\n\
    \  local msum5=0\n  local msum6=0\n  local msum7=0\n  local msum8=0\n  local msum9=0\n\
    \  local msum10=0\n  local msum11=0\n  local msum12=0\n  local msum13=0\n  local\
    \ msum14=0\n  local msum15=0\n  local msum16=0\n  local msum17=0\n  local msum18=0\n\
    \  local msum19=0\n  local msum20=0\n  local msum21=0\n  local msum22=0\n  local\
    \ msum23=0\n  local msum24=0\n  local msum25=0\n  local msum26=0\n  local msum27=0\n\
    \  local msum28=0\n  local msum29=0\n  local msum30=0\n  local msum31=0\n  local\
    \ msum32=0\n  local msum33=0\n  local msum34=0\n  local msum35=0\n  local msum36=0\n\
    \  local msum37=0\n  local msum38=0\n  local msum39=0\n  local msum40=0\n  local\
    \ msum41=0\n  local msum42=0\n  local msum43=0\n  local msum44=0\n  local msum45=0\n\
    \  local msum46=0\n  local msum47=0\n  local msum48=0\n  local msum49=0\n  local\
    \ msum50=0\n  local msum51=0\n  local msum52=0\n  local msum53=0\n  local msum54=0\n\
    \  local msum55=0\n  local msum56=0\n  local msum57=0\n  local msum58=0\n  local\
    \ msum59=0\n  local msum60=0\n  local msum61=0\n  local msum62=0\n  local msum63=0\n\
    \  local msum64=0\n  local msum65=0\n  local msum66=0\n  local msum67=0\n  local\
    \ msum68=0\n  local msum69=0\n  local msum70=0\n  local m\n}\n\ncandidate() {\n\
    \    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3\
    \ 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"\
    5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n\
    \    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\"\
    ) = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24\
    \ 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8\
    \ 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    tri=$1\n    echo\
    \ -en \"\n    echo $1\n    echo \"\n    echo -en \"\n    for ((i=1; i<=n; i++))\n\
    \    do\n    tri=$((tri + i))\n    echo -en \"\n    echo $((tri + i))\n    echo\
    \ -en \"\n    echo $1\n    done\n    echo -en \"\n    echo $((tri))\n    echo\
    \ -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en\
    \ \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n\
    \    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo\
    \ $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n\
    \    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo\
    \ -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en\
    \ \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n\
    \    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo\
    \ $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n\
    \    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo\
    \ -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en\
    \ \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n\
    \    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo\
    \ $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n\
    \    echo -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo\
    \ -en \"\n    echo $((tri))\n    echo -en \"\n    echo $((tri))\n    echo -en\
    \ \"\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n\tif [ $1 -eq 1 ]; then return 3;\
    \ fi\n\tlocal i; local f=0; local arr=()\n\ti=1; f=$((i-1)); arr+=(\"$i\"); i=$((i+1));\
    \ arr+=(\"$f\");\n\ti=1; f=$((i+1)); arr+=(\"$i\"); i=$((i+2)); arr+=(\"$f\");\n\
    \ti=$((2)); f=$((i+1)); arr+=(\"$i\"); i=$((i+1)); arr+=(\"$f\");\n\techo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local a=$1\n  echo $a\n  if [ $a\
    \ -eq 1 ]; then\n    echo 1\n  elif [ $a -eq 2 ]; then\n    echo 1 2\n  elif [\
    \ $a -eq 3 ]; then\n    echo 1 2 3\n  elif [ $a -eq 4 ]; then\n    echo 1 2 3\
    \ 4\n  elif [ $a -eq 5 ]; then\n    echo 1 2 3 4 5\n  elif [ $a -eq 6 ]; then\n\
    \    echo 1 2 3 4 5 6\n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    local n=$1; shift;\n    local\
    \ a b; a=0; b=1\n    while [ $n -gt 0 ]; do\n        echo $a\n        a=$((b+a))\n\
    \        b=$((2*a+b))\n        n=$((n-1))\n    done\n}\n\ncandidate() {\n    tri\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local a[3]\n \
    \   if [ ${n} -eq 0 ]; then\n        echo []\n        return\n    fi\n    a[1]=3\n\
    \    a[2]=1\n    a[3]=${a[*]}\n    local i\n    local j\n    for ((i=3; $((i -\
    \ 3)) <= ${#a[*]} - 3; i++))\n    do\n        a[$((i-3+1))]=${a[$((i-3))]} + ${a[$((i-2))]}\n\
    \    done\n    for ((j=$((${#a[*]}-2+i)); $((j-$((3-$i)))) < (${#a[*]} - $i);\
    \ j++))\n    do\n        a[$((j-3+1))]=${a[$((j-3))]} + ${a[$((j-2))]}\n    done\n\
    \    echo ${a[*]} \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfpde0zy9.sh: line 33: `a[$((i-3+1))]'': not a valid identifier

    /tmp/tmpfpde0zy9.sh: line 33: +: command not found

    /tmp/tmpfpde0zy9.sh: line 35: j--1: syntax error in expression (error token is
    "1")

    '
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n\tif [ \"$1\" -gt 0 ] ; then\n\t\t\
    local num=$1\n\t\tlocal n=1\n\t\tlocal seq\n\t\tseq=()\n\t\tseq=( $(for ((i=1;i<num;i++))\
    \ ; do \n\t\t\tn=$(expr $n + 1)\n\t\t\tseq=( \"${seq[@]}\" \"$(expr $n - 1)\"\
    \ \"$(expr ($n - $((n/2)) + 1))\" )\n\t\t\techo $n\n\t\tdone))\n\t\techo ${seq[@]}\n\
    \telse\n\t\techo \"-1\"\n\tfi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"\
    4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n   \
    \ [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"\
    1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n\
    \    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpmcelnx7z.sh: command substitution: line 32: syntax error near unexpected
    token `$n''

    /tmp/tmpmcelnx7z.sh: command substitution: line 32: `expr ($n - $((n/2)) + 1))"''

    '
  stdout: ''
  timestamp: 1660054546
- exit_code: -1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n        local n=$1\n        local\
    \ -i a b\n\n        if (( n <= 1 )); then\n                return\n        fi\n\
    \n        a=3\n        b=1\n        while (( n < $(( $n + 1 )) )); do\n      \
    \          a=$b\n                b=$(( a + b ))\n        done\n\n        echo\
    \ -n \"[\"\n        for (( i = n; i > 1; i-- )); do\n                echo -n $b\n\
    \        done\n        echo  \"]\"\n\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=3 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660054551
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    if [[ \"$1\" -gt 0 ]]; then\n\
    \        local n=\"$1\"\n        local i=1\n        local a=1\n        local b=$((n+1))\n\
    \        local c=$((n+1))\n        local d=$((n+1))\n        while [[ $i -le $n\
    \ ]]; do\n            local c=$(( $a + $b ))\n            local d=$(( $c + $d\
    \ ))\n            local a=$b\n            local b=$c\n            local c=$d\n\
    \            local d=$(( $a + $b ))\n            i=$(( $i + 1 ))\n           \
    \ echo $(( $a ))\n        done\n    fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  [ $n -eq 0 ] && echo\
    \ \"Invalid input\" && exit 1\n  [ $n -eq 1 ] || return\n  local a=3 b=1 c=2 d=0\n\
    \  while [ $n -gt 0 ]; do\n    local n=$(( $n - 1 ))\n    local m=$(( $n + 1 ))\n\
    \    local j=$(( $n - $m + 1 ))\n    local i=$(( $j + $d ))\n    local result=$((\
    \ $a + $b + $c + $d ))\n    echo $result >> /tmp/result\n    [ $i -gt 0 ] || break\n\
    \    local m=$(( $n + 1 ))\n    local j=$(( $n - $m + 1 ))\n    local i=$(( $j\
    \ + $d ))\n    local result=$(( $a + $b + $c + $d ))\n    echo $result >> /tmp/result\n\
    \    [ $i -gt 0 ] || break\n    local m=$(( $n + 1 ))\n    local j=$(( $n - $m\
    \ + 1 ))\n    local i=$(( $j + $d ))\n    local result=$(( $a + $b + $c + $d ))\n\
    \    echo $result >> /tmp/result\n    [ $i -gt 0 ] || break\n    local m=$(( $n\
    \ + 1 ))\n    local j=$(( $n - $m + 1 ))\n    local i=$(( $j + $d ))\n    local\
    \ result=$(( $a + $b + $c + $d ))\n    echo $result >> /tmp/result\n    [ $i -gt\
    \ 0 ] || break\n    local m=$(( $n + 1 ))\n    local j=$(( $n - $m + 1 ))\n  \
    \  local i=$(( $j + $d ))\n    local result=$(( $a + $b + $c + $d ))\n    echo\
    \ $result >> /tmp/result\n    [ $i -gt 0 ] || break\n    local m=$(( $n + 1 ))\n\
    \    local j=$(( $n - $m + 1 ))\n    local i=$(( $j + $d ))\n    local result=$((\
    \ $a + $b + $c + $d ))\n    echo $result >> /tmp/result\n    [ $i -gt 0 ] || break\n\
    \    local m=$(( $n + 1 ))\n    local j=$(( $n - $m + 1 ))\n    local i=$(( $j\
    \ + $d ))\n    local result=$(( $a + $b + $c + $d ))\n    echo $result >> /tmp/result\n\
    \    [ $i -g\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3\
    \ 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbcaqo1ax.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpbcaqo1ax.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  [ $# -ne 1 ] && printf \"Error!\
    \ Invalid number of arguments. Usage: tri [integer]\\n\" && return 1\n  \n  #\
    \ Tribonacci sequence only has five terms (0, 1, 3, 6, and 9).\n  local a=0\n\
    \  local b=1\n  local c=3\n  local d=1\n  local sum=0\n  local i=$1\n  \n  while\
    \ [ $i -gt 0 ]; do\n    sum=$(( sum + $(( i*b+c*d )) ))\n    c=$(( $c + $(( i*d+b*c\
    \ )) ))\n    d=$(( $d + $(( i*c+a*d )) ))\n    i=$(( $i - 1 ))\n  done\n  printf\
    \ \"%d\\n\" $sum\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  \n  if [ $n -lt 0\
    \ ]; then\n    echo \"Usage: tri $n\"\n    exit 1\n  fi\n  \n  local a[1]=3\n\
    \  local b[1]=1\n  \n  if [ $n -eq 1 ]; then\n    printf \"%s\\n\" \"${a[@]}\"\
    \n  else\n    printf \"%s\\n\" \"${a[@]:1}\"\n    printf \"%s\\n\" \"${b[@]:1}\"\
    \n  fi\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\"\
    \ ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\"\
    ) = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n\
    \    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"\
    9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3\
    \ 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") =\
    \ \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 2
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  [ $n -eq 0 ] && return\
    \ 0\n  [ $n -eq 1 ] && return 1\n  local m1=$(( $n - 1 ))\n  local m2=$(( $n -\
    \ 2 ))\n  local m3=$(( $n + 1 ))\n  local m4=$(( $n + 2 ))\n  local m5=$(( $n\
    \ + 3 ))\n  local m6=$(( $n + 4 ))\n  local m7=$(( $n + 5 ))\n  local m8=$(( $n\
    \ + 6 ))\n  local m9=$(( $n + 7 ))\n  local m10=$(( $n + 8 ))\n  local m11=$((\
    \ $n + 9 ))\n  local m12=$(( $n + 10 ))\n  local m13=$(( $n + 11 ))\n  local m14=$((\
    \ $n + 12 ))\n  local m15=$(( $n + 13 ))\n  local m16=$(( $n + 14 ))\n  local\
    \ m17=$(( $n + 15 ))\n  local m18=$(( $n + 16 ))\n  local m19=$(( $n + 17 ))\n\
    \  local m20=$(( $n + 18 ))\n  local m21=$(( $n + 19 ))\n  local m22=$(( $n +\
    \ 20 ))\n  local m23=$(( $n + 21 ))\n  local m24=$(( $n + 22 ))\n  local m25=$((\
    \ $n + 23 ))\n  local m26=$(( $n + 24 ))\n  local m27=$(( $n + 25 ))\n  local\
    \ m28=$(( $n + 26 ))\n  local m29=$(( $n + 27 ))\n  local m30=$(( $n + 28 ))\n\
    \  local m31=$(( $n + 29 ))\n  local m32=$(( $n + 30 ))\n  local m33=$(( $n +\
    \ 31 ))\n  local m34=$(( $n + 32 ))\n  local m35=$(( $n + 33 ))\n  local m36=$((\
    \ $n + 34 ))\n  local m37=$(( $n + 35 ))\n  local m38=$(( $n + 36 ))\n  local\
    \ m39=$(( $n + 37 ))\n  local m40=$(( $n + 38 ))\n  local m41=$(( $n + 39 ))\n\
    \  local m42=$(( $n + 40 ))\n  local m43=$(( $n + 41 ))\n  local m44=$(( $n +\
    \ 42 \n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[\
    \ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3\
    \ 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[\
    \ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") =\
    \ \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4\
    \ 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8ahm3n0j.sh: line 66: unexpected EOF while looking for matching
    `)''

    /tmp/tmp8ahm3n0j.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    local number=$1\n    local numbers=\"\
    \"\n    while (( number )); do\n        numbers=$number\",\"$(echo $number%2 |\
    \ bc)\n        number=$(( number / 2 ))\n    done\n    numbers=$(echo $numbers\
    \ | sed 's/.$//')\n    echo $numbers\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate\
    \ \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n\
    \    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\")\
    \ = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24\
    \ 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate\
    \ \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[\
    \ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n    if [ $1 -gt 5 ]; then\n      \
    \  echo 0\n    elif [ $1 -eq 0 ]; then\n        echo 1\n    elif [ $1 -eq 1 ];\
    \ then\n        echo 1\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif\
    \ [ $1 -eq 3 ]; then\n        echo 3\n    elif [ $1 -eq 4 ]; then\n        echo\
    \ 1\n    elif [ $1 -eq 5 ]; then\n        echo 2\n    elif [ $1 -eq 6 ]; then\n\
    \        echo 3\n    elif [ $1 -eq 7 ]; then\n        echo 4\n    elif [ $1 -eq\
    \ 8 ]; then\n        echo 5\n    elif [ $1 -eq 9 ]; then\n        echo 6\n   \
    \ elif [ $1 -eq 10 ]; then\n        echo 7\n    elif [ $1 -eq 11 ]; then\n   \
    \     echo 8\n    else\n        echo 0\n    fi\n}\n\ncandidate() {\n    tri \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n\
    \    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"\
    1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15\
    \ 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n   \
    \ [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120\
    \ 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"\
    1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  local arr=($(seq 1\
    \ $n+1))\n  if [[ \"$n\" -le 1 ]]; then\n    echo \"Tribonacci sequence up to\
    \ $n does not exist.\"\n  else\n    arr[$((${#arr[@]} + 1))]=$((${arr[$((${#arr[@]}\
    \ - 2))] + arr[$((${#arr[@]} - 1))]} ))\n    echo \"${arr[@]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: invalid floating point argument: \u20183+1\u2019\nTry 'seq --help'\
    \ for more information.\n/tmp/tmpv0izypxh.sh: line 25: ${arr[$((${#arr[@]} - 2))]\
    \ + arr[$((${#arr[@]} - 1))]} : bad substitution\n"
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  local l=$(( $n + 1\
    \ ))\n  local a b\n  a=0\n  b=$(( $l ))\n  echo $a\n  while [ $l -gt 1 ] ; do\n\
    \    b=$(( $a + $b ))\n    echo $b\n    [ $b -lt $(( $n )) ] && let a=$b\n   \
    \ l=$(( $l - 1 ))\n  done\n}\n\ncandidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"\
    1 3 2 8 3\" ]]\n    [[ $(candidate \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate\
    \ \"6\") = \"1 3 2 8 3 15 4\" ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4\
    \ 24\" ]]\n    [[ $(candidate \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate\
    \ \"9\") = \"1 3 2 8 3 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2\
    \ 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n  local n=$1\n  local seq\n  seq=$(\
    \ seq 1 $n | while read -r x\n    do\n      # print and increment by 2\n     \
    \ echo \"$((x + 1))\"\n      (( ++seq )); \n    done )\n  echo \"$seq\"\n}\n\n\
    candidate() {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3\") = \"1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
- exit_code: 1
  program: "#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n# the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n\
    # tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n\
    # tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are\
    \ given a non-negative integer number n, you have to a return a list of the \n\
    # first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# tri(3) = [1,\
    \ 3, 2, 8]\n#\n# $1 is an integer\ntri() {\n\tlocal n=$1\n\tlocal a=0\n\tlocal\
    \ b=1\n\tlocal c=0\n\tlocal d=1\n\tlocal k=0\n\n\twhile [ $k -lt $n ]; do\n\t\t\
    c=`expr $a + $b`\n\t\td=`expr $a + $c + $d`\n\t\ta=`expr $b + $c`\n\t\tb=`expr\
    \ $d`\n\t\tk=`expr $k + 1`\n\tdone\n\techo -n \"$a, $b, $c, $d\"\n}\n\ncandidate()\
    \ {\n    tri \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"\
    1 3 2 8\" ]]\n    [[ $(candidate \"4\") = \"1 3 2 8 3\" ]]\n    [[ $(candidate\
    \ \"5\") = \"1 3 2 8 3 15\" ]]\n    [[ $(candidate \"6\") = \"1 3 2 8 3 15 4\"\
    \ ]]\n    [[ $(candidate \"7\") = \"1 3 2 8 3 15 4 24\" ]]\n    [[ $(candidate\
    \ \"8\") = \"1 3 2 8 3 15 4 24 5\" ]]\n    [[ $(candidate \"9\") = \"1 3 2 8 3\
    \ 15 4 24 5 35\" ]]\n    [[ $(candidate \"20\") = \"1 3 2 8 3 15 4 24 5 35 6 48\
    \ 7 63 8 80 9 99 10 120 11\" ]]\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[\
    \ $(candidate \"1\") = \"1 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054546
