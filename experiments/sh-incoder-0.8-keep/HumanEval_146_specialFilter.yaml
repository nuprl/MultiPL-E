name: HumanEval_146_specialFilter
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an array of numbers as input and\
  \ returns \n# the number of elements in the array that are greater than 10 and both\
  \ \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n\
  # specialFilter([15, -73, 14, -15]) => 1 \n# specialFilter([33, -2, -3, 45, 21,\
  \ 109]) => 2\n#\n# $1 is a space-separated list\nspecialFilter() {\n"
tests: "}\n\ncandidate() {\n    specialFilter \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5 -2 1 -5\") = \"0\" ]]\n    [[ $(candidate \"15 -73 14 -15\"\
  ) = \"1\" ]]\n    [[ $(candidate \"33 -2 -3 45 21 109\") = \"2\" ]]\n    [[ $(candidate\
  \ \"43 -12 93 125 121 109\") = \"4\" ]]\n    [[ $(candidate \"71 -2 -33 75 21 19\"\
  ) = \"3\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\") = \"\
  0\" ]]\n}\n\nrun_test"
completions: ["    declare inputList=($1)\n\n    for inputItem in ${inputList[@]}\n\
    \    do\n        if [ $inputItem -gt 10 ] && [[ $((inputItem%2)) -eq 1 ]] && [[\
    \ $inputItem -lt 10 ]] && [[ $((inputItem/10)) -eq 1 ]]\n        then\n      \
    \      echo ${inputList[@]}\n        fi\n    done", "    local arr=( \"$@\" )\n\
    \n    local i\n    for i in \"${arr[@]}\"; do\n        if [[ \"$i\" -gt 10 ]];\
    \ then\n            if [[ \"$i\" -eq $(echo \"$i | cut -c4-\") ]]; then\n    \
    \            if [[ \"$i\" -eq $(echo \"$i | cut -c5-\") ]]; then\n           \
    \         echo 0\n                else\n                    echo 1\n         \
    \       fi\n            else\n                echo 1\n            fi\n       \
    \ else\n            echo 0\n        fi\n    done", "    local numbers=(\"$@\"\
    )\n    local count=0\n    for number in \"${numbers[@]}\"; do\n        if [[ \"\
    $number\" -gt 10 ]]; then\n            if [[ $number -le 9 ]]; then\n        \
    \        if [[ $(expr mod $number 2) -eq 1 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            fi\n        fi\n    done\n    echo \"$count\"",
  "  local arr=$1 \n  local result \n  local i \n  result=0 \n  for i in ${arr[@]};\
    \ do\n    if (( ((( i % 2 )); then (( result += 1 ))) ); then\n      if (( ((\
    \ i % 2 )); then (( result += 1 ))) ; then\n        if (( (( i % 2 )); then ((\
    \ result += 1 ))) ; then\n          if (( ((( arr[i] % 2 )); then (( result +=\
    \ 1 ))) ); then \n            if (( (( arr[i] % 2 )); then (( result += 1 )))\
    \ ; then\n              if (( ((( arr[i] % 2 )); then (( result += 1 ))) ); then\
    \ \n                if (( ((( arr[i] % 2 )); then (( result += 1 ))) ); then\n\
    \                  if (( ((( arr[i] % 2 )); then (( result += 1 ))) ); then\n\
    \                    (( result = result + (( i + 1 ))))\n                  fi\n\
    \                fi\n              fi\n            fi\n          fi\n        fi\n\
    \      fi\n    fi\n  done\n  echo ${result}", "    local IFS=\"[ -~]\"\n    local\
    \ IFS_CAT=\"-\"\n    local IFS_=\"-\"\n    local IFS_E=\"-\"\n    local IFS_E1=\"\
    -\"\n    local IFS_E1=\"-\"\n    local IFS_E2=\"-\"\n    local IFS_E2=\"-\"\n\
    \    local IFS_E3=\"-\"\n    local IFS_E3=\"-\"\n    local IFS_E4=\"-\"\n    local\
    \ IFS_E4=\"-\"\n    local IFS_E5=\"-\"\n    local IFS_E5=\"-\"\n    local IFS_E6=\"\
    -\"\n    local IFS_E6=\"-\"\n    local IFS_E7=\"-\"\n    local IFS_E7=\"-\"\n\
    \    local IFS_E8=\"-\"\n    local IFS_E8=\"-\"\n    local IFS_E9=\"-\"\n    local\
    \ IFS_E9=\"-\"\n    local IFS_E10=\"-\"\n    local IFS_E10=\"-\"\n    local IFS_E11=\"\
    -\"\n    local IFS_E11=\"-\"\n    local IFS_E12=\"-\"\n    local IFS_E12=\"-\"\
    \n    local IFS_E13=\"-\"\n    local IFS_E13=\"-\"\n    local IFS_E14=\"-\"\n\
    \    local IFS_E14=\"-\"\n    local IFS_E15=\"-\"\n    local IFS_E15=\"-\"\n \
    \   local IFS_E16=\"-\"\n    local IFS_E16=\"-\"\n    local IFS_E17=\"-\"\n  \
    \  local IFS_E17=\"-\"\n    local IFS_E18=\"-\"\n    local IFS_E18=\"-\"\n   \
    \ local IFS_E19=\"-\"\n    local IFS_E19=\"-\"\n    local IFS_E20=\"-\"\n    local\
    \ IFS_E20=\"-\"\n    local IFS_E21=\"-\"\n    local IFS_E21=\"-\"\n    local IFS_E22=\"\
    -\"\n    local IFS_E22=\"-\"\n    local IFS_E23=\"-\"\n    local IFS_E23=\"-\"\
    \n    local IFS_E24=\"-\"\n    local IFS_E24=\"-\"\n    local IFS_E25=\"-\"\n\
    \    local IFS_E25=\"-\"\n    local IFS_E26=\"-\"\n    local IFS_E26=\"-\"\n \
    \   local IFS_E27=\"-\"\n    local IFS_E27=\"-\"\n    local ", "  local array=\"\
    $1\"\n  local count=0\n\n  for element in \"${array[@]}\"; do\n    if [ \"$element\"\
    \ -gt 10 ]; then\n      [[ \"$element\" != -* ]] || { echo \"invalid number: ${element}\"\
    ; break; }\n      (( ++count ))\n    else\n      local first=\"${element%?}\"\n\
    \      local last=\"${element#$first}\"\n\n      if [ -n \"${first}\" -a -n \"\
    ${last}\" ]; then\n        [[ \"$first\" != 1 ]] && [[ \"$last\" != 1 ]] && {\
    \ echo \"invalid number: ${element}\"; break; }\n        (( ++count ))\n     \
    \ else\n        echo \"invalid number: ${element}\"\n        break\n      fi\n\
    \    fi\n  done\n\n  echo \"$count\"", "    local numberArray\n    numberArray=(${@/#/})\n\
    \    local sum=0\n    local numberOfElements\n    numberOfElements=${#numberArray[@]}\n\
    \    for (( i=0; i<$numberOfElements; i++ )); do\n        local number\n     \
    \   number=${numberArray[$i]}\n        if [ $number -gt 10 ] && [ \"$((number%2))\"\
    \ -eq 1 ] && [ \"$((number%2))\" -eq 1 ]; then\n            sum=$((sum+1))\n \
    \       fi\n    done\n    echo $sum", "  local arr=( \"$@\" )\n  local sum=0\n\
    \  for i in \"${arr[@]}\"; do\n    sum=$((sum+i))\n  done\n  echo $(($sum%2))",
  "  local list=\"$1\"\n  local -n list=\n  local count=0\n  while read number; do\n\
    \    if (( $number > 10 )); then\n      if (( $(( $number % 10 )) % 2 )); then\n\
    \        count=$(expr 1 + $count)\n      else\n        count=$(expr 1 + $count)\n\
    \      fi\n    fi\n  done <<< \"$list\"\n  echo $count", "\tlocal array=$1\n\t\
    local count=`echo $array | cut -d \" \" -f1 | sort | uniq | wc -l`\n\tlocal lastNum=`echo\
    \ $array | cut -d \" \" -f2 | sort | uniq | wc -l`\n\tlocal firstNum=`echo $array\
    \ | cut -d \" \" -f2 | sort | uniq | head -1`\n\n\tif [ $lastNum -ne 1 ]; then\n\
    \t\tcount=`echo $array | cut -d \" \" -f1 | sort | uniq | wc -l`\n\telse\n\t\t\
    count=`echo $array | cut -d \" \" -f1 | sort | uniq | head -1`\n\tfi\n\n\tif [\
    \ \"$firstNum\" -eq 1 ]; then\n\t\tcount=`echo $array | cut -d \" \" -f1 | sort\
    \ | uniq | head -1`\n\tfi\n\n\techo \"$count\"", "    arr=(\"${@}\")\n    local\
    \ n=$((${#arr[@]} - 1))\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        case\
    \ \"${arr[$i]}\" in\n            -10 ) ;;\n            -9 ) ;;\n            -7\
    \ ) ;;\n            -5 ) ;;\n            -3 ) ;;\n            -2 ) ;;\n      \
    \      -1 ) ;;\n            0 ) ;;\n            1 ) ;;\n            3 ) ;;\n \
    \           5 ) ;;\n            7 ) ;;\n            9 ) ;;\n            * ) arr[$i]=0\
    \ ;;\n        esac\n    done\n    echo \"${#arr[@]}\"", "    mapfile -t array\
    \ < <(echo $1 |sed 's/ //g' | sed 's/,/\\n/g')\n    echo ${#array[@]} ", "   \
    \ local number=\"$1\"\n    # Loop through all numbers in the list\n    for number\
    \ in \"$@\"; do\n        # Check if current number is greater than 10\n      \
    \  if [[ \"$number\" -gt 10 ]]; then\n            # Check if first and last digits\
    \ of current number are odd\n            if [[ \"$number\" -ge 1 ]]\n        \
    \    then\n                if [[ \"$number\" -le 9 ]]\n                then\n\
    \                    echo \"$number\"\n                fi\n            fi\n  \
    \      fi\n    done", "  nums=(${1// / })\n  numArray=(${nums//,/ })\n  len=${#nums[@]}\n\
    \  result=1\n  for (( i = 0; i < ${len}; i++ )); do\n    if [ ${numArray[i]} -gt\
    \ 10 ]; then\n      if [ ${numArray[i]} -le 10 ]; then\n        if [ ${numArray[i-1]}\
    \ -eq 0 -a ${numArray[i]} -eq 0 ]; then\n          result=$((result+1))\n    \
    \    fi\n      fi\n    fi\n  done\n  return $result", "    local -a arr=(${1//\
    \ / })\n    local len newLen firstOdd lastOdd\n    len=${#arr[@]}\n    newLen=0\n\
    \    firstOdd=0\n    lastOdd=0\n    for (( i=0; i < len; i++ )); do\n        if\
    \ (( ${arr[$i]} > 10 )); then\n            (( newLen=newLen + 1 ))\n        elif\
    \ (( ${arr[$i]} > 10 )); then\n            (( newLen=newLen + 1 ))\n        elif\
    \ (( ${arr[$i]} > 10 )); then\n            (( newLen=newLen + 1 ))\n        elif\
    \ (( ${arr[$i]} > 10 )); then\n            (( newLen=newLen + 1 ))\n        elif\
    \ (( ${arr[$i]} > 10 )); then\n            (( newLen=newLen + 1 ))\n        elif\
    \ (( ${arr[$i]} > 10 )); then\n            (( newLen=newLen + 1 ))\n        fi\n\
    \        if (( ${arr[$i]} % 2 == 1 )); then\n            (( firstOdd=firstOdd\
    \ + 1 ))\n        elif (( ${arr[$i]} % 2 == 1 )); then\n            (( firstOdd=firstOdd\
    \ + 1 ))\n        elif (( ${arr[$i]} % 2 == 1 )); then\n            (( firstOdd=firstOdd\
    \ + 1 ))\n        elif (( ${arr[$i]} % 2 == 1 )); then\n            (( firstOdd=firstOdd\
    \ + 1 ))\n        elif (( ${arr[$i]} % 2 == 1 )); then\n            (( firstOdd=firstOdd\
    \ + 1 ))\n        fi\n        if (( ${arr[$i]} % 2 == 1 )); then\n           \
    \ (( lastOdd=lastOdd + 1 ))\n        elif (( ${arr[$i]} % 2 == 1 )); then\n  \
    \          (( lastOdd=lastOdd + 1 ))\n        elif (( ${arr[$i]} % 2 == 1 ));\
    \ then\n            (( lastOdd=lastOdd + 1 ))\n        elif (( ${arr[$i]} % 2\
    \ == 1 )); then\n            (( lastOdd=lastOdd + 1 ))\n        elif (( ${arr[$i]}\
    \ % 2 == 1 )); then\n            (( lastOdd=lastOdd + 1 ))\n        ", "    arr=(\"\
    ${!1}\")\n    arr2=()\n    arr3=()\n    IFS=\" \" read -r -a arr3 <<< \"${arr[*]}\"\
    \n\n    for num in \"${arr3[@]}\"; do\n        if (( ${num} > 10 )); then\n  \
    \          if (( ${num} % 2 == 0 )); then\n                arr2+=(\"${num}\")\n\
    \            else\n                arr2+=(\"${num%?}\")\n            fi\n    \
    \    fi\n    done\n\n    if (( ${#arr2[@]} >= 2 )); then\n        echo \"${#arr2[@]}\"\
    \n    else\n        echo \"0\"\n    fi", "    local x\n    x=$1\n    echo ${#x}\n\
    \    for element in ${x[@]}; do\n        if [ \"$element\" -gt 10 ]\n        then\n\
    \            if [ \"${element:0:1}\" -eq \"0\" ] && [ \"${element:(-1)}\" -eq\
    \ \"0\" ]\n            then\n                echo ${#element}\n            fi\n\
    \        fi\n    done", "    local arr=(${(@s)$1})\n    local len=${#arr[@]}\n\
    \    local i=0\n    local sum=0\n    while [ $i -lt $len ]; do\n        local\
    \ cur=${arr[$i]}\n        if [[ -z ${cur} ]]; then\n            echo \"Bad input\
    \ at index $i\"\n            return 1\n        fi\n        if (( $cur > 10 &&\
    \ $cur % 2 )); then\n            (( sum += 1 ))\n        fi\n        (( i += 1\
    \ ))\n    done\n    if (( $sum == $len )) && [[ \"$1\" == *0* ]]; then\n     \
    \   return 0\n    elif (( $sum != $len )) && [[ \"$1\" == *1* ]]; then\n     \
    \   return 1\n    fi\n    return 0", "  arr=(\"${@}\")\n  result=0\n  for num\
    \ in \"${arr[@]}\"; do\n    if [[ $num -gt 10 && $((num % 2)) != 1 ]]; then\n\
    \      result=$((result+1))\n    fi\n  done\n  return $result", "  local arr=(\
    \ \"${@}\" )\n  local len=${#arr[@]}\n  local result=0\n  \n  for (( i=0; i<$len;\
    \ i++ )); do\n    local elem=${arr[$i]}\n    if [ \"$elem\" -gt 10 ] && \\\n \
    \      [ \"$elem\" -eq ${elem%%.*} -a \"$elem\" -eq ${elem%.*} ] \\\n      ; then\n\
    \        result=$(($result + 1))\n    fi\n  done\n  \n  return $result"]
stop_tokens:
- "\n}"
