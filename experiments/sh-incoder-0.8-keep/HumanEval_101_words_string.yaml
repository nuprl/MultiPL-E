name: HumanEval_101_words_string
language: sh
prompt: "#!/bin/bash\n# You will be given a string of words separated by commas or\
  \ spaces. Your task is\n# to split the string into words and return an array of\
  \ the words.\n# For example:\n# words_string(\"Hi, my name is John\") == [\"Hi\"\
  , \"my\", \"name\", \"is\", \"John\"]\n# words_string(\"One, two, three, four, five,\
  \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n#\n# $1\
  \ is a string\nwords_string() {\n"
tests: "}\n\ncandidate() {\n    words_string \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"Hi, my name is John\") = \"Hi my name is John\" ]]\n    [[\
  \ $(candidate \"One, two, three, four, five, six\") = \"One two three four five\
  \ six\" ]]\n    [[ $(candidate \"Hi, my name\") = \"Hi my name\" ]]\n    [[ $(candidate\
  \ \"One,, two, three, four, five, six,\") = \"One two three four five six\" ]]\n\
  \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"ahmed     , gamal\") =\
  \ \"ahmed gamal\" ]]\n}\n\nrun_test"
completions: ["    local string=\"$1\"\n    local IFS=\",\" \"${string%,*}\" \"${string#*,}\"",
  "  local STRING=$1\n  local IFS=','\n  local -a WORDS_ARRAY=($STRING)\n  local LENGTH=${#WORDS_ARRAY[@]}\n\
    \  local INDEX=0\n  local WORD_STRING=''\n\n  while (( INDEX < LENGTH )); do\n\
    \    WORD_STRING=\"${WORD_STRING},${WORDS_ARRAY[INDEX]}\"\n    (( INDEX++ ))\n\
    \  done\n\n  echo \"${WORD_STRING}\"", "    local string=$1\n    local splitter=$2\n\
    \    local words delimiter=,\n    words=$(echo $string | grep -F -E \"($delimiter)\"\
    \ ); # get words\n    for word in $words; do\n        words=$(echo $words | tr\
    \ \" \" \"\\n\" | grep -F -E \"($word($splitter))\"); # remove spaces in words\n\
    \    done\n    echo \"$words\"", "  # split_string()\n  split_string() {\n   \
    \ local IFS=$1\n    local output\n    output=$2\n    shift\n    for word in $*;\
    \ do\n      output+=(\"$word\")\n    done\n    IFS=$OLDIFS\n    IFS=$ORIGINAL_IFS\n\
    \  }\n  OLDIFS=$IFS\n  IFS=\",\"\n  local arr=($*)\n  IFS=$OLDIFS\n  IFS=$ORIGINAL_IFS\n\
    \  split_string \",\" \"${arr[@]}\"", '  echo "$1" | tr "," " "', "  local STRING=$1\n\
    \  local WORDS=`echo $STRING | sed \"s/,/ /g\" | sed \"s/^[ \\t]*//\" | sed \"\
    s/[ \\t]*$//\"`\n  echo ${WORDS}", "  local STRING=$1\n  local WORD_STRING\n \
    \ WORD_STRING=$(echo \"${STRING}\" | sed 's/, / ,/g' | sed 's/, /,/g')\n  IFS=',\
    \ ' read -r -a ARRAY_OF_WORDS <<< \"$WORD_STRING\"\n  echo \"${ARRAY_OF_WORDS[@]}\"",
  "    set -- $1\n    declare -a words=()\n    local i\n    for (( i=0; i < \"${#1}\"\
    ; i++ )); do\n        words+=(\"${!i}\")\n    done\n    echo \"${words[*]}\"",
  "    set -- $2\n    set -- $2\n    local IFS=\", \" ; local -a words=() ; while\
    \ [ \"$#\" -gt 0 ]; do\n        words+=(${1##*/})\n        shift\n    done\n \
    \   echo \"${words[*]}\"", "  string=$1\n  local items=$2\n\n  local -a output\n\
    \  local -a parts\n\n  for part in ${items//,/ }; do\n    parts=($part)\n    output+=(\
    \ \"${parts[@]}\" )\n  done\n\n  echo \"${output[@]}\"", "    local str=\"$1\"\
    \n    local separator=\",\"\n    local words=()\n    local word=''\n    local\
    \ i=0\n\n    while [[ $i -lt ${#str} ]]; do\n        case \"${str:$i:1}\" in\n\
    \            $separator)\n                if [ -n \"$word\" ]; then\n        \
    \            words+=($word)\n                    word=''\n                fi\n\
    \                i=$(( i + 1 ))\n                ;;\n            *)\n        \
    \        if [ -z \"$word\" ]; then\n                    word=\"${str:$i}\"\n \
    \               else\n                    word+=\" $word\"\n                 \
    \   word=\"${str:$i}\"\n                fi\n                i=$(( i + 1 ))\n \
    \               ;;\n        esac\n    done\n    words+=($word)\n\n    return \"\
    ${words[@]}\"", '    echo "$1" | tr "," " "', "    words_string=\"One, two, three,\
    \ four, five, six\"\n    IFS=\",\"\n    set -- $words_string\n    declare -a word_array\n\
    \    for arg in \"$@\"\n    do\n        word_array+=(\"$arg\")\n    done\n   \
    \ IFS=\",\"\n    unset IFS\n    return 0", "  # BEGIN PROMPT\n  read -p \"Enter\
    \ a string: \" string\n  # END PROMPT\n  echo ${string//,/ }", "  local -a arr=()\n\
    \  local str=$1\n  local -a arr=()\n  local -a arr=()\n  local last=\"\"\n  local\
    \ char\n  for char in $str; do\n    case $char in\n      \",\"|\" \")\n      \
    \  [[ $char == \",\" ]] && last=\"$last$char\" || last=\"$last,$char\"\n     \
    \   arr+=(\"$last\")\n        arr+=(\",\")\n        last=\"\"\n        ;;\n  \
    \    *)\n        arr+=(\"$char\")\n        ;;\n    esac\n  done\n  arr+=(\"$last\"\
    )\n  arr+=(\",\")\n  echo \"${arr[@]}\"", "  local string=\"$1\"\n  local words_array=($string)\n\
    \  echo \"${words_array[@]}\"", "  local STRING=\"$1\"\n  local STRING_ARRAY=()\n\
    \  local W\n\n  IFS=', ' read -r -a STRING_ARRAY <<< \"$STRING\"\n\n  for W in\
    \ \"${STRING_ARRAY[@]}\"; do\n    echo \"$W\"\n  done", "\tlocal line=$1\n\twhile\
    \ IFS= read -r -d '' word; do\n\t\tprintf '%s\\n' \"$word\"\n\tdone <<< \"$line\"",
  "    local str=$1\n\n    echo \"${str#*( )}\"", "  local string=$1\n  # Create empty\
    \ list for words\n  local words=()\n\n  # Separate words into list\n  IFS=','\
    \ read -a words <<<\"$string\"\n\n  # Return words array\n  echo \"${words[@]}\""]
stop_tokens:
- "\n}"
