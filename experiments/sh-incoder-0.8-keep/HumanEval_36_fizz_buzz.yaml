name: HumanEval_36_fizz_buzz
language: sh
prompt: "#!/bin/bash\n# Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>>\
  \ fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\n#\n# $1 is an integer\nfizz_buzz()\
  \ {\n"
tests: "}\n\ncandidate() {\n    fizz_buzz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"50\") = \"0\" ]]\n    [[ $(candidate \"78\") = \"2\" ]]\n    [[\
  \ $(candidate \"79\") = \"3\" ]]\n    [[ $(candidate \"100\") = \"3\" ]]\n    [[\
  \ $(candidate \"200\") = \"6\" ]]\n    [[ $(candidate \"4000\") = \"192\" ]]\n \
  \   [[ $(candidate \"10000\") = \"639\" ]]\n    [[ $(candidate \"100000\") = \"\
  8026\" ]]\n}\n\nrun_test"
completions: ["    (( $1 % 11 == 0 || $1 % 13 == 0 )) && echo $1 | grep -E '^[02468]'\
    \ || echo $1 | grep -E '^[0-3]?[0-9]'", "    local n=$1\n    local i=0\n    while\
    \ [ $i -lt $n ]; do\n        case \"$((n/11))\" in\n        0)\n            if\
    \ [ $((n/11)) -eq 0 ]; then\n                if (( n % 11 == 7 )); then\n    \
    \                echo \"$((i+1))\"\n                fi\n            else\n   \
    \             echo \"$((i+1))\"\n            fi\n        ;;\n        1)\n    \
    \        if [ $((n/13)) -eq 0 ]; then\n                if (( n % 13 == 1 )); then\n\
    \                    echo \"$((i+1))\"\n                fi\n            else\n\
    \                echo \"$((i+1))\"\n            fi\n        ;;\n        *)\n \
    \           echo \"$((i+1))\"\n        ;;\n        esac\n        ((i++))\n   \
    \ done", "    local n=$1\n    local fzz_buzz=$(( $(echo \"$n / 11\" | bc -l) +\
    \ $(echo \"$n / 13\" | bc -l) ))\n    echo \"$fzz_buzz\"", "  local n=$1\n  local\
    \ b=0\n  for (( i=1; i<=$n; i++ )); do\n    local d=$(( (i%11 == 0) || (i%13 ==\
    \ 0) ))\n    (( d==7 )) && let b+=1\n    printf -v p \"%d \" \"$i\" \"$d\"\n \
    \ done\n  printf \"%d\\n\" \"$b\"", "  while [ \"$1\" -gt 0 ] ; do\n    [[ \"\
    $1\" -eq 7 ]] && break\n    (( num=$1 % 11 || num=$1 % 13 )) && [ \"$num\" -eq\
    \ 7 ] && break\n    (( num++))\n  done\n  echo $num", "    local n=$1\n    local\
    \ i=0\n\n    while [ $i -lt $n ]\n    do\n        if [ $(( i % 13 )) -eq 0 ]\n\
    \        then\n            echo \"${i:7}\"\n        elif [ $(( i % 11 )) -eq 0\
    \ ]\n        then\n            echo \"${i:6}\"\n        else\n            echo\
    \ \"$i\"\n        fi\n        i=$((i+1))\n    done", "    local n=$1\n    local\
    \ i\n    local j\n    local f\n    local b\n    local ndigits\n    local a\n\n\
    \    # FizzBuzz is a special case where we start with a count of zero. We\n  \
    \  # start at the end and work our way up. Since we are starting with\n    # zero\
    \ we do not need to worry about negative numbers.\n    ndigits=0\n    for i in\
    \ {1..n}\n    do\n        ndigits=$((ndigits+1))\n    done\n\n    # If the number\
    \ is divisible by 11 or 13 then we have a FizzBuzz\n    # problem. There will\
    \ not be a FizzBuzz problem if ndigits is 1.\n    if [ \"$ndigits\" -eq 1 ]\n\
    \    then\n        ndigits=0\n    fi\n\n    while [ \"$ndigits\" -gt 0 ]\n   \
    \ do\n        # Since FizzBuzz is a special case it is easy to solve it by\n \
    \       # checking the remainder of the division. Here we check to see\n     \
    \   # if the remainder is divisible by 7.\n        f=0\n        b=0\n        for\
    \ i in {1..n}\n        do\n            # Since we will be testing numbers divisible\
    \ by 11 or\n            # 13 the last two digits will always be the same.\n  \
    \          if [ \"$((i % 10))\" == \"7\" ]\n            then\n               \
    \ f=1\n            fi\n\n            if [ \"$((i % 10))\" == \"3\" ]\n       \
    \     then\n                b=1\n            fi\n        done\n\n        # Check\
    \ the remainder of the division. If it is divisible by 7 then\n        # we have\
    \ a FizzBuzz problem. If b is 1 then it is a Fizz. If f\n        # is 1 then we\
    \ have a Buzz.\n        if [ \"$b\" -eq 1 ]\n        then\n            # Fizz\n\
    \            if [ \"$f\" -eq 1 ]\n            then\n                a=$((ndigits+1))\n\
    \            fi\n\n        elif [ \"$f\" -eq 1 ]\n        then\n            #\
    \ Buzz\n            a=$((ndigits+1))\n\n        else\n            # Normal number\n\
    \            a=$((ndigits+1))\n        fi\n\n        # Subtract 1 since we are\
    \ counting from the back.\n        ndigits=$((ndigits-1))\n\n        # Print the\
    \ number.\n        echo $a\n    done\n", "    local n=$1\n    local a\n    a=$((\
    \ ${n}%11 + ${n}%13 ))\n    local b\n    b=$(( ${a}%11 ))\n    local c\n    c=$((\
    \ ${a}%13 ))\n    local d\n    d=$(( ${n}%11 ))\n    local e\n    e=$(( ${n}%13\
    \ ))\n    local f\n    f=$(( ${a}%11 ))\n    local g\n    g=$(( ${a}%13 ))\n \
    \   local h\n    h=$(( ${a}%11 ))\n    local i\n    i=$(( ${a}%13 ))\n    local\
    \ j\n    j=$(( ${a}%11 ))\n    local k\n    k=$(( ${a}%13 ))\n    local l\n  \
    \  l=$(( ${n}%11 ))\n    local m\n    m=$(( ${n}%13 ))\n    local n\n    n=$((\
    \ ${n}%11 ))\n    local o\n    o=$(( ${n}%13 ))\n    local p\n    p=$(( ${n}%11\
    \ ))\n    local q\n    q=$(( ${n}%13 ))\n    local r\n    r=$(( ${n}%11 ))\n \
    \   local s\n    s=$(( ${n}%13 ))\n    local t\n    t=$(( ${n}%11 ))\n    local\
    \ u\n    u=$(( ${n}%13 ))\n    local v\n    v=$(( ${n}%11 ))\n    local w\n  \
    \  w=$(( ${n}%13 ))\n    local x\n    x=$(( ${n}%11 ))\n    local y\n    y=$((\
    \ ${n}%13 ))\n    local z\n    z=$(( ${n}%11 ))\n    echo $(($(($a + $b + $c +\
    \ $d + $e + $f + $g + $h + $i + $j + $k + $l + $m + $n + $o + $p + $q + $r + $s\
    \ + $t + $u + $v + $w + $x + $y + $z)))", "    awk 'BEGIN{n=$1}/[7-9][0-9]|10[0-4]/{n=n+2}END{print\
    \ n}'", "   local n=$1\n   local i\n   local result\n   result=0\n   for ((i=1;i<=n;++i));\
    \ do\n      if (( i % 11 == 0 )) && (( i % 13 == 0 )) ; then\n         result=$((\
    \ result + 1 ))\n      fi\n   done\n   echo $result", "  local i\n  local -a arr\n\
    \  local n=$1\n  for i in $(seq 1 $n) ; do\n    arr=( $(echo $i | grep -P '^\\\
    d+$') )\n    if [[ \"${arr[@]}\" =~ \"7\" ]] ; then\n      (( i++ ))\n    fi\n\
    \  done\n  echo $i", "\t[ $1 -gt $2 ] && return 0\n\t[ $1 -eq 0 ] && return 1\n\
    \t[ $1 -lt $2 ] && return 0\n\tlet \"cnt=$(( $cnt + ( $(fizz_buzz $(($2 - $1)))\
    \ ))\"", "   if [ ${1:-0} -eq 0 ] ; then\n      return 1\n   fi\n   local n=$1\n\
    \   local num\n   for (( num=0; num<$n; num++ )) ; do\n      local z=$((num %\
    \ 10))\n      if [ $z -eq 7 ]; then\n         return $((num + 1))\n      fi\n\
    \   done\n   return $((num + 1))", "  awk 'NR==FNR{n[$1]; next}\n  ($1 % 11==0\
    \ || $1 % 13==0){\n    for(i=1;i<=n;i++) {\n      if(i==1 || i==3 || i==5 || i==7\
    \ || i==9) print;\n      if(i==2 || i==4 || i==6 || i==8) print;\n    }\n  }\n\
    \  ' \"$1\" \"$1\"", "  (( ${#1} > 1 )) || return 0\n  local num=$1\n  (( ${num}\
    \ <= 100 )) || return 0\n  (( ${num} % 11 == 0 )) || return 0\n  (( ${num} % 13\
    \ == 0 )) || return 0\n\n  local i\n  for i in $(seq 1 ${num}); do\n    (( i %\
    \ 11 == 0 )) || return 0\n    (( i % 13 == 0 )) || return 0\n  done\n  (( ${num}\
    \ % 11 != 0 )) || return 0\n  (( ${num} % 13 != 0 )) || return 0\n  (( ${num}\
    \ % 7 != 0 )) || return 0\n\n  return $(( ${#num} - 1 ))", "    local n=$1\n \
    \   local i=1\n    local count=0;\n    while (( i <= n )); do\n        if [ $((\
    \ n % 11 )) -eq 0 ]; then count=$(expr ${count} + 1); fi\n        if [ $(( n %\
    \ 13 )) -eq 0 ]; then count=$(expr ${count} + 1); fi\n        i=$(expr ${i} +\
    \ 1)\n    done\n    echo ${count}", "    local n=$1\n    local i\n\n    if [ $n\
    \ -lt 10 ]; then return 0; fi\n    if [ $((n % 11)) -eq 0 ]; then return 1; fi\n\
    \    if [ $((n % 13)) -eq 0 ]; then return 2; fi\n    if [ $((n % 17)) -eq 0 ];\
    \ then return 3; fi\n\n    for i in $(seq 1 10); do\n        if [ $((n % i)) -eq\
    \ 7 ]; then return $((i + 1)); fi\n    done", "  # The if statement checks if\
    \ the number is divisible by 11 or 13\n  if (( $(expr $1 % 11 == 0 && $1 % 13\
    \ == 0) ))\n    then\n      echo 0\n      # The number of times the digit 7 appears\
    \ is incremented for each time the digit is found.\n      (( $1 % 7 == 1 )) &&\
    \ echo 1\n      (( $1 % 7 == 2 )) && echo 2\n      (( $1 % 7 == 3 )) && echo 3\n\
    \      (( $1 % 7 == 4 )) && echo 4\n      (( $1 % 7 == 5 )) && echo 5\n      ((\
    \ $1 % 7 == 6 )) && echo 6\n      (( $1 % 7 == 7 )) && echo 7\n      (( $1 % 7\
    \ == 8 )) && echo 8\n      (( $1 % 7 == 9 )) && echo 9\n    fi\n  (( $1 % 11 ==\
    \ 1 )) && echo 1\n  (( $1 % 11 == 2 )) && echo 2\n  (( $1 % 11 == 3 )) && echo\
    \ 3\n  (( $1 % 11 == 4 )) && echo 4\n  (( $1 % 11 == 5 )) && echo 5\n  (( $1 %\
    \ 11 == 6 )) && echo 6\n  (( $1 % 11 == 7 )) && echo 7\n  (( $1 % 11 == 8 )) &&\
    \ echo 8\n  (( $1 % 11 == 9 )) && echo 9", "  (( $# )) && {\n    # Count the number\
    \ of times 7 is in integers less than $1 which are divisible by 11 or 13\n   \
    \ local n=$1\n    local n=$(( $n % 11 + $n % 13 ))\n    printf '%d' $(( $(printf\
    \ '$(( %d / %d ))' \"$n\" \"$(( $n / 11 ))\" ) ))\n  }", "    # Define the variable\n\
    \    local NUMBER=$1\n    local NUMBERS=$(( $NUMBER / 11 ))\n    local FIZZBUZZ=$((\
    \ $NUMBER % 11 ))\n    local FIZZBUZZS=$(( $FIZZBUZZ / 7 ))\n\n    # If the number\
    \ is divisible by 11 or 13, return 0 and exit the script\n    if [ $NUMBER % 11\
    \ == 0 ] || [ $NUMBER % 13 == 0 ]; then\n        return 0\n    fi\n\n    # If\
    \ the number is not divisible by 11 and 13, return 2 and exit the script\n   \
    \ if [ $NUMBERS -eq 0 ]; then\n        echo \"$NUMBER\"\n        return 2\n  \
    \  fi\n\n    # If the number is divisible by 11, return FIZZBUZZS and exit the\
    \ script\n    if [ $FIZZBUZZS -eq 0 ]; then\n        echo \"$NUMBER\"\n      \
    \  return $FIZZBUZZS\n    fi\n\n    # If the number is divisible by 13, return\
    \ FIZZBUZZ and exit the script\n    if [ $FIZZBUZZ -eq 0 ]; then\n        echo\
    \ \"$NUMBER\"\n        return $FIZZBUZZ\n    fi\n\n    # If the number is divisible\
    \ by both 11 and 13, return the sum of FIZZBUZZS and FIZZBUZZ and exit the script\n\
    \    echo $(( $FIZZBUZZS + $FIZZBUZZ ))\n    return $(( $FIZZBUZZS + $FIZZBUZZ\
    \ ))"]
stop_tokens:
- "\n}"
