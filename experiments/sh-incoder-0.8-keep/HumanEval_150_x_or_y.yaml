name: HumanEval_150_x_or_y
language: sh
prompt: "#!/bin/bash\n# A simple program which should return the value of x if n is\
  \ \n# a prime number and should return the value of y otherwise.\n# Examples:\n\
  # for x_or_y(7, 34, 12) == 34\n# for x_or_y(15, 8, 5) == 5\n#\n# $1 is an integer\n\
  # $2 is an integer\n# $3 is an integer\nx_or_y() {\n"
tests: "}\n\ncandidate() {\n    x_or_y \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"7\" \"34\" \"12\") = \"34\" ]]\n    [[ $(candidate \"15\" \"8\" \"5\") = \"\
  5\" ]]\n    [[ $(candidate \"3\" \"33\" \"5212\") = \"33\" ]]\n    [[ $(candidate\
  \ \"1259\" \"3\" \"52\") = \"3\" ]]\n    [[ $(candidate \"7919\" \"-1\" \"12\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"3609\" \"1245\" \"583\") = \"583\" ]]\n    [[\
  \ $(candidate \"91\" \"56\" \"129\") = \"129\" ]]\n    [[ $(candidate \"6\" \"34\"\
  \ \"1234\") = \"1234\" ]]\n    [[ $(candidate \"1\" \"2\" \"0\") = \"0\" ]]\n  \
  \  [[ $(candidate \"2\" \"2\" \"0\") = \"2\" ]]\n}\n\nrun_test"
completions: ["\tif ((($1 == 1) || ($1 == 3)) && $((($1 + $2) % $3 == 0))\n\tthen\n\
    \t\techo $3\n\telse\n\t\techo $2\n\tfi", "  if (( $1 )) && \\\n     (( $2 )) &&\
    \ \\\n     (( $3 ))\n  then\n    return $3\n  else\n    return $1\n  fi", "  \
    \  local x=\"$1\"\n    local y=\"$2\"\n    local z=\"$3\"\n    \n    if [ \"$x\"\
    \ -gt \"$z\" ]; then\n        echo \"$x\"\n    elif [ \"$x\" -eq \"$z\" ]; then\n\
    \        echo \"$y\"\n    else\n        echo \"$y\"\n    fi", "\t# Variables\n\
    \tx=0\n\ty=0\n\n\t# Assign the value of x to y\n\ty=$3\n\n\t# While x is less\
    \ than the square root of $1, \n\t# and y is greater than or equal to $2\n\twhile\
    \ [ $(( $1 < $(( $1 * $1 )) )) -a $y -ge $2 ]; do\n\t\t# Increment x\n\t\t(( x\
    \ = x + 1 ))\n\n\t\t# If x is greater than $3, then set y=x\n\t\tif [ $x -ge $3\
    \ ]; then\n\t\t\ty=$x\n\t\tfi\n\tdone\n\n\t# Return the value of y\n\techo $y",
  "  if [ $(( $1 )) -eq $(( $3 )) ]; then\n    echo $2\n  else\n    echo $3\n  fi",
  "    local x=$1\n    local y=$2\n    local n=$3\n    \n    if [[ $(( n % 2 )) !=\
    \ 0 ]]; then\n        return $y\n    else\n        return $x\n    fi", "\tx=$1\n\
    \ty=$2\n\tz=$3\n\t\n\tn=$((($x/$y)+1))\n\t\n\tif [ $n -eq $z ]\n\tthen\n\t\treturn\
    \ $x\n\telse\n\t\treturn $y\n\tfi", "    (( $# != 3 )) && { echo \"Usage: $0 x_or_y\
    \ n n+1\"; exit 1; }\n    (( $1 == 1 )) && return $2\n    (( $2 == 1 )) && return\
    \ $1\n    (( $1 % $2 == 0 )) && return $3\n    else \n        (( $1 % $3 == 0\
    \ )) && return $2\n    exit 1", "  local n=$1\n  local a=$2\n  local b=$3\n  if\
    \ [ $n -le $b ]; then\n    return $a\n  fi\n  local i\n  for ((i = 3; $i <= $b;\
    \ i+= 2)); do\n    if [ $(($n % $i)) -eq 0 ]; then\n      return $i\n    fi\n\
    \  done\n  return $a", "  x=$1; y=$2; m=$3; if ([[ $(($(($(($(($(($(($(x<1)) &&\
    \ $(($x>1)) && $y<1)) && $y>1)) && $m<1)) && $m>1)  ]] &&\n   ( ($(($(($(x%$y)))==0))\
    \ && $(($(($y%$m)))==0)) && $(($(($(($x==$y))||$(($x==$m)))))) ]]; then\n    x=$y;\
    \ y=$m; m=$x\n  fi\n  return $x", "    x=$1\n    y=$2\n    shift 2\n    test $y\
    \ -gt 0 && x_or_y \"$x\" \"$y\"\n    test $(($y * $y)) -eq $x\n    echo \"$x\"",
  "    local x=$1\n    local y=$2\n    local z=$3\n    local p\n    for (( i=0; i<z;\
    \ i++ )); do\n        if [ $(( $x%$i )) -eq 0 ]; then\n            if [ $(( $y%$i\
    \ )) -eq 0 ]; then\n                let p=$i+1\n                let x=$x/$p\n\
    \                let y=$y/$p\n                break\n            fi\n        fi\n\
    \    done\n    echo $x", "    [ $# -eq 3 ] && { echo \"Usage: $0 x y [n]\"; return\
    \ 1; }\n    \n    local x y\n    local n\n    \n    # Try to get x and y from\
    \ command line\n    read x y n\n    \n    # Check if n was given\n    [ $n -ne\
    \ 0 ] && return 1\n    \n    # Check if x is a prime number\n    [ `expr $x \\\
    % $y` -eq 0 ] && echo \"$x\"\n    \n    # Check if y is a prime number\n    [\
    \ $x -gt 0 ] && [ `expr $x \\% $y` -eq 0 ] && echo \"$y\"\n    \n    return 0",
  "    if [ $1 -eq 1 ] ; then\n        echo $3\n    else\n        echo $2\n    fi",
  "  local x=$1; local y=$2; local n=$3\n  [[ -z $n ]] && echo 0 || n=$((n-1))\n \
    \ while ((n--)); do\n    y=$((x*$x+$y)) \n    x=$((x-1)) \n  done\n  echo $y",
  "  local x=\"$1\"\n  local y=\"$2\"\n  local z=\"$3\"\n  local i=2\n  while [ $i\
    \ -le $z ]; do\n    if [ $(($i % $x)) -eq 0 ]; then\n      echo \"$x\"\n     \
    \ return 0\n    fi\n    i=$(( $i + 1 ))\n  done\n  echo \"$y\"\n  return 1", "\t\
    if [ $(($1 % $2)) -eq 0 ] && [ $(($1 % $3)) -eq 0 ]; then\n\t\techo $3\n\telse\n\
    \t\techo $2\n\tfi", "  x=\"$1\"\n  y=\"$2\"\n  z=\"$3\"\n  if [ $z -eq 1 ]; then\n\
    \    echo \"$x\"\n  else\n    echo \"$y\"\n  fi", "  if [ \"$1\" = \"$2\" ] &&\
    \ [ \"$3\" = \"$4\" ]; then\n    echo \"$1\"\n  else\n    echo \"$3\"\n  fi",
  "\tx=\"$1\"\n\ty=\"$2\"\n\tz=\"$3\"\n\tcase \"$x\" in\n\t\t0|1|2|3|4|5|6|7|8|9)\
    \ \n\t\t\techo \"$z\" ;;\n\tesac"]
stop_tokens:
- "\n}"
