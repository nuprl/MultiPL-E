name: HumanEval_16_count_distinct_characters
language: sh
prompt: "#!/bin/bash\n# Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n\
  # >>> count_distinct_characters('Jerry')\n# 4\n#\n# $1 is a string\ncount_distinct_characters()\
  \ {\n"
tests: "}\n\ncandidate() {\n    count_distinct_characters \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abcde\") = \"5\"\
  \ ]]\n    [[ $(candidate \"abcdecadeCADE\") = \"5\" ]]\n    [[ $(candidate \"aaaaAAAAaaaa\"\
  ) = \"1\" ]]\n    [[ $(candidate \"Jerry jERRY JeRRRY\") = \"5\" ]]\n}\n\nrun_test"
completions: ["  local string=\"$1\"\n  local length=0\n  while [ -n \"$string\" ];\
    \ do\n    local first_char=\"${string::1}\"\n    string=${string#\"$first_char\"\
    }\n    length=$(( $length + ${#first_char} ))\n  done\n  echo $length", "    local\
    \ string=\"$1\"\n\n    local count=0\n\n    for (( i = 0; i < ${#string}; i++\
    \ )); do\n        local char=\"${string:$i:1}\"\n        local lower=\"${char,,}\"\
    \n        local upper=\"${char,,,}\"\n        local lowercase=\"${lower,,}\"\n\
    \        local uppercase=\"${upper,,,}\"\n\n        count=$(( $count + \\\n  \
    \              ${#lowercase:-}+\\\n                ${#uppercase:-}+\\\n      \
    \          ${#lowercase}+\\\n                ${#uppercase}+\\\n              \
    \  ${#lower:-}+\\\n                ${#upper:-}+\\\n                ${#char}+\\\
    \n                ${#lower.:--}+\\\n                ${#upper.:--}+\\\n       \
    \         ${#lowercase.:--}+\\\n                ${#uppercase.:--}+\\\n       \
    \         ${#lowercase.:--}+\\\n                ${#uppercase.:--}+\\\n       \
    \         ${#lowercase.:--}+\\\n                ${#uppercase.:--}+\\\n       \
    \         ${#char.:--}+\\\n                ${#lower.:--}+\\\n                ${#upper.:--}+\\\
    \n                ${#lowercase.:--}+\\\n                ${#uppercase.:--}+\\\n\
    \                ${#lowercase.:--}+\\\n                ${#uppercase.:--}+\\\n\
    \                ${#char.:--}+\\\n                ${#lower.:--}+\\\n         \
    \       ${#upper.:--}+\\\n                ${#lowercase.:--}+\\\n             \
    \   ${#uppercase.:--}+\\\n                ${#lowercase.:--}+\\\n             \
    \   ${#uppercase.:--}+\\\n                ${#char.:--}+\\\n                ${#lower.:--}+\\\
    \n                ${#upper.:--}+\\\n                ${#lowercase.:--}+\\\n   \
    \             ${#uppercase.:--}+\\\n                ${#lowercase.:--}+\\\n   \
    \             ${#uppercase.:--}+\\\n                ${#char.:--}+\\\n        \
    \        ${#lower.:--}+\\\n                ${#upper.:--}+\\\n                ${#lowercase.:--}+\\\
    \n                ${#uppercase.:--}+\\\n                ${", "    local STRING=\"\
    $1\"\n\n    local CHARCOUNT=0\n    for CHAR in \"${STRING//[^a-zA-Z]}\" ; do\n\
    \        ((CHARCOUNT++))\n    done\n    echo \"${CHARCOUNT}\"", "    tr '[:upper:]'\
    \ '[:lower:]'\n    tr '[:lower:]' '[:upper:]'\n    tr '[:upper:]' '[:lower:]'\n\
    \    echo \"$1\" | tr [A-Z] [a-z]", "  local string=$1\n  local character=\"\"\
    \n\n  for i in $string; do\n    if [[ $character != $i ]]; then\n      character+=$i\n\
    \    fi\n  done\n\n  echo ${#character}", "    local string=\"$1\"\n    local\
    \ characters=$(echo $string | tr 'A-Z' 'a-z' | wc -l)\n    echo $characters",
  "    local string=$1\n    local count=0\n    local character\n\n    while [ \"${string:0:1}\"\
    \ != \"\" ]; do\n        character=${string:0:1}\n        case \"${string:0:1}\"\
    \ in\n            a)\n                count=$(($count + 97))\n               \
    \ ;;\n            b)\n                count=$(($count + 99))\n               \
    \ ;;\n            c)\n                count=$(($count + 111))\n              \
    \  ;;\n            d)\n                count=$(($count + 113))\n             \
    \   ;;\n            e)\n                count=$(($count + 117))\n            \
    \    ;;\n            f) count=$(($count + 114))\n                ;;\n        \
    \    g) count=$(($count + 116))\n                ;;\n            h) count=$(($count\
    \ + 114))\n                ;;\n            i)\n                count=$(($count\
    \ + 104))\n                ;;\n            j)\n                count=$(($count\
    \ + 111))\n                ;;\n            k) count=$(($count + 98))\n       \
    \         ;;\n            l) count=$(($count + 105))\n                ;;\n   \
    \         m) count=$(($count + 103))\n                ;;\n            n) count=$(($count\
    \ + 98))\n                ;;\n            o) count=$(($count + 100))\n       \
    \         ;;\n            p) count=$(($count + 102))\n                ;;\n   \
    \         q) count=$(($count + 101))\n                ;;\n            r) count=$(($count\
    \ + 100))\n                ;;\n            s) count=$(($count + 97))\n       \
    \         ;;\n            t) count=$(($count + 103))\n                ;;\n   \
    \         u) count=$(($count + 105))\n                ;;\n            v) count=$(($count\
    \ + 106))\n                ;;\n            w) count=$(($count + 104))\n      \
    \          ;;\n            x) count=$(($count + 112))\n                ;;\n  \
    \          y) count=$(($count + 114))\n                ;;\n            z) count=$(($count\
    \ + 111))\n                ;;\n            *) count=$(($count + ${string:1:1}))\n\
    \                ;;\n        esac\n        string=${string:1}\n    done\n    echo\
    \ \"$count\"", "  local string=$1\n  local character_count=0\n  for i in $string;\
    \ do\n    local first_char=$(echo $i | cut -c 1)\n    local second_char=$(echo\
    \ $i | cut -c 2)\n    if [[ \"$first_char\" == $second_char ]]; then\n      character_count=$(expr\
    \ $character_count + 1)\n    else\n      character_count=$(expr $character_count\
    \ + 1)\n    fi\n  done\n  echo $character_count", "    tr '[:upper:]' '[:lower:]'\
    \ | tr ' ' '\\n' | sort | uniq | wc -c", "  declare -a arr\n  arr=()\n  local\
    \ i c\n  i=1\n  for c in $1; do\n    arr=(\"${arr[@]}\" \"$c\")\n  done\n  echo\
    \ ${#arr[@]}", "  # Split $1 into two substrings based on length of $2\n  local\
    \ first_part=${1#*#}\n  local second_part=${1%%#*#}\n\n  # Count how many distinct\
    \ characters does it consist of\n  local distinct_characters_count=$(echo ${first_part}\
    \ | tr [a-z] [A-Z] | tr [A-Z] [a-z] | wc -l)\n  echo \"$distinct_characters_count\"",
  "    local str=$1\n    local count=0\n    local lower\n    local upper\n    local\
    \ lowerCount\n    local upperCount\n    lower=$(echo $str | tr A-Z a-z)\n    upper=$(echo\
    \ $str | tr a-z A-Z)\n    lowerCount=$(echo $lower | tr $'\\n\\r\\t' ' ' | tr\
    \ -d ' ')\n    upperCount=$(echo $upper | tr $'\\n\\r\\t' ' ' | tr -d ' ')\n \
    \   count=$((lowerCount+upperCount))", "    local n=$1\n    local c=$(n=${n,,})\
    \ # replace with ${n,,} if supported\n    local d=${n,,}\n    while [ \"${#c}\"\
    \ -ge 1 ]; do\n        d=${d,,}\n        echo \"${d//[^a-zA-Z]/}\"\n        d=\"\
    ${d//[a-zA-Z]/}\"\n        c=\"${c//[a-zA-Z]/}\"\n    done\n    echo \"${#c}\"",
  "    local __count=1\n    local str=\"$1\"\n\n    # $1 is a string\n    for (( i=1;\
    \ i<\"${#str}-1; i++ )); do\n        if [ \"${str:$i:1}\" != \"${str:$i:1}\" -a\
    \ \"${str:$i:1}\" != \"$str\" ]; then\n            (( __count+=1 ))\n        fi\n\
    \    done\n\n    # $1 is a string\n    echo ${__count}", "  local string=\"$1\"\
    \n  local characters=\"${string,,}\"\n\n  local i=0\n  local n=0\n  for i in \"\
    ${!characters[@]}\"; do\n    ((i++))\n    if [[ \"${characters[i]}\" = \"A\" ]];\
    \ then\n      ((n++))\n    fi\n  done\n  echo $n", "  echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | wc -c", "  local chars=$1\n\n  [[ \"$chars\" == \"\" ]] && echo\
    \ \"0\" && return\n\n  local length=\"${#chars}\"\n\n  local str=\"\"\n  local\
    \ c=0\n  while [ \"$c\" -lt \"$length\" ]\n  do\n    local c=\"${c}${chars[$c]:0:1}\"\
    \n    [[ \"$str\" != \"\" ]] && str=\"${str}${c}\"\n  done\n\n  [[ \"$str\" ==\
    \ \"\" ]] && echo \"0\" && return\n\n  local len=\"${#str}\"\n  [[ \"$len\" -lt\
    \ \"$length\" ]] && len=\"$length\"\n\n  local res=0\n  local c\n  local i\n\n\
    \  for (( i=0; i<$len; i++ ))\n  do\n    local c=\"${str:$i:1}\"\n    [[ \"$c\"\
    \ == [A-Z] ]] || continue\n    [[ \"$c\" == [a-z] ]] || continue\n    [[ \"$c\"\
    \ == [0-9] ]] || continue\n    [[ \"$c\" == [:upper:] ]] || continue\n    [[ \"\
    $c\" == [:lower:] ]] || continue\n    [[ \"$c\" == [:digit:] ]] || continue\n\
    \    res=$(( $res + 1 ))\n  done\n  echo $res", "    local string=$1\n    local\
    \ count=0\n    local i\n    local j\n    for ((i=0; i<${#string}; i++)); do\n\
    \        j=`echo $string | sed 's/^\\(.\\)/\\1/'`\n        [[ \"$j\" == \"$string\"\
    \ ]] && continue\n        count=$((count+1))\n    done\n    echo $count", "\t\
    local string=$1\n\techo $(echo $string | tr A-Z a-z | tr a-z A-Z | wc -w)", " \
    \ local chars\n  chars=$(echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr ' ' '\\\
    n' | sort | uniq -c | sort -rn | head -n 1)\n  echo \"${#chars}\""]
stop_tokens:
- "\n}"
