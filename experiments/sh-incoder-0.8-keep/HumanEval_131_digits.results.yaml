language: sh
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    if (( $# < 1 )); then\n        echo \"Not enough arguments\"\n        return\
    \ 1\n    fi\n\n    local n=$1\n    local res=0\n\n    while (( n > 0 )); do\n\
    \        res=$(( res * 10 + ( n % 2 ) ))\n        n=$(( n / 2 ))\n    done\n\n\
    \    return $res\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  (( $# )) && local n=$1\n  local d=1\n  (( $n % 2 )) && return 0\n  while ((\
    \ $n > 0 )); do\n    (( $n % 2 )) && d=$(d*2)\n    n=$(( $n/2 ))\n  done\n  return\
    \ $d\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[\
    \ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n \
    \   [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") =\
    \ \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local digits=$1\n\n  while (( $digits )); do\n    digits=$(( ${digits:0:$(($digits-1))}\
    \ * 2 ))\n  done\n  echo $(( ${digits%?} ))\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkayvd1ul.sh: line 14: $(($digits-1)): substring expression < 0

    '
  stdout: ''
  timestamp: 1660054568
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    shift\n    local d=0\n    for ((i=0; i < n; i++)); do\n \
    \       let d+=${i%%?*}\n        let i=$(( ${#1} + 1 ))\n    done\n    echo $d\n\
    }\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=5 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660054573
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=\"$1\"\n    if [[ \"$n\" -gt 0 ]]; then\n        local -i x=1\n \
    \       while [[ \"$n\" -gt 0 ]]; do\n            if [[ \"$n\" -eq $((x + 1))\
    \ ]]; then\n                x=x+1\n            elif [[ \"$n\" -lt $((x + 1)) ]];\
    \ then\n                x=x\n            fi\n            n=$((n - $((x - 1))))\n\
    \        done\n    fi\n    return $x\n}\n\ncandidate() {\n    digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660054573
- exit_code: -1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local product\n  if [[ $n == 0 ]]; then\n    return 0\n  fi\n\
    \  product=1\n  while (( n != 0 )) ; do\n    local digit=$((n % 10))\n    product=$((\
    \ product * 10 ))\n    n /= 10\n  done\n  echo \"$product\"\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=10 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660054573
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  # The code below is written to allow for arguments in the forms of 1 or 4 digits.\n\
    \  # The argument $1 checks to see if it's in the form of 1 or 4 digits, and if\
    \ so,\n  # the code checks to see if the first digit is odd or even. If $1 is\
    \ not in the form of\n  # 1 or 4 digits, the code simply returns the argument\
    \ unchanged.\n  # Otherwise, the code checks to see if it's even. If it's even,\
    \ the code multiplies the result\n  # by 2 for the first digit, plus 3 for the\
    \ second digit, plus 2 for the third digit,\n  # and adds 1 for the fourth digit.\n\
    \  # If it's odd, the code multiplies the result by 3 for the first digit, plus\
    \ 4 for the second\n  # digit, plus 1 for the third digit, plus 1 for the fourth\
    \ digit.\n  # Since only 1 digit is allowed to change, the code checks to see\
    \ if it's in the form of 4 digits\n  # or if $1 has already been multiplied by\
    \ 3 and incremented by 1 for the second digit. Thus, only\n  # 1 digit is allowed\
    \ as the argument $1.\n  # The code checks to see if the first digit is even.\
    \ If it is, the code multiplies the result by\n  # 3 for the first digit, plus\
    \ 4 for the second digit, plus 1 for the third digit, plus 1 for\n  # the fourth\
    \ digit. Thus, only 1 digit is allowed as the argument $1.\n  # The code checks\
    \ to see if the first digit is odd. Then, the code multiplies the result by 3\
    \ for\n  # the first digit, plus 4 for the second digit, plus 2 for the third\
    \ digit, plus 1 for the fourth\n  # digit.\n  if [[ \"$1\" =~ ^[1-4][0-9]{0,1}$\
    \ ]] || [ \"$1\" == $((10#$1 * 3)) ]; then\n    echo \"$1\"\n  else\n    if [[\
    \ \"$1\" =~ ^4[0-9]{0,1}$ ]]; then\n      echo \"$1\"\n    elif [[ \"$1\" =~ ^3[0-9]{0,1}$\
    \ ]]; then\n      echo \"$((10#$1 * 3 + 1))\"\n    else\n      echo \"$((10#$1\
    \ * 3 + 2))\"\n    fi\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    (($# > 0)) || return 1\n    local n=$1\n    local i=0\n    while [ $((i**2+i))\
    \ -le $n ]; do\n        (( i+=2 ))\n    done\n    if (( $i%2 )); then\n      \
    \  return 0\n    fi\n    echo $((n%10*2*$i/10))\n}\n\ncandidate() {\n    digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n\
    \    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  [[ $1 =~ ^[0-9]+$ ]] || return 1\n\n  local n c\n  for n in $@; do\n    [[\
    \ $n =~ ^[0-9]+$ ]] || return 1\n\n    # Only odd digits make product odd.\n \
    \   if [[ ${#n} -ne 2 ]]; then\n      return 0\n    fi\n\n    # The following\
    \ expression gets the last digit.\n    c=${n:(-${#n})}\n\n    # Only odd digits\
    \ are multiplied into even products.\n    if [[ ${#c} -ne 2 ]]; then\n      return\
    \ 0\n    fi\n\n    n=$((${n} / 10))\n  done\n\n  return ${n}\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local i n str\n  i=0\n  n=$1\n  str=$((n<<1)) # Shift n right to clear all\
    \ but last digit\n  while [ \"$n\" -gt 0 ] ; do\n    str=$((str<<1)) # Shift str\
    \ left by one digit\n    n=$((n>>1)) # Cut n by one digit\n  done\n  echo \"$str\"\
    \n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate\
    \ \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate\
    \ \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n   \
    \ [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \    local n=$1\n    local digits=$2\n    local d\n    \n    if (( n <= 0 ));\
    \ then\n        return 0\n    fi\n\n    if (( digits == 0 )); then\n        digits=$(\
    \ printf \"%04d\" $n )\n    fi\n\n    # Make sure n is odd and has at least one\
    \ digit.\n    if (( n % 2 == 0 )); then\n        return 0\n    fi\n\n    # Make\
    \ sure there is at least one digit to process.\n    if [[ $(echo \"$n |wc -c\"\
    ) == \"1\" ]]; then\n        d=$(echo $n | awk '{print substr($1, length($1)-1,\
    \ 1)}')\n        d=$( printf \"%04d\" $d )\n    else\n        return 0\n    fi\n\
    \n    # Process digits.\n    for (( d=1; d <= $( echo \"$d / 2\" | bc -l ); d++\
    \ )); do\n        d=$( printf \"%04d\" $d )\n        if (( d % 2 )); then\n  \
    \          d=$(echo $d | awk '{print substr($1, length($1)-1, 1)}')\n        else\n\
    \            d=$(echo $d | awk '{print substr($1, length($1)-1, 0)}')\n      \
    \  fi\n        if (( $(echo \"$d | wc -c\") == \"1\" )); then\n            digits=$(echo\
    \ $digits | awk '{print $1 + $2}')\n        fi\n    done\n\n    # Return product\n\
    \    if (( $(echo \"$digits | wc -c\") == \"1\" )); then\n        echo -n \"$digits\"\
    \n    else\n        echo 0\n    fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  let digits=$1\n  while [ $digits -le 9 ]; do\n      digits=$(echo \"($digits)*2\"\
    \ | bc)\n  done\n  if [ \"$digits\" -gt 9 ]; then\n      digits=0\n  fi\n  echo\
    \ \"$digits\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=\"$1\"\n  local d\n  ((n%=2)) && return 0\n  d=${n%%?}\n  ((n//=d))\
    \ && return $((d*digits(n//d)))\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate\
    \ \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate\
    \ \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  echo $1 | grep '^[0-9]+$' | tr -dc '0-9'\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n\n  local digits=\"\"\n  for ((n=1; n<$1; n+=2))\n  do\n    digits=${digits}\
    \ $(( 10#$n % 10 ))\n  done\n  if [ -z $digits ]\n  then\n    echo \"0\"\n  else\n\
    \    echo $digits\n  fi\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\"\
    ) = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\"\
    ) = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"\
    5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9si26k8z.sh: line 15: 1: command not found

    /tmp/tmp9si26k8z.sh: line 15: 3: command not found

    '
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  echo \"$((10#$1))\"\n}\n\ncandidate() {\n    digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"54\") = \"5\"\
    \ ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n    [[ $(candidate \"5014\") = \"\
    5\" ]]\n    [[ $(candidate \"98765\") = \"315\" ]]\n    [[ $(candidate \"5576543\"\
    ) = \"2625\" ]]\n    [[ $(candidate \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n str\n  n=${1#0}\n  if (( ${#n} % 2 )); then\n    return 0\n  else\n\
    \    str=( $(printf \"%d\" $n) )\n    echo ${str[@]:0:-1}\n  fi\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n  local result=0\n  local digit\n  local i\n  for i in {1..9};\
    \ do\n    digit=$(( ( (n % 100) / 10 ) % 10 ))\n    result=$(( result + digit\
    \ ))\n    n=$(( n / 10 ))\n  done\n  echo \"${result}\"\n}\n\ncandidate() {\n\
    \    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"\
    1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local n=$1\n\n  # The factorial function returns the product of the factorials,\
    \ \n  # not of its arguments. So we need an extra argument to pass.\n  local -r\
    \ fact=$(factorial $n 2)\n\n  if (( $n == 0 )); then\n    echo \"0\";\n  else\n\
    \    local -r digits=$(\n      printf \"%d\" $(\n        for ((i = 1; i <= $n;\
    \ i++)); do\n          printf \"%d\" $(( ($n % i) / $fact )); \n        done\n\
    \      )\n    )\n    echo \"$digits\"\n  fi\n}\n\ncandidate() {\n    digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\") = \"1\" ]]\n   \
    \ [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\") = \"315\"\
    \ ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate \"2468\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_7_qdvry.sh: line 15: factorial: command not found

    /tmp/tmp_7_qdvry.sh: line 23: (5 % i) /  : syntax error: operand expected (error
    token is "/  ")

    '
  stdout: ''
  timestamp: 1660054568
- exit_code: 1
  program: "#!/bin/bash\n# Given a positive integer n, return the product of the odd\
    \ digits.\n# Return 0 if all digits are even.\n# For example:\n# digits(1)  ==\
    \ 1\n# digits(4)  == 0\n# digits(235) == 15\n#\n# $1 is an integer\ndigits() {\n\
    \  local digits=0\n  local n=$1\n  local i\n  for ((i=1; i<=n; i++)); do\n   \
    \ ((digits+=i%2))\n  done\n  ((digits+=n%2))\n  return $digits\n}\n\ncandidate()\
    \ {\n    digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"54\") = \"5\" ]]\n    [[ $(candidate \"120\"\
    ) = \"1\" ]]\n    [[ $(candidate \"5014\") = \"5\" ]]\n    [[ $(candidate \"98765\"\
    ) = \"315\" ]]\n    [[ $(candidate \"5576543\") = \"2625\" ]]\n    [[ $(candidate\
    \ \"2468\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054568
