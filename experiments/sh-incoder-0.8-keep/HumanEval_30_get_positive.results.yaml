language: sh
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local list_array=( $list )\n    local list_length=${#list_array[@]}\n\
    \    local list_return=\"\"\n\n    # Return only positive numbers in the list.\n\
    \    # $2 -- Optional max number of items to return, defaults to 10\n    # $3\
    \ -- Optional string for return delimiter, defaults to a space\n    # $4 -- Optional\
    \ string for return delimiter if $3 is set\n    if [ -n \"$2\" ]; then\n     \
    \   for (( i=0; $i<$(($list_length)); i++ )); do\n            local item=\"${list_array[i]}\"\
    \n            if (( $item < 0 )); then\n                list_return=\"$list_return\
    \ $item\"\n            fi\n        done\n        list_return=$(echo \"$list_return\"\
    \ | sed -e 's/^/\\n/' -e '$s/$/\\n/')\n    else\n        for (( i=0; $i<$(($list_length));\
    \ i++ )); do\n            local item=\"${list_array[i]}\"\n            if (( $item\
    \ < 0 )); then\n                list_return=\"$list_return $item\"\n         \
    \   fi\n        done\n        list_return=$(echo \"$list_return\" | sed -e 's/^/\\\
    n/' -e '$s/$/\\n/')\n    fi\n\n    # Return only positive numbers in the list.\n\
    \    # $2 -- Optional string for return delimiter, defaults to a space\n    #\
    \ $3 -- Optional string for return delimiter if $3 is set\n    if [ -n \"$3\"\
    \ ]; then\n        list_return=$(echo \"$list_return\" | sed -e 's/^/\\n/' -e\
    \ \"s|$3|'$3'/\")\n    fi\n\n    echo \"$list_return\"\n}\n\ncandidate() {\n \
    \   get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n\n    # remove non-positives\n    local nlt=\"${list:-}\"\
    \n    nlt=\"${nlt:--}\"\n\n    # remove empty elements\n    nlt=\"${nlt:1}\"\n\
    \n    # remove spaces\n    nlt=\"${nlt:2}\"\n\n    # remove leading zeros (and\
    \ convert strings to numbers)\n    nlt=\"${nlt:-0}\"\n    nlt=\"${nlt:--}\"\n\n\
    \    # remove duplicates\n    nlt=\"${nlt:-}\"\n\n    # remove empty strings\n\
    \    nlt=\"${nlt:--}\"\n\n    echo \"${nlt}\" | sort -u | grep -P \"^[+-]?\"\n\
    }\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3\
    \ 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    if [[ \"$1\" =~ ^-?[0-9]+$ ]] ; then\n        echo \"${1#-}\"\n    else\n\
    \        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n \
    \   [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local _ret=0\n  _list_all=${@/#/\"${1}\"}\n  local _tmp\n  local _list_all=${_list_all//[!-z]/}\n\
    \  _tmp=${_list_all// /-}\n  _list_all=${_tmp/-/ }\n  local _tmp\n  local _list_all\n\
    \  local _list_all1\n  local _list_all2\n  local _list_all3\n  local _list_all4\n\
    \  local _list_all5\n  local _list_all6\n  local _list_all7\n  local _list_all8\n\
    \  local _list_all9\n  local _list_all10\n  local _list_all11\n  local _list_all12\n\
    \  local _list_all13\n  local _list_all14\n  local _list_all15\n  local _list_all16\n\
    \  local _list_all17\n  local _list_all18\n  local _list_all19\n  local _list_all20\n\
    \  local _list_all21\n  local _list_all22\n  local _list_all23\n  local _list_all24\n\
    \  local _list_all25\n  local _list_all26\n  local _list_all27\n  local _list_all28\n\
    \  local _list_all29\n  local _list_all30\n  local _list_all31\n  local _list_all32\n\
    \  local _list_all33\n  local _list_all34\n  local _list_all35\n  local _list_all36\n\
    \  local _list_all37\n  local _list_all38\n  local _list_all39\n  local _list_all40\n\
    \  local _list_all41\n  local _list_all42\n  local _list_all43\n  local _list_all44\n\
    \  local _list_all45\n  local _list_all46\n  local _list_all47\n  local _list_all48\n\
    \  local _list_all49\n  local _list_all50\n  local _list_all51\n  local _list_all52\n\
    \  local _list_all53\n  local _list_all54\n  local _list_all55\n  local _list_all56\n\
    \  local _list_all57\n  local _list_all58\n  local _list_all59\n  local _list_all60\n\
    \  local _list_all61\n  local _list_all62\n  local _list_all63\n  \n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local LIST=\"$1\"\n    local NEGATIVES=$(\n      echo \"${LIST}\"\n \
    \     | grep -v '^$'\n      | sed -e 's/^[ \\t]*//'\n      | sed -e 's/^[+-]\\\
    ?//'\n      | awk '{for (i=1; i<=NF; i++) if ($i>0) print $i}'\n    )\n    echo\
    \ \"${NEGATIVES}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate\
    \ \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate\
    \ \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0k9usf8l.sh: command substitution: line 20: syntax error near unexpected
    token `|''

    /tmp/tmp0k9usf8l.sh: command substitution: line 20: `      | grep -v ''^$''''

    '
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n\tlocal _list=$1\n\tlocal _positive\n\t_positive=()\n\tfor _item in ${_list};\
    \ do\n\t\t[[ \"$_item\" =~ ^-?[0-9]+$ ]] || continue\n\t\t(( _positive+=( \"$_item\"\
    \ )) )\n\tdone\n\techo $_positive\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local i\n    local num\n\n    for i in \"${list[@]}\"\
    ; do\n        if (( i < 0 )); then\n            echo $i\n        fi\n    done\n\
    }\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3\
    \ 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl08r44kr.sh: line 15: ((: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local i\n  local n\n\n  IFS=' ' read -ra array <<< \"$1\"\n\n  for ((i=0;\
    \ i < ${#array[@]}; i++)); do\n    if [[ ${array[$i]} -gt 0 ]]; then\n      n=$((i\
    \ + 1))\n      break\n    fi\n  done\n\n  echo \"${array[@]:0:$n}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local n\n    for n in \"$1\"; do\n        if [[ $n =~ ^-[0-9]+$ ]]; then\n\
    \            echo \"$n\"\n            return\n        fi\n    done\n    echo \"\
    $1\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3\
    \ -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"\
    -1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local _list=\"$1\"\n    local _ret=()\n    for _item in $_list; do\n\
    \        [[ $_item -gt 0 ]] && _ret+=(\"$_item\")\n    done\n    echo \"${_ret[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n   local list_size=${#1}\n   if [ \"${list_size}\" -gt 0 ] ; then\n     \
    \ positive=0\n      for (( i=1; i<${list_size}; i++ ))\n      do\n         if\
    \ [[ ${#1} == \"${i}\" ]] ; then\n            if [[ ${#1} -gt 0 ]] ; then\n  \
    \             if [[ ${#1} -gt 0 ]]; then\n                  positive=$((positive+1))\n\
    \               fi\n            fi\n         fi\n      done\n      echo \"${@:${list_size}}\"\
    \ | tr '\\n' ' '\n   else\n      echo \"${@:${list_size}}\" | tr '\\n' ' '\n \
    \  fi\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3\
    \ -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"\
    -1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n list=$1\n    local i result\n    for i in $(seq 0 $(( ${#list[@]}\
    \ - 1 )))\n    do\n        if [[ $i -ge 0 && ${list[i]} -gt 0 ]]\n        then\n\
    \            list[i]=${list[i]}\n        fi\n    done\n    list=(${list[@]})\n\
    \    return $list\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate\
    \ \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate\
    \ \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpav7on_c1.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n\tlocal tmp=\"${1%$1}\"\n\techo \"${tmp//[^\\+]}\"\n}\n\ncandidate() {\n\
    \    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local positive=\n  for item in $1; do\n    if [[ $item -gt 0 ]]; then\n\
    \      positive=\"$positive $item\"\n    fi\n  done\n  echo \"$positive\"\n}\n\
    \ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1\
    \ -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n list=\"$1\"\n    local result=0\n    for e in \"${list[@]}\"\
    ; do\n        (( e > 0 )) && result+=1\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpos_9fo5d.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local a=\"$1\"\n    local -a b\n    b=( \"${a[@]}\" )\n    local -a b\n\
    \    local i\n    for (( i=0; i<${#a[@]}; i++ )); do\n        b[${i}]=${b[${i}]}\n\
    \    done\n    echo \"${b[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local arr=\"$1\"\n  local ret=()\n  for element in ${arr[@]}; do\n    ((\
    \ ${element} >= 0 )) && ret+=(\"$element\")\n  done\n  echo \"${ret[@]}\"\n}\n\
    \ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1\
    \ -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list result\n    list=( $1 )\n    for number in \"${list[@]}\"\
    ; do\n        [ -n \"$number\" ] \\\n            && [ \"$number\" -gt 0 ] \\\n\
    \            && result=\"$result $number\"\n    done\n    echo \"${result}\"\n\
    }\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3\
    \ 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local ret=1\n  for i in $1; do\n    [[ $i -ge 0 ]] && ret=0\n  done\n \
    \ echo \"$ret\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"\
    5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"\
    -1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054493
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local ret\n    for val in ${arr[@]}; do\n      \
    \  if [[ \"$val\" -gt 0 ]]; then\n            ret+=(\"$val\")\n        fi\n  \
    \  done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphuw4142d.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660054493
