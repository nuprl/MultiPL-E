name: HumanEval_126_is_sorted
language: sh
prompt: "#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n\
  # in ascending order. If list has more than 1 duplicate of the same\n# number, return\
  \ False. Assume no negative numbers and only integers.\n# Examples\n# is_sorted([5])\
  \ \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1, 3, 2, 4,\
  \ 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
  # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
  \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n"
tests: "}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
  \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2\
  \ 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n\
  \    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\")\
  \ = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"\
  3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n  \
  \  [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3\
  \ 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
completions: ["  # Set $1 to a space separated list\n  local list=\"$1\"\n\n  # Count\
    \ how many times the numbers appear in the list\n  local count=0\n  for element\
    \ in \"${list}\"; do\n    count=$(( $count + 1 ))\n  done\n\n  # If there is more\
    \ than one number then return false\n  if [ ${count} -gt 1 ]; then\n    return\
    \ False\n  fi\n\n  # Set $2 equal to a sorted list of integers\n  local sorted=(\
    \ ${list} )\n\n  # Sort the array of integers and check that they are equal\n\
    \  local sortedsorted=( $(sort <<< \"${sorted[*]}\") )\n  unset sortedsorted[0]\n\
    \  local equal=0\n  for element in \"${sortedsorted[@]}\"; do\n    equal=$(( $equal\
    \ + 1 ))\n  done\n  if [ ${equal} -gt ${#sortedsorted[@]} ]; then\n    return\
    \ False\n  fi\n\n  return True", "  local i\n  local j\n  local sorted\n  local\
    \ count\n  local max_index\n  local max_value\n\n  sorted=\"false\"\n  max_value=$1\n\
    \  max_index=0\n  count=0\n  for i in $(echo $1 | sed 's/ /\\n/g'); do\n    count=$((count+1))\n\
    \    if [ \"$max_value\" -gt \"$i\" ]; then\n      max_value=$i\n      max_index=$count\n\
    \    fi\n  done\n\n  for i in $(echo $1 | sed 's/ /\\n/g'); do\n    if [ \"$max_index\"\
    \ -eq \"$count\" ]; then\n      sorted=\"true\"\n      break\n    fi\n    if [\
    \ \"$i\" -gt \"$max_value\" ]; then\n      sorted=\"false\"\n      break\n   \
    \ fi\n  done\n  echo $sorted", "  local sorted=( $1 )\n  local length=${#sorted[@]}\n\
    \  for (( i=0; i < length; i++ )); do\n    local j=$((i+1))\n    (( j < length\
    \ && sorted[j] == sorted[i] )) || return False\n  done\n  true", "  local sorted_list=\"\
    $1\"\n  local sorted=0\n  local item=$1\n  local items=$sorted_list\n  for item\
    \ in $sorted_list; do\n    local i\n    for ((i=0; i < $(( $items - $sorted ));\
    \ i++)); do\n      [[ \"$item\" == \"$sorted_list[i]\" ]] && return 0\n    done\n\
    \    (( sorted += 1 ))\n  done\n  return 1", "    local list=\"$1\"\n    # Make\
    \ sure we don't have a leading space\n    list=${list#* }\n    list=${list%% *}\n\
    \    IFS=' ' read -a list <<< \"$list\"\n    set -- \"${list[@]}\"\n    local\
    \ prev cur\n    prev=-1\n    cur=$((${#list[@]} - 1))\n    until [ \"$cur\" -ge\
    \ \"0\" ]; do\n        ((prev++))\n        cur=\"${list[$cur]}\"\n        local\
    \ i\n        i=$(( $prev + 1 ))\n        ((i--))\n        if [ \"$cur\" -gt \"\
    $i\" ]; then\n            prev=\"$i\"\n            ((cur++))\n        else\n \
    \           ((cur--))\n        fi\n    done\n    if [ \"$prev\" -ne \"$cur\" ];\
    \ then\n        echo \"$list is out of order\"\n        return 0\n    else\n \
    \       echo \"$list is sorted\"\n        return 1\n    fi", "    local n=$1 b=$2\
    \ \n    for (( i = 1; i <= $n; i++ )); do\n        if [ \"$((b - $i))\" -gt 0\
    \ ] ; then\n            # return false as soon as we find a duplicate greater\
    \ than \n            # 0\n            return False\n        fi\n    done\n   \
    \ return true", "    local list_str=$1\n    if [ -n \"$list_str\" ]; then\n  \
    \      local list=($list_str)\n        local sorted_list=(${list[*]}) # make a\
    \ copy of the list\n        local sorted_list_length=${#sorted_list[@]}\n    \
    \    # Sort the array using bubble sort\n        local i\n        for (( i=0;\
    \ i<$sorted_list_length; i++ )); do\n            for (( j=0; j<$sorted_list_length-i;\
    \ j++ )); do\n                if [ \"$sorted_list[j]\" -gt \"$sorted_list[j+1]\"\
    \ ]; then\n                    local tmp=$sorted_list[j]\n                   \
    \ sorted_list[j]=$sorted_list[j+1]\n                    sorted_list[j+1]=$tmp\n\
    \                fi\n            done\n        done\n\n        # If list is completely\
    \ sorted, return true\n        if [ \"$i\" -eq \"$sorted_list_length\" ]; then\n\
    \            echo \"True\"\n            return\n        fi\n        # If list\
    \ has more than one duplicate of the same number, return false\n        if [ \"\
    $i\" -gt 1 ]; then\n            echo \"False\"\n            return\n        fi\n\
    \n        # If list is just one number, return true\n        if [ \"$sorted_list_length\"\
    \ -eq 1 ]; then\n            echo \"True\"\n            return\n        fi\n \
    \   fi\n    echo \"False\"", "    local i j k l\n    local list=\"$1\"\n\n   \
    \ list=\"${list//[!0-9]/}\"\n\n    for ((k=0; k<${#list}; k++))\n    do\n    \
    \    if [[ $k == 0 ]]; then\n            if [[ ${list[k]} -le ${list[0]} ]]; then\n\
    \                return 0\n            else\n                return 1\n      \
    \      fi\n        else\n            if [[ ${list[k]} -gt ${list[k-1]} ]]; then\n\
    \                return 1\n            else\n                return 0\n      \
    \      fi\n        fi\n    done", "  local sorted_list=(\"${!1}\")\n  local unique_list=${sorted_list[@]:1}\n\
    \  for i in \"${!unique_list[@]}\"; do\n    if [[ ${unique_list[i]} == ${unique_list[i-1]}\
    \ ]]; then\n      return 0\n    fi\n  done\n  return 1", "  local sorted_list=$1\n\
    \  local len=${#sorted_list[@]}\n  for (( i=1; i<$len; i++ )); do\n    for ((\
    \ j=$i; j<$len; j++ )); do\n      if [ $j -gt $i ]; then\n        [ \"$sorted_list[$i]\"\
    \ -gt \"$sorted_list[$j]\" ] || return 1\n      fi\n    done\n  done\n  return\
    \ 0", "    # Split into an array and sort it (numerically)\n    local -n arr=\"\
    $1\"\n    arr=(${arr[@]})\n    # Sort it\n    local sorted\n    sorted=( $(sort\
    \ <<<\"${arr[*]}\") )\n    # Convert to a string\n    local -n sortedes=\"${sorted[*]}\"\
    \n    # Output is True if array is sorted\n    # and False otherwise\n    [[ $sortedes\
    \ == *\"${sortedes[@]}\"* ]] || return 1", "  local input=\"$1\"\n  local unique_num=\n\
    \  local is_sorted=\n  \n  if ! [[ \"$input\" =~ ^[0-9]+$ ]]; then\n    echo -e\
    \ \"error: input argument is not a number. Example: \\\"is_sorted 1 2 3 4\\\"\"\
    \n    return 1\n  fi\n  \n  if [[ \"$input\" =~ ^-[0-9]+$ ]]; then\n    echo -e\
    \ \"error: input argument is a negative number. Example: \\\"is_sorted 1 -2 3\
    \ 4\\\"\"\n    return 1\n  fi\n\n  printf \"number of duplicates: %d\\n\" \"$input\"\
    \ | uniq | wc -l | awk '{print $1}'\n  unique_num=$(printf \"number of duplicates:\
    \ %d\\n\" \"$input\" | uniq | wc -l | awk '{print $1}')\n\n  printf \"number of\
    \ duplicates: %d\\n\" \"$input\" | sort -n | uniq | wc -l | awk '{print $1}'\n\
    \  is_sorted=$(printf \"number of duplicates: %d\\n\" \"$input\" | sort -n | uniq\
    \ | wc -l | awk '{print $1}')\n\n  if [ \"$unique_num\" -eq 1 ]; then\n    echo\
    \ \"$input is sorted ascending\"\n  elif [ \"$is_sorted\" -gt 1 ]; then\n    echo\
    \ \"$input is not sorted ascending\"\n  else\n    echo \"$input is sorted descending\"\
    \n  fi", "  declare -a list=$1\n\n  local i\n  local sorted=0\n  for ((i=0; i<${#list[@]};\
    \ i++)); do\n    ((${sorted} == 0 )) && { sorted=1 }\n    sorted=`expr $sorted\
    \ \\> \\( $list[i] \\) `\n  done\n  (( $sorted == 1 )) && { return 0; }\n  ((\
    \ $sorted == 0 )) && { return 1; }\n  return 1", "    local n=$#\n    local -i\
    \ nDups=$((n - n));\n    if [ \"$nDups\" -gt 0 ]; then return 1; fi\n    local\
    \ -n arr=( $1 )\n    for ((i = 0; i < n; ++i)); do\n        local k=$((i + 1))\n\
    \        if [[ \"$arr[$i]\" -gt \"$arr[$k]\" ]];then return 1; fi\n    done\n\
    \    return 0", "\tlocal sorted=0\n\tlocal list=\"$1\"\n\tlocal length=${#list}\n\
    \tlocal i\n\t# Sort list\n\tfor i in $(seq 0 $((length - 1)))\n\tdo\n\t\tlocal\
    \ j\n\t\tfor j in $(seq 0 $((length - 1)))\n\t\tdo\n\t\t\tif [ \"$i\" == \"$j\"\
    \ ]\n\t\t\tthen\n\t\t\t\tcontinue\n\t\t\tfi\n\t\t\tif [ \"$list\" == \"${list[$j]:-0}\"\
    \ ]\n\t\t\tthen\n\t\t\t\tcontinue\n\t\t\tfi\n\t\t\tif [ \"$list\" == \"${list[$j]:-$list[$i]}\"\
    \ ]\n\t\t\tthen\n\t\t\t\tcontinue\n\t\t\tfi\n\t\t\tif [ \"$list\" == \"${list[$j]:-$list[$j]}\"\
    \ ]\n\t\t\tthen\n\t\t\t\tcontinue\n\t\t\tfi\n\t\t\tlocal temp=${list[$j]}\n\t\t\
    \tlist=\"${list[$j]}\"\n\t\t\tlist=\"${list[$i]}\"\n\t\t\tlist=\"${list}\"\n\t\
    \t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"\
    ${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\
    \n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\
    \tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"\
    ${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\
    \n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\
    \tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"\
    ${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\
    \n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\
    \tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"\
    ${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\
    \n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\
    \tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"\
    ${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\
    \n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\
    \tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"${list}\"\n\t\t\tlist=\"\
    ${list}\"\n\t\t\tlist=\"${list", "    local i\n\n    local line=\"$1\"\n    local\
    \ sorted=\"False\"\n\n    for (( i=0; i<${#line}-1; i++ )); do\n        local\
    \ num=${line:$(($i+1))}\n        local index=0\n\n        for (( j=0; j<i; j++\
    \ )); do\n            if [[ \"$num\" == \"${line:$(($j+1))}\" ]]; then\n     \
    \           index=$((j+1))\n                break\n            fi\n        done\n\
    \n        if [[ \"$index\" -eq \"$i\" ]]; then\n            sorted=\"True\"\n\
    \            break\n        fi\n    done\n\n    echo $sorted", "    local -n list=$1\n\
    \    local -n unique=()\n    local -n duplicates=()\n\n    for i in $list; do\n\
    \        unique+=( $i )\n    done\n\n    for i in $list; do\n        duplicates+=(\n\
    \            $(\n                echo \"${list[*]}\"\n                | tr \"\
    \ \" \"\\n\" | sort -u | tr \" \" \"\\n\"\n            )\n        )\n    done\n\
    \n    return [ ${#unique[*]} -ne ${#duplicates[*]} ]", "    local input=$1\n \
    \   local unique_numbers=$(echo \"$input\" | sort -n | uniq -c)\n    if [[ \"\
    $unique_numbers\" == \"\" ]]; then\n        echo \"$input is sorted\"\n    else\n\
    \        echo \"$input is NOT sorted\"\n    fi", "  local num_list=$1\n  local\
    \ sorted=0\n  local duplicate_count=0\n  local temp\n  local i\n  local last\n\
    \  local found\n  local num_elements=${#num_list[@]}\n  for (( i = 0; i < num_elements;\
    \ i++ )); do\n    temp=${num_list[$i]}\n    last=${num_list[$num_elements-1]}\n\
    \    if [ \"$temp\" -gt \"$last\" ]; then\n      sorted=1\n    fi\n    duplicate_count=$(($duplicate_count\
    \ + 1))\n  done\n  if [ \"$duplicate_count\" -eq \"1\" ]; then\n    sorted=0\n\
    \  fi\n  return $sorted", "    local _sorted=\n    local _all=()\n    local _prev=\n\
    \n    for _item in \"$1\"; do\n        (( ${#_all[@]} >= 0 )) || _all=(\"${_all[@]}\"\
    \ \"$_item\")\n        (( ${#_all[@]} < 2 )) || return 1\n        [ \"$_item\"\
    \ -gt \"$_prev\" ] && return 1 || return 0\n        _sorted=(\"${_sorted[@]}\"\
    \ \"$_item\")\n        _prev=\"$_item\"\n    done\n\n    [[ \"${#_all[@]}\" -eq\
    \ 2 ]]"]
stop_tokens:
- "\n}"
