name: HumanEval_121_solution
language: sh
prompt: "#!/bin/bash\n# Given a non-empty list of integers, return the sum of all\
  \ of the odd elements that are in even positions.\n# Examples\n# solution([5, 8,\
  \ 7, 1]) ==> 12\n# solution([3, 3, 3, 3, 3]) ==> 9\n# solution([30, 13, 24, 321])\
  \ ==>0\n#\n# $1 is a space-separated list\nsolution() {\n"
tests: "}\n\ncandidate() {\n    solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"5 8 7 1\") = \"12\" ]]\n    [[ $(candidate \"3 3 3 3 3\") = \"9\"\
  \ ]]\n    [[ $(candidate \"30 13 24 321\") = \"0\" ]]\n    [[ $(candidate \"5 9\"\
  ) = \"5\" ]]\n    [[ $(candidate \"2 4 8\") = \"0\" ]]\n    [[ $(candidate \"30\
  \ 13 23 32\") = \"23\" ]]\n    [[ $(candidate \"3 13 2 9\") = \"3\" ]]\n}\n\nrun_test"
completions: ["    local arr=$1; shift\n    local sum=$(echo \"${arr[@]}\" | awk -F'[()]'\
    \ '{\n        for (i=1; i<=NF; i++) {\n            if ($i % 2 != 0) {\n      \
    \          printf $i \" \";\n                sum+=$(echo \"$i\" | cut -d \" \"\
    \ -f $((i-1))); \n            }\n        }\n    }');\n    echo \"$sum\"", "  \
    \  local numbers=\"$1\"\n    echo $(( ${numbers//,/ } / 2 ))", "  local -n arr=$1\n\
    \  arr=$(for vals in ${arr//,/ }; do\n    echo ${vals}\n  done | sort)\n  echo\
    \ \"${arr[@]#?}\"", "  local i sum sum2\n  for ((i=1; i<$1; i+=2)); do\n    ((sum+=${1[i]}))\n\
    \    ((sum2+=1))\n  done\n  echo $((sum+sum2))", "    local numbers=$1\n    \n\
    \    local num=0\n    for element in \"${numbers[@]}\"; do\n        if [[ \"$element\"\
    \ == (even) ]]; then\n            num=$((num + element))\n        fi\n    done\n\
    \    echo $num", "  local a b sum\n  IFS=' ' read -r a b <<< \"$1\"\n  sum=0\n\
    \  for i in ${a[@]}; do\n    if [ ${i} -gt 0 -a ${i} -le ${b} ]; then\n      sum=$((\
    \ sum + ${i} ))\n    fi\n  done\n  echo -n \"$sum\"", "    # Write your code in\
    \ Ruby\n    odds = $1.map {|e| e % 2 }\n    evens = $1.map {|e| e % 2 == 0 }\n\
    \    odds.reduce(:+) + evens.reduce(:+)\nend\n</code>\n<|/ a |>\n<| a |>\nHere's\
    \ a solution in Ruby, using a method similar to your solution.\n<code>\ndef oddsum(*x)\n\
    \  sum = 0\n  x.each do |y|\n    sum += 1 if y % 2 == 0\n  end\n  sum\nend\n\n\
    puts oddsum(5, 8, 7, 1)\nputs oddsum(3, 3, 3, 3, 3)\nputs oddsum(30, 13, 24, 321)\n\
    </code>\n<|/ a tags=arrays,ruby dscore=0 |>\n<| a |>\nHere's a solution in Ruby:\n\
    <code>\ndef oddsum(*nums)\n  nums.reduce(0) do |sum, num|\n    sum + 1 if num\
    \ % 2 == 0\n  end\nend\n</code>\n<|/ a tags=arrays,ruby dscore=0 |>\n<| c |>\n\
    `reduce` is your friend :-)\n<|/ c |>\n<| a dscore=0 |>\nThis simple one-liner\
    \ will do the trick!\n<code>\n(1..array.length).select {|i| array[i]%2 != 0}.reduce(:+)\
    \ \n</code>\n<|/ a tags=arrays,ruby |>\n<| c |>\nThis does not give the expected\
    \ output.\n<|/ c |>\n<| c |>\nThis gives the expected output.\n<|/ c |>\n<| a\
    \ tags=arrays,ruby |>\nHere you go. Not as beautiful as some others, but it has\
    \ the correct output.\n<code>\ndef sumOdds(array)\n  array.inject {|sum, val|\
    \ sum + 1 if val % 2 == 1}\nend\n\nsumOdds([5, 8, 7, 1])\n# => 12\n\nsumOdds([3,\
    \ 3, 3, 3, 3])\n# => 9\n\nsumOdds([30, 13, 24, 321])\n# => 0\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,ruby |>\nAnother way that may be more elegant (more Rubyish),\
    \ but probably less efficient, is to use the Enumerable#partition method to separate\
    \ the even elements from the odd elements into a pair of lists, then sum those\
    \ lists:\n<code>\ndef sum_evens_odds(array)\n  array.partition{|elm| elm % 2 ==\
    \ 0}.reduce(:+)\nend\n\nsum_evens_odds([5, 8, 7, 1])", "    local -n arr=$1\n\
    \    local sum=0\n    local i\n    for i in \"${arr[@]}\"; do\n        if [[ \"\
    $i\" == \"${arr[$((${#arr[@]}-1)+$i%2)]}\" ]]; then\n            sum=$((${sum}\
    \ + ${i}))\n        fi\n    done\n    echo ${sum}", "    local array=\"$1\"\n\
    \    local sum=0\n    local value\n\n    for (( i=0; i < ${#array[@]}; i++ ));\
    \ do\n        value=${array[i]}\n        if [ \"$value\" -ge \"2\" ] && [ \"$value\"\
    \ -le \"5\" ];then\n            if [ \"$value\" -eq \"2\" ]; then\n          \
    \      sum=$(( sum + ${array[i]} ))\n            fi\n        fi\n    done\n  \
    \  echo \"$sum\"", "  sum=0\n  for i in $1 do\n    if [ $i -ge 2 ] && [ $i -le\
    \ 4 ]\n    then\n      sum=$(( sum + $i ))\n    fi\n  done\n  echo $sum", "  \
    \  local -i sum=0\n    for (( i=0; i < ${#1}; i++ )); do\n        if [ ${1:i}\
    \ -le ${1:i+1} ]; then\n            if [ ${1:i} -le ${2:i} ]; then\n         \
    \       sum=$(( $sum + ${1:i} - ${2:i} ))\n            fi\n        fi\n    done\n\
    \    return $sum", "    local i sum\n    read -p \"List of integers: \" list\n\
    \    for i in $list; do\n        if (( i % 2 )); then\n            sum=$(( sum\
    \ + i ))\n        fi\n    done\n    printf \"$sum\\n\"", "  arr=($1)\n\n  if [[\
    \ ${#arr[@]} -eq 0 ]]; then\n    echo \"Solution not found\"\n    return\n  fi\n\
    \n  # Sum even positions\n  sum=0\n  for ((i=0; i<${#arr[@]}; i++))\n    do\n\
    \      if [[ ${arr[$i]} % 2 -eq 0 ]]; then\n        ((sum += arr[$i]))\n     \
    \ fi\n    done\n  echo \"$sum\"", "    local numList=$1\n    local sum=0\n   \
    \ local n=0\n    for (( n=0;  n<${#numList};  n+=2 ));\n    do\n        if ((\
    \ ${numList[n]} % 2 == 0 ))\n        then\n            sum=`expr $sum + ${numList[n]}`\n\
    \        fi\n    done\n    echo \"${sum}\"", "  local integers=\"${1}\"\n  local\
    \ odds=\"${integers//[!0-9]/}\"\n  echo \"$((${integers// /}+${odds}))\"", " \
    \   local list=\"$1\"\n\n    for (( i = 0; i < ${#list}; i++ )); do\n        odd=\"\
    $((${list[$i]} % 2))\"\n        if [[ \"${list[$i]}\" -eq ${odd} ]]; then\n  \
    \          ((${list[i]} += ${list[i]} + 1))\n        fi\n    done\n    echo ${list[0]}",
  "    local list=\"$1\"\n    local sum=0\n    local even\n    local odd\n\n    read\
    \ -a list <<< \"$list\"\n\n    # Traverse the list to find even elements.\n  \
    \  for (( even = 0; even < ${#list[@]};)); do\n        if [ ${list[even]} -eq\
    \ ${list[even]} ]; then\n            (( sum += list[even] ))\n            (( even\
    \ += 2 ))\n        else\n            (( even += 1 ))\n        fi\n    done\n\n\
    \    # Traverse the list to find odd elements.\n    for (( odd = 0; odd < ${#list[@]};));\
    \ do\n        if [ ${list[odd]} -eq ${list[odd]} ]; then\n            (( sum +=\
    \ list[odd] ))\n            (( odd += 2 ))\n        else\n            (( odd +=\
    \ 1 ))\n        fi\n    done\n\n    echo \"$sum\"", "    local numbers=\"${1}\"\
    \n    local sum=0\n    for number in $numbers\n    do\n        if [ $(( $number\
    \ % 2 )) -ne 0 ]\n        then\n            sum=$(( $sum + $number ))\n      \
    \  fi\n    done\n    return $sum", "  read -r val\n  echo \"$((${val} + ${val%2}));\"",
  "    local list=$1\n    local answer=0\n    local i\n    local n\n    for n in $list;\
    \ do\n        if (( (n % 2) == 1 )); then\n            answer=$(( $answer + n\
    \ ))\n        fi\n    done\n    return $answer"]
stop_tokens:
- "\n}"
