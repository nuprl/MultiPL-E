name: HumanEval_153_Strongest_Extension
language: sh
prompt: "#!/bin/bash\n# You will be given the name of a class (a string) and a list\
  \ of extensions.\n# The extensions are to be used to load additional classes to\
  \ the class. The\n# strength of the extension is as follows: Let CAP be the number\
  \ of the uppercase\n# letters in the extension's name, and let SM be the number\
  \ of lowercase letters \n# in the extension's name, the strength is given by the\
  \ fraction CAP - SM. \n# You should find the strongest extension and return a string\
  \ in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more\
  \ extensions with the same strength, you should\n# choose the one that comes first\
  \ in the list.\n# For example, if you are given \"Slices\" as the class and a list\
  \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n# (its strength is -1).\n# Example:\n# for Strongest_Extension('my_class', ['AA',\
  \ 'Be', 'CC']) == 'my_class.AA'\n#\n# $1 is a string\n# $2 is a space-separated\
  \ list\nStrongest_Extension() {\n"
tests: "}\n\ncandidate() {\n    Strongest_Extension \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"Watashi\" \"tEN niNE eIGHt8OKe\") = \"Watashi.eIGHt8OKe\"\
  \ ]]\n    [[ $(candidate \"Boku123\" \"nani NazeDa YEs.WeCaNe 32145tggg\") = \"\
  Boku123.YEs.WeCaNe\" ]]\n    [[ $(candidate \"__YESIMHERE\" \"t eMptY nothing zeR00\
  \ NuLl__ 123NoooneB321\") = \"__YESIMHERE.NuLl__\" ]]\n    [[ $(candidate \"K\"\
  \ \"Ta TAR t234An cosSo\") = \"K.TAR\" ]]\n    [[ $(candidate \"__HAHA\" \"Tab 123\
  \ 781345 -_-\") = \"__HAHA.123\" ]]\n    [[ $(candidate \"YameRore\" \"HhAas okIWILL123\
  \ WorkOut Fails -_-\") = \"YameRore.okIWILL123\" ]]\n    [[ $(candidate \"finNNalLLly\"\
  \ \"Die NowW Wow WoW\") = \"finNNalLLly.WoW\" ]]\n    [[ $(candidate \"_\" \"Bb\
  \ 91245\") = \"_.Bb\" ]]\n    [[ $(candidate \"Sp\" \"671235 Bb\") = \"Sp.671235\"\
  \ ]]\n}\n\nrun_test"
completions: ["  local CLASS EXTENSIONS\n  CLASS=$1\n  EXTENSIONS=$2\n  local STRONGEST_EXTENSION\
    \ EXTENSION\n  local SIZE LAST_STRONGEST_EXTENSION\n  SIZE=`echo $EXTENSIONS |\
    \ wc -c`\n  if [[ $SIZE == 0 ]]; then\n    echo \"No extensions given.\"\n  fi\n\
    \  S=`echo $EXTENSIONS | sed 's/[A-Z]//g' | sed 's/[a-z]//g'`\n  L=`echo $EXTENSIONS\
    \ | sed 's/[A-Z]//g' | sort -u | wc -c`\n  CAP=`echo $S/$L | bc`\n  SM=`echo $L\
    \ | bc`\n  STRONGEST_EXTENSION=`echo $CLASS | sed 's/\\(.*\\)/\\1\\..'$CAP-$SM'/'`\n\
    \  LAST_STRONGEST_EXTENSION=`echo $CLASS | sed 's/\\(.*\\)/\\1'$CAP'/'`\n  if\
    \ [[ $LAST_STRONGEST_EXTENSION != $STRONGEST_EXTENSION ]]; then\n    echo $STRONGEST_EXTENSION\n\
    \  else\n    echo $LAST_STRONGEST_EXTENSION\n  fi", "    local class_name extensions\
    \ strongest_extension\n    local i\n    local j\n    local count\n    local strength\n\
    \    local num_extensions\n\n    class_name=$1\n    extensions=$2\n\n    # Remove\
    \ all whitespace from the beginning and end of the string\n    extensions=\"${extensions//[[:space:]]/}\"\
    \n    extensions=\"${extensions//[[:blank:]]/}\"\n\n    # Split the list into\
    \ the extension list\n    extensions=\"${extensions//,/ }\"\n    extensions=\"\
    ${extensions//[[:blank:]]/ }\"\n\n    num_extensions=$(echo $extensions | wc -w)\n\
    \    strength=$(echo $num_extensions | cut -d\" \" -f1)\n    for ((i=1; i<=num_extensions;\
    \ i++)); do\n        extension=${extensions:$i:1}\n        num_letters=$(echo\
    \ $extension | wc -w)\n        count=$(echo $num_letters | cut -d\" \" -f1)\n\
    \        if [[ $count == $strength ]]; then\n            strongest_extension=${extension:1}\n\
    \            break\n        fi\n    done\n\n    echo $class_name\".\"$strongest_extension",
  "  declare -a exts=($2)\n  shift\n  local i\n  local strongest=\"\"\n  \n  for i\
    \ in \"${exts[@]}\"; do\n    local cap=${i//./}\n    local sm=${i//./}\n    local\
    \ strongest=\"${cap}${sm}\"\n    \n    if [[ -z $strongest ]]; then\n      continue\n\
    \    fi\n    \n    for j in \"${!exts[@]}\"; do\n      local jcap=${exts[$j]//./}\n\
    \      local jsm=${exts[$j]//./}\n      \n      if [[ \"$cap\" -eq \"$jcap\" ]];\
    \ then\n        continue\n      fi\n      \n      if [[ \"$sm\" -eq \"$jsm\" ]];\
    \ then\n        continue\n      fi\n      \n      if [[ \"$strongest\" -eq \"\
    $jcap$jsm\" ]]; then\n        continue\n      fi\n      \n      break\n    done\n\
    \    \n    break\n  done\n  \n  echo \"$1.${strongest
  "\tlocal class_name extensions \n\tread class_name extensions < <( echo $2 )\n\t\
    local count\n\tlocal strength\n\tlocal i\n\tlocal c\n\tlocal e\n\tlocal s\n\t\
    local s\n\tlocal ext\n\tlocal result\n\n\tstrength = -1\n\n\tfor ((i = 0; i <\
    \ ${#extensions[@]}; i++)) {\n\t\tc=${extensions[i]}\n\t\te=${extensions[i]}\n\
    \t\ts=0\n\t\twhile ((${#c}--)); do\n\t\t\ts=$((s + ${#c}))\n\t\tdone\n\t\ts=$((s\
    \ - ${#e}))\n\t\tif ((${#c} < ${#e})); then\n\t\t\tresult=${class_name}${c}\n\t\
    \telse\n\t\t\tresult=${class_name}${e}\n\t\tfi\n\t\tstrength=$((${#result} - ${s}))\n\
    \t\tif ((strength > 0 && strength < ${#result})); then\n\t\t\tresult=\"${result}${extensions[i]}\"\
    \n\t\tfi\n\tdone\n\techo $result", "  local class=$1\n  local extensions=$2\n\
    \  local strength\n  local extension\n\n  for extension in $extensions\n  do\n\
    \    strength=${extension,,}\n    if (( strength > 0 ))\n    then\n      break\n\
    \    fi\n  done\n\n  extension=${extension:((${#extension}-1))}\n  extension=${extension,,}\n\
    \  extension=${extension,,}\n  extension=${extension,,}\n  extension=${extension,,}\n\
    \n  echo \"$class.$extension\"", "    local class_name=$1\n    local extensions=$2\n\
    \    local i=0 extensions_count=${#extensions[@]}\n    local strength=-1\n   \
    \ local j=0\n\n    while (( $i < extensions_count )); do\n        local istrongest=`echo\
    \ $extensions | awk '{print $i}'`\n        local length=${#istrongest}\n     \
    \   local first_char=`echo $istrongest | awk '{print $1}'`\n        local second_char=`echo\
    \ $istrongest | awk '{print $2}'`\n        local i=$(( $i + 1 ))\n        if ((\
    \ $i == extensions_count )); then\n            strength=$(( strength + $first_char\
    \ - $second_char ))\n        else\n            strength=$(( strength + ( $length\
    \ - $second_char + $first_char ) / 2 ))\n        fi\n    done\n    \n    echo\
    \ ${class_name}${extensions[$(( ${#extensions[@]} - 1 ))]}", "  # Your code here\n\
    \  ", "    local class=$1\n    local extensions=$2\n    local max=0\n    local\
    \ strength=-1\n    local extension\n    local num_upper\n    local num_lower\n\
    \    \n    while read -r extension; do\n        num_upper=$(echo $extension |\
    \ grep -c [A-Z])\n        num_lower=$(echo $extension | grep -c [a-z])\n     \
    \   if [[ $num_upper -gt $num_lower ]]; then\n            (( strength = strength\
    \ + 1 ))\n        fi\n        if [[ $num_upper -lt $num_lower ]]; then\n     \
    \       (( strength = strength - 1 ))\n        fi\n    done <<< \"$extensions\"\
    \n    if [[ $strength -gt 0 ]]; then\n        extension=\"${class}.${extensions[strength]}\"\
    ;\n    fi\n    echo $extension;", "    local extensions=$(echo \"$2\" | tr \"\\\
    n\" \" \")\n    echo \"$1\"\n    for extension in $extensions\n    do\n      \
    \  case \"$extension\" in\n            $(echo \"$extension\" | awk '{print toupper($0)}')*)\n\
    \            strength=\"-1\"\n            ;;\n            $(echo \"$extension\"\
    \ | awk '{print tolower($0)}')*)\n            strength=\"1\"\n            ;;\n\
    \            *)\n            strength=\"?\"\n            ;;\n        esac\n  \
    \      if [ \"$strength\" == \"-1\" ]\n        then\n            echo \"$extension\"\
    \n            return\n        fi\n    done", "    # get the length of the first\
    \ element in the list\n    length=$1\n    # get the extension name\n    extension=$2\n\
    \    # get the uppercase letters in the extension name\n    uppercase=$(echo $extension\
    \ | cut -c 1-${length})\n    # get the lowercase letters in the extension name\n\
    \    lowercase=$(echo $extension | cut -c ${length}-1)\n    # calculate the strongest\
    \ extension name\n    strongest=$uppercase.$lowercase\n    # loop through the\
    \ extension list\n    for extension in $2; do\n        # if the uppercase letters\
    \ match the strongest\n        if [ $uppercase == $extension ]; then\n       \
    \     # update the strongest to the first extension\n            strongest=$extension\n\
    \        # if the lowercase letters match the strongest\n        elif [ $lowercase\
    \ == $extension ]; then\n            # update the strongest to the first extension\n\
    \            strongest=$extension\n        fi\n    done\n    # return strongest\n\
    \    return $strongest", "  local strongest extension\n  local strongest_extension_str\
    \ extension_str extension_name i\n  strongest=-1\n  strongest_extension_str=''\n\
    \  extension_str=$2\n  for i in ${!extension_str[@]}; do\n    extension_name=${extension_str[$i]}\n\
    \    extension=${extension_name%%[A-Z]*}\n    extension=${extension%%[a-z]*}\n\
    \    if [[ \"$extension\" =~ [A-Z]$ ]]; then\n      cap=$((${#extension}-1))\n\
    \      if [[ $cap -gt $strongest ]]; then\n        strongest=$cap\n        strongest_extension_str=$extension_name\n\
    \      fi\n    fi\n  done\n  echo ${1%%.*}.${strongest_extension_str}", "  local\
    \ classname=$1\n  local extensions=$2\n\n  local STRONGEST_EXTENSION=\"\"\n  local\
    \ STRONGEST_EXTENSION_NAME=\"\"\n  local STRONGEST_EXTENSION_EXTENSIONS=\"\"\n\
    \n  local NUM_EXTENSIONS=$(echo \"$extensions\" | wc -l)\n  local STRONGEST_EXTENSION_NAMES=()\n\
    \n  for (( i=0; i<$NUM_EXTENSIONS; i++ )); do\n    local EXTENSION_NAME=$(echo\
    \ \"$extensions\" | sed \"${i}q;d\")\n    local EXTENSIONS=$(echo \"$extensions\"\
    \ | sed \"${i}d;d\")\n\n    local EXTENSION_CAPITALS=$(echo \"$EXTENSION_NAME\"\
    \ | awk '{ for (i=1;i<length($0);i++) {print substr($0,i,1)} }' | sort -u)\n \
    \   local EXTENSION_SMALL=$(echo \"$EXTENSION_NAME\" | awk '{ for (i=1;i<length($0);i++)\
    \ {print substr($0,i,1)} }' | sort -s | tail -1)\n    local EXTENSION_CAPITAL_LENGTH=$(echo\
    \ \"$EXTENSION_CAPITALS\" | wc -l)\n    local EXTENSION_SM_LENGTH=$(echo \"$EXTENSION_SMALL\"\
    \ | wc -l)\n\n    if [ \"$EXTENSION_CAPITAL_LENGTH\" -gt \"$EXTENSION_SM_LENGTH\"\
    \ ]; then\n      STRONGEST_EXTENSION_NAMES+=(\"$EXTENSION_NAME\")\n    fi\n  done\n\
    \n  STRONGEST_EXTENSION_LENGTH=${#STRONGEST_EXTENSION_NAMES[@]}\n  STRONGEST_EXTENSION_NAME=${STRONGEST_EXTENSION_NAMES[0]}\n\
    \  for (( i=1;i<$STRONGEST_EXTENSION_LENGTH; i++ )); do\n    STRONGEST_EXTENSION_EXTENSIONS+=\"\
    .${STRONGEST_EXTENSION_NAMES[$i]}\"\n  done\n\n  STRONGEST_EXTENSION=\"${classname}${STRONGEST_EXTENSION_EXTENSIONS}\"\
    \n\n  echo \"${STRONGEST_EXTENSION}\"", "    local class=$1\n    local extensions=$2\n\
    \    local CAP=`echo $class | tr [:lower:] [:upper:]`\n    local SM=`echo $extensions\
    \ | tr [:upper:] [:lower:]`\n    local strength=-1\n    local i\n    for ((i=1;\
    \ i<=${#extensions[@]}; i++)); do\n        if [[ $CAP -eq ${CAP}${extensions[i]}\
    \ ]]; then\n            strength=${CAP}${extensions[i]}\n        fi\n        if\
    \ [[ $SM -eq ${SM}${extensions[i]} ]]; then\n            strength=${SM}${extensions[i]}\n\
    \        fi\n    done\n    echo $class.${extensions[$((${#extensions[@]} - 1))]}",
  "  local class=$1\n  local classes=$2\n  local cap=${class%%[A-Z*]}\n  local sm=${class##*[A-Z]}\n\
    \  local result=$class.$cap.$sm\n  local i\n  i=0\n  while [[ $i -lt ${#classes}\
    \ ]] && [[ \"${classes[i]}\" != $result ]]; then\n    ((i++))\n  done\n  echo\
    \ \"$result\"", "    # Your code goes here\n    \n    echo \"$1\"", "\tlocal class=$1\n\
    \tlocal extensions=$2\n\tlocal CAP=`echo \"$class\" | tr [A-Z] [A-Z]`\n\tlocal\
    \ SM=`echo \"$class\" | tr [a-z] [A-Z]`\n\tlocal strongest=`echo $extensions |\
    \ awk -F '.' '{print $1\".\"$2}' | sort -n | head -n1`\n\tlocal strength=`echo\
    \ $extensions | awk -F '.' '{print $1\".\"$2}' | sort -n | tail -1`\n\tcase \"\
    $strength\" in\n\t\t0|-1|*|*)\n\t\t\techo \"$class.$strongest\"\n\t\t\t;;\n\t\t\
    *)\n\t\t\techo \"$class.$CAP-$SM\"\n\t\t\t;;\n\tesac", "    local name\n    local\
    \ extension_name\n    local extension_strength\n    # Initialize some variables\n\
    \    name= $1\n    extension_names= $2\n    extension_strength= -1\n    # Iterate\
    \ through each extension\n    for extension_name in $extension_names; do\n   \
    \     extension_strength= $((${${name^}${extension_name}#*.}-1${extension_name}#*.}))\n\
    \        if [ $extension_strength -gt 0 ]; then\n            echo \"${name}.${extension_name}\"\
    \n            return\n        fi\n    done\n    echo \"${name}\"", "  local class=$1\n\
    \  local extensions=$2\n\n  local strongest_extension=''\n\n  echo \"$class\"\
    \ | sed 's/\\(.\\)./\\1/' | while read -r extension; do\n    case \"$extension\"\
    \ in\n      $extensions)\n        echo \"$class\" |\n          while read -r line;\
    \ do\n            if [[ $line =~ $extension ]]; then\n              strongest_extension=\"\
    $line\"\n              break\n            fi\n          done\n      ;;\n    esac\n\
    \  done\n\n  echo \"$strongest_extension\"", "  local class classname extensions\n\
    \  classname=$1\n  extensions=$2\n\n  while read -r line; do\n    extension=${line:0:1}\n\
    \    extension=${extension//[!A-Z]/}\n    extension=${extension//[!a-z]/}\n  \
    \  extension=${extension//[^A-Za-z0-9]/}\n    strength=${line:1}\n\n    if ((\
    \ strength > 0 )); then\n      break\n    fi\n  done <<< \"$(echo \"$extensions\"\
    \ | grep \"$classname\" | sort)\"\n\n  echo -n \"$classname.$extension\"", " \
    \       local class extension\n        # get the list of extensions in lowercase\n\
    \        lowerExtensions=$(echo $2 | tr ' ' '\\n' | sort -u)\n        # iterate\
    \ over the list to find the strongest extension\n        for i in ${lowerExtensions[*]};\
    \ do\n                # get the extension's name\n                extension=$(echo\
    \ $i | tr '[A-Z]' '[a-z]' | tr '[A-Z]' '[0-9]')\n                # get the strength\n\
    \                strength=$(echo $i | awk -F '[A-Z]' '{print $1 - toupper($2)}')\n\
    \                # check if the same strength extension is present\n         \
    \       if [[ ${lowerExtensions[*]} =~ $extension ]]; then\n                 \
    \       # if it is, choose the one with lower case\n                        extension=${i#${extension}}\n\
    \                fi\n                # if strength is greater than -1, append\
    \ it to extension's list\n                if [[ ${strength} > -1 ]]; then\n  \
    \                      lowerExtensions+=\" $extension\"\n                fi\n\
    \        done\n        # get the class name to be formatted from the given argument\n\
    \        class=$1\n        # get the extension's list formatted\n        lowerExtensions=\"\
    $lowerExtensions\"\n        # remove the extra space from the end of lowerExtensions\n\
    \        lowerExtensions=${lowerExtensions%\" \"*}\n        # replace each uppercase\
    \ letter in the extension's list with lowercase\n        lowerExtensions=${lowerExtensions/[A-Z]/[a-z]}\n\
    \        # replace each character in the extension's list with '.'\n        lowerExtensions=${lowerExtensions/[A-Za-z]/\\\
    .}\n        # replace the final space with a '.'\n        lowerExtensions=${lowerExtensions%\\\
    .*}\n        # return the formatted class\n        echo \"$class.$lowerExtensions\""]
stop_tokens:
- "\n}"
