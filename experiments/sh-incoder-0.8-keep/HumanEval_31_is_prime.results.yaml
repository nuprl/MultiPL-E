language: sh
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n  if\
    \ [ $# -eq 0 ] ; then\n    return 1\n  fi\n  local i\n  local prime\n  local limit\n\
    \  local found\n  local count\n\n  # prime <= sqrt($1)\n  limit=$(echo \"$1 >>\
    \ 1\" | bc)\n  found=0\n  count=0\n  while [ $found -eq 0 ]; do\n    prime=$((\
    \ $1 + $(echo \"(($1 % $2) >> 1) - 1\" | bc) ))\n    if [ $prime -eq 0 ]; then\n\
    \      found=1\n    else\n      if [ $count -ge $limit ]; then\n        return\
    \ 0\n      fi\n      prime_test=$(( $prime % $2 ))\n      if [ $prime_test -eq\
    \ 0 ]; then\n        found=1\n      fi\n    fi\n    ((count++))\n  done\n  return\
    \ 1\n}\n\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n\
    \    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate \"13441\") = \"\
    true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate \"4\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate\
    \ \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    /tmp/tmpz4uti2_j.sh: line 34: 6 +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660054475
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n  if\
    \ [ \"$1\" -eq \"$1\" ]\n  then\n    echo \"False\"\n  else\n    primes=( $(echo\
    \ \"$1\" | awk '{print sqrt($1); exit 1}') )\n    for p in \"${primes[@]}\"; do\n\
    \      if [ \"$p\" -gt \"$1\" ]; then\n        break\n      fi\n    done\n   \
    \ if [ \"$p\" -eq \"$1\" ]; then\n      echo \"True\"\n    else\n      echo \"\
    False\"\n    fi\n  fi\n}\n\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate\
    \ \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054475
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n   \
    \ local n=$1 p=$2\n    if [ $n -lt 2 -a $n -lt $((n+2)) ]\n    then\n        return\
    \ 0\n    fi\n    for n in $(seq 2 $((n-1)) ); do\n        if [ $(echo \"$p*$n\
    \ >=$p\" | bc -l) -eq 0 ]\n        then\n            return 0\n        fi\n  \
    \  done\n    return 1\n}\n\ncandidate() {\n    is_prime \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate\
    \ \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpea8ever4.sh: line 26: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpea8ever4.sh: line 26: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpea8ever4.sh: line 26: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpea8ever4.sh: line 26: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660054475
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n   \
    \ local n=$1\n    # make sure n is positive\n    if [ $n -lt 1 ]; then\n     \
    \   echo \"Usage: is_prime <integer>\"\n        exit 1\n    fi\n    # make sure\
    \ n is a natural number\n    if [ $n -gt 3 ]; then\n        echo \"Usage: is_prime\
    \ <integer>\"\n        exit 1\n    fi\n    local d=$(( (n-1) / 2 ))\n    while\
    \ [ $d -le $n ]; do\n        [ $((n % $d)) -eq 0 ] && return 0;\n        d=$((\
    \ d + 1 ))\n    done\n    return 1\n}\n\ncandidate() {\n    is_prime \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate\
    \ \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054475
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n  [\
    \ $1 -gt 0 ] 2>/dev/null && echo true || echo false\n}\n\ncandidate() {\n    is_prime\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\"\
    \ ]]\n    [[ $(candidate \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\")\
    \ = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"true\" ]]\n    [[ $(candidate\
    \ \"85\") = \"false\" ]]\n    [[ $(candidate \"77\") = \"false\" ]]\n    [[ $(candidate\
    \ \"255379\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054475
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n   \
    \ local i\n    for i in `seq 1 $1`; do\n        if (( $(($1 % $i)) > 0 )); then\n\
    \            return 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n\
    \    is_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"\
    false\" ]]\n    [[ $(candidate \"101\") = \"true\" ]]\n    [[ $(candidate \"11\"\
    ) = \"true\" ]]\n    [[ $(candidate \"13441\") = \"true\" ]]\n    [[ $(candidate\
    \ \"61\") = \"true\" ]]\n    [[ $(candidate \"4\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1\") = \"false\" ]]\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"11\") = \"true\" ]]\n    [[ $(candidate \"17\") = \"true\" ]]\n    [[ $(candidate\
    \ \"85\") = \"false\" ]]\n    [[ $(candidate \"77\") = \"false\" ]]\n    [[ $(candidate\
    \ \"255379\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054475
- exit_code: 1
  program: "#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n\
    # >>> is_prime(6)\n# False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n\
    # True\n# >>> is_prime(13441)\n# True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n\
    # False\n# >>> is_prime(1)\n# False\n#\n# $1 is an integer\nis_prime() {\n\t[\
    \ $(echo \"$1 | bc\" |\n\t\tawk 'BEGIN {\n\t\t\tfor (i = 2; i <= sqrt($1); i++)\
    \ {\n\t\t\t\tif ($1 % i == 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    \treturn 1;\n\t\t}') -eq 0 ]\n}\n\ncandidate() {\n    is_prime \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"101\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"13441\") = \"true\" ]]\n    [[ $(candidate \"61\") = \"true\" ]]\n    [[ $(candidate\
    \ \"4\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"11\") = \"true\" ]]\n    [[ $(candidate\
    \ \"17\") = \"true\" ]]\n    [[ $(candidate \"85\") = \"false\" ]]\n    [[ $(candidate\
    \ \"77\") = \"false\" ]]\n    [[ $(candidate \"255379\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: "awk: cmd. line:4: \t\t\t\t\treturn 0;\nawk: cmd. line:4: \t\t\t\t\t^ `return'\
    \ used outside function context\nawk: cmd. line:7: \t\t\treturn 1;\nawk: cmd.\
    \ line:7: \t\t\t^ `return' used outside function context\n/tmp/tmplhnz1xgl.sh:\
    \ line 28: [: -eq: unary operator expected\n"
  stdout: ''
  timestamp: 1660054475
