language: sh
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"${1}\"\
    \n    local k=\"${2}\"\n\n    # Initialize an empty array to store the result\n\
    \    local res\n    local arr_len=\"${#arr[@]}\"\n\n    if [ \"${arr_len}\" -eq\
    \ \"${k}\" ]; then\n        local max_idx=\"${arr_len}\"\n        local max_num=\"\
    ${arr[$max_idx]}\"\n        local i\n        # Traverse each element of arr to\
    \ find the maximum number\n        for ((i=0; i<\"${k}\"; i++)); do\n        \
    \    if [[ \"${arr[$i]}\" -gt \"${max_num}\" ]]; then\n                max_idx=$i\n\
    \                max_num=\"${arr[$i]}\"\n            fi\n        done\n      \
    \  \n        # Append the maximum number to the result array\n        res=\"${arr[$max_idx]}\"\
    \n        \n        # Sort the result array in descending order\n        sort\
    \ -nr \"${arr[@]:0:${k}}\"\n        \n        echo \"${res}\"\n    else\n    \
    \    echo \"error: ${arr_len} != ${k}\"\n    fi\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local _max=$(echo $arr | $GREP_OPTIONS -c '^$((k-2)):$')\n\
    \    local _max=$(($(echo $arr | $GREP_OPTIONS -c '^$((k-2)):$') < $k ? $((k-2))\
    \ : $k))\n    echo $_max\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaq3785uf.sh: line 23: -c: command not found

    /tmp/tmpaq3785uf.sh: line 24: -c: command not found

    /tmp/tmpaq3785uf.sh: line 24: < 3 ? 1 : 3: syntax error: operand expected (error
    token is "< 3 ? 1 : 3")

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: -1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n\tlocal __k=$1\n\t\
    local __arr=$2\n\tlocal __sortedArr\n\t\n\t[ \"$__k\" -lt 1 ] || [ \"$__k\" -gt\
    \ 1000 ] || [ \"$__k\" -eq 0 ] && return 1\n\t[ \"$__arr\" ] || return 1\n\t\n\
    \tunset -v __sortedArr #init local variable\n\t__sortedArr=$__arr #set local variable\
    \ __sortedArr\n\t\n\twhile (( ${#__arr} > 0 )); do\n\t\t__sortedArr+=( \"${__arr}\"\
    \ ) #append array\n\t\tarr=$__arr #set local variable arr\n\t\tarr=( $(sort -n\
    \ <<<\"${arr[@]}\") ) #sort by numerical order\n\t\t__arr=( \"${arr[@]}\" ) #set\
    \ local variable __arr\n\tdone\n\t\n\techo \"${__sortedArr[@]}\" | head -n \"\
    $__k\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4\
    \ -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660054616
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local a i\n   \
    \ a=$1\n    i=$2\n    local -n list=\n    while [ $i -gt 0 ]; do\n        list=(\
    \ \"${list[@]}\" $(a[((i-1)%${#a[@]}):((i)%${#a[@]})] ))\n        (( i=i-1 ))\n\
    \    done\n    echo ${list[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp521qf6zs.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp521qf6zs.sh: line 26: a[((i-1)%1):((i)%1)]: command not found

    /tmp/tmp521qf6zs.sh: line 26: a[((i-1)%1):((i)%1)]: command not found

    /tmp/tmp521qf6zs.sh: line 26: a[((i-1)%1):((i)%1)]: command not found

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"${1}\"\
    \n    local k=\"${2}\"\n\n    # Sort the array and return the last k elements\n\
    \    # sort -n \"${arr[@]}\" | tail -n \"$k\"\n    local sorted=($(sort -n \"\
    ${arr[@]}\"))\n    (( k-- ))\n    local last=${sorted[k]}\n    local rest=${sorted[@]:k}\n\
    \    sorted=(${sorted[@]%${last}}${last})\n    local j=0\n    while [[ \"${#sorted[@]}\"\
    \ -gt \"0\" ]] ; do\n        sorted=(${sorted[@]:0:k})\n        j=$(( j + 1 ))\n\
    \    done\n    local kthMax=\"${sorted[0]}\"\n    local i=1\n    while [[ $i -le\
    \ $k ]] ; do\n        if [[ ${sorted[i]} -gt ${kthMax} ]] ; then\n           \
    \ kthMax=\"${sorted[i]}\"\n        fi\n        i=$(( $i + 1 ))\n    done\n   \
    \ echo \"${sorted[@]:0:k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: invalid option -- ''3''

    Try ''sort --help'' for more information.

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n  local arr i k sorted\n\
    \n  sorted=()\n  arr=(\"$@\")\n  k=(\"$2\")\n  i=1\n  while [ $i -lt ${#arr[@]}\
    \ ]; do\n    if [ ${arr[$i]} -gt ${arr[$((i-1+k))]} ]; then\n      sorted+=(\"\
    ${arr[$i]}\")\n    fi\n    i=$((i+1))\n  done\n\n  if [ ${#sorted[@]} -gt $k ];\
    \ then\n    echo \"${sorted[@]:$((k-1))}\"\n  else\n    echo\n  fi\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3jcefy5i.sh: line 28: [: 3: unary operator expected

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    local output\n\n    local maximum\n    local index\n    local\
    \ value\n\n    maximum=$(echo ${arr[*]} | tr -d ' ')\n\n    for((i=0; i<${#arr[@]};\
    \ ++i));do\n        if (( ${arr[i]} > ${maximum} ));then\n            maximum=${arr[i]}\n\
    \        fi\n    done\n\n    index=$(echo $maximum | cut -d \" \" -f 1)\n\n  \
    \  for ((j=1; j<=k; j++));do\n        if (( ${maximum} < ${arr[index]} ));then\n\
    \            value=${arr[index]}\n        fi\n        arr[index]=${maximum}\n\
    \        maximum=${value}\n    done\n\n    arr[$k]=$maximum\n\n    output=$( IFS=$'\\\
    n' ; echo \"${arr[*]}\" )\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8cq7gsiw.sh: line 32: ((: -3 -4 5 > -3-45 : syntax error in expression
    (error token is "5 > -3-45 ")

    /tmp/tmp8cq7gsiw.sh: line 40: arr: bad array subscript

    /tmp/tmp8cq7gsiw.sh: line 40: ((: -3-45 <  : syntax error: operand expected (error
    token is "<  ")

    /tmp/tmp8cq7gsiw.sh: line 43: arr[index]: bad array subscript

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=(\"${@}\"\
    )\n    local num=${#arr[@]}\n    local maxArr=($(sort -n -t ${arr[0]} ${arr[@]:1}))\n\
    \    local maxValue=${maxArr[*]}\n    local maxIndex=-1\n\n    for (( i=1; i<num;\
    \ i++ )); do\n        if [ ${arr[$i]} -gt ${maxValue} ]; then\n            maxValue=${arr[$i]}\n\
    \            maxIndex=${i}\n        fi\n    done\n\n    local sortedArr=(${arr[@]:0:maxIndex})\n\
    \    local kStr=\"$(printf \"%${k}d\" ${sortedArr[*]})\"\n    printf \"%s\\n\"\
    \ \"${sortedArr[*]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "sort: multi-character tab \u2018-3\u2019\n/tmp/tmpslnzyhft.sh: line 28:\
    \ [: 3: unary operator expected\n/tmp/tmpslnzyhft.sh: line 34: maxIndex: substring\
    \ expression < 0\n"
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr k max_so_far\n\
    \n    arr=\"$1\"\n    k=\"$2\"\n    max_so_far=\n    for i in $(seq 1 $k); do\n\
    \        if [[ ! -z \"${arr[i]}\" ]]; then\n            max_so_far+=\"${arr[i]}\"\
    \n        fi\n    done\n    echo \"$max_so_far\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr k\n \
    \   arr=$1\n    k=$2\n\n    local max max maxlen maxelem i\n\n    max=\"${arr[0]}\"\
    \n    maxlen=1\n    maxelem=$max\n    for ((i=0; i<k; i++)); do\n        if [[\
    \ $arr[$i] == \"${maxelem}\" ]]; then\n            maxlen=$((maxlen + 1))\n  \
    \      fi\n        if [[ $maxlen -ne $((k - i)) ]]; then\n            maxlen=$((k\
    \ - i))\n        fi\n        maxelem=\"${maxelem}\" \"$max\"\n        max=\"${arr[$((i+1))]}\"\
    \n    done\n\n    echo $maxelem\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpswc1gbur.sh: line 37: -3 -4 5: command not found

    /tmp/tmpswc1gbur.sh: line 37: : command not found

    /tmp/tmpswc1gbur.sh: line 37: : command not found

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n  local arr=$1\n  local\
    \ k=$2\n  arr=($(echo $arr | sed -e 's/^\\(-?[0-9]+\\)$/\\1/' -e 's/^(-?[0-9]+)$/\\\
    1/'))\n  local i=0\n  local maxval=0\n  local maxidx=0\n  while [ $i -lt $k ]\n\
    \  do\n    local curval=$(($(echo $arr | sed -e 's/^\\(-?[0-9]+\\)$/\\1/' -e 's/^(-?[0-9]+)$/\\\
    1/' | sort -r -n | head -n 1 )))\n    local j=0\n    while [ $j -lt $k ]\n   \
    \ do\n      if [ $i -eq $j ]\n      then\n        if [ \"$curval\" -gt \"$maxval\"\
    \ ]\n        then\n          maxval=$curval\n          maxidx=$j\n        fi\n\
    \      else\n        if [ \"$curval\" -gt \"$arr[$j]\" ]\n        then\n     \
    \     maxval=$curval\n          maxidx=$j\n        fi\n      fi\n      j=$(($j+1))\n\
    \    done\n    i=$(($i+1))\n  done\n  echo $maxidx\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #2, char 18: invalid reference \1 on `s'' command''s
    RHS

    sed: -e expression #2, char 18: invalid reference \1 on `s'' command''s RHS

    /tmp/tmpx4kizanu.sh: line 41: [: [1]: integer expression expected

    /tmp/tmpx4kizanu.sh: line 41: [: [2]: integer expression expected

    sed: -e expression #2, char 18: invalid reference \1 on `s'' command''s RHS

    /tmp/tmpx4kizanu.sh: line 41: [: [0]: integer expression expected

    /tmp/tmpx4kizanu.sh: line 41: [: [2]: integer expression expected

    sed: -e expression #2, char 18: invalid reference \1 on `s'' command''s RHS

    /tmp/tmpx4kizanu.sh: line 41: [: [0]: integer expression expected

    /tmp/tmpx4kizanu.sh: line 41: [: [1]: integer expression expected

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    echo \"${arr[@]}\" | sort -k ${k}r -n | tail -n +2\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    # Write your code\
    \ here\n    arr=($1)\n    len=$2\n    sort -n -k 1 <(printf \"%s\\n\" \"${arr[@]}\"\
    \ | head -$len)\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=$1\n\
    \    local k=$2\n    # Write your code here\n    local j=0\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n            arr[j]=\"\
    ${arr[i]}\"\n        fi\n        j=$((j+1))\n    done\n    arr=${arr[@]}\n   \
    \ # arr=${arr[@]:0:k}\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo_ntqp6x.sh: line 26: [[: -3 -4 5: syntax error in expression (error
    token is "5")

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local array=(\"\
    $@\")\n    local size=${#array[@]}\n    local max=-1\n\n    for ((i=0; i<$size;\
    \ i++)); do\n        if (( ${array[i]} > $max )); then\n            max=${array[i]}\n\
    \        fi\n    done\n\n    echo \"${array[@]}\" | sort -k ${max}nr | head -n\
    \ ${k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4\
    \ -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp__l432pe.sh: line 26: ((: -3 -4 5 > -1 : syntax error in expression
    (error token is "5 > -1 ")

    head: option requires an argument -- ''n''

    Try ''head --help'' for more information.

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n  local arr\n  local\
    \ k\n  arr=($1)\n  k=$2\n  local maxArr\n  local max\n  maxArr=$(cycle \"${arr[@]}\"\
    \ $k)\n  if [ -z \"$maxArr\" ]; then\n    echo \"\"\n    return\n  fi\n  echo\
    \ \"$maxArr\" | tail -n $k\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpudcrnhgo.sh: line 27: cycle: command not found

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n local arr=\"$1\"\n\
    \ local k=\"$2\"\n local len=\"${#arr[@]}\"\n\n if [ ${k} -gt ${len} ]; then\n\
    \  return 0\n fi\n\n local k=0\n local max=-1000\n local i=0\n\n while [ $i -lt\
    \ ${len} ]; do\n  if [ ${arr[$i]} -gt ${max} ]; then\n   max=${arr[$i]}\n  fi\n\
    \  k=$((k+1))\n  i=$((i+1))\n done\n\n while [ $i -gt 0 ]; do\n  arr[$i]=${arr[$((i-1))]}\n\
    \  ((i--))\n done\n\n arr=($(echo \"${arr[@]}\" | sed -e 's/^/-/' -e 's/^/0/'\
    \ -e 's/^/1/' -e 's/^/2/' -e 's/^/3/' -e 's/^/4/' -e 's/^/5/' -e 's/^/6/' -e 's/^/7/'\
    \ -e 's/^/8/' -e 's/^/9/' -e 's/^/a/' -e 's/^/b/' -e 's/^/c/' -e 's/^/d/' -e 's/^/e/'\
    \ -e 's/^/f/' -e 's/^/g/' -e 's/^/h/' -e 's/^/i/' -e 's/^/j/' -e 's/^/k/' -e 's/^/l/'\
    \ -e 's/^/m/' -e 's/^/n/' -e 's/^/o/' -e 's/^/p/' -e 's/^/q/' -e 's/^/r/' -e 's/^/s/'\
    \ -e 's/^/t/' -e 's/^/u/' -e 's/^/v/' -e 's/^/w/' -e 's/^/x/' -e 's/^/y/' -e 's/^/z/'\
    \ ))\n arr=($(echo \"${arr[@]}\" | sed -e 's/^/-/' -e 's/^/0/' -e 's/^/1/' -e\
    \ 's/^/2/' -e 's/^/3/' -e 's/^/4/' -e 's/^/5/' -e 's/^/6/' -e 's/^/7/' -e 's/^/8/'\
    \ -e 's/^/9/' -e 's/\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkul0vh50.sh: line 47: unexpected EOF while looking for matching
    `''''

    /tmp/tmpkul0vh50.sh: line 70: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=($1);\n\
    \    local k=$2;\n    local maximum;\n    local i=0;\n    local j=0;\n    local\
    \ max;\n    for ((i=1; i<k; i++)); do\n        max=i;\n        for (j=i-1; j>0;\
    \ j--) {\n            if (${arr[j]} > ${arr[j-1]}) {\n                max=j;\n\
    \            }\n        }\n        if ((${arr[i]} > ${arr[i-1]}) || (${arr[i]}\
    \ > ${max})) ; then\n            maximum=\"${arr[i]}\";\n        fi\n    done\n\
    \    return ${maximum};\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpepyivxeo.sh: line 29: syntax error near unexpected token `(''

    /tmp/tmpepyivxeo.sh: line 29: `        for (j=i-1; j>0; j--) {''

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\
    \n    local k=\"$2\"\n    local length n\n    length=${#arr[@]}\n    num=$(echo\
    \ \"$num\" | bc)\n    if [[ $num -gt $k ]]; then\n        echo \"$arr\"\n    else\n\
    \        local max\n        local start\n        local end\n        local tmp\n\
    \        start=0\n        end=$((k-1))\n        while [[ $start -lt $length ]]\
    \ && [[ $end -lt $length ]]; then\n            if [[ \"$arr[start]\" > \"$arr[end]\"\
    \ ]]; then\n                max=\"$arr[end]\";\n            else\n           \
    \     max=\"$arr[start]\";\n            fi\n            if [[ \"$start\" -eq \"\
    $end\" ]]; then\n                echo \"$max\"\n            else\n           \
    \     echo \"$max\";\n                tmp=$((start+1))\n                while\
    \ [[ \"$tmp\" -le \"$end\" ]] && [[ $tmp -gt $length ]]; do\n                \
    \    max=\"$arr[start]\";\n                    start=$((start+1))\n          \
    \      done\n            fi\n            ((end-=$((k-1)))\n        done\n    fi\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8q7bl4hv.sh: line 35: syntax error near unexpected token `then''

    /tmp/tmp8q7bl4hv.sh: line 35: `        while [[ $start -lt $length ]] && [[ $end
    -lt $length ]]; then''

    '
  stdout: ''
  timestamp: 1660054611
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# Input: arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n\
    # Input: arr = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr\
    \ = [-3, 2, 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of\
    \ the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is\
    \ a space-separated list\n# $2 is an integer\nmaximum() {\n  local arr=\"$1\"\n\
    \  local k=\"$2\"\n  local len=${#arr[@]}\n  local max\n  local i\n\n  if [ \"\
    $k\" -eq \"$len\" ]; then\n    return \"${arr[@]}\"\n  fi\n\n  max=$(printf \"\
    %.0f\" \"${arr[0]}\")\n  arr[0]=\"${arr[0]%.0f}\"\n  for ((i=1;i<$k;i++));do\n\
    \    if [ ${arr[$i]} -gt \"${arr[$i]}\" ]; then\n      arr[$i]=\"${arr[$i]%.0f}\"\
    \n    else\n      arr[$i]=\"${max}\"\n      max=$max\n    fi\n  done\n\n  echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm11ubfbo.sh: line 31: printf: -3 -4 5: invalid number

    /tmp/tmpm11ubfbo.sh: line 34: [: -gt: unary operator expected

    /tmp/tmpm11ubfbo.sh: line 34: [: -gt: unary operator expected

    '
  stdout: ''
  timestamp: 1660054611
