name: HumanEval_19_sort_numbers
language: sh
prompt: "#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from\
  \ smallest to largest\n# >>> sort_numbers('three one five')\n# 'one three five'\n\
  #\n# $1 is a string\nsort_numbers() {\n"
tests: "}\n\ncandidate() {\n    sort_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"three\") = \"three\" ]]\n\
  \    [[ $(candidate \"three five nine\") = \"three five nine\" ]]\n    [[ $(candidate\
  \ \"five zero four seven nine eight\") = \"zero four five seven eight nine\" ]]\n\
  \    [[ $(candidate \"six five four three two one zero\") = \"zero one two three\
  \ four five six\" ]]\n}\n\nrun_test"
completions: ["    local numbers=$1\n    numbers=${numbers//[!0-9]}\n    numbers=${numbers//[!a-z]}\n\
    \    numbers=${numbers//[!A-Z]}\n    numbers=${numbers//[!0-9]}\n    numbers=${numbers//[!0-9]}\n\
    \    echo \"${numbers}\"", "    local numbers=$1\n\n    case \"${numbers}\" in\n\
    \        \"zero\")\n            return 0\n            ;;\n        \"one\")\n \
    \           return 1\n            ;;\n        \"two\")\n            return 2\n\
    \            ;;\n        \"three\")\n            return 3\n            ;;\n  \
    \      \"four\")\n            return 4\n            ;;\n        \"five\")\n  \
    \          return 5\n            ;;\n        \"six\")\n            return 6\n\
    \            ;;\n        \"seven\")\n            return 7\n            ;;\n  \
    \      \"eight\")\n            return 8\n            ;;\n        \"nine\")\n \
    \           return 9\n            ;;\n        *)\n            echo \"ERROR: sort_numbers()\
    \ argument must be 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' or 'nine'.\" >&2\n            return 1\n            ;;\n    esac\n\n\
    \    IFS=\" \" read -r -a numbers <<< \"${numbers}\"\n    local sorted_numbers=\"\
    \"\n    for (( i = 0; i < ${#numbers[@]} - 1; i++ )); do\n        local j=0\n\
    \        for (( j = (i + 1); j < ${#numbers[@]}; j++ )); do\n            if [[\
    \ ${numbers[i]} -gt ${numbers[j]} ]]; then\n                local temp=${numbers[i]}\n\
    \                numbers[i]=${numbers[j]}\n                numbers[j]=${temp}\n\
    \            fi\n        done\n        sorted_numbers+=\"${numbers[i]} \"\n  \
    \  done\n    sorted_numbers+=\"${numbers[${#numbers[@]} - 1]}\"\n    echo \"${sorted_numbers}\"",
  "    IFS=' ' read -a array <<< \"$1\"\n    local n\n    n=${#array[@]}\n    local\
    \ i\n    local out\n    out=''\n    for ((i = 0; i < n; i++))\n    do\n      \
    \ case ${array[$i]} in\n          zero)\n             out=\"${out}${i}${array[$i]}\"\
    \n          ;;\n          one)\n             out=\"${out}${array[$i]}${i}\"\n\
    \          ;;\n          two)\n             out=\"${out}${array[$i]}${i}${array[$i+1]}\"\
    \n          ;;\n          three)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}\"\
    \n          ;;\n          four)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}\"\
    \n          ;;\n          five)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}${array[$i+3]}\"\
    \n          ;;\n          six)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}${array[$i+3]}${array[$i+4]}\"\
    \n          ;;\n          seven)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}${array[$i+3]}${array[$i+4]}${array[$i+5]}\"\
    \n          ;;\n          eight)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}${array[$i+3]}${array[$i+4]}${array[$i+5]}${array[$i+6]}\"\
    \n          ;;\n          nine)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}${array[$i+3]}${array[$i+4]}${array[$i+5]}${array[$i+6]}${array[$i+7]}\"\
    \n          ;;\n          *)\n             out=\"${out}${i}${array[$i]}${array[$i+1]}${array[$i+2]}${array[$i+3]}${array[$i+4]}${array[$i+5]}${array[$i+6]}${array[$i+7]}${array[$i+8]}\"\
    \n          ;;\n", "  local numbers=$1\n  local sort\n  sort ${numbers} | sed\
    \ \"s/ /\\n/g\" | sed \"s/^/    /\" >> /tmp/$TMPFILE\n  sort -n -k 2 -t '\\n'\
    \ /tmp/$TMPFILE | sed \"s/^/    /\" | sed \"s/^    /\\n/g\"\n  rm /tmp/$TMPFILE",
  "    local IFS=' ' # Don't mangle with IFS\n    local numbers=$1\n\n    for number\
    \ in $numbers; do\n        echo $number\n    done", "  local -r string=$1\n  shift\n\
    \  local -r list=$1\n  shift\n  # Convert strings to integers\n  IFS=' ' read\
    \ -r -a array <<<\"${list}\"\n  array=( \"${array[@]}\" )\n  local i=0\n  local\
    \ list_length=${#array[@]}\n  while [ $i -lt $list_length ]; do\n    local element=${array[i]}\n\
    \    array[i]=$(( ${element} + 1 ))\n    array=( \"${array[@]}\" )\n    i=$((\
    \ i + 1 ))\n  done\n  # Convert integers to strings\n  local j=0\n  local list_length=${#array[@]}\n\
    \  while [ $j -lt $list_length ]; do\n    local element=${array[j]}\n    array[j]=$element\n\
    \    array=( \"${array[@]}\" )\n    j=$(( j + 1 ))\n  done\n  # Convert list\n\
    \  printf '%s\\n' \"${array[@]}\"", "\tlocal numbers=$1\n\tlocal sorted_numbers=\"\
    \"\n\t# First split the input by spaces into an array of words\n\tIFS=' ' read\
    \ -r -a array <<< \"$numbers\"\n\t# Now sort that array\n\tprintf \"%s\\n\" \"\
    ${array[@]}\" | sort -n", "    local numbers=\"$1\"\n    local words=($numbers)\n\
    \    local sorted=()\n    local i=0 # loop index\n    local len=${#words[*]}\n\
    \    local j # loop index\n\n    for j in $(seq 0 \"$((len-1))\"); do\n      \
    \  if [[ ${words[j]} == zero ]]; then\n            sorted[i]=${words[j]}\n   \
    \         i=$((i+1))\n        elif [[ ${words[j]} == one ]]; then\n          \
    \  sorted[i]=${words[j]}\n            i=$((i+1))\n        elif [[ ${words[j]}\
    \ == two ]]; then\n            sorted[i]=${words[j]}\n            i=$((i+1))\n\
    \        elif [[ ${words[j]} == three ]]; then\n            sorted[i]=${words[j]}\n\
    \            i=$((i+1))\n        elif [[ ${words[j]} == four ]]; then\n      \
    \      sorted[i]=${words[j]}\n            i=$((i+1))\n        elif [[ ${words[j]}\
    \ == five ]]; then\n            sorted[i]=${words[j]}\n            i=$((i+1))\n\
    \        elif [[ ${words[j]} == six ]]; then\n            sorted[i]=${words[j]}\n\
    \            i=$((i+1))\n        elif [[ ${words[j]} == seven ]]; then\n     \
    \       sorted[i]=${words[j]}\n            i=$((i+1))\n        elif [[ ${words[j]}\
    \ == eight ]]; then\n            sorted[i]=${words[j]}\n            i=$((i+1))\n\
    \        elif [[ ${words[j]} == nine ]]; then\n            sorted[i]=${words[j]}\n\
    \            i=$((i+1))\n        fi\n    done\n\n    for j in $(seq 0 \"$((len))\"\
    ); do\n        sorted[i]=${words[$j]}\n        i=$((i+1))\n    done\n    echo\
    \ ${sorted[*]}", "    local IFS=$1\n    local n\n    local digit\n    local sorted\n\
    \    local tmp\n    local digit2\n    local tmp2\n    local string\n    local\
    \ i\n    local output\n    local digitlen\n    digit=$1\n    n=`echo ${digit}\
    \ | sed 's/ //g' | sed 's/-/ /g' | sed 's/^-//' | sed 's/ //g'`\n    digitlen=${#n}\n\
    \    digit2=${n#0}\n    sorted=''\n    i=0\n    while [[ $i -lt 9 ]]; do\n   \
    \     tmp=${digit2:$i:1}\n        digit2=${digit2:$i:1}\n        digit2=$(( ${#digit2}\
    \ + 1 ))\n        if [[ $tmp -lt $digitlen ]]; then\n            sorted=$sorted${digit:$i:1}\n\
    \            digit=${digit:$i:1}\n        else\n            tmp2=${digit:$i:1}\n\
    \            if [[ $tmp -lt $digitlen ]]; then\n                digit=${digit:$i:1}\n\
    \            fi\n            if [[ $tmp -lt $digitlen ]]; then\n             \
    \   digit2=$(( ${#digit2} + 1 ))\n            fi\n            if [[ $tmp2 -lt\
    \ $digitlen ]]; then\n                sorted=$sorted${digit:$i:1}\n          \
    \  else\n                if [[ $tmp2 -lt $digitlen ]]; then\n                \
    \    digit2=$(( ${#digit2} + 1 ))\n                fi\n                if [[ $tmp2\
    \ -lt $digitlen ]]; then\n                    digit2=$(( ${#digit2} + 1 ))\n \
    \               fi\n                if [[ $tmp2 -lt $digitlen ]]; then\n     \
    \               digit2=$(( ${#digit2} + 1 ))\n                fi\n           \
    \     if [[ $tmp2 -lt $digitlen ]]; then\n                    digit2=$(( ${#digit2}\
    \ + 1 ))\n                fi\n                if [[ $tmp2 -lt $digitlen ]]; then\n\
    \                    digit2=$(( ${#digit2} + 1 ))\n                fi\n      \
    \          if [[ $tmp2 -lt $digitlen ]]; then\n                    digit2=$((\
    \ ${#digit2} + 1 ))\n                fi\n                if [[ $tmp2 -lt $digitlen\
    \ ]]; then\n                    digit2=$(( ${#digit2} + 1 ))\n               \
    \ fi\n                if [[ $tmp2 -lt $digitlen ]]; then\n                   \
    \ digit2=$(( ${#digit2} + 1 ))\n                fi\n", "  local digit=$1; shift\n\
    \  local num_words=($@)\n  sort -k 1 <<<\"${num_words[@]}\" | tr -s '[:space:]'",
  "    local numbers=$1\n    local length=${#numbers}\n    if [ -z \"${numbers}\"\
    \ ]; then\n      echo -n \"ERROR: sort_numbers: empty input string not allowed.\"\
    \n      return\n    fi\n    local numbers_array=( $numbers )\n    local sorted_numbers=\"\
    \"\n    local i=0\n\n    for (( i=0; $i < ${#numbers_array[@]}; i++ )); do\n \
    \       if [ $i -eq 0 ]; then\n            sorted_numbers=\"${numbers_array[$i]}\"\
    \n        else\n            sorted_numbers=$sorted_numbers${numbers_array[$i]}\
    \ \" \"\n        fi\n    done\n    echo $sorted_numbers", "  local n=$1\n  local\
    \ str=\n  case $n in\n    \"zero\"|\"one\"|\"two\"|\"three\"|\"four\"|\"five\"\
    |\"six\"|\"seven\"|\"eight\"|\"nine\")\n      str=$n\n      ;;\n    *) # if $1\
    \ is not a number print error\n      echo \"ERROR: Please pass in a single number\
    \ from 'zero' to 'nine'.\"\n      ;;\n  esac\n  echo $str | (while read x; do\
    \ echo $x | sort -n -r; done)", "  local string words i\n  string=\"$1\"\n  #\
    \ Split on the space\n  words=($string)\n  # Store the number in array\n  local\
    \ array\n  # Loop through array and convert to int\n  for i in \"${words[@]}\"\
    ; do\n    array+=(\"$i\")\n  done\n  # Sort the array\n  local sort\n  local temp\n\
    \  for i in \"${array[@]}\"; do\n    temp=\"$i\"\n    for j in \"${!array[@]}\"\
    ; do\n      if (( $i < ${sort} )); then\n        sort=\"${temp}\"\n        temp=\"\
    ${array[j]}\"\n      fi\n    done\n    array[j]=\"${sort}\"\n  done\n  # Return\
    \ sorted array\n  local output\n  output=\"\"\n  for i in \"${array[@]}\"; do\n\
    \    output+=\"$i\"\n  done\n  echo \"$output\"", "    local sorted_string=\"\
    $1\";\n    local number=\"2\";\n    local word=\"\";\n    local numbers=\"\";\n\
    \n    while [ \"$word\" != \"\" ]\n    do\n        numbers=`echo $sorted_string\
    \ | cut -d \" \" -f $number | awk '{print $1}'`;\n\n        if [ \"$number\" -ne\
    \ \"9\" ] && [ \"$numbers\" != \"0\" ]\n        then\n            sorted_string=\"\
    $numbers $word\";\n        else\n            sorted_string=\"$word\";\n      \
    \  fi\n\n        word=\"$(echo $sorted_string | cut -d \" \" -f $numbers)\";\n\
    \        number=`expr ${number}+1`;\n    done\n\n    echo \"$sorted_string\";",
  "  local input=\"$1\"\n  local sorted=''\n\n  for number in ${input}; do\n    #\
    \ remove non-numeric characters\n    local digits=$(echo \"$number\" | tr -cd\
    \ 0-9)\n\n    # ensure all digits appear at end of string\n    sorted+=\"${number}\
    \ ${digits}\" \n  done\n  \n  # sort from smallest to largest\n  local sorted_array=$(echo\
    \ \"$sorted\" | tr ' ' '\\n' | sort -n)\n\n  # remove leading spaces and join\
    \ with space\n  local sorted=$(echo \"$sorted_array\" | sed -r 's/^ *//;s/ *$//')\n\
    \  \n  echo $sorted", "    local n=$1\n    local s=${n// / }\n    local sorted=$(sort\
    \ -r -n <<<\"$s\")\n    echo \"$sorted\"", '  echo "$1" | xargs -n1 | sort -n',
  "  local input=\"$1\"\n\n  if [ -z \"$input\" ]\n  then\n    echo \"Missing input\
    \ string\"\n    return\n  fi\n\n  local valid_choices='zero one two three four\
    \ five six seven eight nine'\n  local output\n  output=''\n\n  for item in $input\n\
    \  do\n    if [[ $item =~ ^[0-9]+$ ]] && [ \"$valid_choices\" != *${item}* ]\n\
    \    then\n      output=\"$output$item \"\n    fi\n  done\n\n  if [ -z \"$output\"\
    \ ]\n  then\n    echo \"Could not sort input string\"\n    return\n  fi\n\n  local\
    \ temp=${output}\n  output=''\n  while [ \"$temp\" != \"\" ]\n  do\n    temp=${temp//\
    \ /}\n    output=\"$output$temp\"\n  done\n\n  echo \"$output\"", "  local input=\"\
    $1\"\n  local nums=\"\"\n  local i\n  for i in {0..10}; do\n    case \"${input:$i:1}\"\
    \ in\n      ${input:$i:1}) nums=\"${nums} ${input:$i:1}\" ;;\n      *) nums=\"\
    ${nums} 0\" ;;\n    esac\n  done\n  eval \"echo \\\"${nums:1}\\\"\"", "    numbers=$1\n\
    \n    # Remove whitespace from numbers\n    numbers=${numbers// /}\n\n    # Remove\
    \ empty strings\n    numbers=${numbers// /}\n\n    # Convert each number to an\
    \ integer\n    numbers=$(echo \"$numbers\" | tr \" \" \"\\n\")\n\n    # Sort numbers\
    \ from smallest to largest\n    numbers=$(echo \"$numbers\" | tr \" \" \"\\n\"\
    \ | sort -n | tr \"\\n\" \" \")\n\n    # Convert numbers to strings again\n  \
    \  numbers=$(echo \"$numbers\" | tr \" \" \"\\n\")\n\n    # Concatenate strings\
    \ to output the numbers\n    echo \"$numbers\""]
stop_tokens:
- "\n}"
