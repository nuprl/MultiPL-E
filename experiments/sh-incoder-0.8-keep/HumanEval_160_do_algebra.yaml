name: HumanEval_160_do_algebra
language: sh
prompt: "#!/bin/bash\n# Given two lists operator, and operand. The first list has\
  \ basic algebra operations, and \n# the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n# expression and return the evaluation\
  \ of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
  \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation (\
  \ ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
  \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal\
  \ to the length of operand list minus one.\n# Operand is a list of of non-negative\
  \ integers.\n# Operator list has at least one operator, and operand list has at\
  \ least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated\
  \ list\ndo_algebra() {\n"
tests: "}\n\ncandidate() {\n    do_algebra \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"** * +\" \"2 3 4 5\") = \"37\" ]]\n    [[ $(candidate \"+ * -\"\
  \ \"2 3 4 5\") = \"9\" ]]\n    [[ $(candidate \"// *\" \"7 3 4\") = \"8\" ]]\n}\n\
  \nrun_test"
completions: ["  local operator=$1\n  local operand=$2\n  local result\n\n  local\
    \ operandlist=(${operand//,/ })\n  local operatorlist=(${operator//,/ })\n  local\
    \ operatorcount=\"${#operandlist[@]}\"\n  local operatorcount1=\"${#operatorlist[@]}\"\
    \n  if [ $operatorcount == 0 ]\n  then\n    echo 0\n    return\n  elif [ $operatorcount\
    \ != $operatorcount1 ]\n  then\n    echo \"ERROR: operator list has ${#operatorlist[@]}\
    \ elements, operand list has ${#operandlist[@]} elements.\"\n    return\n  fi\n\
    \n  if [ \"$operator\" == \"+\" ]\n  then\n    result=$(( ${operandlist[@]} +\
    \ ${operandlist[@]} ))\n  elif [ \"$operator\" == \"*\" ]\n  then\n    result=$((\
    \ ${operandlist[@]} * ${operandlist[@]} ))\n  elif [ \"$operator\" == \"-\" ]\n\
    \  then\n    result=$(( ${operandlist[@]} - ${operandlist[@]} ))\n  elif [ \"\
    $operator\" == \"/\" ]\n  then\n    result=$(( ${operandlist[@]} / ${operandlist[@]}\
    \ ))\n  elif [ \"$operator\" == \"//\" ]\n  then\n    result=$(( ${operandlist[@]}\
    \ / ${operandlist[@]} ))\n  elif [ \"$operator\" == \"**\" ]\n  then\n    result=$((\
    \ ${operandlist[@]} ^ ${operandlist[@]} ))\n  else\n    echo \"ERROR: operator\
    \ '${operator}' not found.\"\n    return\n  fi\n  echo $result", "  local operator\n\
    \  local operand\n\n  operator=$(IFS=$'\\n' ; read -ra operator <<<\"$1\")\n \
    \ operand=$(IFS=$'\\n' ; read -ra operand <<<\"$2\")\n\n  local result\n  result=$(IFS=$'\\\
    n' ; echo \"${operand[${#operand[@]}]}\" \\\n    \"${operator[${#operand[@]} -\
    \ 1]}\")\n  echo \"$result\"", "    operator=$1\n    array=$2\n    eval expression=$(echo\
    \ $array | sed 's/ / + /g')\n    eval result=$(echo $expression | eval $expression)\n\
    \    echo $result", "  local operator operand\n  \n  echo \"$1\" \"$2\" > /tmp/temp\n\
    \  while IFS= read -r -d '' operator; do\n    \n    # Read first operand\n   \
    \ while IFS= read -r -d '' operand; do\n      # echo \"$operator $operand\"\n\
    \      eval \"$operator\" \"$operand\"\n    done <<< \"$2\"\n  done <<< \"$1\"\
    \n  rm /tmp/temp", "    local oper op1 op2\n    oper=$1\n    op1=$2\n    op2=$3\n\
    \    local algebras\n    algebras=\"'${oper[0]}','${oper[1]}','${oper[2]}','${oper[3]}','${oper[4]}'\"\
    \n    algebras=\"'${oper[0]}','${oper[1]}','${oper[2]}','${oper[3]}','${oper[4]}'\"\
    \n    echo $algebras\n    # algebras=`echo $algebrais | sed 's/\\'//g'`\n    echo\
    \ $algebras\n    # algebras=\"${algebras//,/$'\\n'}\"\n    echo $algebras\n  \
    \  # algebras=`echo $algebrais | sed 's/,/\\\\n/g'`\n    echo $algebras\n    algebras=\"\
    '${op1}','${op2}'\"\n    echo $algebras\n    # algebras=`echo $algebrais | sed\
    \ 's/\\'//g'`\n    echo $algebras\n    # algebras=\"${algebras//,/$'\\n'}\"\n\
    \    echo $algebras\n    # algebras=`echo $algebrais | sed 's/,/\\\\n/g'`\n  \
    \  echo $algebras\n    eval $(echo $algebras)", "    operator=$1\n    operand=$2\n\
    \    count=0\n    for n in ${operand[@]}; do\n        count=$((count+1))\n   \
    \ done\n    count=$((count+1))\n    sum=0\n    for n in ${operand[@]}; do\n  \
    \      sum=$((sum+operand[$((count-1))]))\n        count=$((count-1))\n    done\n\
    \    for n in ${operand[@]}; do\n        eval \"result=${sum}${operator[$((count-1))]}$n\"\
    \n        sum=$((sum+eval(\"result\")))\n        count=$((count-1))\n    done",
  "    operator=$1\n    operand=$2\n    length=$(expr $((${#operator[@]} - 1)) + 1)\n\
    \    # echo \"${operand[@]}\"\n    # echo \"${operator[@]}\"\n    echo -n \"operand:\
    \ \"\n    echo \"${operand[@]}\"\n    echo -n \"operator: \"\n    echo \"${operator[@]}\"\
    \n    # echo \"operand: ${operand[@]}\"\n    # echo \"operator: ${operator[@]}\"\
    \n    for ((i = 0; i <= $length; i++)); do\n        echo \"operand: ${operand[$i]}\"\
    \n        echo \"operator: ${operator[$i]}\"\n        result=\"$((${operand[$i]}${operator[$i]}))\"\
    \n        echo \"result: $result\"\n        echo \"${result}\"\n    done", " \
    \   operator=$1\n    operand=$2\n    eval", "    local operator=$1\n    local\
    \ operand=$2\n\n    # Make sure the operator and operand are lists\n    if [ !\
    \ \"$operator\" == \"\" ] && [ ! \"$operand\" == \"\" ]; then\n        # Split\
    \ the operator and operand by space\n        local op=${operator//[/ }\n     \
    \   local op=${op//[() ]}\n        local op=${op//[+ - * // ^ $ % & | < >]}\n\
    \        local op=${op//[= != > < < <= > >= >= ~ ^ ! ~ * & = ?]}\n        local\
    \ op=${op//[ ]}\n        local op=${op//[+]}\n        local op=${op//[-]}\n  \
    \      local op=${op//[*]}\n        local op=${op//[/]}\n\n        local op=${op//[**\
    \ ]}\n        local op=${op//[/ ]}\n        local op=${op//[% ]}\n\n        #\
    \ Split the operand by space\n        local op=${operand//[() ]}\n        local\
    \ op=${op//[+]}\n        local op=${op//[-]}\n        local op=${op//[*]}\n  \
    \      local op=${op//[/]}\n\n        local op=${op//[^ ]}\n        local op=${op//[~\
    \ ]}\n        local op=${op//[* ]}\n        local op=${op//[/ ]}\n\n        #\
    \ Split the operand by space\n        local op=${op//[% ]}\n        local op=${op//[+\
    \ - * // ^ $ % & | < >]}\n        local op=${op//[= != > < < <= > >= >= ~ ^ !\
    \ ~ * & = ?]}\n        local op=${op//[[ ]]}\n        local op=${op//[[ ]]}\n\n\
    \        # Split the operand by space\n        local op=${op//[[ ]]}\n       \
    \ local op=${op//[+ - * // ^ $ % & | < >]}\n        local op=${op//[= != > < <\
    \ <= > >= >= ~ ^ ! ~ * & = ?]}\n        local op=${op//[[ ]]}\n        local op=${op//[[\
    \ ]]}\n\n        # Split the operand by space\n        local op=${op//[[ ]]}\n\
    \        local op=${op//[+ - * // ^ $ % & | < >]}\n        local op=${op//[= !=\
    \ > < < <= > >= >= ~ ^ ! ", "\t# Check arguments\n\tif [ $# -ne 2 ]; then\n\t\t\
    echo \"Usage: $0 operator operand\"\n\t\techo \"example: $0 '-' '1 2 3 4' \"\n\
    \t\texit 1\n\tfi\n\t\n\t# Parse arguments\n\tlocal operator=$1\n\tlocal operand=$2\n\
    \t\n\t# Check operand length\n\tif [ ${#operand} -eq 0 ]; then\n\t\techo \"operand\
    \ = '$operand' is an empty string\"\n\t\texit 1\n\tfi\n\t\n\t# Parse operator\
    \ list\n\tlocal i=1\n\tlocal j=1\n\tlocal temp_op=$operator\n\tlocal temp_operand=$operand\n\
    \twhile [ $i -le $((${#temp_op} - 1)) ]; do\n\t\tcase ${temp_op:$i:1} in\n\t\t\
    + | - | * |) // | ** )\n\t\t\techo \"operator = '${temp_op:$i:1}' is not a valid\
    \ operator\"\n\t\t\texit 1\n\t\t\t;;\n\t\tesac\n\t\tlet i++\n\tdone\n\t\n\t# Check\
    \ operand length\n\tif [ ${#temp_operand} -eq 0 ]; then\n\t\techo \"operand =\
    \ '$operand' is an empty string\"\n\t\texit 1\n\tfi\n\t\n\t# Build expression\
    \ from operator and operand\n\tlocal expr=\"\"\n\twhile [ $j -le $((${#temp_operand}\
    \ - 1)) ]; do\n\t\tcase ${temp_op:$j:1} in\n\t\t+ | - | * |) // | ** )\n\t\t\t\
    expr=\"$expr ${temp_operand:$j:1}\"\n\t\t\techo \"expression = '${expr}'\"\n\t\
    \t\t;;\n\t\tesac\n\t\tlet j++\n\tdone\n\texpr=\"$expr ${temp_operand:$j:1}\"\n\
    \texpr=\"${expr:1}\"\n\t\n\t# Evaluate expression\n\teval \"echo \\\"${expr}\\\
    \"\"", "\tlocal operator operand\n\toperator=${1:-'+'}\n\toperand=${2:-'2 3 4\
    \ 5'}\n\n\tlocal temp\n\ttemp=$(eval \"(${operator} ${operand})\")\n\techo \"\
    $temp\"", "  local operator operand\n  local result\n  operator=$1\n  operand=$2\n\
    \  result=\"\"\n  local count=0\n  for i in $(seq 1 $((${#operator[@]}-1)) )\n\
    \  do\n    count=$((count+1))\n    if [ ${operand[$count]} == 0 ]\n    then\n\
    \      result=$result\"\"\n    elif [ ${operator[$count]} == \"+\" ]\n    then\n\
    \      result=$result${operand[$count]}\n    elif [ ${operator[$count]} == \"\
    -\" ]\n    then\n      if [ $count -gt 0 ]\n      then\n        result=$result${operand[$count]}\n\
    \      else\n        result=$result0\n      fi\n    elif [ ${operator[$count]}\
    \ == \"*\" ]\n    then\n      result=$result${operand[$count]}\n    elif [ ${operator[$count]}\
    \ == \"//\" ]\n    then\n      result=$result${operand[$count]}\n    elif [ ${operator[$count]}\
    \ == \"**\" ]\n    then\n      if [ $(( $count % 2 )) -ne 0 ]\n      then\n  \
    \      result=$result${operand[$count]}\n      else\n        result=$result1\n\
    \      fi\n    fi\n  done\n  echo $result", "    # $1 should be a space-separated\
    \ list\n    # $2 should be a space-separated list\n    # Return value is an integer.\n\
    \    operator=$1\n    array=$2\n    # $1 should not contain empty string\n   \
    \ # $2 should not contain empty string\n    # $3 should not contain any white\
    \ spaces\n    # $4 should contain at least one operator\n    # $5 should contain\
    \ at least one operand\n    # $6 should contain at least one operand\n    # $7\
    \ should contain at least one operand\n    if [[ -z $1 ]] || [[ -z $2 ]] || [[\
    \ -z $3 ]] || [[ -z $4 ]] || [[ -z $5 ]] || [[ -z $6 ]] || [[ -z $7 ]]; then\n\
    \        echo \"Usage: ${BASH_SOURCE[0]} [+] [*] [/] [-] [<, <=, ==, !=, >, >=]\"\
    \ >&2\n        exit 1\n    fi\n    if [[ \"$4\" != \"+\" && \"$4\" != \"'*\" &&\
    \ \"$4\" != \"/\" && \"$4\" != \"-\" && \"$4\" != \"<\" && \"$4\" != \">\" &&\
    \ \"$4\" != \">=\" && \"$4\" != \"<=\" ]]; then\n        echo \"Invalid operator:\
    \ ${4}\" >&2\n        exit 1\n    fi\n    if [[ -z $5 ]]; then\n        echo \"\
    ERROR: ${BASH_SOURCE[0]} must be followed by a valid operand.\" >&2\n        exit\
    \ 1\n    fi\n    if [[ -z $6 ]]; then\n        echo \"ERROR: ${BASH_SOURCE[0]}\
    \ must be followed by a valid operand.\" >&2\n        exit 1\n    fi\n    if [[\
    \ -z $7 ]]; then\n        echo \"ERROR: ${BASH_SOURCE[0]} must be followed by\
    \ a valid operand.\" >&2\n        exit 1\n    fi\n    if [[ \"$5\" == \"+\" ]];\
    \ then\n        if [[ \"$4\" == \"+\" ]]; then\n            result=$(( $1 + $2\
    \ + $3 ))\n        elif [[ \"$4\" == \"-\" ]]; then\n            result=$(( $1\
    \ - $2 - $3 ))\n        elif [[ \"$4\" == \"*\" ]]; then\n            result=$((\
    \ $1 * $2 * $3 ))\n        elif [[ \"$4\" == \"/\" ]]; then\n            result=$((\
    \ $1 / $2 / $3 ))\n        elif [[ \"$4\" == \"**\" ]]; then\n            result=$((\
    \ $1 ** $2 ))\n        elif [[ \"$4\" == \"<\" ]]; then\n            if [[ $3\
    \ -le $2 ]]; then\n                result=$3\n            else\n             \
    \   result=$(( $2 ))\n            fi\n        elif [[ \"$4\" == \"<=\" | \"$4\"\
    \ == \"==\" | ", "    local op=\"$1\"\n    local operand=\"$2\"\n    local result\n\
    \    local length\n\n    local operator=\"$( echo \"$op\" | tr ' ' '\\n' | sort\
    \ -u )\"\n    local operand=\"$( echo \"$operand\" | tr ' ' '\\n' | sort -u )\"\
    \n    local operator_index=0\n    local operand1=0\n    local operand2=0\n\n \
    \   length=\"$( expr length \"$operand\" )\" \n    while [ $length -gt 0 ]\n \
    \   do\n        operator_index=$(( $operator_index + 1 ))\n        operand1=$((\
    \ $operand1 + ${operand[$operand1]} ))\n        operand2=$(( $operand2 + ${operand[$operand2]}\
    \ ))\n        length=$(( $length - 1 ))\n    done\n\n    # Calculate result\n\
    \    case \"$op\" in\n        '+')\n            result=$(( ${operand1} + ${operand2}\
    \ ))\n            ;;\n        '-')\n            result=$(( ${operand1} - ${operand2}\
    \ ))\n            ;;\n        '*')\n            result=$(( ${operand1} + ${operand2}\
    \ ))\n            ;;\n        '//')\n            result=$(( ${operand1} / ${operand2}\
    \ ))\n            ;;\n        '**')\n            result=$(( ${operand1} ^ ${operand2}\
    \ ))\n            ;;\n    esac\n\n    case \"$op\" in\n        '+')\n        \
    \    echo \"$( expr $result + $operand2 )\"\n            ;;\n        '-')\n  \
    \          echo \"$( expr $result - $operand2 )\"\n            ;;\n        '*')\n\
    \            echo \"$( expr $result * $operand2 )\"\n            ;;\n        '//')\n\
    \            echo \"$( expr $result / $operand2 )\"\n            ;;\n        '**')\n\
    \            echo \"$( expr $result ** $operand2 )\"\n            ;;\n    esac",
  "    # Initialize the operands list\n    operands=($2)\n\n    # Initialize the operators\
    \ list\n    operators=($1)\n\n    # Get the operands size \n    operandssize=${#operands[@]}\n\
    \n    # Get the operators size\n    operatorssize=${#operators[@]}\n\n    # Get\
    \ the size of the sum\n    sumsize=$(( $operatorssize - 1 ))\n\n    # Get the\
    \ size of the product\n    productsize=$(( $sumsize - 1 ))\n\n    # Get the size\
    \ of the quotient\n    quotientsize=$(( $productsize - 1 ))\n\n    # Get the size\
    \ of the exponent\n    exponentsize=$(( $quotientsize - 1 ))\n\n    # Initialize\
    \ the sum\n    sum=0\n\n    # Initialize the product\n    product=1\n\n    # Initialize\
    \ the quotient\n    quotient=1\n\n    # Initialize the exponent\n    exponent=1\n\
    \n    # Initialize the sum-array\n    sumarray=()\n\n    # Initialize the product-array\n\
    \    productarray=()\n\n    # Initialize the quotient-array\n    quotientarray=()\n\
    \n    # Initialize the exponent-array\n    exponentarray=()\n\n    # Initialize\
    \ the product-array\n    # Initialize the quotient-array\n    # Initialize the\
    \ exponent-array\n    # Calculate the operators ( sum, product, quotient, exponent\
    \ )\n    for i in $(eval echo \"{0..$(($operatorssize-1))}\")\n    do\n      \
    \  # Increment the sum size\n        sumsize=$(( $sumsize + 1 ))\n\n        #\
    \ Increment the product size\n        productsize=$(( $productsize + 1 ))\n\n\
    \        # Increment the quotient size\n        quotientsize=$(( $quotientsize\
    \ + 1 ))\n\n        # Increment the exponent size\n        exponentsize=$(( $exponentsize\
    \ + 1 ))\n\n        # Calculate the sum\n        sum=$(( $sum + ${operands[$((\
    \ $i ))]} ))\n\n        # Calculate the product\n        product=$(( $product\
    \ * ${operands[$(( $i ))]} ))\n\n        # Calculate the quotient\n        quotient=$((\
    \ $quotient / ${operands[$(( $i ))]} ))\n\n        # Calculate the exponent\n\
    \        exponent=$(( $exponent * ${operands[$(( $i ))]} ))\n    done\n\n    #\
    \ Add the sum to the products array\n    productarray+=( $( echo $sum ) )\n\n\
    \    # Add the product to the quotients array\n    quotientarray+=( $( echo $product\
    \ ) )\n\n    # Add the exponent to the exponents array\n    exponentarray+=( $(\
    \ echo $exponent ) )\n\n    # Add the operators to the sum-array\n    sumarray+=(\
    \ $( echo $operators ) )\n\n    # Add the operators to the product-array\n   \
    \ productarray", "\toperator=$1\n\toperand=$2\n\n\tresult=0\n\t\n\tfor ((i=0;\
    \ i<${#operator[@]}; i++))\n\tdo\n\t\tresult=$((result+${operand[i]}*${operator[i]}))\n\
    \tdone\n\techo $((result))", "    local operator operand\n    operator=$1\n  \
    \  operand=$2\n    local res\n    local str\n    local i\n    local op\n    local\
    \ num\n    local i\n\n    i=0;\n    while [ $i -lt $((${#operator[@]} - 1)) ];\
    \ do\n        op=${operator[$i]}\n        num=${operand[$i]}\n        if [ \"\
    $op\" == \"+\" ] && (( $((${#num}) == 1 )) || [[ $num == 0 ]]; then\n        \
    \    ((res = res + num))\n        elif [ \"$op\" == \"-\" ] && (( $((${#num})\
    \ == 1 )) || [[ $num == 0 ]]; then\n            ((res = res - num))\n        elif\
    \ [ \"$op\" == \"*\" ] && (( $((${#num}) == 1 )) || [[ $num == 0 ]]; then\n  \
    \          ((res = res * num))\n        elif [ \"$op\" == \"//\" ] && (( $((${#num})\
    \ == 1 )) || [[ $num == 0 ]]; then\n            ((res = res / num))\n        elif\
    \ [ \"$op\" == \"**\" ] && (( $((${#num}) == 1 )) || [[ $num == 0 ]]; then\n \
    \           ((res = res * num))\n        else\n            echo \"Illegal operation\
    \ $op\"\n            exit 0\n        fi\n        ((i++))\n    done\n    echo \"\
    $res\"", "  local OPT\n  local OPTVAL\n  local -a OPTLIST\n  local -a OPTVALLIST\n\
    \  local OPTINDEX\n\n  # Get command line options\n  while getopts \"h?\" OPT;\
    \ do\n    case \"${OPT}\" in\n      h ) echo \"Usage: do_algebra [--help] [--operators=\\\
    \"+,-,*,/,//,**\\\"] [--operands=\\\"1+2,3+4,5+6,7-8,9-10\\\"]\"\n      echo \"\
    \  -h          Print this help message.\"\n      echo \"  --operators=<op>  Comma-separated\
    \ list of algebraic operations [default=\\\"+,-,*,/,//,**\\\"]\"\n      echo \"\
    \  --operands=<op>   Comma-separated list of operands [default=\\\"1+2,3+4,5+6,7-8,9-10\\\
    \"]\"\n      echo \"  --verbose     Print debug messages.\"\n      echo \"  --debug\
    \       Print debug messages.\"\n      exit 0\n      ;;\n      ? ) echo \"Invalid\
    \ option: -${OPT}\"\n      exit 1\n      ;;\n    esac\n  done\n\n  OPTLIST=( \"\
    ${OPTARG}\" )\n  OPTVALLIST=( \"${OPTARG}\" )\n  # Set default command line options\n\
    \  OPTINDEX=0\n  while [ \"$OPTINDEX\" -lt \"${#OPTLIST[@]}\" ]; do\n    if [\
    \ ${OPTLIST[$OPTINDEX]} != -- ]; then\n      OPT=\"${OPTLIST[$OPTINDEX]}\"\n \
    \     OPTVAL=\"${OPTVALLIST[$OPTINDEX]}\"\n      OPTINDEX=$(( OPTINDEX + 1 ))\n\
    \    fi\n  done\n  unset OPT\n  unset OPTVAL\n\n  # Print command line options\n\
    \  local OPTNAME=\n  while [ \"$OPTINDEX\" -lt \"${#OPTLIST[@]}\" ]; do\n    OPTNAME=\"\
    ${OPTLIST[$OPTINDEX]}\"\n    OPTVAL=\"${OPTVALLIST[$OPTINDEX]}\"\n    OPTINDEX=$((\
    \ OPTINDEX + 1 ))\n    printf \"%s: %s\\n\" \"${OPTNAME}\" \"${OPTVAL}\"\n  done\n\
    \  printf \"\\n\"\n\n  # Print debug messages\n  if [ \"${OPTINDEX}\" -eq \"${#OPTLIST[@]}\"\
    \ ]; then\n    printf \"Debug messages:\\n\"\n    local ", "  # Get first list\
    \ elements\n  operator=\"$1\"\n  operand1=\"$2\"\n  \n  # Get second list elements\n\
    \  operator=\"$1\"\n  operand2=\"$2\"\n  \n  # Check if both lists have same number\
    \ of elements\n  if [ \"$#\" -ne 2 ]; then\n    echo \"Usage: do_algebra <operator\
    \ list> <operand 1 list> <operand 2 list>\"\n    exit 1\n  fi\n  \n  # Check if\
    \ the operator is one of basic algebra operations\n  operator_in_list=\"$(printf\
    \ \"%s\" \"${operator}\")\"\n  operand1_in_list=\"$(printf \"%s\" \"${operand1}\"\
    )\"\n  operand2_in_list=\"$(printf \"%s\" \"${operand2}\")\"\n  \n  if [ \"$operator_in_list\"\
    \ != \"-\" ]; then\n    # Check if the operand is in operand list 1 \n    if [\
    \ \"$operand1_in_list\" != \"$operand2_in_list\" ]; then\n      echo \"Illegal\
    \ operands: operands ${operand1} and ${operand2} are not in the same list\"\n\
    \      exit 1\n    fi\n  fi\n  \n  # Build new expression and evaluate it\n  new_expression=\"\
    $(printf \"(%s %s %s)\" ${operand1} ${operator} ${operand2})\"\n  result=\"$(eval\
    \ \"$new_expression\")\"\n  \n  echo \"${result}\"", "  local operator\n  local\
    \ operand\n  \n  local result\n  local length\n\n  operator=$1\n  operand=$2\n\
    \n  length=${#operator[@]}\n  if [[ $((length - 1)) == $((${#operand[@]} - 1))\
    \ ]]; then\n    length=$((${#operand[@]} - 1))\n  fi\n\n  result=0\n  for i in\
    \ $(seq 0 $(($length - 1))); do\n    if [[ $((operand[$i] == \"+\")) ]]; then\n\
    \      result=$((result + ${operand[$((i + 1))]}))\n    elif [[ $((operand[$i]\
    \ == \"-\")) ]]; then\n      result=$((result - ${operand[$((i + 1))]}))\n   \
    \ elif [[ $((operand[$i] == \"*\"))]]; then\n      result=$((result * ${operand[$((i\
    \ + 1))]}))\n    elif [[ $((operand[$i] == \"//\"))]]; then\n      result=$((result\
    \ // ${operand[$((i + 1))]}))\n    elif [[ $((operand[$i] == \"**\"))]]; then\n\
    \      result=$((result ** ${operand[$((i + 1))]}))\n    fi\n  done\n  echo $result"]
stop_tokens:
- "\n}"
