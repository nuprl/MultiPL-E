language: sh
name: HumanEval_125_split_words
results:
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    local i\n    local w\n\
    \    local words\n    local count\n    local max\n    local lowerCount\n    local\
    \ commaCount\n    local oddCount\n    local cur\n    local prev\n    local ret\n\
    \n    # split the string on whitespace\n    words=( $1 )\n    max=${#words[@]}\n\
    \    words=( $words[1] )\n\n    # count the number of words\n    count=0\n   \
    \ for w in \"${words[@]}\"; do\n        ((count++))\n    done\n\n    # count the\
    \ number of lower case letters\n    lowerCount=0\n    for w in \"${words[@]}\"\
    ; do\n        if [[ $w == [a-zA-Z] ]]; then\n            lowerCount=$((lowerCount\
    \ + 1))\n        fi\n    done\n\n    # count the number of commas and the number\
    \ of spaces in one word\n    commaCount=0\n    for w in \"${words[@]}\"; do\n\
    \        if [[ $w == ,* ]]; then\n            commaCount=$((commaCount + 1))\n\
    \        elif [[ $w == [ ]*$ ]]; then\n            commaCount=$((commaCount +\
    \ 1))\n        fi\n    done\n\n    # count the number of words with odd number\
    \ of letters\n    oddCount=0\n    for w in \"${words[@]}\"; do\n        if [[\
    \ $w == [a-zA-Z] ]]; then\n            ((oddCount++))\n        fi\n    done\n\n\
    \    # count the number of commas and spaces in one word (case when all words\
    \ are in lowercase)\n    if [[ ${count} -eq ${#words[@]} ]]; then\n        oddCount=0\n\
    \        for w in \"${words[@]}\"; do\n            if [[ $w == ,* ]]; then\n \
    \               oddCount=$((oddCount + 1))\n            elif [[ $w == [ ]*$ ]];\
    \ then\n                oddCount=$((oddCount + 1))\n            fi\n        done\n\
    \    fi\n\n    # check if the words have more than 2 letters\n    if [[ ${count}\
    \ -gt 2 ]]; then\n        ret=true\n    else\n        ret=false\n    fi\n\n  \
    \  # check if the words have odd order\n    if [[ ${oddCount} -gt 0 ]]; then\n\
    \        ret=false\n    fi\n\n    # check if there is no commas\n    if [[ ${commaCount}\
    \ -gt 0 ]]; then\n        ret=false\n    fi\n\n    # check if all words are in\
    \ lowercase\n    if [[ ${lowerCount} -eq 0 ]]; then\n        ret=false\n    fi\n\
    \n    if [[ ${ret} = true ]]; then\n        # return the words\n        echo \"\
    ${words[@]}\"\n    else\n        # return the number of lowercase letters\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpglwxnrel.sh: line 48: syntax error in conditional expression

    /tmp/tmpglwxnrel.sh: line 48: syntax error near `]*$''

    /tmp/tmpglwxnrel.sh: line 48: `        elif [[ $w == [ ]*$ ]]; then''

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n\techo \"$1\" | sed 's/[\\\
    t ]*/ /g'\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    # initialize local variables\n\
    \    local split=$1\n    local firstword=()\n    local secondword=()\n    local\
    \ result=()\n    local letter=\n    local comma=\n    local whitespace=\n    local\
    \ comma_count=0\n    local whitespace_count=0\n    local letter_count=0\n\n  \
    \  # initialize flag\n    local first_flag=1\n    local second_flag=1\n\n    #\
    \ iterate through string\n    for letter in ${split}; do\n\n        # if the current\
    \ letter has a comma in it\n        if [[ \"$letter\" == \",\" ]]; then\n    \
    \        # increment comma count\n            ((comma_count+=1))\n        # if\
    \ current letter has a whitespace in it\n        elif [[ \"$letter\" == \" \"\
    \ ]]; then\n            # increment whitespace count\n            ((whitespace_count+=1))\n\
    \        # if both comma and whitespace counts are even\n        elif (( comma_count%2\
    \ == 0 && whitespace_count%2 == 0 )) && [[ \"$letter\" == [a-z] ]]; then\n   \
    \         # append word to result array\n            firstword+=(\"$letter\")\n\
    \        # if whitespace count is odd\n        elif (( whitespace_count%2 == 1\
    \ )) && [[ \"$letter\" == [a-z] ]]; then\n            # append word to result\
    \ array\n            secondword+=(\"$letter\")\n        # if comma count is odd\n\
    \        elif (( comma_count%2 == 1 )) && [[ \"$letter\" == [a-z] ]]; then\n \
    \           # append word to result array\n            result+=(\"${firstword[@]}\
    \ ${secondword[@]}\")\n            # reset letter count\n            letter_count=0\n\
    \            # reset whitespace count\n            whitespace_count=0\n      \
    \      # reset first word and second word arrays\n            firstword=()\n \
    \           secondword=()\n        fi\n        # if the current letter doesn't\
    \ have a comma in it\n        if [[ \"$letter\" != \",\" && \"$letter\" != \"\
    \ \" ]]; then\n            # increment letter count\n            ((letter_count+=1))\n\
    \        fi\n    # if the first word is not empty but second word is empty append\
    \ first word and reset letter count\n    elif [[ ${firstword[@]} != \"\" ]]; then\n\
    \        result+=(\"${firstword[@]}\")\n        letter_count=0\n        whitespace_count=0\n\
    \        firstword=()\n    # if the second word is not empty but first word is\
    \ empty append second word and reset letter count\n    elif [[ ${secondword[@]}\
    \ != \"\" ]]; then\n        result+=(\"${secondword[@]}\")\n        letter_count=0\n\
    \        whitespace_count=0\n        secondword=()\n    fi\n    # if the letter\
    \ count is even append first and second word and reset letter count\n\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy9z4gl6_.sh: line 65: syntax error near unexpected token `elif''

    /tmp/tmpy9z4gl6_.sh: line 65: `    elif [[ ${firstword[@]} != "" ]]; then''

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local _word=$1\n  local\
    \ _arr=()\n  if [[ \"$_word\" =~ ^[[:space:]]*$ ]]; then\n    _arr=(\"${_word//,/\
    \ }\")\n  else\n    _arr=(\"${_word//[a-z]/}\")\n  fi\n  echo \"${_arr[@]}\"\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: -1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  # Return 0 for empty input\n\
    \  [ -z \"$1\" ] && return 0\n\n  # Split into words\n  IFS=' ' read -r -a words\
    \ <<< \"$1\"\n\n  # Add words to array\n  for (( i=1 ; i<${#words[@]} ; i++ ));\
    \ do\n    words[${#words[@]}]=\"$words[$i]\"\n  done\n\n  # Strip leading/trailing\
    \ whitespace\n  words=$(echo ${words[*]} | sed 's/^ *//;s/ *$//')\n\n  # If no\
    \ whitespace found, split on commas\n  [[ ! \"${#words[@]}\" -eq ${#words} ]]\
    \ && words=${words/,/}\n\n  # Return number of lower-case letters in alphabet\
    \ with odd order\n  echo ${words[@]}\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660054539
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    local words=$1\n   \
    \ if [ -z \"$words\" ]; then\n        echo \"split_words: Words cannot be empty\"\
    \n        return 1\n    fi\n\n    # Split on whitespace\n    # - split on whitespace,\
    \ comma if no commas exists in the words\n    # - split on comma, whitespace if\
    \ no whitespaces exists in the words\n    # - split on whitespace, comma and whitespace\
    \ if commas and whitespaces exists in the words\n    words=$( echo \"$words\"\
    \ | sed 's/\\s/,/g' | tr '[:upper:]' '[:lower:]' )\n\n    # Remove any words that\
    \ are just whitespace\n    # - remove all words that are just whitespace\n   \
    \ words=$( echo \"$words\" | grep -v '^$' )\n\n    # Remove any words that are\
    \ just commas\n    # - remove all words that are just commas\n    words=$( echo\
    \ \"$words\" | grep -v '^,$' )\n\n    # Remove any words that are just commas\n\
    \    # - remove all words that are just commas\n    words=$( echo \"$words\" |\
    \ grep -v '^,$' )\n\n    # Remove any words that are just commas\n    # - remove\
    \ all words that are just commas\n    words=$( echo \"$words\" | grep -v '^,$'\
    \ )\n\n    # Remove any words that are just commas\n    # - remove all words that\
    \ are just commas\n    words=$( echo \"$words\" | grep -v '^,$' )\n\n    # Remove\
    \ any words that are just commas\n    # - remove all words that are just commas\n\
    \    words=$( echo \"$words\" | grep -v '^,$' )\n\n    # Remove any words that\
    \ are just commas\n    # - remove all words that are just commas\n    words=$(\
    \ echo \"$words\" | grep -v '^,$' )\n\n    # Remove any words that are just commas\n\
    \    # - remove all words that are just commas\n    words=$( echo \"$words\" |\
    \ grep -v '^,$' )\n\n    # Remove any words that are just commas\n    # - remove\
    \ all words that are just commas\n    words=$( echo \"$words\" | grep -v '^,$'\
    \ )\n\n    # Remove any words that are just commas\n    # - remove all words that\
    \ are just commas\n    words=$( echo \"$words\" | grep -v '^,$' )\n\n    # Remove\
    \ any words that are just commas\n    # - remove all words that are just commas\n\
    \    words=$( echo \"$words\" | grep -v '^,$' )\n\n    # Remove any words that\
    \ are just comm\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local input_words=\"${1}\"\
    \n  # Split words separated by whitespace\n  echo \"${input_words//[[:space:]]}\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local input=\"$1\"\n \
    \ IFS=', ' read -r -a words <<< \"$input\"\n  local comma_count=$(echo \"${input[*]}\"\
    \ | tr \",\" ' ' | tr ' ' '\\n')\n  local lowercase_count=$(( ${#words[*]} - 1\
    \ ))\n  echo \"$comma_count,$lowercase_count\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n\techo \"$1\" | sed -e 's/[[:space:]]*\\\
    ([A-Za-z0-9]*\\)[[:space:]]*/\\1 /g' | sed -e 's/,//g'\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    # Split $1 into words\
    \ on spaces, unless you find no space on which you split on commas\n    local\
    \ IFS=$',\\n' IFS=' '\n    local words=( $1 )\n    local count=0\n    for word\
    \ in ${words[@]}; do\n        ((count+=(${#word} % 2)))\n    done\n    if [ ${count}\
    \ -eq 0 ]; then\n        echo \"${words[@]}\"\n    else\n        echo \"${words[@]},\"\
    \n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local words=\"$1\";\n\
    \  local whitespace=\"^\\s*$\";\n  local commas=\"^\\s*,\\s*$\";\n  local lowercase_letters=\"\
    ^([a-z][a-z]?)\";\n\n  local words_in_words=\"$words\"\n  # remove whitespaces\
    \ from the beginning\n  words_in_words=\"${words#\"$whitespace\"}\";\n  # remove\
    \ whitespaces from the end\n  words_in_words=\"${words_in_words%%\"$whitespace\"\
    }\";\n  # remove commas\n  words_in_words=\"${words_in_words##\"$commas\"}\";\n\
    \  # remove commas and whitespace after the first letter\n  words_in_words=\"\
    ${words_in_words%%\"$lowercase_letters\"}\"\n  words_in_words=\"${words_in_words#\"\
    $lowercase_letters\"}\"\n\n  local len=\"${#words_in_words}\"\n  if [ \"$len\"\
    \ -gt 0 ]; then\n    local odd=\"^((?<=^[a-z])(?=^[a-z][a-z])(?=^[a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z])(?=^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6c563mzc.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmp6c563mzc.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    local s=\"$1\"\n   \
    \ IFS=\",\" read -a words <<< \"$s\"\n    echo \"${words[*]}\"\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    local words result\n\
    \    local -i word_size word_counter word_start word_end word_counter letter_size\n\
    \    IFS=\" [a-zA-Z]\" read -ra words <<< \"$1\"\n    word_size=${#words[@]}\n\
    \    word_counter=0\n    word_start=1\n    word_end=word_size\n    letter_size=${#IFS}\n\
    \    while ((word_counter < word_size)) ; do\n        word_end=$((word_start +\
    \ word_size))\n        if ((word_start <= word_end)); then\n            result+=(${words[word_start:word_end]}\n\
    \        else\n            result+=(${words[word_start:word_size]}\n        fi\n\
    \        word_start=$((word_end + 1))\n        word_counter=$((word_counter +\
    \ 1))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi26x1w0p.sh: line 25: syntax error near unexpected token `(''

    /tmp/tmpi26x1w0p.sh: line 25: `            result+=(${words[word_start:word_size]}''

    /tmp/tmpi26x1w0p.sh: line 26: syntax error near unexpected token `fi''

    /tmp/tmpi26x1w0p.sh: line 26: `        fi''

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local split=$1\n  local\
    \ words=$(echo $split | tr ' ' '\\n' | sort | uniq)\n  local count=0\n  local\
    \ lowercases=0\n  local lowercases_odd=0\n  local lowercases_even=0\n  local odd=0\n\
    \  local even=0\n  local comma\n  local result=\"\"\n  while read -r word; do\n\
    \    lowercases=$((lowercases+1))\n    if [[ ${#word} -eq 0 ]]; then continue;\
    \ fi\n    comma=$(echo $word | cut -d \",\" -f 1)\n    count=$((count+1))\n  \
    \  if [[ \"${comma}\" == \"\" ]]; then\n      even=$((even+1))\n      comma=$(echo\
    \ $word | cut -d \",\" -f 2)\n    fi\n    if [[ ${#comma} -eq 0 ]]; then continue;\
    \ fi\n    if [[ ${#comma} -eq 1 ]]; then\n      if [[ ${lowercases} -eq 1 ]];\
    \ then\n        lowercases_odd=$((lowercases_odd+1))\n      else\n        lowercases_even=$((lowercases_even+1))\n\
    \      fi\n      if [[ ${lowercases} == 0 ]]; then\n        odd=$((odd+1))\n \
    \     fi\n      result=$result\" \"${comma}\"\n      count=$((count+1))\n    elif\
    \ [[ ${#comma} -eq 2 ]]; then\n      if [[ ${lowercases} -eq 1 ]]; then\n    \
    \    lowercases_odd=$((lowercases_odd+1))\n      else\n        lowercases_even=$((lowercases_even+1))\n\
    \      fi\n      if [[ ${lowercases} == 2 ]]; then\n        odd=$((odd+1))\n \
    \     fi\n      comma=$(echo $word | cut -d \",\" -f 2)\n      even=$((even+1))\n\
    \      comma=$(echo $word | cut -d \",\" -f 1)\n      result=$result\" \"${comma}\"\
    \n      count=$((count+1))\n    fi\n  done < <(echo $words | tr \",\" \" \")\n\
    \  echo $result | sed -e 's/ /,/g' -e 's/^/0/' -e 's/0//g' -e 's/1//g' -e 's/,/\
    \ /'\n  echo $lowercases\n  echo $lowercases_odd\n  echo $lowercases_even\n  echo\
    \ $odd\n  echo $even\n  echo $count\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local string=$1\n  local\
    \ words=$(echo $string | sed -e 's/[[:space:]]\\+/, /g')\n  local count=0\n  local\
    \ i=0 j=0\n  for word in ${words//,/ }; do\n    ((i++))\n    ((j++))\n    if [[\
    \ $word =~ ^[[:lower:]]+(,[[:lower:]]+)*$ ]]; then\n      ((count++))\n    fi\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    local -n ws=$1\n   \
    \ local -n o=$2\n    local -n c=$3\n    local -n a=$4\n    local -n r=$5\n   \
    \ local -n e=$6\n    local -i cidx=0\n    local -i ridx=0\n    local -i eidx=0\n\
    \    local -i aidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local -i alen=0\n\
    \    local -i oidx=0\n    local -i ridx=0\n    local -i eidx=0\n    local \n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4zkjlnsh.sh: line 12: local: `Hello world\!'': invalid variable
    name for name reference

    /tmp/tmp4zkjlnsh.sh: line 13: local: `'': not a valid identifier

    /tmp/tmp4zkjlnsh.sh: line 14: local: `'': not a valid identifier

    /tmp/tmp4zkjlnsh.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp4zkjlnsh.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp4zkjlnsh.sh: line 17: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  local str=\"$1\"\n  local\
    \ len=\"${#str}\"\n  if [[ $len == 0 ]]; then echo \"0\"; return 0; fi\n  if [[\
    \ $len == 1 ]]; then echo \"$str\"; return 0; fi\n  local i=2\n  local last_space=false\n\
    \  local count=0\n  while [[ $i -le $len ]]; do\n    local c=$(echo \"$str\" |\
    \ sed -n \"${i},1p\")\n    if [[ \"$c\" == \" \" ]]; then last_space=true; elif\
    \ [[ \"$last_space\" == true ]]; then last_space=false; else echo \"$c\"; last_space=false;\
    \ fi\n    i=$(($i+1))\n  done\n  echo \"$count\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  # Split on whitespace\
    \ (first character)\n  case ${1:0:1} in\n    \" \") echo \"$1\" | tr \"[:upper:]\"\
    \ \"[:lower:]\"\n      ;;\n  esac\n\n  # Split on commas (second character)\n\
    \  case ${1:1:1} in\n    \",\") echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n\
    \      ;;\n  esac\n\n  # Split on commas (third character)\n  case ${1:2:1} in\n\
    \    \",\") echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n      ;;\n  esac\n\n\
    \  # Split on commas (fourth character)\n  case ${1:3:1} in\n    \",\") echo \"\
    $1\" | tr \"[:upper:]\" \"[:lower:]\"\n      ;;\n  esac\n\n  # Split on commas\
    \ (fifth character)\n  case ${1:4:1} in\n    \",\") echo \"$1\" | tr \"[:upper:]\"\
    \ \"[:lower:]\"\n      ;;\n  esac\n\n  # Split on commas (sixth character)\n \
    \ case ${1:5:1} in\n    \",\") echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n\
    \      ;;\n  esac\n\n  # Split on commas (seventh character)\n  case ${1:6:1}\
    \ in\n    \",\") echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n      ;;\n  esac\n\
    \n  # Split on commas (eighth character)\n  case ${1:7:1} in\n    \",\") echo\
    \ \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n      ;;\n  esac\n\n  # Split on commas\
    \ (ninth character)\n  case ${1:8:1} in\n    \",\") echo \"$1\" | tr \"[:upper:]\"\
    \ \"[:lower:]\"\n      ;;\n  esac\n\n  # Split on commas (tenth character)\n \
    \ case ${1:9:1} in\n    \",\") echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n\
    \      ;;\n  esac\n\n  # Split on commas (eleventh character)\n  case ${1:10:1}\
    \ in\n    \",\") echo \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n      ;;\n  esac\n\
    \n  # Split on commas (twelfth character)\n  case ${1:11:1} in\n    \",\") echo\
    \ \"$1\" | \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwz33k67z.sh: line 81: syntax error near unexpected token `}''

    /tmp/tmpwz33k67z.sh: line 81: `}''

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n  # \"local\" variable holding\
    \ the value of $1\n  local TEXT=$1\n  # \"local\" variable holding the array of\
    \ words\n  local WORDS=()\n  # \"local\" variable holding the number of occurrences\
    \ of whitespace\n  local whitespace=0\n  # \"local\" variable holding the number\
    \ of occurrences of comma\n  local comma=0\n  # \"local\" variable holding the\
    \ number of occurrences of lowercase letters with odd order in the alphabet\n\
    \  local lowercaseOdd=0\n  # \"local\" variable holding the number of occurrences\
    \ of lowercase letters with even order in the alphabet\n  local lowercaseEven=0\n\
    \  # \"local\" variable holding the number of lowercase letters\n  local lowercase=0\n\
    \  # \"local\" variable holding the number of lowercase letters with odd order\
    \ in the alphabet\n  local lowercaseOddCount=0\n  # \"local\" variable holding\
    \ the number of lowercase letters with even order in the alphabet\n  local lowercaseEvenCount=0\n\
    \  # \"local\" variable holding the number of letters in the text with no whitespace\n\
    \  local lettersCount=0\n  # \"local\" variable holding the number of letters\
    \ in the text with no whitespace\n  local lettersCountNoWhitespace=0\n  # \"local\"\
    \ variable holding the number of letters in the text with no whitespace\n  local\
    \ lettersCountNoWhitespaceNoCommas=0\n\n  local firstChar\n\n  # Loops through\
    \ the string in reverse\n  for (( i = ${#TEXT}; i; i-- )); do\n    # Sets a \"\
    local\" variable to the first letter of the current word\n    firstChar=${TEXT:0:1}\n\
    \    # If whitespaces exist in the current word\n    if [[ -z ${TEXT:0:1} ]];\
    \ then\n      # \"local\" variable holding the array of words\n      WORDS+=(\
    \ \"$TEXT\" )\n      # \"local\" variable holding the number of occurrences of\
    \ whitespace\n      whitespace+=1\n    else\n      # \"local\" variable holding\
    \ the number of occurrences of whitespace\n      whitespace=0\n      # \"local\"\
    \ variable holding the number of occurrences of comma\n      comma+=1\n      #\
    \ \"local\" variable holding the number of occurrences of lowercase letters with\
    \ odd order in the alphabet\n      lowercaseOdd+=1\n      # \"local\" variable\
    \ holding the number of occurrences of lowercase letters with even order in the\
    \ alphabet\n      lowercaseEven+=1\n      # \"local\" variable holding the number\
    \ of lowercase letters\n      lowercase+=1\n      # \"local\" variable holding\
    \ the number of lowercase letters with odd order in the alphabet\n      lowercaseOddCount+=1\n\
    \      # \"local\" variable holding the number of lowercase letters with even\
    \ order in the alphabet\n      lowercaseEvenCount+=1\n      # \"local\" variable\
    \ holding the number of letters in the \n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz0juwee0.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpz0juwee0.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660054534
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\n#\
    \ split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n# split_words(\"\
    abcdef\") == 3\n#\n# $1 is a string\nsplit_words() {\n    local IFS=,\n      \
    \  arr=($1 \"\\$@\")\n    arr=(${arr[*]//*[![:space:]]/})\n    arr=(${arr[*]//*[[:space:]]/})\n\
    \    arr=(${arr[*]//*[[:lower:]]/})\n    arr=(${arr[*]//*[[:upper:]]/})\n    arr=(${arr[*]//*[[:alnum:]]/})\n\
    \    echo ${arr[*]}\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660054534
