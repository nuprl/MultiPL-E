name: HumanEval_23_strlen
language: sh
prompt: "#!/bin/bash\n# Return length of given string\n# >>> strlen('')\n# 0\n# >>>\
  \ strlen('abc')\n# 3\n#\n# $1 is a string\nstrlen() {\n"
tests: "}\n\ncandidate() {\n    strlen \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"\") = \"0\" ]]\n    [[ $(candidate \"x\") = \"1\" ]]\n    [[ $(candidate \"\
  asdasnakj\") = \"9\" ]]\n}\n\nrun_test"
completions: ["\tlocal i num\n\n\tnum=-1\n\tfor ((i=0; i < ${#1}; i++)); do\n\t\t\
    let num=$num+${!i}\n\tdone\n\techo $num", "  local i=0\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    local j=${#1}\n    local k=1\n    local len=0\n    while ((\
    \ k<j )); do\n      len=$((len+${1:k}))\n      k=$((k+1))\n    done\n    echo\
    \ ${len}\n  done", '  echo "$1" | wc -c', "  local STRING=$1\n  local LEN=0\n\
    \  for CHAR in ${STRING}; do\n    ((LEN++))\n  done\n  echo \"${LEN}\"", '    echo
    -n "$1" | wc -c', "   [ \"${#1}\" -eq \"0\" ] && return 0 || \\\n   [ \"${#1}\"\
    \ -gt \"0\" ] && return \"${#1}\" || \\\n   awk -F'[][]' '{print length($1)}'",
  "  len=0\n  while [[ \"$1\" =~ .*[^0-9]$ ([^0-9]+)? ]]; do\n    (( len++))\n   \
    \ shift\n  done\n  echo ${len}", "  echo -n ${#$1} | cut -d ' ' -f1", "    [[\
    \ ${#1} -gt 0 ]] &&\n        echo ${#1}", "  str=${1}\n  echo \"${#str}\"", "\t\
    local str\n\tstr=\"${1}\"\n\t[[ \"${#str}\" -gt 0 ]] && printf '%s' \"${#str}\"",
  "    local STR\n    STR=$1\n    echo $((${#STR}))", "  printf '%s' \"$1\" | wc -c",
  "    test -z \"$1\" || return 1\n    echo $1 | wc -c", '   [ "${#1}" -eq 0 ] &&
    echo "0 Bytes" || echo "${#1}" Bytes', "    if [[ -z \"$1\" ]] ; then\n      \
    \  return 1\n    fi\n    echo \"${#1}\"", "    # http://stackoverflow.com/questions/7629401/how-do-i-find-the-length-of-a-string-in-linux\n\
    \    local -r input=\"${1}\"\n    [ -z \"${input}\" ] && return 0\n\n    # find\
    \ length of input using len\n    local -r input_length=$(len \"${input}\")\n \
    \   [ \"${input_length}\" -eq 0 ] && return 0\n\n    # convert it to a positive\
    \ integer\n    local -r input_length_of_string=$(expr \"${input_length}\" \"+\"\
    )\n\n    # return result\n    echo \"${input_length_of_string}\"", '    [[ $1
    == "" ]] && echo "0" || echo "${#1}"', "    echo ${#$1} | sed 's/\\([0-9]*\\)\
    \ .*/\\1/g'", "  local l\n  local str=\"$1\"\n  l=0\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    ((l++))\n  done\n  echo $l"]
stop_tokens:
- "\n}"
