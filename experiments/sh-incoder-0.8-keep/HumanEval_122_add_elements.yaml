name: HumanEval_122_add_elements
language: sh
prompt: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer k,\
  \ return\n# the sum of the elements with at most two digits from the first k elements\
  \ of arr.\n# Example:\n# Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n# Output:\
  \ 24 # sum of 21 + 3\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <=\
  \ len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
  \ {\n"
tests: "}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
  \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6\
  \ 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"\
  4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
completions: ["  local arr\n  local k\n  read -a arr <<< \"$1\"\n  k=\"$2\"\n  local\
    \ sum=0\n  for ((i=k; i<${#arr[@]}; i++)); do\n    ((sum+=arr[i]))\n  done\n \
    \ echo \"$sum\"", "    arr=($1)\n    k=$(echo $2 | cut -d\" \" -f1)\n    echo\
    \ $(( ${arr[0]} + ${arr[1]} + ${arr[2]} + ${arr[3]} ))", "\tlocal -r elements=$1\n\
    \tlocal -r k=$2\n\n\tlocal nums=()\n\tlocal sum=0\n\n\tfor element in ${elements[@]};\
    \ do\n\t\t((sum+=$((10#${element})))\n\t\tnums+=(${element})\n\tdone\n\t((k--))\n\
    \t((sum+=${nums[k]}))\n\techo $((sum))", "    local arr=$1\n    local k=$2\n \
    \   local sum\n\n    # Initialize a sum\n    sum=0\n\n    # Iterate over the first\
    \ k elements of arr\n    for i in $(seq 0 $((k-1))); do\n        # Add the i-th\
    \ element of arr to sum\n        sum=$(( $sum + ${arr[i]} ))\n    done\n\n   \
    \ # Return the sum\n    echo \"$sum\"", "    local arr k\n    arr=\"$1\"\n   \
    \ k=\"$2\"\n    \n    # Convert the list to array and append an extra element\
    \ with value 0.\n    arr=(${arr[@]} 0)\n    \n    # Sort the array to improve\
    \ performance\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if\
    \ [[ \"$arr[$i]\" -gt \"$arr[$((i+1))]\" ]]; then\n            arr[i]=\"$arr[$i]\"\
    \n        fi\n    done\n    \n    local sum\n    sum=0\n    \n    # Find the first\
    \ k elements\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local j\n      \
    \  for ((j=0; j<$k; j++)); do\n            local sum\n            sum=\"$((${arr[i]}\
    \ + ${arr[j]}))\"\n            if [[ ${sum} -gt $arr[$((i+j))] ]]; then\n    \
    \            break\n            else\n                sum=0\n            fi\n\
    \        done\n        if [[ $sum -gt $arr[$((i+j))] ]]; then\n            break\n\
    \        else\n            sum=0\n        fi\n    done\n    \n    echo \"$sum\"",
  "    # Write your code here.\n    arr=$1\n    k=${2:-1000}\n    sum=0\n    for i\
    \ in `seq 1 $k`; do\n        if [ $i -lt ${#arr[*]} ]; then \n            sum=$(($sum+${arr[i]}))\n\
    \        fi\n    done\n    echo \"$sum\"", "    read -p \"Enter array elements\
    \ separated by space: \" arr\n    read -p \"Enter an integer for k: \" k\n   \
    \ i=0\n    while [ ${#arr[@]} -gt ${k} ]\n    do\n        arr[i]=${arr[i]}\n \
    \       let i++\n    done\n\n    i=${i}\n    sum=0\n    while [ $i -le ${#arr[@]}\
    \ ]\n    do\n        if [[ ${arr[$i]} == $(echo \"${arr[$i]}\" | cut -d' ' -f1)\
    \ ]] ; then\n            if [[ $(echo \"${arr[$i]}\" | cut -d' ' -f2) -gt $(echo\
    \ \"${arr[$i]}\" | cut -d' ' -f3) ]] ; then\n                let sum+=$(echo \"\
    ${arr[$i]}\" | cut -d' ' -f2)\n            else\n                let sum+=$(echo\
    \ \"${arr[$i]}\" | cut -d' ' -f1)\n            fi\n        fi\n        let i=$(($i+1))\n\
    \    done\n    echo $sum", "  read -r arr k\n  sum=$(echo $arr | tr ' ' '+')\n\
    \  sum=$(echo $sum | sed -e \"s/+([0-9])/\\1+/g\")\n  sum=$(echo $sum | sed -e\
    \ \"s/+([0-9][0-9])/\\2+/g\")\n  sum=$(echo $sum | sed -e \"s/+([0-9][0-9][0-9])/\\\
    1+\\2+/g\")\n  echo $sum", "  declare -n arr=$1\n  declare -n k=$2\n  declare\
    \ -n sum=0\n\n  local elem=${arr[$((k-1))]}\n\n  while (( k > 0 )); do\n    ((\
    \ k-- ))\n    (( sum += elem ))\n    (( elem /= 10 ))\n  done\n  echo $sum", " \
    \ arr=$1\n  k=$2\n  i=0\n  while ((i < k)) && (( ${#arr} > 0)); do\n    sum=0\n\
    \    sum=$((${arr[i]}+${arr[i+1]}))\n    ((i++))\n    ((i==k))\n    ((i==0))\n\
    \    arr[i]=$sum\n    arr[$((i-1))]=0 # clear element at index i-1\n  done\n \
    \ echo ${arr[@]}", "  local arr=$1\n  local k=$2\n  local result\n  local elem\n\
    \  result=0\n  for i in $(seq 0 $(( k )))\n  do\n    elem=${arr:$i:1}\n    if\
    \ [[ ${elem} =~ ^[0-9]$ ]] \\\n      && [[ $elem < 10 ]] \\\n      && [[ $elem\
    \ -gt $(( 10#$k )) ]]\n    then\n      result=$(( result + elem ))\n    fi\n \
    \ done\n  echo \"$result\"", "  local -r arr=\"$1\"\n  local -r k=\"$2\"\n  \n\
    \  if (( \"${#arr[@]}\" <= \"${k}\" )); then\n    return 0\n  fi\n\n  local -a\
    \ prefix\n  local -a suffix\n  local -a suffix_arr\n  local -a prefix\n  local\
    \ -a prefix_arr\n\n  # sort arr in ascending order\n  arr=( $(sort -r \"${arr[@]}\"\
    \ | head -n \"${k}\" ) )\n\n  # populate prefix and suffix_arr with elements up\
    \ to k\n  prefix=$( IFS=$'\\n' echo \"${arr[@]:0:k}\" )\n  suffix_arr=( $(IFS=$'\\\
    n' echo \"${arr[@]:k}\" ) )\n\n  # populate prefix and suffix_arr with elements\
    \ starting from k onwards\n  prefix=$( IFS=$'\\n' echo \"${arr[@]:k}\" )\n  suffix_arr=(\
    \ $(IFS=$'\\n' echo \"${arr[@]:0:k}\" ) )\n\n  local -r max_val=$( IFS=$'\\n'\
    \ echo \"${suffix_arr[@]:0:1}\" )\n  local -r result=\"\"\n\n  # process prefix\
    \ and suffix_arr individually to collect their sum\n  for (( i=1; i<k; i++ ));\
    \ do\n    # if the current element is the highest value in suffix_arr\n    if\
    \ [ \"${suffix_arr[i]}\" -eq \"${max_val}\" ]; then\n      # append the element\
    \ to result and stop looping further\n      result=$( IFS=$'\\n' echo \"${result}${prefix[i]}\"\
    \ )\n      break\n    fi\n  done\n\n  # process suffix_arr again to collect their\
    \ sum\n  for (( j=1; j<k; j++ )); do\n    # if the current element is the highest\
    \ value in suffix_arr\n    if [ \"${suffix_arr[j]}\" -eq \"${max_val}\" ]; then\n\
    \      # append the element to result and stop looping further\n      result=$(\
    \ IFS=$'\\n' echo \"${result}${suffix_arr[j]}\" )\n      break\n    fi\n  done\n\
    \n  # return result\n  return \"${result}\"", "  arr=$1\n  k=${2:-0}\n  for i\
    \ in ${arr[@]:0:k}\n  do\n    sum_var=$((i+sum_var))\n  done\n  echo $sum_var",
  "    local arr=($(echo $1 $2 | tr ' ' '\\n'))\n    local k=$3\n\n    local i=0\n\
    \    local sum=0\n    local last_two_digits=0\n    local j=0\n\n    while [ $i\
    \ -lt $k ]; do\n        (( sum += arr[i] ))\n        (( last_two_digits += arr[i]\
    \ % 10 ))\n        (( last_two_digits = last_two_digits > 9 ? last_two_digits\
    \ - 9 : last_two_digits ))\n        (( i += 1 ))\n    done\n\n    echo $sum",
  "  declare -a arr=( $1 )\n  declare -i k=$2\n  local sum\n  sum=0\n\n  if (( ${#arr[@]}\
    \ < k )) ; then\n    echo \"Input array shorter than k elements\"\n    return\
    \ 0\n  fi\n\n  for (( i=1; i<k; i++ )); do\n    sum=$(( sum + ${arr[$i]} ))\n\
    \  done\n\n  echo \"$sum\"", "  arr=$1\n  k=$2\n  len=${#arr[@]}\n  maxsum=0\n\
    \  for i in $(seq $k); do\n    if (( ${arr[$i]} > maxsum )); then\n      maxsum=${arr[$i]}\n\
    \    done\n  done\n  echo $(( maxsum + ${arr[@]:0:k} ))", "    local arr k\n \
    \   arr=\"$1\"; k=\"$2\"\n    local sum\n    sum=0\n    local i\n    for i in\
    \ \"${arr[@]}\"; do\n        if (( i < k )); then\n            continue\n    \
    \    fi\n        local j\n        j=\"$(($i - 1))\"\n        if (( j < k )); then\n\
    \            sum=$(( sum + $i ))\n        fi\n    done\n    echo \"$sum\"", " \
    \ IFS=' '\n  local arr k\n  arr=($1)\n  k=$2\n  local sum\n  sum=0\n  for i in\
    \ \"${arr[@]}\"; do\n    if [ $((k % 10)) -eq 0 ]; then\n      sum=$((sum + i))\n\
    \    fi\n    k=$((k / 10))\n  done\n  echo \"$sum\"", "    local -r arr=$1\n \
    \   local -r k=$2\n\n    local -n arr_rev=\"${arr[*]#??}\"\n    local len=${#arr_rev}\n\
    \n    # Sum element at index k\n    (( len > k )) && return 0\n    local sum=0\n\
    \    for (( i=1; i<k; i++ )); do\n        (( i < (len-k) )) && sum+=\"${arr_rev[i]}\"\
    \n    done\n    echo \"$sum\"", "    local arr=\"$1\"\n    local k=\"$2\"\n  \
    \  local sum\n    sum=0\n    for (( i=0; i<k; i++ )); do\n        if (( ${arr[i]}\
    \ > 9 )); then\n            sum=$(($sum+${arr[i]%10}))\n            arr[i]=${arr[i]/10}\n\
    \        fi\n    done\n    echo $sum"]
stop_tokens:
- "\n}"
