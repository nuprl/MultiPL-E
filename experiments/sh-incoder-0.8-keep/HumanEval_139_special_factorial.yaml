name: HumanEval_139_special_factorial
language: sh
prompt: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n"
tests: "}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
  \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
  ) = \"1\" ]]\n}\n\nrun_test"
completions: ["  local factorial\n  factorial=$(( $1 * $( factorial_factorial_loop\
    \ \"$1\" )))\n  printf \"$factorial\"", "    local n=$1\n    if [ $n -lt 1 ];\
    \ then\n        return 1\n    else\n        local factorial=1\n        while [\
    \ $n -gt 1 ]; do\n            factorial=$(( $factorial * $n ))\n            ((\
    \ n-- ))\n        done\n        echo $factorial\n    fi", "    if [[ \"${1}\"\
    \ -gt 0 ]]; then\n        # $2 holds the number of times to call the factorial\
    \ function\n        for i in $(seq 1 \"$2\"); do\n            factorial \"$1\"\
    ;\n        done\n    else\n        echo \"[ERROR]: Invalid input. No factorial\
    \ of negative numbers.\"\n        exit 0\n    fi", "  local NUMBER=$1\n  (( $NUMBER\
    \ > 0 )) && {\n    echo \"$NUMBER!\"\n    local C=1\n    local D=0\n    while\
    \ [ $C -lt $NUMBER ]\n    do\n      let \"D+=1\"\n      let \"C*=$D\"\n    done\n\
    \    let \"C-=1\"\n    while [ $C -gt 0 ]\n    do\n      let \"C*=$C-1\"\n   \
    \   let \"D+=1\"\n      let \"C*=$D\"\n    done\n    let \"D-=1\"\n    while [\
    \ $D -gt 0 ]\n    do\n      let \"C*=$C-1\"\n      let \"D-=1\"\n      let \"\
    C*=$D\"\n    done\n  }", "  local n=$1\n  ((n>0)) && { echo \"$n!\" && return\
    \ $(factorial $((n-1))) $((n-2)) $((n-3)); }", "\tlocal n=$1\n\tlocal factorial=1\n\
    \t\n\tif [[ \"$n\" -eq 0 ]]; then\n\t\techo \"1\"\n\telse\n\t\tfor i in $(seq\
    \ 1 $n); do\n\t\t\tfactorial=$(brazilian_factorial $((n - 1)))\n\t\t\techo \"\
    $factorial\"\n\t\tdone\n\tfi", "    factorial=`echo $1 | awk '{print $1}'`\n \
    \   factorial=`expr $factorial`\n\n    if [ \"$factorial\" -gt 20 ]; then\n  \
    \      echo \"Error: factorial out of range\"\n        exit 0\n    fi\n\n    for\
    \ i in $(seq 0 $(($factorial-1))); do\n        factorial=`expr $factorial * ($i-1)`\n\
    \    done\n    echo \"$factorial\"", "  local n num\n  if [ $1 -gt 0 ]\n  then\n\
    \    echo \"Enter a number greater than 0\"\n  else\n    echo \"Error: invalid\
    \ input!\"\n    exit 1\n  fi\n  num=$(( $(factorial $1) ))\n  echo \"${num}\"",
  "  factorial=0\n  for (( i=1; i<=$1 ; i++ )) ; do\n    factorial=$(( factorial *\
    \ i ))\n  done\n  echo ${factorial}", "  local n=$1\n  local factorial=1\n  local\
    \ i\n  for i in $(seq 0 $n); do\n    factorial=$((factorial * i))\n  done\n  echo\
    \ $factorial", "    factorial_array=( $(seq 1 $1) )\n    echo \"${factorial_array[@]}\"\
    \ | fold -w 1 | awk '{printf \"%s \",$1}' | tail -n +2", "  local i result\n \
    \ i=1\n  result=1\n  while [ \"$i\" -le \"$1\" ]\n  do\n    result=$(( i * (i-1)\
    \ * (i-2) ))\n    i=$(( i+1 ))\n  done\n  echo $result", "    factorial=1\n  \
    \  while [ \"$1\" -gt 0 ]\n    do\n        factorial=\"$factorial$1\"\n      \
    \  shift\n    done\n\n    echo \"$factorial\"", "  factorial=$1\n  n=$factorial\n\
    \  while [[ $n -gt 1 ]]; do\n    factorial=$((factorial * $n))\n    n=$((n - 1))\n\
    \  done\n  echo $factorial", "  if (( $# != 1 )); then\n    echo \"Invalid input.\
    \ Provide a natural number greater than zero.\"\n    exit 1\n  fi\n  factorial=$1\n\
    \  factorial=0\n  for i in {1..$factorial}\n  do\n    factorial=$(($factorial\
    \ * $i))\n  done\n  echo $factorial", "  (( $# == 0 )) && { echo \"ERROR! You\
    \ must inform a positive integer as argument\"; exit 1; }\n\n  local n_factorial=1\n\
    \  local n_factorial_previous=1\n\n  for (( i=1; i<=$1; i++ )) ; do\n    (( n_factorial\
    \ = n_factorial * $n_factorial_previous))\n    (( n_factorial_previous = n_factorial_previous\
    \ + 1 ))\n  done\n\n  echo $n_factorial", "  factorial=1\n  for (( i=1; i<=$1;\
    \ i++ ))\n  do\n    factorial=$((factorial*i))\n  done\n  echo $factorial", " \
    \ factorial=$1\n  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factorial=$((factorial))\n\
    \  factorial=$((factorial))\n  factorial=$((factorial))\n  factori", "    factorial=1\n\
    \    numero=$1\n    if [ $numero -gt 1 ]; then\n        numero=$((numero-1))\n\
    \        factorial=$((factorial*numero))\n    fi\n    if [ $numero -gt 2 ]; then\n\
    \        numero=$((numero-1))\n        factorial=$((factorial*numero))\n    fi\n\
    \    if [ $numero -gt 3 ]; then\n        numero=$((numero-1))\n        factorial=$((factorial*numero))\n\
    \    fi\n    if [ $numero -gt 4 ]; then\n        numero=$((numero-1))\n      \
    \  factorial=$((factorial*numero))\n    fi\n    echo $factorial", "    local a=$1\n\
    \    local b=1\n    for i in {0..$a-1}; do\n        b=$((b*i))\n    done\n   \
    \ echo $b"]
stop_tokens:
- "\n}"
