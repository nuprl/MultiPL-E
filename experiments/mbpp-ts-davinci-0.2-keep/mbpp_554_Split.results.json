{
  "name": "mbpp_554_Split",
  "language": "ts",
  "prompt": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n  let oddNumbers: number[] = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] % 2 != 0) {\n      oddNumbers.push(list[i]);\n    }\n  }\n  return oddNumbers;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    list.forEach(function (element) {\n        if (element % 2 != 0) {\n            odd.push(element);\n        }\n    });\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddNumbers: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddNumbers.push(list[i]);\n        }\n    }\n    return oddNumbers;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[\n   1,  3,  5,  7,  9,\n  11, 13, 15, 17, 19\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n  let oddList: number[] = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] % 2 != 0) {\n      oddList.push(list[i]);\n    }\n  }\n  return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[\n   1,  3,  5,  7,  9,\n  11, 13, 15, 17, 19\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i: number = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n  let oddList: number[] = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] % 2 != 0) {\n      oddList.push(list[i]);\n    }\n  }\n  return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\n\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let odd: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            odd.push(list[i]);\n        }\n    }\n    return odd;\n}\nconsole.log(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split(list: number[]): number[] {\n    let oddList: number[] = [];\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] % 2 != 0) {\n            oddList.push(list[i]);\n        }\n    }\n    return oddList;\n}\n\nlet list: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(Split(list));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Split;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);\n  assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);\n  assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "[ 1, 3, 5, 7, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}