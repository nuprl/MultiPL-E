{
  "name": "mbpp_452_loss_amount",
  "language": "ts",
  "prompt": "//Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount(actual_cost: number, sale_amount: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = loss_amount;\n  assert.deepEqual(candidate(1500, 1200),0);\n  assert.deepEqual(candidate(100, 200),100);\n  assert.deepEqual(candidate(2000, 5000),3000);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(loss_amount(100, 50));\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    return 0;\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    let loss: number = 0;\n    if (actual_cost > sale_amount) {\n        loss = actual_cost - sale_amount;\n        return loss;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(loss_amount(100, 50));\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(loss_amount(100, 50));\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(loss_amount(100, 50));\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\n",
    "    if (actual_cost > sale_amount) {\n        return actual_cost - sale_amount;\n    }\n    else {\n        return 0;\n    }\n}\nconsole.log(loss_amount(100, 50));\n"
  ]
}