{
  "name": "mbpp_771_check_expression",
  "language": "ts",
  "prompt": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let stack: string[] = [];\n    let map = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let bracket_map: Map<string, string> = new Map();\n    bracket_map.set('(', ')');\n    bracket_map.set('{', '}');\n    bracket_map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_open_bracket = stack.pop();\n            if (bracket_map.get(last_open_bracket) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '[' || exp[i] === '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ']' || exp[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \")\": \"(\",\n    \"]\": \"[\",\n    \"}\": \"{\"\n  };\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"[\" || exp[i] === \"{\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"]\" || exp[i] === \"}\") {\n      if (stack[stack.length - 1] === map[exp[i]]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                let top = stack.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                } else if (exp[i] == '}' && top != '{') {\n                    return false;\n                } else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(check_expression('[{()}]'));\nconsole.log(check_expression('[{()}]{'));\nconsole.log(check_expression('[{()}]{}'));\nconsole.log(check_expression('[{()}]{}('));\nconsole.log(check_expression('[{()}]{}()'));\nconsole.log(check_expression('[{()}]{}()['));\nconsole.log(check_expression('[{()}]{}()[]'));\nconsole.log(check_expression('[{()}]{}()[]{'));\nconsole.log(check_expression('[{()}]{}()[]{}'));\nconsole.log(check_expression('[{()}]{}()[]{}('));\nconsole.log(check_expression('[{()}]{}()[]{}()'));\nconsole.log(check_expression('[{()}]{}()[]{}()['));\nconsole.log(check_expression('[{()}]{}()[]{}()[]'));\nconsole.",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (\n        (exp[i] === \")\" && stack[stack.length - 1] === \"(\") ||\n        (exp[i] === \"}\" && stack[stack.length - 1] === \"{\") ||\n        (exp[i] === \"]\" && stack[stack.length - 1] === \"[\")\n      ) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(check_expression(\"{()}[]\"));\nconsole.log(check_expression(\"{(})\"));\n",
    "    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) != -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) != -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open.indexOf(top) != close.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \")\": \"(\",\n    \"]\": \"[\",\n    \"}\": \"{\"\n  };\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\" || exp[i] == \"[\" || exp[i] == \"{\") {\n      stack.push(exp[i]);\n    } else if (exp[i] == \")\" || exp[i] == \"]\" || exp[i] == \"}\") {\n      if (stack.length == 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] == map[exp[i]]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let pop = stack.pop();\n            if (exp[i] == ')' && pop != '(') {\n                return false;\n            } else if (exp[i] == '}' && pop != '{') {\n                return false;\n            } else if (exp[i] == ']' && pop != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            } else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            } else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            else if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\") {\n      stack.push(exp[i]);\n    } else if (exp[i] == \")\") {\n      if (stack.length == 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length == 0) {\n    return true;\n  }\n  return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last === '(' && exp[i] !== ')') {\n                return false;\n            } else if (last === '{' && exp[i] !== '}') {\n                return false;\n            } else if (last === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let pop = stack.pop();\n                if (exp[i] == ')' && pop != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && pop != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && pop != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            let last = stack.pop();\n            if (last === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (last === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (last === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (\n        (exp[i] === \")\" && stack[stack.length - 1] === \"(\") ||\n        (exp[i] === \"}\" && stack[stack.length - 1] === \"{\") ||\n        (exp[i] === \"]\" && stack[stack.length - 1] === \"[\")\n      ) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            } else if (exp[i] === '}' && top !== '{') {\n                return false;\n            } else if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                } else if (top == '{' && exp[i] != '}') {\n                    return false;\n                } else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            } else if (exp[i] === '}' && top !== '{') {\n                return false;\n            } else if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let last_element = stack.pop();\n      if (\n        (last_element === \"(\" && exp[i] !== \")\") ||\n        (last_element === \"{\" && exp[i] !== \"}\") ||\n        (last_element === \"[\" && exp[i] !== \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            else if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let is_balanced: boolean = true;\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                is_balanced = false;\n                break;\n            }\n            let last_open_bracket: string = stack.pop();\n            if (open_brackets.indexOf(last_open_bracket) !== close_brackets.indexOf(exp[i])) {\n                is_balanced = false;\n                break;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        is_balanced = false;\n    }\n    return is_balanced;\n}\n\nconsole.log(check_expression('{([])}'));\nconsole.log(check_expression('{([])}['));\nconsole.log(check_expression('{([])}[}'));\nconsole.log(check_expression('{([])}[}('));\nconsole.log(check_expression('{([])}[}()'));\nconsole.log(check_expression('{([])}[}()]'));\nconsole.log(check_expression('{([])}[}()]{'));\nconsole.log(check_expression('{([])}[}()]{}'));\nconsole.log(check_expression('{([])}[}()]{}['));\nconsole.log(check_expression('{([])}[}()]{}[]'));\nconsole.log(check_expression('{([])}[}()]{}[]('));\nconsole.log(check_expression('{([])}[}()]{}[]()'));\nconsole.log(check_expression('{([])}[}()]{",
    "    let stack: string[] = [];\n    let open_brackets = ['(', '{', '['];\n    let close_brackets = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack[stack.length - 1] == open_brackets[index]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    let open: string[] = [\"(\", \"{\", \"[\"];\n    let close: string[] = [\")\", \"}\", \"]\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close.includes(exp[i])) {\n            let index = close.indexOf(exp[i]);\n            if (stack.length == 0 || stack[stack.length - 1] != open[index]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == \"(\" || exp[i] == \"{\" || exp[i] == \"[\") {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == \")\" || exp[i] == \"}\" || exp[i] == \"]\") {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == \")\" && top != \"(\") {\n                return false;\n            }\n            else if (exp[i] == \"}\" && top != \"{\") {\n                return false;\n            }\n            else if (exp[i] == \"]\" && top != \"[\") {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack = new Stack<string>();\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.isEmpty()) {\n        return true;\n    }\n    return false;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"{\" || exp[i] === \"(\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \"}\" || exp[i] === \")\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (exp[i] === \"}\" && top !== \"{\") ||\n        (exp[i] === \")\" && top !== \"(\") ||\n        (exp[i] === \"]\" && top !== \"[\")\n      ) {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(check_expression(\"[()]{}{[()()]()}\"));\nconsole.log(check_expression(\"[(])\"));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                let top = stack.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                } else if (exp[i] == '}' && top != '{') {\n                    return false;\n                } else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')') {\n            if (stack.length == 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = [\"(\", \"[\", \"{\"];\n    let close_brackets: string[] = [\")\", \"]\", \"}\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (open_brackets.indexOf(last_element) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (last_element === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (last_element === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (last_element === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(check_expression('{()}'));\nconsole.log(check_expression('{(})'));\nconsole.log(check_expression('{([])}'));\nconsole.log(check_expression('{([])}'));\nconsole.log(check_expression('{([])}'));\nconsole.log(check_expression('{([])}'));\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\" || exp[i] == \"{\" || exp[i] == \"[\") {\n      stack.push(exp[i]);\n    } else {\n      if (stack.length == 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (top == \"(\" && exp[i] != \")\") ||\n        (top == \"{\" && exp[i] != \"}\") ||\n        (top == \"[\" && exp[i] != \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n    let close_brackets: string[] = [\")\", \"}\", \"]\"];\n\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let open_bracket = open_brackets[close_brackets.indexOf(exp[i])];\n            if (stack.length === 0 || stack.pop() !== open_bracket) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if ((top === '(' && exp[i] !== ')') || (top === '{' && exp[i] !== '}') || (top === '[' && exp[i] !== ']')) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == \"(\" || exp[i] == \"{\" || exp[i] == \"[\") {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == \")\" || exp[i] == \"}\" || exp[i] == \"]\") {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == \"(\" && exp[i] == \")\") {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == \"{\" && exp[i] == \"}\") {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == \"[\" && exp[i] == \"]\") {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(check_expression('{()}'));\nconsole.log(check_expression('{(})'));\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\nconsole.log(check_expression('{()}[{}]'));\nconsole.log(check_expression('{()}[{}]{}'));\nconsole.log(check_expression('{()}[{}]{}('));\nconsole.log(check_expression('{()}[{}]{}()'));\nconsole.log(check_expression('{()}[{}]{}()('));\nconsole.log(check_expression('{()}[{}]{}()()'));\nconsole.log(check_expression('{()}[{}]{}()()('));\nconsole.log(check_expression('{()}[{}]{}()()()'));\nconsole.log(check_expression('{()}[{}]{}()()()('));\nconsole.log(check_expression('{()}[{}]{}()()()()'));",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        let c = exp[i];\n        if (c == '(' || c == '{' || c == '[') {\n            stack.push(c);\n        } else if (c == ')' || c == '}' || c == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (!((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '['))) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        }\n        else if (close.indexOf(exp[i]) > -1) {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                let top = stack.pop();\n                if (exp[i] === ')' && top !== '(') {\n                    return false;\n                } else if (exp[i] === '}' && top !== '{') {\n                    return false;\n                } else if (exp[i] === ']' && top !== '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (exp[i] == ')' && poped != '(') {\n                return false;\n            } else if (exp[i] == '}' && poped != '{') {\n                return false;\n            } else if (exp[i] == ']' && poped != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (last === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (last === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            let index = close.indexOf(exp[i]);\n            if (stack.length === 0 || stack[stack.length - 1] !== open[index]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || map[exp[i]] !== stack.pop()) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let opening_brackets: string[] = ['(', '{', '['];\n    let closing_brackets: string[] = [')', '}', ']'];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (opening_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (closing_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_open_bracket = stack.pop();\n            if (open_brackets.indexOf(last_open_bracket) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack = new Stack<string>();\n    let open_brackets = [\"(\", \"{\", \"[\"];\n    let close_brackets = [\")\", \"}\", \"]\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    }\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            else if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) != -1) {\n            stack.push(exp[i]);\n        }\n        else if (close.indexOf(exp[i]) != -1) {\n            let index = close.indexOf(exp[i]);\n            if (stack.length == 0 || open[index] != stack.pop()) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            } else if (top === '{' && exp[i] !== '}') {\n                return false;\n            } else if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')') {\n            if (stack.length === 0 || stack.pop() !== '(') {\n                return false;\n            }\n        } else if (exp[i] === ']') {\n            if (stack.length === 0 || stack.pop() !== '[') {\n                return false;\n            }\n        } else if (exp[i] === '}') {\n            if (stack.length === 0 || stack.pop() !== '{') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            else if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set(')', '(');\n    map.set('}', '{');\n    map.set(']', '[');\n\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) !== -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top: string = stack.pop();\n            if (map.get(exp[i]) !== top) {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        \")\": \"(\",\n        \"}\": \"{\",\n        \"]\": \"[\"\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n            stack.push(exp[i]);\n        } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n            if (stack.length === 0 || map[exp[i]] !== stack[stack.length - 1]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "  let stack: string[] = [];\n  let open: string[] = [\"(\", \"{\", \"[\"];\n  let close: string[] = [\")\", \"}\", \"]\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (open.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (close.includes(exp[i])) {\n      let index = close.indexOf(exp[i]);\n      if (stack.length === 0 || stack[stack.length - 1] !== open[index]) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (exp[i] === \")\" && top !== \"(\") ||\n        (exp[i] === \"}\" && top !== \"{\") ||\n        (exp[i] === \"]\" && top !== \"[\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '{' && exp[i] == '}') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) != -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) != -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['{', '[', '('];\n    let close_brackets: string[] = ['}', ']', ')'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (open_brackets.indexOf(last_element) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '{' && exp[i] == '}') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set(')', '(');\n    map.set('}', '{');\n    map.set(']', '[');\n    for (let i: number = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) !== -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top: string = stack.pop();\n            if (top !== map.get(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (map.get(top) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            } else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) !== -1) {\n            let top = stack.pop();\n            if (map.get(top) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                let poped_element = stack.pop();\n                if (exp[i] == ')' && poped_element != '(') {\n                    return false;\n                } else if (exp[i] == '}' && poped_element != '{') {\n                    return false;\n                } else if (exp[i] == ']' && poped_element != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n",
    "  let stack: string[] = [];\n  let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n  let close_brackets: string[] = [\")\", \"}\", \"]\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (open_brackets.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (close_brackets.includes(exp[i])) {\n      if (stack.length == 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (top == \"(\" && exp[i] != \")\") ||\n        (top == \"{\" && exp[i] != \"}\") ||\n        (top == \"[\" && exp[i] != \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (poped == '(' && exp[i] != ')') {\n                return false;\n            } else if (poped == '{' && exp[i] != '}') {\n                return false;\n            } else if (poped == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '{' && exp[i] == '}') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let x = stack.pop();\n                if (x == '(' && exp[i] != ')') {\n                    return false;\n                }\n                if (x == '{' && exp[i] != '}') {\n                    return false;\n                }\n                if (x == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\nconsole.log(check_expression('{()}[}'));\nconsole.log(check_expression('{()}[}]'));\nconsole.log(check_expression('{()}[}]{'));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] == ')' || top == '{' && exp[i] == '}' || top == '[' && exp[i] == ']') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let last = stack.pop();\n      if (\n        (last === \"(\" && exp[i] === \")\") ||\n        (last === \"{\" && exp[i] === \"}\") ||\n        (last === \"[\" && exp[i] === \"]\")\n      ) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  }\n  return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')') {\n            if (stack.pop() != '(') {\n                return false;\n            }\n        }\n        else if (exp[i] == '}') {\n            if (stack.pop() != '{') {\n                return false;\n            }\n        }\n        else if (exp[i] == ']') {\n            if (stack.pop() != '[') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        \"{\": \"}\",\n        \"[\": \"]\",\n        \"(\": \")\"\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\nconsole.log(check_expression(\"{()}[]\"));\nconsole.log(check_expression(\"{(})\"));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (map.get(last_element) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            } else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            } else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if ((last === '(' && exp[i] !== ')') || (last === '{' && exp[i] !== '}') || (last === '[' && exp[i] !== ']')) {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if ((top == '(' && exp[i] != ')') || (top == '{' && exp[i] != '}') || (top == '[' && exp[i] != ']')) {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (\n      exp[i] === \")\" &&\n      stack.length > 0 &&\n      stack[stack.length - 1] === \"(\"\n    ) {\n      stack.pop();\n    } else if (\n      exp[i] === \"}\" &&\n      stack.length > 0 &&\n      stack[stack.length - 1] === \"{\"\n    ) {\n      stack.pop();\n    } else if (\n      exp[i] === \"]\" &&\n      stack.length > 0 &&\n      stack[stack.length - 1] === \"[\"\n    ) {\n      stack.pop();\n    } else {\n      return false;\n    }\n  }\n  return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let pop = stack.pop();\n            if (pop == '(' && exp[i] != ')') {\n                return false;\n            } else if (pop == '{' && exp[i] != '}') {\n                return false;\n            } else if (pop == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (\n        (exp[i] === \")\" && stack[stack.length - 1] === \"(\") ||\n        (exp[i] === \"}\" && stack[stack.length - 1] === \"{\") ||\n        (exp[i] === \"]\" && stack[stack.length - 1] === \"[\")\n      ) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(check_expression(\"[(])\"));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if ((top == '(' && exp[i] != ')') || (top == '{' && exp[i] != '}') || (top == '[' && exp[i] != ']')) {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{(})'));\nconsole.log(check_expression('{()}[]{}'));\nconsole.log(check_expression('{()}[{}'));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"[\" || exp[i] === \"{\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\") {\n      if (stack.pop() !== \"(\") {\n        return false;\n      }\n    } else if (exp[i] === \"]\") {\n      if (stack.pop() !== \"[\") {\n        return false;\n      }\n    } else if (exp[i] === \"}\") {\n      if (stack.pop() !== \"{\") {\n        return false;\n      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_bracket = stack.pop();\n            if (open_brackets.indexOf(last_bracket) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack = new Stack();\n    let open = ['(', '{', '['];\n    let close = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) >= 0) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) >= 0) {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open.indexOf(top) != close.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                } else if (top == '{' && exp[i] != '}') {\n                    return false;\n                } else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            let index = close.indexOf(exp[i]);\n            if (stack.length === 0 || open[index] !== stack.pop()) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            } else if (exp[i] == '}' && top != '{') {\n                return false;\n            } else if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '[' || exp[i] === '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ']' || exp[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top !== map[exp[i]]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(check_expression('{()}'));\nconsole.log(check_expression('{(})'));\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            else if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (map.get(last) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '[',\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "  const stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (\n        (top === \"(\" && exp[i] !== \")\") ||\n        (top === \"{\" && exp[i] !== \"}\") ||\n        (top === \"[\" && exp[i] !== \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
    "  let stack: string[] = [];\n  let map: Map<string, string> = new Map();\n  map.set(\"(\", \")\");\n  map.set(\"{\", \"}\");\n  map.set(\"[\", \"]\");\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (map.get(top) !== exp[i]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack = new Stack<string>();\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.isEmpty()) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')') {\n            if (stack.length == 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (poped == '(' && exp[i] != ')') {\n                return false;\n            } else if (poped == '[' && exp[i] != ']') {\n                return false;\n            } else if (poped == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let last_index = stack.length - 1;\n            if (open_brackets.indexOf(stack[last_index]) === close_brackets.indexOf(exp[i])) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack = new Stack();\n    for (let i = 0; i < exp.length; i++) {\n        let c = exp[i];\n        if (c == '(' || c == '[' || c == '{') {\n            stack.push(c);\n        } else if (c == ')' || c == ']' || c == '}') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            let top = stack.pop();\n            if (c == ')' && top != '(') {\n                return false;\n            }\n            if (c == ']' && top != '[') {\n                return false;\n            }\n            if (c == '}' && top != '{') {\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack = new Stack();\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            else if (!isMatchingPair(stack.pop(), exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.isEmpty()) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            else if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            else if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack = [];\n    let map = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('[', ']');\n    map.set('{', '}');\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (map.get(last) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: any = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || map[exp[i]] !== stack[stack.length - 1]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    let balanced: boolean = true;\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                balanced = false;\n                break;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                balanced = false;\n                break;\n            }\n            if (top == '[' && exp[i] != ']') {\n                balanced = false;\n                break;\n            }\n            if (top == '{' && exp[i] != '}') {\n                balanced = false;\n                break;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        balanced = false;\n    }\n    return balanced;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n\n    return stack.length === 0;\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n      stack.push(exp[i]);\n    } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n      if (stack.length == 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (exp[i] == ')' && top != '(') ||\n        (exp[i] == ']' && top != '[') ||\n        (exp[i] == '}' && top != '{')\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        \"{\": \"}\",\n        \"[\": \"]\",\n        \"(\": \")\"\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n            stack.push(exp[i]);\n        } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let pop = stack.pop();\n            if (pop === '(' && exp[i] !== ')') {\n                return false;\n            } else if (pop === '{' && exp[i] !== '}') {\n                return false;\n            } else if (pop === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (last == '[' && exp[i] != ']') {\n                return false;\n            }\n            if (last == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length > 0 && stack[stack.length - 1] == open_brackets[index]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last === '(' && exp[i] !== ')') {\n                return false;\n            } else if (last === '{' && exp[i] !== '}') {\n                return false;\n            } else if (last === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack = new Stack();\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            let top = stack.pop();\n            if ((top === '(' && exp[i] !== ')') || (top === '{' && exp[i] !== '}') || (top === '[' && exp[i] !== ']')) {\n                return false;\n            }\n        }\n    }\n    return stack.isEmpty();\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "  let stack = [];\n  let open = ['(', '{', '['];\n  let close = [')', '}', ']'];\n  for (let i = 0; i < exp.length; i++) {\n    if (open.indexOf(exp[i]) > -1) {\n      stack.push(exp[i]);\n    } else if (close.indexOf(exp[i]) > -1) {\n      let index = close.indexOf(exp[i]);\n      if (stack.length == 0 || open[index] != stack.pop()) {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length === 0 || stack[stack.length - 1] !== open_brackets[index]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || map[exp[i]] !== stack[stack.length - 1]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(check_expression('[()]{}{[()()]()}'));\nconsole.log(check_expression('[(])'));\n"
  ]
}