{
  "name": "mbpp_752_jacobsthal_num",
  "language": "ts",
  "prompt": "//Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunction jacobsthal_num(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = jacobsthal_num;\n  assert.deepEqual(candidate(5),11);\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(4),5);\n  assert.deepEqual(candidate(13),2731);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    let a = 0, b = 1;\n    if (n == 0) {\n        return a;\n    }\n    for (let i = 2; i <= n; i++) {\n        let c = a + 2 * b;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    let jacobsthal_num_arr: number[] = [0, 1];\n    for (let i = 2; i <= n; i++) {\n        jacobsthal_num_arr.push(jacobsthal_num_arr[i - 1] + 2 * jacobsthal_num_arr[i - 2]);\n    }\n    return jacobsthal_num_arr[n];\n}\n",
    "    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n    }\n}\n",
    "    if (n < 0) {\n        return -1;\n    }\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n    }\n}\n",
    "    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2);\n}\n"
  ]
}