{
  "name": "mbpp_113_check_integer",
  "language": "ts",
  "prompt": "//Write a function to check if a string represents an integer or not.\nfunction check_integer(text: string): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_integer;\n  assert.deepEqual(candidate(\"python\"),false);\n  assert.deepEqual(candidate(\"1\"),true);\n  assert.deepEqual(candidate(\"12345\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: boolean = true;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n",
    "    if (text === \"\") {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < \"0\" || text[i] > \"9\") {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let result: boolean = true;\n    for (let i: number = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            result = false;\n        }\n    }\n    return result;\n}\n\nconsole.log(check_integer(\"123\"));\nconsole.log(check_integer(\"123.5\"));\nconsole.log(check_integer(\"123.0\"));\nconsole.log(check_integer(\"abc\"));\nconsole.log(check_integer(\"\"));\nconsole.log(check_integer(\"123abc\"));\n",
    "    let result = parseInt(text);\n    if (isNaN(result)) {\n        return false;\n    }\n    return true;\n}\n",
    "    if (text.length == 0) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    if (text.length == 0) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    if (text.match(/^\\d+$/)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    return /^\\d+$/.test(text);\n}\n",
    "    if (text.length === 0) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let reg = /^[0-9]+$/;\n    return reg.test(text);\n}\n",
    "    return /^\\d+$/.test(text);\n}\n",
    "    return /^\\d+$/.test(text);\n}\n",
    "    let result: boolean = true;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n",
    "    return /^\\d+$/.test(text);\n}\n",
    "    if (text.length == 0) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let result: boolean = false;\n    if (text.match(/^-{0,1}\\d+$/)) {\n        result = true;\n    }\n    return result;\n}\n",
    "    return /^\\d+$/.test(text);\n}\n",
    "    let result: boolean = true;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < \"0\" || text[i] > \"9\") {\n            result = false;\n        }\n    }\n    return result;\n}\nconsole.log(check_integer(\"123\"));\nconsole.log(check_integer(\"123.123\"));\nconsole.log(check_integer(\"-123\"));\nconsole.log(check_integer(\"123.0\"));\nconsole.log(check_integer(\"123.00\"));\nconsole.log(check_integer(\"123.1\"));\nconsole.log(check_integer(\"123.123\"));\nconsole.log(check_integer(\"-123.123\"));\n",
    "    if (text.length === 0) {\n        return false;\n    }\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] < '0' || text[i] > '9') {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "  return /^\\d+$/.test(text);\n}\n"
  ]
}