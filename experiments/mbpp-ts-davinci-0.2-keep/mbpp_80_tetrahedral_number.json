{
  "name": "mbpp_80_tetrahedral_number",
  "language": "ts",
  "prompt": "//Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tetrahedral_number;\n  assert.deepEqual(candidate(5),35);\n  assert.deepEqual(candidate(6),56);\n  assert.deepEqual(candidate(7),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n\nconsole.log(tetrahedral_number(2));\nconsole.log(tetrahedral_number(4));\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum * (sum + 1) / 2;\n}\n\nconsole.log(tetrahedral_number(1));\nconsole.log(tetrahedral_number(2));\nconsole.log(tetrahedral_number(3));\nconsole.log(tetrahedral_number(4));\nconsole.log(tetrahedral_number(5));\nconsole.log(tetrahedral_number(6));\nconsole.log(tetrahedral_number(7));\nconsole.log(tetrahedral_number(8));\nconsole.log(tetrahedral_number(9));\nconsole.log(tetrahedral_number(10));\nconsole.log(tetrahedral_number(11));\nconsole.log(tetrahedral_number(12));\nconsole.log(tetrahedral_number(13));\nconsole.log(tetrahedral_number(14));\nconsole.log(tetrahedral_number(15));\nconsole.log(tetrahedral_number(16));\nconsole.log(tetrahedral_number(17));\nconsole.log(tetrahedral_number(18));\nconsole.log(tetrahedral_number(19));\nconsole.log(tetrahedral_number(20));\nconsole.log(tetrahedral_number(21));\nconsole.log(tetrahedral_number(22));\nconsole.log(tetrahedral_number(23));\nconsole.log(tetrahedral_number(24));\nconsole.log(tetrahedral_number(25));\nconsole.log(tetrahedral_number(26));\nconsole.log(tetrahedral_number(27));\nconsole.log(tetrahedral_number(28));\nconsole.log(tetrahedral_number(29));\nconsole.log(tetrahedral_number(30));\nconsole.log(tetrahedral_number(31));\nconsole.log(tetrahedral_number(32));\nconsole.log(tetrahedral_number(33));\nconsole",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    if (n < 1) {\n        return 0;\n    }\n    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\nconsole.log(tetrahedral_number(2));\nconsole.log(tetrahedral_number(6));\nconsole.log(tetrahedral_number(10));\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum * (sum + 1) / 2;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\nconsole.log(tetrahedral_number(3));\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum * (sum + 1) / 2;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum: number = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n"
  ]
}