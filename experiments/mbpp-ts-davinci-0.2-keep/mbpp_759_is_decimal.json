{
  "name": "mbpp_759_is_decimal",
  "language": "ts",
  "prompt": "//Write a function to check whether a given string is a decimal number with a precision of 2.\nfunction is_decimal(num: string): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_decimal;\n  assert.deepEqual(candidate(\"123.11\"),true);\n  assert.deepEqual(candidate(\"e666.86\"),false);\n  assert.deepEqual(candidate(\"3.124587\"),false);\n  assert.deepEqual(candidate(\"1.11\"),true);\n  assert.deepEqual(candidate(\"1.1.11\"),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regex = /^\\d+(\\.\\d{1,2})?$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regexp = /^\\d*\\.\\d{2}$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^\\d+\\.\\d{2}$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    var reg = /^\\d+(\\.\\d{1,2})?$/;\n    return reg.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^\\d*\\.\\d{2}$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let reg = /^\\d+(\\.\\d{1,2})?$/;\n    return reg.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    let reg = /^\\d+\\.\\d{2}$/;\n    return reg.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "  return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regexp = /^\\d*\\.\\d{2}$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "  return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let reg = /^\\d+(\\.\\d{1,2})?$/;\n    return reg.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let reg = /^[0-9]+(\\.[0-9]{1,2})?$/;\n    return reg.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    if (num.length > 0) {\n        let arr = num.split('.');\n        if (arr.length === 2) {\n            if (arr[1].length === 2) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{1,2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regexp = /^\\d*\\.\\d{2}$/;\n    return regexp.test(num);\n}\n",
    "    let regexp = /^\\d*\\.\\d{2}$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    let reg = /^[0-9]+(\\.[0-9]{1,2})?$/;\n    return reg.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "  return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    if (num.indexOf('.') === -1) {\n        return false;\n    }\n    let [integer, decimal] = num.split('.');\n    return integer.length > 0 && decimal.length === 2;\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    let regex = /^\\d*\\.\\d{2}$/;\n    return regex.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    let regexp = /^[-+]?[0-9]+(\\.[0-9]{1,2})?$/;\n    return regexp.test(num);\n}\n"
  ]
}