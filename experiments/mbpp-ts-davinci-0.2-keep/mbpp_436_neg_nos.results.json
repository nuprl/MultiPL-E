{
  "name": "mbpp_436_neg_nos",
  "language": "ts",
  "prompt": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -1, -2, -3, -4, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n  var neg_list: number[] = [];\n  for (var i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      neg_list.push(list1[i]);\n    }\n  }\n  return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, -3, -4, 5, 6, -7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list are: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -1, -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -1, -2, -3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8, 9, 10];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    var i: number = 0;\n    for (i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[\n  -1, -2, -3, -4, -5,\n  -6, -7, -8, -9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list are: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"The negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "The negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n  var neg_list: number[] = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      neg_list.push(list1[i]);\n    }\n  }\n  return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(\"Negative numbers in the list are: \" + neg_nos([1, 2, -3, 4, -5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list are: -3,-5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -1, -2, -3, -4, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, 4, -5, -6, -7, -8, 9, 10];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -5, -6, -7, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, 4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(neg_nos([1, 2, 3, 4, -5, -6, -7, -8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -5, -6, -7, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list: number[] = neg_nos(list1);\nconsole.log(neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmp3vzudgg3.ts(12,34): error TS2304: Cannot find name 'list1'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7, -8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6, -7, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [1, 2, 3, -4, -5, -6];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list = neg_nos([1, 2, 3, -4, -5, -6]);\nconsole.log(\"Negative numbers in the list are: \" + neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8, 9, 10];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, -7, 8, 9, 10];\nvar neg_list: number[] = neg_nos(list1);\nconsole.log(neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, 6, 7, -8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([-1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -1, -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([12, -7, 5, 64, -14]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    var i: number;\n    for (i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -3, -4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([12, -7, 5, 64, -14]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -1, -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -1, -2, -3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7, 8, 9, 10]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_nos: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_nos.push(list1[i]);\n        }\n    }\n    return neg_nos;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, 6, 7, -8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, 4, -5, -6, -7, 8, 9, 10];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, -2, 3, -4, 5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -2, -4, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list = neg_nos([1, 2, 3, -1, -2, -3]);\nconsole.log(neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -1, -2, -3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -2, -4, -6, -8, -10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([12, -7, 5, 64, -14]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([-1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -1, -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, -2, 3, -4, 5, -6, 7, -8]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -2, -4, -6, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(\"Negative numbers in the list are: \" + neg_nos([1, 2, -3, 4, -5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122811,
      "stdout": "Negative numbers in the list are: -3,-5,-7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [1, 2, 3, -4, -5, -6];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_nos: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_nos.push(list1[i]);\n        }\n    }\n    return neg_nos;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list: number[] = neg_nos(list1);\nconsole.log(\"Negative numbers in the list are: \" + neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpgeut01lq.ts(12,34): error TS2304: Cannot find name 'list1'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var j: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2[j] = list1[i];\n            j++;\n        }\n    }\n    return list2;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(\"Original list: \" + list1);\nvar list2 = neg_nos(list1);\nconsole.log(\"Negative numbers in the list: \" + list2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "Original list: 12,-7,5,64,-14\nNegative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list2: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    let neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var j: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2[j] = list1[i];\n            j++;\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nvar list2: number[] = neg_nos(list1);\nconsole.log(\"The negative numbers in the list are: \" + list2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "The negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1 = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var j: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2[j] = list1[i];\n            j++;\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nvar list2: number[] = neg_nos(list1);\nconsole.log(\"The negative numbers in the list are: \" + list2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "The negative numbers in the list are: -1,-2,-3,-4,-5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list = neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]);\nconsole.log(\"Negative numbers in the list are: \" + neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, -3, 4, -5, 6, 7, -8];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -3, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list: number[] = neg_nos([-1, 2, -3, 4, -5]);\nconsole.log(\"Negative numbers in the list are: \" + neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "Negative numbers in the list are: -1,-3,-5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, 6, -7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -4, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [-1, 2, -3, 4, -5];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -1, -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var j: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2[j] = list1[i];\n            j++;\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, -3, 4, -5, 6, -7, 8, 9];\nvar list2: number[] = neg_nos(list1);\nconsole.log(\"The negative numbers in the list are: \" + list2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "The negative numbers in the list are: -3,-5,-7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(\"Negative numbers in the list are: \" + neg_nos([-1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "Negative numbers in the list are: -1,-3,-5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1 = [10, -2, -3, 4, -5];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ -2, -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_nos: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_nos.push(list1[i]);\n        }\n    }\n    return neg_nos;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ -4, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list are: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [1, 2, 3, -4, -5, 6, 7, -8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_nos: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_nos.push(list1[i]);\n        }\n    }\n    return neg_nos;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(neg_nos([1, 2, 3, -1, -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -1, -2, -3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "Negative numbers in the list are: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var j: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2[j] = list1[i];\n            j++;\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nvar list2: number[] = neg_nos(list1);\nconsole.log(\"Negative numbers in the list are: \" + list2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "Negative numbers in the list are: -1,-2,-3,-4,-5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, -7, 8, 9, 10];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, 8, -9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "Negative numbers in the list are: -4,-5,-9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_nos: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_nos.push(list1[i]);\n        }\n    }\n    return neg_nos;\n}\nvar list1: number[] = [1, 2, -3, -4, 5, 6, -7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "Negative numbers in the list are: -3,-4,-7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var j: number = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2[j] = list1[i];\n            j++;\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(\"Negative numbers in the list are: \" + neg_nos([-1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "Negative numbers in the list are: -1,-3,-5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n  var neg_list: number[] = [];\n  for (var i = 0; i < list1.length; i++) {\n    if (list1[i] < 0) {\n      neg_list.push(list1[i]);\n    }\n  }\n  return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1 = [1, 2, 3, -4, -5, -6];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, -2, 3, -4, 5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -2, -4, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -7, -14 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, -2, 3, -4, 5, -6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "[ -2, -4, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -1, -2, -3];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "[ -1, -2, -3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, -3, -4, 5, -6];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -3, -4, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, -3, -4, 5, 6, -7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, -3, 4, -5, 6, -7, 8, 9];\nconsole.log(\"The negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "The negative numbers in the list are: -3,-5,-7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, 2, -3, 4, -5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, -3, -4, 5, 6, -7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, -7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -4, -5, -6, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, -3, -4, 5, 6, -7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -3, -4, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nvar neg_list: number[] = neg_nos(list1);\nconsole.log(\"Negative numbers in the list are: \" + neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, -3, -4, 5, 6, -7, 8, 9];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "Negative numbers in the list are: -3,-4,-7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    var i: number = 0;\n    for (i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([-1, 2, -3, 4, -5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "[ -1, -3, -5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, 6, 7, -8, 9, 10];\nconsole.log(\"Negative numbers in the list are: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Negative numbers in the list are: -4,-5,-8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, -3, 4, -5, 6, -7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -3, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nvar list1 = [1, 2, 3, 4, -5, -6, -7, -8, 9, 10];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -5, -6, -7, -8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var i: number;\n    for (i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nvar list2: number[] = neg_nos(list1);\nconsole.log(\"The negative numbers in the list are: \" + list2);\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "The negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nconsole.log(neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar list1: number[] = [12, -7, 5, 64, -14];\nconsole.log(\"Negative numbers in the list: \" + neg_nos(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "Negative numbers in the list: -7,-14\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510073,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nconsole.log(neg_nos([1, -2, 3, -4, -5, 6, -7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ -2, -4, -5, -7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\n\nvar neg_list = neg_nos([1, 2, 3, -1, -2, -3]);\nconsole.log(neg_list);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ -1, -2, -3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var neg_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            neg_list.push(list1[i]);\n        }\n    }\n    return neg_list;\n}\nconsole.log(neg_nos([1, 2, 3, -4, -5, -6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1665510072,
      "stdout": "[ -4, -5, -6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to return the negative numbers in a list.\nfunction neg_nos(list1: number[]): number[] {\n    var list2: number[] = [];\n    var i: number = 0;\n    for (i = 0; i < list1.length; i++) {\n        if (list1[i] < 0) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nvar list1: number[] = [1, 2, 3, -4, -5, -6, 7, 8, 9];\nvar list2: number[] = neg_nos(list1);\nconsole.log(\"Negative numbers in the list are: \" + list2);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = neg_nos;\n  assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);\n  assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);\n  assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "Negative numbers in the list are: -4,-5,-6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}