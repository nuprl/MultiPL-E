{
  "name": "mbpp_611_max_of_nth",
  "language": "ts",
  "prompt": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n  let max: number = test_list[0][N];\n  for (let i: number = 1; i < test_list.length; i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n  let max: number = 0;\n  for (let i = 0; i < test_list.length; i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_of_nth: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_of_nth) {\n            max_of_nth = test_list[i][N];\n        }\n    }\n    return max_of_nth;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_of_nth: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_of_nth) {\n            max_of_nth = test_list[i][N];\n        }\n    }\n    return max_of_nth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\nconsole.log(max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconsole.log(max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "11\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_of_nth: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_of_nth) {\n            max_of_nth = test_list[i][N];\n        }\n    }\n    return max_of_nth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconsole.log(max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_of_nth: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max_of_nth) {\n            max_of_nth = test_list[i][N];\n        }\n    }\n    return max_of_nth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\nconsole.log(max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_val: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_val) {\n            max_val = test_list[i][N];\n        }\n    }\n    return max_val;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_num: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_num) {\n            max_num = test_list[i][N];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n  let max: number = test_list[0][N];\n  for (let i: number = 1; i < test_list.length; i++) {\n    if (test_list[i][N] > max) {\n      max = test_list[i][N];\n    }\n  }\n  return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nlet test_list: number[][] = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(max_of_nth(test_list, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "8\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (max < test_list[i][N]) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max = test_list[0][N];\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_of_nth: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_of_nth) {\n            max_of_nth = test_list[i][N];\n        }\n    }\n    return max_of_nth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 1; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\nconsole.log(max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123426,
      "stdout": "9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max_value: number = test_list[0][N];\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max_value) {\n            max_value = test_list[i][N];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1666123425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth(test_list: number[][], N: number): number {\n    let max: number = 0;\n    for (let i: number = 0; i < test_list.length; i++) {\n        if (test_list[i][N] > max) {\n            max = test_list[i][N];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_of_nth;\n  assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);\n  assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);\n  assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);\n}\n\ntest();",
      "timestamp": 1665510311,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}