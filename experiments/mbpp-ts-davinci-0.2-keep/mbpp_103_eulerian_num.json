{
  "name": "mbpp_103_eulerian_num",
  "language": "ts",
  "prompt": "//Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num(n: number, m: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eulerian_num;\n  assert.deepEqual(candidate(3, 1),4);\n  assert.deepEqual(candidate(4, 1),11);\n  assert.deepEqual(candidate(5, 3),26);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let res: number = 0;\n    if (n == m) {\n        res = 1;\n    } else if (n > m) {\n        res = 0;\n    } else if (n == 0) {\n        res = 1;\n    } else {\n        res = (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result = result * (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += binomial(m, k) * Math.pow(-1, k) * (factorial(m - k) / factorial(n - k));\n    }\n    return res;\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res = res * (n - i) / (i + 1);\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 0;\n    for (let i = 0; i <= m; i++) {\n        res += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return res;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n\n    if (n == m) {\n        return 1;\n    }\n\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    let eulerian_num = 0;\n    for (let i = 0; i <= m; i++) {\n        eulerian_num += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return eulerian_num;\n}\n",
    "    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == 0 || n == m) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m === n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res *= (n - i);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res = res * (n - i) / (i + 1);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "  if (n < m) {\n    return 0;\n  }\n  if (n == m) {\n    return 1;\n  }\n  if (m == 0) {\n    return 1;\n  }\n  return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1) + (m + 1) * eulerian_num(n, m + 2);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let res: number = 1;\n    for (let i: number = n - m + 1; i <= n; i++) {\n        res *= i;\n    }\n    for (let i: number = 1; i <= m; i++) {\n        res /= i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let res: number = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    if (m > n) {\n        return 0;\n    }\n    for (let i = 0; i < m; i++) {\n        res += eulerian_num(n - 1, i);\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result: number = 0;\n    let factorial: number = 1;\n    let factorial_n: number = 1;\n    let factorial_m: number = 1;\n    let factorial_nm: number = 1;\n    for (let i = 1; i <= n; i++) {\n        factorial_n *= i;\n    }\n    for (let i = 1; i <= m; i++) {\n        factorial_m *= i;\n    }\n    for (let i = 1; i <= n - m; i++) {\n        factorial_nm *= i;\n    }\n    factorial = factorial_n / (factorial_m * factorial_nm);\n    result = factorial;\n    return result;\n}\n",
    "  let res: number = 0;\n  if (n == 0 && m == 0) {\n    res = 1;\n  } else if (n == 0 || m == 0) {\n    res = 0;\n  } else {\n    res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n  }\n  return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1) + (m + 1) * eulerian_num(n, m + 2);\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (m == 1) {\n        result = 1;\n    } else if (m > n) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let eulerian_num_array: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        eulerian_num_array.push([]);\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                eulerian_num_array[i][j] = 1;\n            } else if (i == 0) {\n                eulerian_num_array[i][j] = 0;\n            } else if (j == 0) {\n                eulerian_num_array[i][j] = 1;\n            } else {\n                eulerian_num_array[i][j] = eulerian_num_array[i - 1][j - 1] + (i + 1) * eulerian_num_array[i][j - 1];\n            }\n        }\n    }\n    return eulerian_num_array[n][m];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m === 0 || m === n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res: number = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result: number = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 0) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        res = 1;\n    } else if (n == 0 || m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let arr = [];\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        arr.push([]);\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                arr[i][j] = 1;\n            } else {\n                arr[i][j] = arr[i - 1][j] + arr[i][j - 1];\n            }\n        }\n    }\n    for (let i = 0; i < m; i++) {\n        sum += arr[n - 1][i];\n    }\n    return sum;\n}\n",
    "    if (m < 0 || m > n) {\n        return 0;\n    }\n    if (m == 0 || m == n) {\n        return 1;\n    }\n    if (m == 1 || m == n - 1) {\n        return n;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m || m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (j === 0) {\n                arr[i][j] = 1;\n            } else if (i === 0) {\n                arr[i][j] = 0;\n            } else {\n                arr[i][j] = (arr[i - 1][j - 1] + (i * arr[i - 1][j])) % 1000000;\n            }\n        }\n    }\n    return arr[n][m];\n}\n",
    "    let res: number = 0;\n    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return m + 1;\n    }\n    if (m == 1) {\n        return n + 1;\n    }\n    for (let i = 0; i <= m; i++) {\n        res += eulerian_num(n - 1, i);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result = result * (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return Math.round(result);\n}\n",
    "  let result = 1;\n  for (let i = 0; i < m; i++) {\n    result *= (n - i) / (i + 1);\n  }\n  return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return result;\n}\n",
    "    let eulerian_num_arr: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        eulerian_num_arr[i] = [];\n        for (let j = 0; j < m; j++) {\n            eulerian_num_arr[i][j] = 0;\n        }\n    }\n    for (let i = 0; i < m; i++) {\n        eulerian_num_arr[0][i] = 1;\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < m; j++) {\n            eulerian_num_arr[i][j] = (eulerian_num_arr[i - 1][j - 1] + (j + 1) * eulerian_num_arr[i - 1][j]);\n        }\n    }\n    return eulerian_num_arr[n - 1][m - 1];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n\n    if (n == m) {\n        return 1;\n    }\n\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        res = 1;\n    } else if (n == 0 || m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (n === 0 && m === 0) {\n        return 1;\n    }\n    if (n === 0 || m === 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n === m) {\n        result = 1;\n    } else if (n > m) {\n        result = (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m + 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial(m, k) * Math.pow(-1, k) * (factorial(m - k) / factorial(n - k));\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n === 0 && m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let a: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n === 0 || m === 0) {\n        return 1;\n    }\n    if (n === m) {\n        return 1;\n    }\n    if (n > m) {\n        return 0;\n    }\n    result = eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n, m - 1);\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (m == 0) {\n        result = 0;\n    } else if (m == 1) {\n        result = 1;\n    } else {\n        result = (m * eulerian_num(n - 1, m)) + (n - m + 1) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result: number = 0;\n    let coeff: number = 1;\n    for (let i = 0; i <= m; i++) {\n        result += coeff * binomial(n + 1, i);\n        coeff *= -1;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (n > m) {\n        result = 0;\n    } else {\n        result = (m + 1) * eulerian_num(n, m - 1) - (m - n) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = n - m + 1; i <= n; i++) {\n        res *= i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial(m, k) * Math.pow(-1, m - k) * (factorial(n + k) / factorial(n));\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial(m, k) * Math.pow(-1, k) * (Math.pow(m - k, n) - Math.pow(m - k - 1, n));\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial(m, k) * binomial(n + k, k);\n    }\n    return result;\n}\n",
    "    let result: number = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1) + (m + 1) * eulerian_num(n, m + 2);\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        res = 1;\n    } else if (n == 0 || m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let eulerian = 1;\n    for (let i = 1; i <= m; i++) {\n        eulerian *= (n - i + 1) / i;\n    }\n    return eulerian;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result: number = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    let eulerian = new Array(n + 1);\n    for (let i = 0; i <= n; i++) {\n        eulerian[i] = new Array(m + 1);\n    }\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                eulerian[i][j] = 1;\n            } else if (i == 0 || j == 0) {\n                eulerian[i][j] = 0;\n            } else {\n                eulerian[i][j] = (i - j) * eulerian[i - 1][j] + (j + 1) * eulerian[i - 1][j - 1];\n            }\n        }\n    }\n    return eulerian[n][m];\n}\n",
    "    let a = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (j === 0) {\n                a[i][j] = 1;\n            } else if (i === 0) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (j * a[i - 1][j] + a[i - 1][j - 1]) % 1000000;\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result: number = 0;\n    if (n === 0 && m === 0) {\n        result = 1;\n    } else if (n === 0 || m === 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let eulerian_num = 1;\n    for (let i = 1; i <= m; i++) {\n        eulerian_num *= (n - i + 1) / i;\n    }\n    return eulerian_num;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 0;\n    if (n == 0 && m == 0) {\n        result = 1;\n    }\n    else if (n == 0 || m == 0) {\n        result = 0;\n    }\n    else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result = 0;\n    let factorial = 1;\n    for (let i = 0; i <= m; i++) {\n        result += factorial * Math.pow(-1, i) * (n - i + 1) / (i + 1);\n        factorial *= (m - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (m + 1) * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let k = 1; k <= m; k++) {\n        res *= (n - k + 1) / k;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial(m, k) * Math.pow(-1, m - k) * binomial(n + k, n);\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    if (n == m) {\n        res = 1;\n    } else if (n > m) {\n        res = (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result: number = 0;\n    if (n === 0 || m === 0) {\n        return 1;\n    }\n    if (n === 1 || m === 1) {\n        return n;\n    }\n    if (n < m) {\n        return 0;\n    }\n    for (let i: number = 0; i <= m; i++) {\n        result += Math.pow(-1, i) * factorial(m) / (factorial(i) * factorial(m - i)) * eulerian_num(n - i, m);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "  if (n < m) return 0;\n  if (n == m) return 1;\n  if (m == 0) return 1;\n  return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let eulerian_num = 0;\n    if (n == 0 && m == 0) {\n        eulerian_num = 1;\n    } else if (n == 0 || m == 0) {\n        eulerian_num = 0;\n    } else {\n        eulerian_num = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return eulerian_num;\n}\n",
    "    let res: number = 0;\n    if (n === 0 && m === 0) {\n        return 1;\n    }\n    if (n > 0) {\n        res += (n - m) * eulerian_num(n - 1, m);\n    }\n    if (m > 0) {\n        res += m * eulerian_num(n, m - 1);\n    }\n    return res;\n}\n",
    "    return 0;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 0;\n    if (n == 0 && m == 0) {\n        result = 1;\n    } else if (n == 0 || m == 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i <= m; i++) {\n        result += binomial_coefficient(n + 1, i) * i ** (n - 1);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 0;\n    for (let i = 0; i <= m; i++) {\n        res += Math.pow(-1, i) * binomial(m, i) * Math.pow(m - i, n);\n    }\n    return res / factorial(m);\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res *= (n - i);\n    }\n    return res;\n}\n",
    "  let result = 1;\n  for (let i = 1; i <= m; i++) {\n    result = result * (n - i + 1) / i;\n  }\n  return result;\n}\n",
    "    let result: number = 0;\n    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return m + 1;\n    }\n    if (m == 1) {\n        return n + 1;\n    }\n    for (let i = 0; i <= m; i++) {\n        result += eulerian_num(n - 1, i);\n    }\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += binomial(m, k) * Math.pow(-1, k) * (factorial(n + k) / factorial(n));\n    }\n    return res;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "  if (n < m) return 0;\n  if (n == m) return 1;\n  if (m == 0) return 1;\n  return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, m);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "  if (n < m) {\n    return 0;\n  }\n  if (n == m) {\n    return 1;\n  }\n  return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (m == 1) {\n        result = 1;\n    } else if (m > n) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result: number = 0;\n    if (n == 0 && m == 0) {\n        result = 1;\n    } else if (n == 0 || m == 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result: number = 0;\n    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    result = eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n - 1, m);\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr[i] = [];\n        for (let j = 0; j <= m; j++) {\n            arr[i][j] = 0;\n        }\n    }\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= m; j++) {\n            if (j === 0) {\n                arr[i][j] = 1;\n            } else if (i === 0) {\n                arr[i][j] = 0;\n            } else {\n                arr[i][j] = arr[i - 1][j - 1] + (i + 1) * arr[i][j - 1];\n            }\n        }\n    }\n    return arr[n][m];\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "  let result = 0;\n  if (m == 0) {\n    return 1;\n  }\n  if (n == 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 1;\n  }\n  if (n == m) {\n    return 1;\n  }\n  result = eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n - 1, m);\n  return result;\n}\n",
    "    let eulerian_num = 0;\n    for (let i = 0; i <= m; i++) {\n        eulerian_num += binomial(n + 1, i) * Math.pow(-1, i);\n    }\n    return eulerian_num;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 0) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n === 0 && m === 0) {\n        return 1;\n    }\n    return (n + 1 - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1);\n}\n",
    "  let res = 1;\n  for (let i = 1; i <= m; i++) {\n    res = res * (n - i + 1) / i;\n  }\n  return res;\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        res = 1;\n    } else if (n == 0 || m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m === 0 || m === n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (m > n) {\n        return 0;\n    }\n    res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    return res;\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    for (let i: number = 0; i <= n; i++) {\n        res += eulerian_num(n - i, m - 1);\n    }\n    return res;\n}\n",
    "    let result: number = 1;\n    for (let i: number = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    if (m == 0 || m == n) {\n        res = 1;\n    } else if (m == 1 || m == n - 1) {\n        res = n;\n    } else {\n        res = (n - m) * eulerian_num(n - 1, m - 1) + m * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res *= (n - i);\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (m > n) {\n        return 0;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    if (n === m) {\n        return 1;\n    }\n    result = eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m);\n    return result;\n}\n"
  ]
}