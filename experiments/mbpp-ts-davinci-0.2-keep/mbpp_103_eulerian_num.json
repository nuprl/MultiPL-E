{
  "name": "mbpp_103_eulerian_num",
  "language": "ts",
  "prompt": "//Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num(n: number, m: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eulerian_num;\n  assert.deepEqual(candidate(3, 1),4);\n  assert.deepEqual(candidate(4, 1),11);\n  assert.deepEqual(candidate(5, 3),26);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let res: number = 0;\n    if (n == m) {\n        res = 1;\n    } else if (n > m) {\n        res = 0;\n    } else if (n == 0) {\n        res = 1;\n    } else {\n        res = (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result = result * (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += binomial(m, k) * Math.pow(-1, k) * (factorial(m - k) / factorial(n - k));\n    }\n    return res;\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res = res * (n - i) / (i + 1);\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 0;\n    for (let i = 0; i <= m; i++) {\n        res += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return res;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n\n    if (n == m) {\n        return 1;\n    }\n\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    let eulerian_num = 0;\n    for (let i = 0; i <= m; i++) {\n        eulerian_num += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, n);\n    }\n    return eulerian_num;\n}\n",
    "    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == 0 || n == m) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m === n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res *= (n - i);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res = res * (n - i) / (i + 1);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "  if (n < m) {\n    return 0;\n  }\n  if (n == m) {\n    return 1;\n  }\n  if (m == 0) {\n    return 1;\n  }\n  return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n"
  ]
}