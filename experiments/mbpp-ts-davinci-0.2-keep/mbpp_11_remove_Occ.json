{
  "name": "mbpp_11_remove_Occ",
  "language": "ts",
  "prompt": "//Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    return s1 + s2;\n}\n",
    "    let first_index = s.indexOf(ch);\n    let last_index = s.lastIndexOf(ch);\n    let s1 = s.slice(0, first_index) + s.slice(first_index + 1, s.length);\n    let s2 = s1.slice(0, last_index) + s1.slice(last_index + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n",
    "    let new_s: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    new_s = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    return new_s;\n}\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"a\"));\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"z\"));\nconsole.log(remove_Occ(\"abcdefghijklmnopqrstuvwxyz\", \"c\"));\n",
    "    let l = s.length;\n    let s1 = s.replace(ch, \"\");\n    let l1 = s1.length;\n    let s2 = s1.replace(ch, \"\");\n    let l2 = s2.length;\n    if (l1 == l2) {\n        return s;\n    }\n    else {\n        return s2;\n    }\n}\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\nconsole.log(remove_Occ(\"abcabc\", \"b\"));\nconsole.log(remove_Occ(\"abcabc\", \"c\"));\n",
    "    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n",
    "    let a = s.replace(ch, \"\");\n    let b = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n",
    "    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"o\"));\n",
    "    let index = s.indexOf(ch);\n    let index1 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index) + s.slice(index + 1);\n    let s2 = s1.slice(0, index1) + s1.slice(index1 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\n",
    "    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    if (first_occ == -1) {\n        return s;\n    }\n    else {\n        new_str = s.slice(0, first_occ) + s.slice(first_occ + 1, last_occ) + s.slice(last_occ + 1);\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"z\"));\n",
    "    let a = s.indexOf(ch);\n    let b = s.lastIndexOf(ch);\n    let c = s.slice(0, a) + s.slice(a + 1, b) + s.slice(b + 1);\n    return c;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n",
    "    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"abcabc\", \"a\"));\n",
    "    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\n",
    "    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index);\n    let s2 = s.slice(index + 1, index2);\n    let s3 = s.slice(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"Hello\", \"l\"));\n",
    "    var i: number = s.indexOf(ch);\n    var j: number = s.lastIndexOf(ch);\n    var s1: string = s.substring(0, i);\n    var s2: string = s.substring(i + 1, j);\n    var s3: string = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\nvar s: string = \"abcdefghijklmnopqrstuvwxyz\";\nvar ch: string = \"a\";\nconsole.log(remove_Occ(s, ch));\n",
    "    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let res: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return res;\n}\n\nconsole.log(remove_Occ(\"python\", \"p\"));\n",
    "    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\n",
    "    let index: number = s.indexOf(ch);\n    let index1: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, index) + s.substring(index + 1);\n    let s2: string = s1.substring(0, index1) + s1.substring(index1 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n",
    "    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\nconsole.log(remove_Occ('abcabc', 'a'));\n",
    "    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"abracadabra\", \"a\"));\n",
    "    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    while (i < s.length) {\n        if (s[i] != ch) {\n            new_str += s[i];\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] != ch) {\n            new_str += s[j];\n        }\n        j--;\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"abcdabcd\", \"a\"));\n"
  ]
}