{
  "name": "mbpp_775_odd_position",
  "language": "ts",
  "prompt": "//Write a python function to check whether every odd index contains odd numbers of a given list.\nfunction odd_position(nums: number[]): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = odd_position;\n  assert.deepEqual(candidate([2, 1, 4, 3, 6, 7, 6, 3]),true);\n  assert.deepEqual(candidate([4, 1, 2]),true);\n  assert.deepEqual(candidate([1, 2, 3]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 1; i < nums.length; i += 2) {\n        if (nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let odd_count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0) {\n            if (nums[i] % 2 != 0) {\n                odd_count++;\n            }\n        }\n    }\n    if (odd_count == nums.length / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 != 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0) {\n            if (nums[i] % 2 == 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    let odd_count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 != 0 && nums[i] % 2 != 0) {\n            odd_count++;\n        }\n    }\n    return odd_count == nums.length / 2;\n}\n\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n",
    "  for (let i = 1; i < nums.length; i += 2) {\n    if (nums[i] % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let i = 0; i < nums.length; i++) {\n        if (i % 2 == 0 && nums[i] % 2 == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n"
  ]
}