{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "ts",
  "prompt": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let arr: string[] = str1.split('');\n    let result: string | undefined;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.indexOf(arr[i]) === arr.lastIndexOf(arr[i])) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "c\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len = str1.length;\n    let char;\n    let charCount = {};\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        if (charCount[char]) {\n            charCount[char]++;\n        }\n        else {\n            charCount[char] = 1;\n        }\n    }\n    for (let j in charCount) {\n        if (charCount[j] == 1) {\n            return j;\n        }\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let char_count: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count[str1[i]] === undefined) {\n            char_count[str1[i]] = 1;\n        } else {\n            char_count[str1[i]] += 1;\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count[str1[i]] === 1) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "c\nd\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let len = str1.length;\n  let char;\n  for (let i = 0; i < len; i++) {\n    char = str1.charAt(i);\n    if (str1.indexOf(char) === i && str1.indexOf(char, i + 1) === -1) {\n      return char;\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "undefined\nundefined\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcd'));\nconsole.log(first_non_repeating_character('aabbcc'));\nconsole.log(first_non_repeating_character('aabbdbcc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "c\na\nundefined\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] === char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "f\nf\ne\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "e\na\nw\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('abacdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "a\nb\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number, i: number, len: number, char: string;\n\n    len = str1.length;\n    for (i = 0; i < len; i++) {\n        char = str1[i];\n        count = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] === char) {\n                count += 1;\n            }\n        }\n        if (count < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      return str1[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    let ctr = 0;\n    let index: number;\n    let nonRepeated: string;\n    for (let i = 0; i < str.length; i++) {\n        ctr = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (i != j && str.charAt(i) == str.charAt(j)) {\n                ctr++;\n                break;\n            }\n        }\n        if (ctr == 0) {\n            index = i;\n            nonRepeated = str.charAt(i);\n            break;\n        }\n    }\n    return nonRepeated;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    for (let i = 0; i < str1.length; i++) {\n        let c = str1.charAt(i);\n        if (str1.indexOf(c) == i && str1.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabc\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "d\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let str = str1.toLowerCase();\n    let char = str.charAt(0);\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(char) == str.lastIndexOf(char)) {\n            return char;\n        }\n        char = str.charAt(i);\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "c\nundefined\nundefined\nd\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'c'\n    at test (/tmp/tmpuvduzbk2.js:22:12)\n    at Object.<anonymous> (/tmp/tmpuvduzbk2.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'c',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let index = 0;\n    let i = 0;\n    let str = str1.toLowerCase();\n    for (i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            count++;\n            index = i;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    } else {\n        return str[index];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < str1.length; i++) {\n        count = 0;\n        for (j = 0; j < str1.length; j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            index = i;\n            break;\n        }\n    }\n    if (count == 1) {\n        return str1[index];\n    }\n    else {\n        return undefined;\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] == char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdab\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "c\nd\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len = str1.length;\n    let char;\n    for (let i = 0; i < len; i++) {\n        char = str1.charAt(i);\n        if (str1.indexOf(char) == i && str1.indexOf(char, i + 1) == -1) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      return str1[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charAt(i);\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str: string = str1.toLowerCase();\n    for (let i: number = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i && str.indexOf(str[i], i + 1) == -1) {\n            char = str[i];\n            return char;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let pos = 0;\n    let char = '';\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        char = str[i];\n        count = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (char === str[j]) {\n                count++;\n            }\n        }\n        if (count < 2) {\n            pos = i;\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'c'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpgnhfmr0_.js:26:12)\n    at Object.<anonymous> (/tmp/tmpgnhfmr0_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'c',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abcab'));\nconsole.log(first_non_repeating_character('abab'));\nconsole.log(first_non_repeating_character('aabbbc'));\nconsole.log(first_non_repeating_character('aabbdbc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    const char = str1.charAt(i);\n    if (str1.indexOf(char) === i && str1.indexOf(char, i + 1) === -1) {\n      return char;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i && str.indexOf(str[i], i + 1) == -1) {\n            char = str[i];\n            return char;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('abacdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "a\nb\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len = str1.length;\n    let char, char_count = {};\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        if (char_count[char]) {\n            char_count[char] += 1;\n        }\n        else {\n            char_count[char] = 1;\n        }\n    }\n    for (let j in char_count) {\n        if (char_count[j] == 1) {\n            return j;\n        }\n    }\n}\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\nconsole.log(first_non_repeating_character('abcdabcdabcd'));\nconsole.log(first_non_repeating_character('abcdabcdabcdabcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nd\nundefined\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len = str1.length;\n    let char;\n    let charCount = {};\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        if (charCount[char]) {\n            charCount[char] += 1;\n        }\n        else {\n            charCount[char] = 1;\n        }\n    }\n    for (let j in charCount) {\n        if (charCount[j] == 1) {\n            return j;\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\nconsole.log(first_non_repeating_character(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMN\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "../../../../tmp/tmpx4cjl42o.ts(25,344): error TS1002: Unterminated string literal.\n../../../../tmp/tmpx4cjl42o.ts(26,1): error TS1005: ',' expected.\n../../../../tmp/tmpx4cjl42o.ts(26,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    let char_count: number;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        char_count = 0;\n        for (let j = 0; j < chars.length; j++) {\n            if (chars[j] == char) {\n                char_count += 1;\n            }\n        }\n        if (char_count < 2) {\n            return char;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let char_count: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count[str1[i]] === undefined) {\n            char_count[str1[i]] = 1;\n        } else {\n            char_count[str1[i]] += 1;\n        }\n    }\n    for (let i in char_count) {\n        if (char_count[i] === 1) {\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcab'));\nconsole.log(first_non_repeating_character('abab'));\nconsole.log(first_non_repeating_character('aabbbc'));\nconsole.log(first_non_repeating_character('aabbdbc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('aabbccddeeff'));\nconsole.log(first_non_repeating_character('abcdefghijklmnopqrstuvwxyz'));\nconsole.log(first_non_repeating_character('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "undefined\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < str1.length; i++) {\n        for (j = 0; j < str1.length; j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    if (index == 0) {\n        return undefined;\n    }\n    return str1[index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'a'\n    at test (/tmp/tmprg8erpvo.js:28:12)\n    at Object.<anonymous> (/tmp/tmprg8erpvo.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'a',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let len = str1.length;\n  let char;\n  let charCount = {};\n  for (let i = 0; i < len; i++) {\n    char = str1[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  for (let j in charCount) {\n    if (charCount[j] == 1) {\n      return j;\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let arr: string[] = str1.split('');\n    for (let i = 0; i < arr.length; i++) {\n        if (arr.indexOf(arr[i]) === arr.lastIndexOf(arr[i])) {\n            return arr[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyza\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzab\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabc\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcde\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdef\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefg\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefgh\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghi\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghij\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijk\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "../../../../tmp/tmpgfm6hs4x.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpgfm6hs4x.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('aabbcc'));\nconsole.log(first_non_repeating_character('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let str = str1.toLowerCase();\n    let char = '';\n    let ctr = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i) {\n            for (let j = 0; j < str.length; j++) {\n                if (str[i] == str[j]) {\n                    ctr += 1;\n                }\n            }\n            if (ctr < 2) {\n                return str[i];\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123330,
      "stdout": "undefined\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'c'\n    at test (/tmp/tmpb0zyrlvw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpb0zyrlvw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'c',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] == char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let result: string | undefined;\n  let char_count: { [key: string]: number } = {};\n  str1.split(\"\").forEach(char => {\n    if (char_count[char]) {\n      char_count[char] += 1;\n    } else {\n      char_count[char] = 1;\n    }\n  });\n  for (let char in char_count) {\n    if (char_count[char] === 1) {\n      result = char;\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let res: string | undefined = undefined;\n    let obj: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (obj[str1[i]] === undefined) {\n            obj[str1[i]] = 1;\n        } else {\n            obj[str1[i]] += 1;\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (obj[str1[i]] === 1) {\n            res = str1[i];\n            break;\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i && str.indexOf(str[i], i + 1) == -1) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str: string = str1.toLowerCase();\n    for (let i: number = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "f\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\nconsole.log(first_non_repeating_character('abcdabcdab'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nd\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let pos: number = 0;\n    let i: number;\n    let str = str1.toLowerCase();\n    for (i = 0; i < str.length; i++) {\n        if (str.indexOf(str.charAt(i)) == str.lastIndexOf(str.charAt(i))) {\n            count++;\n            pos = i;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    }\n    else {\n        return str1.charAt(pos);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abcab'));\nconsole.log(first_non_repeating_character('abab'));\nconsole.log(first_non_repeating_character('aabbbc'));\nconsole.log(first_non_repeating_character('aabbdbc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let first_non_repeating_character: string | undefined = undefined;\n    let str1_array: string[] = str1.split(\"\");\n    let str1_array_length: number = str1_array.length;\n    let str1_array_length_minus_one: number = str1_array_length - 1;\n    let i: number = 0;\n    let j: number = 0;\n    let is_repeated: boolean = false;\n    for (i = 0; i < str1_array_length; i++) {\n        is_repeated = false;\n        for (j = 0; j < str1_array_length_minus_one; j++) {\n            if (i !== j && str1_array[i] === str1_array[j]) {\n                is_repeated = true;\n                break;\n            }\n        }\n        if (!is_repeated) {\n            first_non_repeating_character = str1_array[i];\n            break;\n        }\n    }\n    return first_non_repeating_character;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'c'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpq7o7hdbv.js:28:12)\n    at Object.<anonymous> (/tmp/tmpq7o7hdbv.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'c',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let char_count: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count.hasOwnProperty(str1[i])) {\n            char_count[str1[i]] += 1;\n        } else {\n            char_count[str1[i]] = 1;\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count[str1[i]] === 1) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\nundefined\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let result: string | undefined;\n  let str: string = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      result = str[i];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        if (str1.indexOf(char) == i && str1.indexOf(char, i + 1) == -1) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdef\"));\nconsole.log(first_non_repeating_character(\"abacabad\"));\nconsole.log(first_non_repeating_character(\"abacabaabacaba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "a\nc\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let result: string | undefined;\n  let charCount: { [key: string]: number } = {};\n  for (let i = 0; i < str1.length; i++) {\n    if (charCount[str1[i]]) {\n      charCount[str1[i]]++;\n    } else {\n      charCount[str1[i]] = 1;\n    }\n  }\n  for (let i = 0; i < str1.length; i++) {\n    if (charCount[str1[i]] === 1) {\n      result = str1[i];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "f\nf\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123333,
      "stdout": "undefined\nundefined\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123333,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            char = c;\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123333,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let firstChar: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            firstChar = str[i];\n            break;\n        }\n    }\n    return firstChar;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let result: string | undefined;\n  let count: number = 0;\n  let i: number = 0;\n  let j: number = 0;\n  for (i = 0; i < str1.length; i++) {\n    for (j = 0; j < str1.length; j++) {\n      if (str1[i] === str1[j]) {\n        count++;\n      }\n    }\n    if (count === 1) {\n      result = str1[i];\n      break;\n    }\n    count = 0;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abcab'));\nconsole.log(first_non_repeating_character('abab'));\nconsole.log(first_non_repeating_character('aabbbc'));\nconsole.log(first_non_repeating_character('aabbdbc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let result: string | undefined;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      result = str1[i];\n      break;\n    }\n  }\n  return result;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "a\na\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        if (str1.indexOf(char) == i && str1.indexOf(char, i + 1) == -1) {\n            return char;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let pos: number = 0;\n    let i: number;\n    let str: string = str1;\n    for (i = 0; i < str.length; i++) {\n        if (str.charAt(i) != ' ') {\n            str = str.replace(str.charAt(i), '');\n            count++;\n        }\n        if (count == 1) {\n            pos = i;\n            break;\n        }\n    }\n    return str1.charAt(pos);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpp9t6l_ba.js:22:12)\n    at Object.<anonymous> (/tmp/tmpp9t6l_ba.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] == char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let first_non_repeating_character: string | undefined;\n    let string_array: string[] = str1.split('');\n    let count: number = 0;\n    for (let i = 0; i < string_array.length; i++) {\n        for (let j = 0; j < string_array.length; j++) {\n            if (string_array[i] == string_array[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            first_non_repeating_character = string_array[i];\n            break;\n        }\n        count = 0;\n    }\n    return first_non_repeating_character;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "c\nd\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] == char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let index = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < str1.length; i++) {\n        for (j = 0; j < str1.length; j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "a\na\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpj1_07ur7.js:26:12)\n    at Object.<anonymous> (/tmp/tmpj1_07ur7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char, charCount = {};\n    for (let i = 0; i < str1.length; i++) {\n        char = str1[i];\n        if (charCount[char]) {\n            charCount[char] += 1;\n        }\n        else {\n            charCount[char] = 1;\n        }\n    }\n    for (let j in charCount) {\n        if (charCount[j] == 1) {\n            return j;\n        }\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let result: string | undefined;\n  let str: string = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      result = str[i];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < str1.length; i++) {\n        for (j = 0; j < str1.length; j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            index = i;\n            break;\n        }\n        count = 0;\n    }\n    return str1[index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmplbjn63v7.js:24:12)\n    at Object.<anonymous> (/tmp/tmplbjn63v7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        charCount = 0;\n        for (let j = 0; j < chars.length; j++) {\n            if (char == chars[j]) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdef\"));\nconsole.log(first_non_repeating_character(\"abacabad\"));\nconsole.log(first_non_repeating_character(\"abacabaabacaba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "a\nc\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "c\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let char_count: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count[str1[i]] === undefined) {\n            char_count[str1[i]] = 1;\n        } else {\n            char_count[str1[i]] += 1;\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (char_count[str1[i]] === 1) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    let c = str1.charAt(i);\n    if (str1.indexOf(c) == i && str1.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    for (let char of chars) {\n        if (str1.indexOf(char) == str1.lastIndexOf(char)) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "f\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str: string = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let first_non_repeating_character: string | undefined;\n    let str_array: string[] = str1.split('');\n    let count: number = 0;\n    for (let i = 0; i < str_array.length; i++) {\n        for (let j = 0; j < str_array.length; j++) {\n            if (str_array[i] == str_array[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            first_non_repeating_character = str_array[i];\n            break;\n        }\n        count = 0;\n    }\n    return first_non_repeating_character;\n}\n\nconsole.log(first_non_repeating_character('abcab'));\nconsole.log(first_non_repeating_character('abab'));\nconsole.log(first_non_repeating_character('aabbbc'));\nconsole.log(first_non_repeating_character('aabbdbc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] == char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let first_non_repeating_character: string | undefined;\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            first_non_repeating_character = str[i];\n            ctr += 1;\n            break;\n        }\n    }\n    return ctr == 1 ? first_non_repeating_character : undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: { [key: string]: number } = {};\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        if (charCount[char]) {\n            charCount[char] += 1;\n        } else {\n            charCount[char] = 1;\n        }\n    }\n    for (let j in charCount) {\n        if (charCount[j] == 1) {\n            return j;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: { [key: string]: number } = {};\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        if (charCount[char]) {\n            charCount[char] += 1;\n        } else {\n            charCount[char] = 1;\n        }\n    }\n    for (let j in charCount) {\n        if (charCount[j] == 1) {\n            return j;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let index = 0;\n    let i = 0;\n    let str = str1.toLowerCase();\n    for (i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            count++;\n            index = i;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    } else {\n        return str[index];\n    }\n}\nconsole.log(first_non_repeating_character(\"abcdef\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "a\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let str: string = '';\n    for (i = 0; i < str1.length; i++) {\n        if (str1.indexOf(str1[i]) == str1.lastIndexOf(str1[i])) {\n            str += str1[i];\n            count = 1;\n            index = i;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    }\n    else {\n        return str;\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "c\nd\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let first_non_repeating_character: string | undefined;\n    let str = str1.toLowerCase();\n    let count: number = 0;\n    let i: number, j: number;\n    for (i = 0; i < str.length; i++) {\n        for (j = 0; j < str.length; j++) {\n            if (str[i] == str[j])\n                count++;\n        }\n        if (count < 2) {\n            first_non_repeating_character = str[i];\n            break;\n        }\n        count = 0;\n    }\n    return first_non_repeating_character;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      return str1[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "undefined\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdef\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "a\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined = undefined;\n    let obj: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (obj[str1[i]] == undefined) {\n            obj[str1[i]] = 1;\n        } else {\n            obj[str1[i]] += 1;\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (obj[str1[i]] == 1) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result = undefined;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    for (let i = 0; i < str1.length; i++) {\n        let char = str1.charAt(i);\n        if (str1.indexOf(char) === i && str1.indexOf(char, i + 1) === -1) {\n            result = char;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "c\nd\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n            return str1[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    for (let i = 0; i < str1.length; i++) {\n        let count = 0;\n        for (let j = 0; j < str1.length; j++) {\n            if (str1[i] === str1[j]) {\n                count++;\n            }\n        }\n        if (count === 1) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "undefined\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123333,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let str: string = '';\n    for (i = 0; i < str1.length; i++) {\n        if (str1.indexOf(str1[i]) == str1.lastIndexOf(str1[i])) {\n            str += str1[i];\n            count = 1;\n            index = i;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    }\n    else {\n        return str;\n    }\n}\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "c\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "c\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let count: number = 0;\n    for (let i = 0; i < str1.length; i++) {\n        for (let j = 0; j < str1.length; j++) {\n            if (str1[i] === str1[j]) {\n                count++;\n            }\n        }\n        if (count === 1) {\n            result = str1[i];\n            break;\n        }\n        count = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "e\na\nw\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let str: string = '';\n    for (i = 0; i < str1.length; i++) {\n        if (str1.indexOf(str1[i]) == str1.lastIndexOf(str1[i])) {\n            str += str1[i];\n            count = 1;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    }\n    else {\n        return str;\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] == char) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    let count: number;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        count = 0;\n        for (let j = 0; j < chars.length; j++) {\n            if (char == chars[j]) {\n                count++;\n            }\n        }\n        if (count < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i && str.indexOf(str[i], i + 1) == -1) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123338,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123338,
      "stdout": "e\na\nw\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123338,
      "stdout": "f\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < str1.length; i++) {\n        count = 0;\n        for (j = 0; j < str1.length; j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            index = i;\n            break;\n        }\n    }\n    if (count == 1) {\n        return str1[index];\n    }\n    else {\n        return undefined;\n    }\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let count: number = 0;\n  let pos: number = 0;\n  let char: string;\n\n  for (let i = 0; i < str1.length; i++) {\n    char = str1[i];\n    count = 0;\n    for (let j = 0; j < str1.length; j++) {\n      if (char == str1[j]) {\n        count++;\n      }\n    }\n    if (count == 1) {\n      pos = i;\n      break;\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"abcdab\"));\nconsole.log(first_non_repeating_character(\"abcdabc\"));\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "c\nd\nd\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'c'\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpmg2gwg33.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmg2gwg33.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'c',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdab\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "undefined\nundefined\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    for (let i = 0; i < str1.length; i++) {\n        let char = str1.charAt(i);\n        if (str1.indexOf(char) == i && str1.indexOf(char, i + 1) == -1) {\n            result = char;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let len: number = str1.length;\n  let char: string;\n  let charCount: number;\n  for (let i = 0; i < len; i++) {\n    char = str1[i];\n    charCount = 0;\n    for (let j = 0; j < len; j++) {\n      if (str1[j] == char) {\n        charCount += 1;\n      }\n    }\n    if (charCount < 2) {\n      return char;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abcdab'));\nconsole.log(first_non_repeating_character('abcdabc'));\nconsole.log(first_non_repeating_character('abcdabcd'));\nconsole.log(first_non_repeating_character('abcdabcdab'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "c\nd\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123328,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count = 0;\n    let str = str1.toLowerCase();\n    let c: string;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            c = str[i];\n            count++;\n            break;\n        }\n    }\n    if (count == 0) {\n        return undefined;\n    } else {\n        return c;\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "undefined\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('abacdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "a\nb\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let count: number = 0;\n    let index: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < str1.length; i++) {\n        count = 0;\n        for (j = 0; j < str1.length; j++) {\n            if (str1[i] == str1[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            index = i;\n            break;\n        }\n    }\n    if (count == 1) {\n        return str1[index];\n    } else {\n        return undefined;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let charCount: { [key: string]: number } = {};\n    for (let i = 0; i < str1.length; i++) {\n        if (charCount[str1[i]] === undefined) {\n            charCount[str1[i]] = 1;\n        } else {\n            charCount[str1[i]] += 1;\n        }\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (charCount[str1[i]] === 1) {\n            result = str1[i];\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcbad\"));\nconsole.log(first_non_repeating_character(\"abcabcffab\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "undefined\nc\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "f\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      return str1[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      return str1[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdab\"));\nconsole.log(first_non_repeating_character(\"abcdabc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "c\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char, index;\n    for (let i = 0; i < str1.length; i++) {\n        char = str1[i];\n        index = str1.indexOf(char);\n        if (index == i && str1.indexOf(char, index + 1) == -1) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "undefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517391,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let result: string | undefined;\n    let str: string = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            result = str[i];\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}