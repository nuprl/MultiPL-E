{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "ts",
  "prompt": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpfru_baez.js:14:12)\n    at Object.<anonymous> (/tmp/tmpfru_baez.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "../../../../tmp/tmp1jsl41jm.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp1jsl41jm.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "../../../../tmp/tmpv2gd0xf6.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpv2gd0xf6.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnjjjnef6.js:15:12)\n    at Object.<anonymous> (/tmp/tmpnjjjnef6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next perfect square greater than given number is: \" + next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "Next perfect square greater than given number is: 36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp616nf9sd.js:16:12)\n    at Object.<anonymous> (/tmp/tmp616nf9sd.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpu5pd1goc.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu5pd1goc.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n9\n49\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp8xhkfs3p.js:15:12)\n    at Object.<anonymous> (/tmp/tmp8xhkfs3p.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp4k12j0za.js:17:12)\n    at Object.<anonymous> (/tmp/tmp4k12j0za.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i += 1;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_d1tllb2.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_d1tllb2.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "9\n16\n25\n36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbaewy45m.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbaewy45m.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(Math.ceil(sqrt_N), 2);\n    return next_Perfect_Square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpklrhxt9e.js:12:12)\n    at Object.<anonymous> (/tmp/tmpklrhxt9e.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122792,
      "stdout": "9\n16\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    let next_Perfect_Square: number = 0;\n    while (i * i <= N) {\n        i++;\n    }\n    next_Perfect_Square = i * i;\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmptsccqdwn.js:12:12)\n    at Object.<anonymous> (/tmp/tmptsccqdwn.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpkd4vwc0v.js:13:12)\n    at Object.<anonymous> (/tmp/tmpkd4vwc0v.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt = Math.sqrt(N);\n    if (sqrt % 1 == 0) {\n        return (sqrt + 1) * (sqrt + 1);\n    }\n    else {\n        return -1;\n    }\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpoquk7ncx.js:15:12)\n    at Object.<anonymous> (/tmp/tmpoquk7ncx.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    if (sqrt_N % 1 == 0) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        return -1;\n    }\n}\n\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpd55ks87z.js:16:12)\n    at Object.<anonymous> (/tmp/tmpd55ks87z.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square = Math.ceil(Math.sqrt(N));\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "9\n16\n16\n25\n25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmptvvvlne3.js:16:12)\n    at Object.<anonymous> (/tmp/tmptvvvlne3.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(49));\nconsole.log(next_Perfect_Square(64));\nconsole.log(next_Perfect_Square(81));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(121));\nconsole.log(next_Perfect_Square(144));\nconsole.log(next_Perfect_Square(169));\nconsole.log(next_Perfect_Square(196));\nconsole.log(next_Perfect_Square(225));\nconsole.log(next_Perfect_Square(256));\nconsole.log(next_Perfect_Square(289));\nconsole.log(next_Perfect_Square(324));\nconsole.log(next_Perfect_Square(361));\nconsole.log(next_Perfect_Square(400));\nconsole.log(next_Perfect_Square(441));\nconsole.log(next_Perfect_Square(484));\nconsole.log(next_Perfect_Square(529));\nconsole.log(next_Perfect_Square(576));\nconsole.log(next_Perfect_Square(625));\nconsole.log(next_Perfect_Square(676));\nconsole.log(next_Perfect_Square(729));\nconsole.log(next_Perfect_Square(784));\nconsole.log(next_Perfect_Square(841));\nconsole.log(next_Perfect_Square(900));\nconsole.log(next_Perfect_Square(961));\nconsole.log(next_Perfect_Square(1024));\nconsole.log(next_Perfect_Square(1089));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "9\n9\n16\n25\n36\n49\n64\n81\n100\n121\n144\n169\n196\n225\n256\n289\n324\n361\n400\n441\n484\n529\n576\n625\n676\n729\n784\n841\n900\n961\n1024\n1089\n1156\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "9\n16\n16\n25\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "9\n9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var next_Perfect_Square: number = 0;\n    var i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(\"Next Perfect Square is: \" + next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "Next Perfect Square is: 36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i += 1;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpdc0d60_u.js:15:12)\n    at Object.<anonymous> (/tmp/tmpdc0d60_u.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = 0;\n    if (sqrt_N % 1 == 0) {\n        next_Perfect_Square = (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        next_Perfect_Square = (sqrt_N + 2) * (sqrt_N + 2);\n    }\n    return next_Perfect_Square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122792,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n62.66431913239847\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpoo7nvhjy.js:16:12)\n    at Object.<anonymous> (/tmp/tmpoo7nvhjy.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 62.66431913239847,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnjjjnef6.js:15:12)\n    at Object.<anonymous> (/tmp/tmpnjjjnef6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i += 1;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpby3efx_g.js:14:12)\n    at Object.<anonymous> (/tmp/tmpby3efx_g.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = N;\n    while (true) {\n        if (Math.sqrt(i) % 1 == 0) {\n            return i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnhw94g_j.js:17:12)\n    at Object.<anonymous> (/tmp/tmpnhw94g_j.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square = Math.ceil(Math.sqrt(N));\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmput6gm_c8.js:12:12)\n    at Object.<anonymous> (/tmp/tmput6gm_c8.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp7565ldli.js:13:12)\n    at Object.<anonymous> (/tmp/tmp7565ldli.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpxfxw_zoo.js:15:12)\n    at Object.<anonymous> (/tmp/tmpxfxw_zoo.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square = 0;\n    for (let i = 1; i < N; i++) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n    }\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbaewy45m.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbaewy45m.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnjjjnef6.js:15:12)\n    at Object.<anonymous> (/tmp/tmpnjjjnef6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let square_root: number = Math.sqrt(N);\n    if (square_root % 1 == 0) {\n        next_Perfect_Square = (square_root + 1) * (square_root + 1);\n    }\n    else {\n        next_Perfect_Square = -1;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "36\n49\n-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpqpf9f_yy.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqpf9f_yy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "9\n9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "9\n9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpfru_baez.js:14:12)\n    at Object.<anonymous> (/tmp/tmpfru_baez.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "16\n81\n196\n361\n576\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1156\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpc3v5knq3.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc3v5knq3.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1156,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp03s4u01a.js:15:12)\n    at Object.<anonymous> (/tmp/tmp03s4u01a.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_perfect_square = 0;\n    let i = 1;\n    while (i < N) {\n        i++;\n    }\n    next_perfect_square = i * i;\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n100\n225\n400\n625\n900\n1225\n1600\n2025\n2500\n3025\n3600\n4225\n4900\n5625\n6400\n7225\n8100\n9025\n10000\n11025\n12100\n13225\n14400\n15625\n16900\n18225\n19600\n21025\n22500\n24025\n25600\n27225\n28900\n30625\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1225\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpoqel0mnu.js:49:12)\n    at Object.<anonymous> (/tmp/tmpoqel0mnu.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1225,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt: number = Math.sqrt(N);\n    let next_sqrt: number = Math.ceil(sqrt);\n    let next_perfect_square: number = next_sqrt * next_sqrt;\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp7pbl9j5x.js:14:12)\n    at Object.<anonymous> (/tmp/tmp7pbl9j5x.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_d1tllb2.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_d1tllb2.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square = 0;\n    let i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp73m84wyl.js:17:12)\n    at Object.<anonymous> (/tmp/tmp73m84wyl.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnjjjnef6.js:15:12)\n    at Object.<anonymous> (/tmp/tmpnjjjnef6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next Perfect Square: \" + next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "Next Perfect Square: 36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2918vgul.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2918vgul.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122795,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpfs18lj7w.js:17:12)\n    at Object.<anonymous> (/tmp/tmpfs18lj7w.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num = N;\n    while (true) {\n        let sqrt = Math.sqrt(num);\n        if (sqrt % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp7ymvdrb3.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7ymvdrb3.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpxfxw_zoo.js:15:12)\n    at Object.<anonymous> (/tmp/tmpxfxw_zoo.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num = N;\n    let sqrt = Math.sqrt(num);\n    let next_sqrt = Math.ceil(sqrt);\n    let next_perfect_square = next_sqrt * next_sqrt;\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "9\n9\n9\n9\n9\n16\n16\n16\n16\n16\n16\n16\n25\n25\n25\n25\n25\n25\n25\n25\n25\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n36\n49\n49\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmphu6p5ng5.js:49:12)\n    at Object.<anonymous> (/tmp/tmphu6p5ng5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i = i + 1;\n    }\n    return result;\n}\nconsole.log(\"Next perfect square is: \" + next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "Next perfect square is: 25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpj9fogjtd.js:17:12)\n    at Object.<anonymous> (/tmp/tmpj9fogjtd.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "../../../../tmp/tmpnys4al8s.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpnys4al8s.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnjjjnef6.js:15:12)\n    at Object.<anonymous> (/tmp/tmpnjjjnef6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "9\n16\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpodixcw2q.js:17:12)\n    at Object.<anonymous> (/tmp/tmpodixcw2q.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpexl1kt3r.js:15:12)\n    at Object.<anonymous> (/tmp/tmpexl1kt3r.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    if (sqrt_N % 1 === 0) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    } else {\n        return (Math.floor(sqrt_N) + 1) * (Math.floor(sqrt_N) + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var num = Math.ceil(Math.sqrt(N));\n    return num * num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_926brw5.js:11:12)\n    at Object.<anonymous> (/tmp/tmp_926brw5.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt = Math.sqrt(N);\n    let next_sqrt = Math.ceil(sqrt);\n    let next_perfect_square = Math.pow(next_sqrt, 2);\n    return next_perfect_square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n9\n36\n49\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ikl__r2.js:17:12)\n    at Object.<anonymous> (/tmp/tmp3ikl__r2.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square = 0;\n    let i = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "7\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmp20c3k782.js:18:12)\n    at Object.<anonymous> (/tmp/tmp20c3k782.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp8wnkj8wm.js:17:12)\n    at Object.<anonymous> (/tmp/tmp8wnkj8wm.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(41));\nconsole.log(next_Perfect\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "../../../../tmp/tmp7gczd6wi.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp7gczd6wi.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpkd4vwc0v.js:13:12)\n    at Object.<anonymous> (/tmp/tmpkd4vwc0v.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n36\n49\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square = N;\n    while (true) {\n        next_Perfect_Square++;\n        if (Math.sqrt(next_Perfect_Square) % 1 == 0) {\n            return next_Perfect_Square;\n        }\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(17));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n16\n25\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp6b_5b3ft.js:13:12)\n    at Object.<anonymous> (/tmp/tmp6b_5b3ft.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(Math.ceil(sqrt_N), 2);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpp6lv4lt1.js:13:12)\n    at Object.<anonymous> (/tmp/tmpp6lv4lt1.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(9));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i = i + 1;\n    }\n    return result;\n}\n\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpearuxz9h.js:17:12)\n    at Object.<anonymous> (/tmp/tmpearuxz9h.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp46jvnc4a.js:13:12)\n    at Object.<anonymous> (/tmp/tmp46jvnc4a.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpu5pd1goc.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu5pd1goc.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var sqrt_N = Math.sqrt(N);\n    var next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3kbi8xjy.js:13:12)\n    at Object.<anonymous> (/tmp/tmp3kbi8xjy.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect_Square\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "../../../../tmp/tmp045uwxd8.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp045uwxd8.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2918vgul.js:15:12)\n    at Object.<anonymous> (/tmp/tmp2918vgul.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num: number = N;\n    while (true) {\n        if (Math.sqrt(num) % 1 == 0) {\n            return num;\n        }\n        else {\n            num++;\n        }\n    }\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmps4c3iepy.js:20:12)\n    at Object.<anonymous> (/tmp/tmps4c3iepy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "9\n9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp2oclu6wo.js:17:12)\n    at Object.<anonymous> (/tmp/tmp2oclu6wo.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_sqrt_N = Math.ceil(sqrt_N);\n    return next_sqrt_N * next_sqrt_N;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpnnq4ijq0.js:12:12)\n    at Object.<anonymous> (/tmp/tmpnnq4ijq0.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpexl1kt3r.js:15:12)\n    at Object.<anonymous> (/tmp/tmpexl1kt3r.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmppz15linu.js:17:12)\n    at Object.<anonymous> (/tmp/tmppz15linu.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(Math.ceil(sqrt_N), 2);\n    return next_Perfect_Square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpklrhxt9e.js:12:12)\n    at Object.<anonymous> (/tmp/tmpklrhxt9e.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i = i + 1;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    if (sqrt_N % 1 == 0) {\n        return (sqrt_N + 1) * (sqrt_N + 1);\n    }\n    else {\n        return (Math.floor(sqrt_N) + 1) * (Math.floor(sqrt_N) + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num: number = N;\n    let sqrt: number = Math.sqrt(num);\n    let next_Perfect_Square: number = Math.pow(sqrt + 1, 2);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "10.47213595499958\n11.898979485566354\n13.291502622129181\n14.656854249492381\n16\n17.324555320336763\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n47.83215956619923\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmp0c2zazfc.js:17:12)\n    at Object.<anonymous> (/tmp/tmp0c2zazfc.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 47.83215956619923,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i < N) {\n        i++;\n    }\n    next_Perfect_Square = i * i;\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "625\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1225\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpva7dexmb.js:15:12)\n    at Object.<anonymous> (/tmp/tmpva7dexmb.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1225,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpxfxw_zoo.js:15:12)\n    at Object.<anonymous> (/tmp/tmpxfxw_zoo.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_d1tllb2.js:15:12)\n    at Object.<anonymous> (/tmp/tmp_d1tllb2.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "49\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var num: number = N;\n    var sqr: number = 0;\n    while (sqr <= num) {\n        sqr = Math.pow(num, 2);\n        num++;\n    }\n    return sqr;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "../../../../tmp/tmp43ogkndq.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp43ogkndq.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbaewy45m.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbaewy45m.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbaewy45m.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbaewy45m.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_perfect_square = 0;\n    let i = 1;\n    while (next_perfect_square < N) {\n        next_perfect_square = i * i;\n        i++;\n    }\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmppndttbjt.js:17:12)\n    at Object.<anonymous> (/tmp/tmppndttbjt.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) ** 2;\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpwyqd19zk.js:13:12)\n    at Object.<anonymous> (/tmp/tmpwyqd19zk.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow((sqrt_N + 1), 2);\n    return next_Perfect_Square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n47.83215956619923\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmp16sq9r0c.js:10:12)\n    at Object.<anonymous> (/tmp/tmp16sq9r0c.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 47.83215956619923,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    let result: number = 0;\n    while (i <= N) {\n        if (i * i > N) {\n            result = i * i;\n            break;\n        }\n        i++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "../../../../tmp/tmpashoav1a.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpashoav1a.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpbaewy45m.js:15:12)\n    at Object.<anonymous> (/tmp/tmpbaewy45m.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "../../../../tmp/tmpashoav1a.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpashoav1a.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "9\n16\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ho1c4c5.js:15:12)\n    at Object.<anonymous> (/tmp/tmp3ho1c4c5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "../../../../tmp/tmpl0l6pzle.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpl0l6pzle.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1665510018,
      "stdout": "../../../../tmp/tmp1jsl41jm.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp1jsl41jm.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "9\n16\n16\n25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp6klgy2te.js:18:12)\n    at Object.<anonymous> (/tmp/tmp6klgy2te.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "../../../../tmp/tmpk1soxlg9.ts(44,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(36));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp3ipgwoth.js:17:12)\n    at Object.<anonymous> (/tmp/tmp3ipgwoth.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122794,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpxfxw_zoo.js:15:12)\n    at Object.<anonymous> (/tmp/tmpxfxw_zoo.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var sqrt_N: number = Math.sqrt(N);\n    var next_Perfect_Square: number = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122801,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp8162zk0d.js:13:12)\n    at Object.<anonymous> (/tmp/tmp8162zk0d.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let sqrt = Math.sqrt(N);\n    let next_sqrt = Math.ceil(sqrt);\n    return next_sqrt * next_sqrt;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "25\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmplo10qthz.js:13:12)\n    at Object.<anonymous> (/tmp/tmplo10qthz.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "9\n9\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpg61lvdcw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpg61lvdcw.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "9\n9\n9\n9\n16\n16\n16\n16\n16\n16\n16\n25\n25\n25\n25\n25\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num = N;\n    while (true) {\n        if (Math.sqrt(num) % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "9\n16\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmp_18ky26g.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_18ky26g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next Perfect Square: \" + next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Next Perfect Square: 36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num = N;\n    while (true) {\n        let sqrt = Math.sqrt(num);\n        if (sqrt % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "9\n16\n16\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpxxh017rg.js:20:12)\n    at Object.<anonymous> (/tmp/tmpxxh017rg.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely deep-equal\n\n16\n    at test (/tmp/tmpotptlr_p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpotptlr_p.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var next_Perfect_Square = 0;\n    var sqrt = Math.sqrt(N);\n    if (sqrt % 1 === 0) {\n        next_Perfect_Square = (sqrt + 1) * (sqrt + 1);\n    }\n    else {\n        next_Perfect_Square = -1;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(\"Next Perfect Square is : \" + next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "Next Perfect Square is : 36\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpmlgu926w.js:17:12)\n    at Object.<anonymous> (/tmp/tmpmlgu926w.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122791,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let next_Perfect_Square: number = 0;\n    let square_root: number = 0;\n    let square: number = 0;\n    square_root = Math.sqrt(N);\n    square = Math.pow(square_root, 2);\n    if (square == N) {\n        next_Perfect_Square = Math.pow((square_root + 1), 2);\n    }\n    else {\n        next_Perfect_Square = Math.pow((square_root + 1), 2);\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(100));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "36\n49\n121\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n47.83215956619923\n\nshould loosely deep-equal\n\n36\n    at test (/tmp/tmpwp2kpe0v.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwp2kpe0v.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 47.83215956619923,\n  expected: 36,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    let num: number = N;\n    while (true) {\n        num++;\n        if (Math.sqrt(num) % 1 == 0) {\n            return num;\n        }\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "../../../../tmp/tmp5k27irql.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp5k27irql.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n    var i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
      "timestamp": 1666122800,
      "stdout": "36\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}