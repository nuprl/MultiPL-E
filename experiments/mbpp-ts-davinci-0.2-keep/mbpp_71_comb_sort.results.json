{
  "name": "mbpp_71_comb_sort",
  "language": "ts",
  "prompt": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swapped = true;\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap <= 1) {\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    const gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        sorted = true;\n        let gap = Math.floor(nums.length / shrink);\n        if (gap > 1) {\n            sorted = false;\n        }\n\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509786,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap <= 1) {\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.247330950103979);\n    }\n    let i = 0;\n    swapped = false;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        const temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        swapped = true;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    const gap = nums.length;\n    let swapped = false;\n    let i = 0;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i += 1;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "../../../../tmp/tmp3melqvdb.ts(8,13): error TS2588: Cannot assign to 'gap' because it is a constant.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums, i, i + gap);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "../../../../tmp/tmpmi_y4r5c.ts(13,17): error TS2304: Cannot find name 'swap'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        const temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        let i = 0;\n        swapped = false;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap: number = nums.length;\n    let swapped: boolean = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i: number = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    let temp: number;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.3);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        const temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap <= 1) {\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    const gap: number = nums.length;\n    let shrink: number = 1.3;\n    let sorted: boolean = false;\n    while (!sorted) {\n        let gap: number = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i: number = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp: number = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "../../../../tmp/tmpml8b805d.ts(7,38): error TS2448: Block-scoped variable 'gap' used before its declaration.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap: number = nums.length;\n    let swapped: boolean = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i: number = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp: number = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\nconsole.log(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(comb_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(comb_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]));\nconsole.log(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(comb_sort([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(comb_sort([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]));\nconsole.log(comb_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(comb_sort([30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "../../../../tmp/tmpq4_70baf.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpq4_70baf.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap <= 1) {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swapped = true;\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509772,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort a list of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509771,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}