{
  "name": "mbpp_291_count_no_of_ways",
  "language": "ts",
  "prompt": "//Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunction count_no_of_ways(n: number, k: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_no_of_ways;\n  assert.deepEqual(candidate(2, 4),16);\n  assert.deepEqual(candidate(3, 2),6);\n  assert.deepEqual(candidate(4, 4),228);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let same = 0;\n    let diff = k;\n    let total = same + diff;\n    for (let i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    let diff = k * (k - 1);\n    let same = k;\n    for (let i = 2; i < n; i++) {\n        let temp = diff;\n        diff = (diff + same) * (k - 1);\n        same = temp;\n    }\n    return diff + same;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    if (n === 2) {\n        return k * k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    let same = 0, diff = k;\n    for (let i = 2; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    let same = 0, diff = k;\n    for (let i = 2; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n\nconsole.log(count_no_of_ways(3, 2));\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return k;\n    }\n    if (n == 2) {\n        return k * k;\n    }\n    let diff = k * (k - 1);\n    let same = k;\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (diff + same) * (k - 1);\n        same = temp;\n    }\n    return diff + same;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    if (n === 2) {\n        return k * k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    let same = 0;\n    let diff = k;\n    let total = same + diff;\n    for (let i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\n",
    "  let dp = [];\n  dp[0] = 0;\n  dp[1] = k;\n  dp[2] = k + k * (k - 1);\n  for (let i = 3; i <= n; i++) {\n    dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2]);\n  }\n  return dp[n];\n}\n",
    "    if (n == 0) return 0;\n    if (n == 1) return k;\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    if (n === 2) {\n        return k * k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    let same = 0;\n    let diff = k;\n    let total = same + diff;\n    for (let i = 2; i <= n; i++) {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    return total;\n}\n",
    "    if (n === 1) {\n        return k;\n    }\n    if (n === 2) {\n        return k * k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 1) {\n        return k;\n    }\n    if (n === 2) {\n        return k * k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n",
    "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return k;\n    }\n    if (n === 2) {\n        return k + k * (k - 1);\n    }\n    let same = k;\n    let diff = k * (k - 1);\n    for (let i = 3; i <= n; i++) {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    return same + diff;\n}\n"
  ]
}