{
  "name": "mbpp_59_is_octagonal",
  "language": "ts",
  "prompt": "//Write a function to find the nth octagonal number.\nfunction is_octagonal(n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_octagonal;\n  assert.deepEqual(candidate(5),65);\n  assert.deepEqual(candidate(10),280);\n  assert.deepEqual(candidate(15),645);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return n * (3 * n - 2);\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "  let octagonal = 0;\n  let i = 1;\n  while (octagonal < n) {\n    octagonal = i * (3 * i - 2);\n    i++;\n  }\n  if (octagonal === n) {\n    return octagonal;\n  } else {\n    return 0;\n  }\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "  return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    let i = 1;\n    let octagonal = 0;\n    while (octagonal < n) {\n        octagonal = i * (3 * i - 2);\n        i++;\n    }\n    return octagonal;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (Math.sqrt(1 + 24 * n) + 1) / 6;\n}\n",
    "    return (n * (3 * n - 2));\n}\n",
    "    let nth_octagonal = 0;\n    let i = 1;\n    while (nth_octagonal < n) {\n        nth_octagonal = i * (3 * i - 2);\n        i++;\n    }\n    return nth_octagonal;\n}\n",
    "    let x = (Math.sqrt(1 + 24 * n) + 1) / 6;\n    return x === Math.floor(x) ? x : 0;\n}\n",
    "    return (Math.sqrt(1 + 8 * n) + 1) / 4;\n}\n"
  ]
}