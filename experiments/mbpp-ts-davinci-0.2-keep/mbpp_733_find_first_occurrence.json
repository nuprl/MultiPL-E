{
  "name": "mbpp_733_find_first_occurrence",
  "language": "ts",
  "prompt": "//Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence(A: number[], x: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_first_occurrence;\n  assert.deepEqual(candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1);\n  assert.deepEqual(candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2);\n  assert.deepEqual(candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let left = 0,\n        right = A.length - 1,\n        result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            right = mid - 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            right = mid - 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "  let start = 0, end = A.length - 1;\n  let result = -1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (x === A[mid]) {\n      result = mid;\n      end = mid - 1;\n    } else if (x < A[mid]) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let start = 0;\n    let end = A.length - 1;\n    let result = -1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            end = mid - 1;\n        } else if (x < A[mid]) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n\n    while (left <= right) {\n        let mid = Math.floor(left + (right - left) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            right = mid - 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0;\n    let high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor(low + (high - low) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n",
    "    let low = 0, high = A.length - 1;\n    let result = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            high = mid - 1;\n        } else if (x < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return result;\n}\n"
  ]
}