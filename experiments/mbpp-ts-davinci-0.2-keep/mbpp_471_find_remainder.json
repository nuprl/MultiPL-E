{
  "name": "mbpp_471_find_remainder",
  "language": "ts",
  "prompt": "//Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder(arr: number[], n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_remainder;\n  assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);\n  assert.deepEqual(candidate([1, 1, 1], 1),0);\n  assert.deepEqual(candidate([1, 2, 1], 2),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        prod *= arr[i];\n    }\n    return prod % n;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < arr.length; i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n",
    "    let product = arr.reduce((a, b) => a * b);\n    return product % n;\n}\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconsole.log(find_remainder([1, 2, 3, 4, 5], 3));\nconsole.log(find_remainder([1, 2, 3, 4, 5], 7));\nconsole.log(find_remainder([1, 2, 3, 4, 5], 11));\n",
    "    let result: number = 1;\n    for (let i = 0; i < arr.length; i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\nconsole.log(find_remainder([1, 2, 3, 4, 5], 3));\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product % n;\n}\n",
    "  return arr.reduce((a, b) => a * b) % n;\n}\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product = product * arr[i] % n;\n    }\n    return product;\n}\n\nconsole.log(find_remainder([1, 2, 3, 4, 5], 3));\n",
    "    let product: number = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconsole.log(find_remainder([100, 10, 5, 25, 35, 14], 11));\n",
    "    let result = 1;\n    for (let i = 0; i < arr.length; i++) {\n        result = (result * (arr[i] % n)) % n;\n    }\n    return result;\n}\n\nconsole.log(find_remainder([100, 10, 5, 25, 35, 14], 11));\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product = (product * arr[i]) % n;\n    }\n    return product;\n}\n\nconsole.log(find_remainder([1, 2, 3, 4, 5], 3));\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product = product * arr[i];\n    }\n    return product % n;\n}\n\nconsole.log(find_remainder([1, 2, 3, 4, 5], 3));\n",
    "  return arr.reduce((acc, curr) => acc * curr) % n;\n}\n",
    "    let product: number = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product % n;\n}\n",
    "  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product % n;\n}\n\nconsole.log(find_remainder([1, 2, 3, 4, 5], 3));\nconsole.log(find_remainder([1, 2, 3, 4, 5], 2));\nconsole.log(find_remainder([1, 2, 3, 4, 5], 5));\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product % n;\n}\n",
    "  return arr.reduce((a, b) => a * b, 1) % n;\n}\n",
    "    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        product *= arr[i];\n    }\n    return product % n;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < arr.length; i++) {\n        result = (result * arr[i]) % n;\n    }\n    return result;\n}\n\nconsole.log(find_remainder([2, 3, 4], 5));\nconsole.log(find_remainder([2, 3, 4], 2));\nconsole.log(find_remainder([2, 3, 4], 3));\nconsole.log(find_remainder([2, 3, 4], 4));\nconsole.log(find_remainder([2, 3, 4], 6));\n"
  ]
}