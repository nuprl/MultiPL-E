{
  "name": "mbpp_457_Find_Min",
  "language": "ts",
  "prompt": "//Write a python function to find the sublist having minimum length.\nfunction Find_Min(lst: any): any {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min;\n  assert.deepEqual(candidate([[1], [1, 2], [1, 2, 3]]),[1]);\n  assert.deepEqual(candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]),[1, 1]);\n  assert.deepEqual(candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]),[\"x\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    var min = lst[0].length;\n    var min_index = 0;\n    for (var i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nconsole.log(Find_Min([\"abc\", \"def\", \"ghi\", \"jkl\"]));\n",
    "    let min: number = lst[0].length;\n    let sublist: any = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            sublist = lst[i];\n        }\n    }\n    return sublist;\n}\nlet lst1: any = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]];\nconsole.log(Find_Min(lst1));\n",
    "    let min: number = lst[0].length;\n    let min_index: number = 0;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nconsole.log(Find_Min([[1, 2, 3], [4, 5], [6, 7, 8, 9]]));\n",
    "    let min = lst[0].length;\n    let min_lst = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;\n}\nconsole.log(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5]]));\nconsole.log(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]]));\nconsole.log(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7]]));\n",
    "    var min: number = lst[0].length;\n    var sublist: any = lst[0];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            sublist = lst[i];\n        }\n    }\n    return sublist;\n}\nvar lst = [[1, 2, 3], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]];\nconsole.log(Find_Min(lst));\n",
    "    let min: number = lst[0].length;\n    let min_list: any = [];\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length == min) {\n            min_list.push(lst[i]);\n        }\n    }\n    return min_list;\n}\nconsole.log(Find_Min([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5]]));\n",
    "    let min: number = lst[0].length;\n    let min_lst: any = lst[0];\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;\n}\n",
    "    let min: number = lst[0].length;\n    let min_lst: any = lst[0];\n    for (let i: number = 1; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;\n}\n",
    "    let min: number = lst[0].length;\n    let min_index: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nconsole.log(Find_Min([\"hello\", \"world\", \"hi\", \"bye\"]));\n",
    "    let min: number = lst[0].length;\n    let min_index: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nconsole.log(Find_Min([[1, 2, 3], [4, 5], [6, 7, 8, 9]]));\n",
    "    let min: number = lst[0].length;\n    let min_lst: any = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;\n}\nlet lst: any = [[1, 2, 3], [1, 2], [1, 2, 3, 4, 5]];\nconsole.log(Find_Min(lst));\n",
    "    let min: number = lst[0].length;\n    let sublist: any = lst[0];\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            sublist = lst[i];\n        }\n    }\n    return sublist;\n}\n",
    "    let min: number = lst[0].length;\n    let min_index: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nlet lst: any = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12, 13, 14, 15]];\nconsole.log(Find_Min(lst));\n",
    "    var min: number = lst[0].length;\n    var min_index: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nconsole.log(Find_Min([\"hello\", \"world\", \"hi\", \"bye\"]));\n",
    "    var min: number = lst[0].length;\n    var min_list: any = lst[0];\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_list = lst[i];\n        }\n    }\n    return min_list;\n}\nconsole.log(Find_Min([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]));\n",
    "    var min: number = lst[0].length;\n    var min_lst: any = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;\n}\nconsole.log(Find_Min([[1, 2, 3], [4, 5], [1, 2, 3, 4, 5]]));\n",
    "    var min: number = lst[0].length;\n    var min_index: number = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nvar lst = [[1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]];\nconsole.log(Find_Min(lst));\n",
    "    let min_len = lst[0].length;\n    let min_lst = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (min_len > lst[i].length) {\n            min_len = lst[i].length;\n            min_lst = lst[i];\n        }\n    }\n    return min_lst;\n}\n",
    "    let min: number = lst[0].length;\n    let min_index: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\nconsole.log(Find_Min([\"abc\", \"def\", \"ghi\", \"jkl\"]));\n",
    "    let min: number = lst[0].length;\n    let min_index: number = 0;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n            min_index = i;\n        }\n    }\n    return lst[min_index];\n}\n"
  ]
}