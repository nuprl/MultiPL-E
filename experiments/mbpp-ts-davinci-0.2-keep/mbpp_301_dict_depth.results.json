{
  "name": "mbpp_301_dict_depth",
  "language": "ts",
  "prompt": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') return 0;\n    let max = 1;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) max = depth;\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpe_i4_brg.js:16:12)\n    at Object.<anonymous> (/tmp/tmpe_i4_brg.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || d === undefined) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpf4y9797h.js:22:12)\n    at Object.<anonymous> (/tmp/tmpf4y9797h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth_key = dict_depth(d[key]);\n            if (depth_key > depth) {\n                depth = depth_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let value = d[key];\n        if (typeof value === 'object') {\n            let depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp183eq383.js:17:12)\n    at Object.<anonymous> (/tmp/tmp183eq383.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk9evb6zw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpk9evb6zw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpc69mf5qx.js:19:12)\n    at Object.<anonymous> (/tmp/tmpc69mf5qx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk9evb6zw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpk9evb6zw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "/tmp/tmpyfx40bog.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpyfx40bog.js:3:5)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n    at dict_depth (/tmp/tmpyfx40bog.js:9:37)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6coao5a2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6coao5a2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]) + 1;\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    function recurse(d: any, depth: number): void {\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n        for (const key in d) {\n            if (d.hasOwnProperty(key)) {\n                const element = d[key];\n                if (typeof element === \"object\") {\n                    recurse(element, depth + 1);\n                }\n            }\n        }\n    }\n    recurse(d, 1);\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === {}) {\n        return 0;\n    }\n    let max = 1;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk9evb6zw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpk9evb6zw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7ak__wmi.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7ak__wmi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (const key in d) {\n        if (typeof d[key] === \"object\") {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp183eq383.js:17:12)\n    at Object.<anonymous> (/tmp/tmp183eq383.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === undefined) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "/tmp/tmpbx91494p.js:3\n    if (d === undefined) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpbx91494p.js:3:5)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n    at dict_depth (/tmp/tmpbx91494p.js:8:29)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7ak__wmi.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7ak__wmi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6coao5a2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6coao5a2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 1;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth = dict_depth(d[key]) + 1;\n            max_depth = Math.max(max_depth, depth);\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]) + 1;\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let maxdepth = 1;\n    function depth(d: any, level: number): void {\n        if (typeof d == 'object') {\n            for (let k in d) {\n                depth(d[k], level + 1);\n            }\n        } else {\n            maxdepth = Math.max(maxdepth, level);\n        }\n    }\n    depth(d, 1);\n    return maxdepth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpoweqtnxe.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoweqtnxe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth_ = dict_depth(d[key]);\n            if (depth_ > depth) {\n                depth = depth_;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === {}) return 0;\n    let max = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) max = depth;\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (!(d instanceof Object)) {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (d.hasOwnProperty(k)) {\n            let v = d[k];\n            max = Math.max(max, dict_depth(v));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpo5wmb1nd.js:22:12)\n    at Object.<anonymous> (/tmp/tmpo5wmb1nd.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdmp5fmwb.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdmp5fmwb.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === {}) {\n        return 0;\n    }\n    let max = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp183eq383.js:17:12)\n    at Object.<anonymous> (/tmp/tmp183eq383.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvue2nxja.js:17:12)\n    at Object.<anonymous> (/tmp/tmpvue2nxja.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (const k in d) {\n        if (typeof d[k] === 'object') {\n            const depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqmyj16ti.js:17:12)\n    at Object.<anonymous> (/tmp/tmpqmyj16ti.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || d === undefined) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpatyvst54.js:19:12)\n    at Object.<anonymous> (/tmp/tmpatyvst54.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === undefined) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp01imgcvh.js:19:12)\n    at Object.<anonymous> (/tmp/tmp01imgcvh.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === 'object') {\n                const depth = dict_depth(element) + 1;\n                if (depth > max_depth) {\n                    max_depth = depth;\n                }\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp022wc1jx.js:20:12)\n    at Object.<anonymous> (/tmp/tmp022wc1jx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpi00o3tw4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpi00o3tw4.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 1;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            max_depth = Math.max(max_depth, dict_depth(d[key]));\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            max_depth = Math.max(max_depth, dict_depth(d[key]));\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpuho4is8z.js:21:12)\n    at Object.<anonymous> (/tmp/tmpuho4is8z.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7ak__wmi.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7ak__wmi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        let depth = dict_depth(d[k]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp5s6fsk_q.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5s6fsk_q.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === undefined) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmplnm2r8be.js:22:12)\n    at Object.<anonymous> (/tmp/tmplnm2r8be.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let value = d[key];\n        if (typeof value === \"object\") {\n            let depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 1;\n    for (const v of Object.values(d)) {\n        if (typeof v === 'object') {\n            const depth2 = dict_depth(v) + 1;\n            if (depth2 > depth) {\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const val = d[key];\n            if (typeof val === 'object') {\n                depth = Math.max(depth, dict_depth(val));\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4o08d6y7.js:17:12)\n    at Object.<anonymous> (/tmp/tmp4o08d6y7.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf2p6s8m8.js:17:12)\n    at Object.<anonymous> (/tmp/tmpf2p6s8m8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    let max_depth = 0;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            depth += 1;\n            max_depth = Math.max(max_depth, dict_depth(d[k]));\n        }\n    }\n    return depth + max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprtlwm5le.js:16:12)\n    at Object.<anonymous> (/tmp/tmprtlwm5le.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "/tmp/tmpz3zn7y61.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpz3zn7y61.js:3:5)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (!d) {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "/tmp/tmpo0w1jpio.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpo0w1jpio.js:3:5)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n    at dict_depth (/tmp/tmpo0w1jpio.js:11:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk9evb6zw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpk9evb6zw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp4o08d6y7.js:17:12)\n    at Object.<anonymous> (/tmp/tmp4o08d6y7.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === {}) {\n        return 0;\n    }\n    let max = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf2p6s8m8.js:17:12)\n    at Object.<anonymous> (/tmp/tmpf2p6s8m8.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === 'object') {\n                const depth = dict_depth(element);\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp183eq383.js:17:12)\n    at Object.<anonymous> (/tmp/tmp183eq383.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === {}) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvue2nxja.js:17:12)\n    at Object.<anonymous> (/tmp/tmpvue2nxja.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "/tmp/tmpz3zn7y61.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpz3zn7y61.js:3:5)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6coao5a2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6coao5a2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const value = d[key];\n            if (typeof value === 'object') {\n                const depth = dict_depth(value);\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "/tmp/tmpz3zn7y61.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpz3zn7y61.js:3:5)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== \"object\") {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 1;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpivdfktar.js:18:12)\n    at Object.<anonymous> (/tmp/tmpivdfktar.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        const depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || d === undefined) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp4pilodhx.js:19:12)\n    at Object.<anonymous> (/tmp/tmp4pilodhx.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvue2nxja.js:17:12)\n    at Object.<anonymous> (/tmp/tmpvue2nxja.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    let stack = [{key: null, value: d, depth: 1}];\n    while (stack.length > 0) {\n        let {key, value, depth} = stack.pop();\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n        if (typeof value === 'object') {\n            for (let k in value) {\n                stack.push({key: k, value: value[k], depth: depth + 1});\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpem3ifnum.js:22:12)\n    at Object.<anonymous> (/tmp/tmpem3ifnum.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 1;\n    function depth(d: any, current_depth: number): void {\n        if (current_depth > max_depth) {\n            max_depth = current_depth;\n        }\n        for (let k in d) {\n            if (typeof d[k] === \"object\") {\n                depth(d[k], current_depth + 1);\n            }\n        }\n    }\n    depth(d, 1);\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max: number = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth: number = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi8r13bov.js:17:12)\n    at Object.<anonymous> (/tmp/tmpi8r13bov.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvue2nxja.js:17:12)\n    at Object.<anonymous> (/tmp/tmpvue2nxja.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 1;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === 'object') {\n                max = Math.max(max, dict_depth(element) + 1);\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk9evb6zw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpk9evb6zw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const value = d[key];\n            const depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwihbk41o.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwihbk41o.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdxxl01j2.js:17:12)\n    at Object.<anonymous> (/tmp/tmpdxxl01j2.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === undefined) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let k in d) {\n        let v = d[k];\n        let depth = dict_depth(v);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (!d.hasOwnProperty('value')) {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (d.hasOwnProperty(k)) {\n            max = Math.max(max, dict_depth(d[k]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp1bo4ycux.js:20:12)\n    at Object.<anonymous> (/tmp/tmp1bo4ycux.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        max = Math.max(max, depth);\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp2hvevbz2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2hvevbz2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk9evb6zw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpk9evb6zw.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            max_depth = Math.max(max_depth, depth);\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (!d) {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "/tmp/tmpbbwww9et.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpbbwww9et.js:3:5)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n    at dict_depth (/tmp/tmpbbwww9et.js:11:41)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (d.hasOwnProperty(k)) {\n            let depth = dict_depth(d[k]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp395qndgo.js:24:12)\n    at Object.<anonymous> (/tmp/tmp395qndgo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n  let max = 0;\n  for (const k in d) {\n    if (typeof d[k] === 'object') {\n      const depth = dict_depth(d[k]) + 1;\n      if (depth > max) {\n        max = depth;\n      }\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzhx440_d.js:17:12)\n    at Object.<anonymous> (/tmp/tmpzhx440_d.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "/tmp/tmpz3zn7y61.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpz3zn7y61.js:3:5)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n    at dict_depth (/tmp/tmpz3zn7y61.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwihbk41o.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwihbk41o.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== \"object\") {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth: number = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth: number = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi5c5b0od.js:17:12)\n    at Object.<anonymous> (/tmp/tmpi5c5b0od.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp183eq383.js:17:12)\n    at Object.<anonymous> (/tmp/tmp183eq383.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || d === undefined) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwvvd0_e6.js:22:12)\n    at Object.<anonymous> (/tmp/tmpwvvd0_e6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = 0;\n        if (typeof d[key] == 'object') {\n            depth = dict_depth(d[key]) + 1;\n        }\n        max_depth = Math.max(max_depth, depth);\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk1nr5cq_.js:16:12)\n    at Object.<anonymous> (/tmp/tmpk1nr5cq_.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    function recurse(d: any, depth: number) {\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n        for (let k in d) {\n            if (typeof d[k] === 'object') {\n                recurse(d[k], depth + 1);\n            }\n        }\n    }\n    recurse(d, 1);\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\nlet d = {\n    \"key1\": 1,\n    \"key2\": {\n        \"key3\": 1,\n        \"key4\": {\n            \"key5\": 4\n        }\n    }\n};\n\nconsole.log(dict_depth(d));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpgqo24iwr.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgqo24iwr.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (!d.hasOwnProperty('value')) {\n        return 1;\n    }\n    return 1 + dict_depth(d.value);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmprdv9mr9u.js:14:12)\n    at Object.<anonymous> (/tmp/tmprdv9mr9u.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth: number = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth: number = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpl2pajxui.js:17:12)\n    at Object.<anonymous> (/tmp/tmpl2pajxui.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp77eioy9s.js:17:12)\n    at Object.<anonymous> (/tmp/tmp77eioy9s.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === \"object\") {\n                max_depth = Math.max(max_depth, dict_depth(element));\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_hw1dhxh.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_hw1dhxh.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwihbk41o.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwihbk41o.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7ak__wmi.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7ak__wmi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpwihbk41o.js:24:12)\n    at Object.<anonymous> (/tmp/tmpwihbk41o.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(dict_depth({'a': 1, 'b': {'c': {'d': {}}}}));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpy1dwga1o.js:18:12)\n    at Object.<anonymous> (/tmp/tmpy1dwga1o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            max_depth = Math.max(max_depth, dict_depth(d[key]));\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp2hvevbz2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2hvevbz2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max: number = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth: number = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu87cd1gx.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu87cd1gx.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "/tmp/tmp28h_0ruh.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmp28h_0ruh.js:3:5)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n    at dict_depth (/tmp/tmp28h_0ruh.js:9:25)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "/tmp/tmp9oyd07a8.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmp9oyd07a8.js:3:5)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n    at dict_depth (/tmp/tmp9oyd07a8.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp6coao5a2.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6coao5a2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509738,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu6zsnq1z.js:17:12)\n    at Object.<anonymous> (/tmp/tmpu6zsnq1z.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "/tmp/tmp0tafpo2c.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmp0tafpo2c.js:3:5)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n    at dict_depth (/tmp/tmp0tafpo2c.js:8:29)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d === 'object') {\n        let max = 0;\n        for (let key in d) {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7ak__wmi.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7ak__wmi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let k in d) {\n        let depth = dict_depth(d[k]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "/tmp/tmplmjf8mxb.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmplmjf8mxb.js:3:5)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n    at dict_depth (/tmp/tmplmjf8mxb.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (const k in d) {\n        if (typeof d[k] === 'object') {\n            const depth = dict_depth(d[k]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "/tmp/tmpq1w9x4lm.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpq1w9x4lm.js:3:5)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n    at dict_depth (/tmp/tmpq1w9x4lm.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of a dictionary.\nfunction dict_depth(d: any): number {\n    let depth = 1;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth_of_subdict = dict_depth(d[key]) + 1;\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}