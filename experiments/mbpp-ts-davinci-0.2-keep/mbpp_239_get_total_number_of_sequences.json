{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "ts",
  "prompt": "//Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences(m: number, n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_total_number_of_sequences;\n  assert.deepEqual(candidate(10, 4),4);\n  assert.deepEqual(candidate(5, 2),6);\n  assert.deepEqual(candidate(16, 3),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 1; i <= m; i++) {\n    total += get_total_number_of_sequences(Math.floor(i / 2), n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push(new Array(n + 1).fill(0));\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 1; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[k][j] += dp[i][j - 1];\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += dp[i][n];\n  }\n  return sum;\n}\n",
    "  if (n === 1) return m;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push([]);\n    for (let j = 0; j <= n; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 0; i <= n; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[i][j] += dp[k][j - 1];\n      }\n    }\n  }\n  return dp[m][n];\n}\n",
    "    let result = 0;\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let dp: number[][] = new Array(n + 1);\n    for (let i = 0; i < dp.length; i++) {\n        dp[i] = new Array(m + 1).fill(0);\n    }\n\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n\n    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n\n    return result;\n}\n",
    "  let dp = new Array(n + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      if (i - j >= 0) {\n        dp[i] += dp[i - j];\n      }\n    }\n  }\n  return dp[n];\n}\n\nconsole.log(get_total_number_of_sequences(5, 3));\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= n; i++) {\n    dp[i] = [];\n    for (let j = 0; j <= m; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= j; k++) {\n        dp[i][j] += dp[i - 1][k];\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += dp[n][i];\n  }\n  return sum;\n}\n",
    "    if (n === 0) return 1;\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 0; i <= m; i++) {\n        sum += dp[i][n];\n    }\n    return sum;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n\n  let total = 0;\n\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(4, 2));\nconsole.log(get_total_number_of_sequences(2, 4));\nconsole.log(get_total_number_of_sequences(6, 4));\n",
    "  if (n === 1) {\n    return m;\n  }\n\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  let result = 0;\n  if (n === 0) {\n    return 1;\n  }\n  for (let i = 2; i <= m; i++) {\n    result += get_total_number_of_sequences(i, n - 1);\n  }\n  return result;\n}\n"
  ]
}