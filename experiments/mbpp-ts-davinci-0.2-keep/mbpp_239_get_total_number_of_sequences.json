{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "ts",
  "prompt": "//Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences(m: number, n: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_total_number_of_sequences;\n  assert.deepEqual(candidate(10, 4),4);\n  assert.deepEqual(candidate(5, 2),6);\n  assert.deepEqual(candidate(16, 3),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 1; i <= m; i++) {\n    total += get_total_number_of_sequences(Math.floor(i / 2), n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push(new Array(n + 1).fill(0));\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 1; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[k][j] += dp[i][j - 1];\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += dp[i][n];\n  }\n  return sum;\n}\n",
    "  if (n === 1) return m;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push([]);\n    for (let j = 0; j <= n; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 0; i <= n; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[i][j] += dp[k][j - 1];\n      }\n    }\n  }\n  return dp[m][n];\n}\n",
    "    let result = 0;\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let dp: number[][] = new Array(n + 1);\n    for (let i = 0; i < dp.length; i++) {\n        dp[i] = new Array(m + 1).fill(0);\n    }\n\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n\n    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n\n    return result;\n}\n",
    "  let dp = new Array(n + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      if (i - j >= 0) {\n        dp[i] += dp[i - j];\n      }\n    }\n  }\n  return dp[n];\n}\n\nconsole.log(get_total_number_of_sequences(5, 3));\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= n; i++) {\n    dp[i] = [];\n    for (let j = 0; j <= m; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= j; k++) {\n        dp[i][j] += dp[i - 1][k];\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += dp[n][i];\n  }\n  return sum;\n}\n",
    "    if (n === 0) return 1;\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 0; i <= m; i++) {\n        sum += dp[i][n];\n    }\n    return sum;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n\n  let total = 0;\n\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(4, 2));\nconsole.log(get_total_number_of_sequences(2, 4));\nconsole.log(get_total_number_of_sequences(6, 4));\n",
    "  if (n === 1) {\n    return m;\n  }\n\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  let result = 0;\n  if (n === 0) {\n    return 1;\n  }\n  for (let i = 2; i <= m; i++) {\n    result += get_total_number_of_sequences(i, n - 1);\n  }\n  return result;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++) {\n        let temp = i;\n        for (let j = 1; j < n; j++) {\n            temp *= 2;\n            if (temp > m) {\n                break;\n            }\n            count++;\n        }\n    }\n    return count;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push(new Array(n + 1).fill(0));\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 1; j <= m; j++) {\n      for (let k = 2 * j; k <= m; k++) {\n        dp[k][i] += dp[j][i - 1];\n      }\n    }\n  }\n  let total = 0;\n  for (let i = 1; i <= m; i++) {\n    total += dp[i][n];\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push([]);\n        for (let j = 0; j <= m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n\n    return result;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 2));\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(3, 4));\nconsole.log(get_total_number_of_sequences(3, 5));\nconsole.log(get_total_number_of_sequences(3, 6));\nconsole.log(get_total_number_of_sequences(3, 7));\nconsole.log(get_total_number_of_sequences(3, 8));\nconsole.log(get_total_number_of_sequences(3, 9));\nconsole.log(get_total_number_of_sequences(3, 10));\nconsole.log(get_total_number_of_sequences(3, 11));\nconsole.log(get_total_number_of_sequences(3, 12));\nconsole.log(get_total_number_of_sequences(3, 13));\nconsole.log(get_total_number_of_sequences(3, 14));\nconsole.log(get_total_number_of_sequences(3, 15));\nconsole.log(get_total_number_of_sequences(3, 16));\nconsole.log(get_total_number_of_sequences(3, 17));\nconsole.log(get_total_number_of_sequences(3, 18));\nconsole.log(get_total_number_of_sequences(3, 19));\nconsole.log(get_total_number_of_sequences(3, 20));\nconsole.log(get_total_number_of_sequences(3, 21));\nconsole.log(get_total_number_of_sequences(3, 22));\nconsole.log(get_total_number_of_sequences(3, 23));",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  let total = 0;\n  let dp = new Array(n).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j < n; j++) {\n      if (i >= 2 * j) {\n        dp[j] += dp[j - 1];\n      }\n    }\n  }\n  return dp[n - 1];\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push(new Array(n + 1).fill(0));\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 1; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[i][j] += dp[k][j - 1];\n      }\n    }\n  }\n  let result = 0;\n  for (let i = 1; i <= m; i++) {\n    result += dp[i][n];\n  }\n  return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "  let count = 0;\n  const recurse = (arr: number[], num: number) => {\n    if (arr.length === n) {\n      count++;\n      return;\n    }\n    for (let i = num; i <= m; i++) {\n      if (arr.length === 0 || i >= 2 * arr[arr.length - 1]) {\n        recurse([...arr, i], i);\n      }\n    }\n  };\n  recurse([], 1);\n  return count;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 2));\n",
    "    // Write your code here\n    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= n; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return result;\n}\n",
    "    let count = 0;\n    let arr = [];\n    for (let i = 1; i <= m; i++) {\n        arr.push(i);\n    }\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let temp = [];\n        for (let j = i; j < arr.length; j++) {\n            temp.push(arr[j]);\n            result.push(temp);\n        }\n    }\n    for (let i = 0; i < result.length; i++) {\n        if (result[i].length === n) {\n            count++;\n        }\n    }\n    return count;\n}\n",
    "  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    return dp[1][n];\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m; j++) {\n            dp[i] += dp[i - 1];\n        }\n    }\n    return dp[n];\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 0; i <= n; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 1; i <= m; i++) {\n        sum += dp[i][n];\n    }\n    return sum;\n}\n",
    "  if (n === 1) return m;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push([]);\n        for (let j = 0; j <= m; j++) {\n            dp[i].push(0);\n        }\n    }\n    dp[1][1] = 1;\n    for (let i = 2; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n\n    return total;\n}\n",
    "  let result = 0;\n  for (let i = 1; i <= m; i++) {\n    result += get_total_number_of_sequences_helper(m, n, i);\n  }\n  return result;\n}\n",
    "    if (n === 0) return 1;\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 0) return 1;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= n; i++) {\n    dp.push([]);\n    for (let j = 0; j <= m; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= j; k++) {\n        dp[i][j] += dp[i - 1][k];\n      }\n    }\n  }\n  return dp[n][m];\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  let dp = new Array(n + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (i - j >= 0) {\n        dp[i] += dp[i - j];\n      }\n    }\n  }\n  return dp[n];\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(4, 2));\nconsole.log(get_total_number_of_sequences(4, 3));\nconsole.log(get_total_number_of_sequences(4, 4));\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            if (j >= 2 * i) {\n                dp[i] += dp[i - 1];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "  let result = 0;\n  let prev = 0;\n  const helper = (curr: number): void => {\n    if (curr === n) {\n      result++;\n      return;\n    }\n    for (let i = prev * 2; i <= m; i++) {\n      prev = i;\n      helper(curr + 1);\n      prev = i;\n    }\n  };\n  helper(0);\n  return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n\n    for (let i = 0; i <= n; i++) {\n        dp[0][i] = 0;\n    }\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n\n    return dp[m][n];\n}\n",
    "\tif (n === 1) {\n\t\treturn m;\n\t}\n\tlet total = 0;\n\tfor (let i = 2; i <= m; i++) {\n\t\ttotal += get_total_number_of_sequences(i - 1, n - 1);\n\t}\n\treturn total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] = dp[i][j] + dp[k][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result = result + dp[i][n];\n    }\n    return result;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 2));\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(5, 4));\nconsole.log(get_total_number_of_sequences(5, 5));\n",
    "  if (n === 0) return 1;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let result = 0;\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return result;\n}\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push([]);\n    for (let j = 0; j <= n; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[i][0] = 1;\n  }\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[k][j] += dp[i][j - 1];\n      }\n    }\n  }\n  let total = 0;\n  for (let i = 0; i <= m; i++) {\n    total += dp[i][n];\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n\n    let total = 0;\n    for (let i = 1; i <= m; i++) {\n        total += dp[i][n];\n    }\n    return total;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            if (i - j >= 0) {\n                dp[i] += dp[i - j];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n    for (let i = 0; i <= n; i++) {\n        dp[0][i] = 0;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    return dp[m][n];\n}\n",
    "  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "  if (n === 1) return m;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++) {\n        count += get_total_number_of_sequences_helper(i, n);\n    }\n    return count;\n}\n",
    "    if (n === 1) {\n        return m;\n    }\n\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let j = 2; j <= n; j++) {\n        for (let i = 1; i <= m; i++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n\n  let total = 0;\n\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(3, 4));\nconsole.log(get_total_number_of_sequences(3, 5));\n",
    "    if (n === 0) {\n        return 1;\n    }\n\n    let total = 0;\n\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n\n    return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][0] = 1;\n    }\n    for (let i = 0; i <= n; i++) {\n        dp[0][i] = 0;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 2 * i; k <= i; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    return dp[m][n];\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let total_number_of_sequences = 0;\n    let previous_element = 0;\n    let current_element = 0;\n    let current_sequence = [];\n    let current_sequence_length = 0;\n    let current_sequence_index = 0;\n    let current_sequence_index_max = 0;\n    let current_sequence_index_min = 0;\n    let current_sequence_index_min_max = 0;\n    let current_sequence_index_min_max_min = 0;\n    let current_sequence_index_min_max_min_max = 0;\n    let current_sequence_index_min_max_min_max_min = 0;\n    let current_sequence_index_min_max_min_max_min_max = 0;\n    let current_sequence_index_min_max_min_max_min_max_min = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0;\n    let current_sequence_index_min_max_min_max_min_max_min_max_min_max_min_max",
    "    let arr = new Array(n).fill(0);\n    arr[0] = 1;\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j <= m; j++) {\n            if (j >= 2 * i) {\n                arr[i] += arr[i - 1];\n            }\n        }\n    }\n    return arr[n - 1];\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let total_number_of_sequences = 0;\n    let current_number = 2;\n    let current_sequence = [1];\n    while (current_number <= m) {\n        current_sequence[0] = current_number;\n        total_number_of_sequences += get_number_of_sequences(current_sequence, n, m);\n        current_number++;\n    }\n    return total_number_of_sequences;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "    let dp: number[] = new Array(n).fill(0);\n    dp[0] = 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = i; j < m; j++) {\n            if (j >= 2 * i) {\n                dp[j] += dp[i];\n            }\n        }\n    }\n    return dp[n - 1];\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push([]);\n        for (let j = 0; j <= m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            if (i - j >= 0) {\n                dp[i] += dp[i - j];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 0) return 1;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[j][i] += dp[k][i - 1];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 1; i <= m; i++) {\n        sum += dp[i][n];\n    }\n    return sum;\n}\n",
    "  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences_helper(m, n, i);\n  }\n  return total;\n}\n",
    "    if (n === 0) return 1;\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  let count = 0;\n  const helper = (curr: number, prev: number): void => {\n    if (curr === n) {\n      count++;\n      return;\n    }\n    for (let i = prev * 2; i <= m; i++) {\n      helper(curr + 1, i);\n    }\n  };\n  helper(0, 0);\n  return count;\n}\n",
    "    let dp: number[][] = new Array(n + 1).fill(0).map(() => new Array(m + 1).fill(0));\n\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n\n    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n\n    return result;\n}\n",
    "  if (n === 1) return m;\n  let count = 0;\n  for (let i = 2; i <= m; i++) {\n    count += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return count;\n}\n",
    "  if (n === 1) return m;\n  let count = 0;\n  for (let i = 2; i <= m; i++) {\n    count += get_total_number_of_sequences(i, n - 1);\n  }\n  return count;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n\n    return total;\n}\n",
    "    let result = 0;\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return result;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++) {\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(3, 4));\nconsole.log(get_total_number_of_sequences(3, 5));\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n\n    return result;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            if (i - j >= 0) {\n                dp[i] += dp[i - j];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "  let result = 0;\n  for (let i = 2; i <= m; i++) {\n    result += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return result;\n}\n",
    "    let total = 0;\n    for (let i = 1; i <= m; i++) {\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "  let result = 0;\n  for (let i = 1; i <= m; i++) {\n    result += get_total_number_of_sequences_helper(m, n, i);\n  }\n  return result;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n\n    return total;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++) {\n        count += get_total_number_of_sequences_helper(i, n - 1);\n    }\n    return count;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= n; i++) {\n    dp.push([]);\n    for (let j = 0; j <= m; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= j; k++) {\n        dp[i][j] += dp[i - 1][k];\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i <= m; i++) {\n    sum += dp[n][i];\n  }\n  return sum;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = new Array(n + 1).fill(0).map(() => new Array(m + 1).fill(0));\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let total = 0;\n    for (let i = 1; i <= m; i++) {\n        total += dp[n][i];\n    }\n    return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push([]);\n    for (let j = 0; j <= n; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let j = 2; j <= n; j++) {\n    for (let i = 1; i <= m; i++) {\n      for (let k = i; k >= 2 * i; k--) {\n        dp[i][j] += dp[k][j - 1];\n      }\n    }\n  }\n  let result = 0;\n  for (let i = 1; i <= m; i++) {\n    result += dp[i][n];\n  }\n  return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(4, 2));\nconsole.log(get_total_number_of_sequences(2, 2));\nconsole.log(get_total_number_of_sequences(3, 3));\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= n; i++) {\n    dp.push(new Array(m + 1).fill(0));\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= m; k++) {\n        dp[i][j] += dp[i - 1][k];\n      }\n    }\n  }\n  let result = 0;\n  for (let i = 1; i <= m; i++) {\n    result += dp[n][i];\n  }\n  return result;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            if (j >= 2 * i) {\n                dp[i] += dp[i - 1];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n\n  let total = 0;\n\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n\n  return total;\n}\n",
    "  if (n === 0) return 1;\n  if (m === 0) return 0;\n  let total = 0;\n  for (let i = 2 * m; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[j][i] += dp[k][i - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            if (j >= 2 * i) {\n                dp[i] += dp[i - 1];\n            }\n        }\n    }\n    return dp[n];\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++) {\n        count += get_total_number_of_sequences_helper(m, n - 1, i);\n    }\n    return count;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n\n    for (let i = 2; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n\n    return result;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push([]);\n    for (let j = 0; j <= n; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[i][0] = 1;\n  }\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[k][j] += dp[i][j - 1];\n      }\n    }\n  }\n  return dp[m][n];\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 0) return 1;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  let num_sequences: number = 0;\n  let prev_num: number = 0;\n  let curr_num: number = 0;\n  let curr_seq: number[] = [];\n  let curr_seq_length: number = 0;\n  let curr_seq_index: number = 0;\n\n  function get_total_number_of_sequences_helper(\n    prev_num: number,\n    curr_num: number,\n    curr_seq: number[],\n    curr_seq_length: number,\n    curr_seq_index: number\n  ): void {\n    if (curr_seq_length === n) {\n      num_sequences++;\n      return;\n    }\n\n    for (let i = prev_num * 2; i <= m; i++) {\n      curr_seq[curr_seq_index] = i;\n      get_total_number_of_sequences_helper(\n        i,\n        curr_num,\n        curr_seq,\n        curr_seq_length + 1,\n        curr_seq_index + 1\n      );\n    }\n  }\n\n  get_total_number_of_sequences_helper(\n    prev_num,\n    curr_num,\n    curr_seq,\n    curr_seq_length,\n    curr_seq_index\n  );\n\n  return num_sequences;\n}\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "    if (n === 0) return 1;\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 1) return m;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 2));\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2 * n; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n\n    for (let i = 0; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n\n    for (let i = 1; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n\n    return result;\n}\n",
    "  let count = 0;\n  for (let i = 2; i <= m; i++) {\n    count += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return count;\n}\n",
    "    let result = 0;\n    if (m < 2 || n < 1) {\n        return result;\n    }\n    if (n === 1) {\n        return m;\n    }\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return result;\n}\n",
    "    let count = 0;\n    for (let i = 1; i <= m; i++) {\n        if (i * 2 <= m) {\n            count += get_total_number_of_sequences(m, n - 1);\n        }\n    }\n    return count;\n}\n",
    "    if (n === 1) {\n        return m;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i - 1, n - 1);\n    }\n    return total;\n}\n",
    "  let dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push([]);\n    for (let j = 0; j <= n; j++) {\n      dp[i].push(0);\n    }\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 1; i <= n; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      for (let k = 2 * i; k <= m; k++) {\n        dp[k][j] += dp[i][j - 1];\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += dp[i][n];\n  }\n  return sum;\n}\n",
    "  let total = 0;\n  const dp: number[][] = [];\n  for (let i = 0; i <= m; i++) {\n    dp.push(new Array(n + 1).fill(0));\n  }\n  for (let i = 1; i <= m; i++) {\n    dp[i][1] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= m; k++) {\n        dp[j][i] += dp[k][i - 1];\n      }\n    }\n  }\n  for (let i = 1; i <= m; i++) {\n    total += dp[i][n];\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 1; i <= n; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[k][j] += dp[i][j - 1];\n            }\n        }\n    }\n    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let dp: number[] = new Array(n).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j <= m; j++) {\n            if (j >= 2 * i) {\n                dp[i] += dp[i - 1];\n            }\n        }\n    }\n    return dp[n - 1];\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 0; i <= n; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= m; i++) {\n        for (let j = 2; j <= n; j++) {\n            for (let k = 2 * i; k <= m; k++) {\n                dp[i][j] += dp[k][j - 1];\n            }\n        }\n    }\n    return dp[m][n];\n}\n",
    "    let dp: number[][] = new Array(n + 1);\n    for (let i = 0; i < dp.length; i++) {\n        dp[i] = new Array(m + 1).fill(0);\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 1; i <= m; i++) {\n        sum += dp[n][i];\n    }\n    return sum;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[][] = new Array(n + 1).fill(null).map(() => new Array(m + 1).fill(0));\n\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= m; j++) {\n            if (i === 0) {\n                dp[i][j] = 1;\n            } else if (j === 0) {\n                dp[i][j] = 0;\n            } else {\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][Math.floor(j / 2)];\n            }\n        }\n    }\n\n    return dp[n][m];\n}\n",
    "    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n\nconsole.log(get_total_number_of_sequences(3, 3));\nconsole.log(get_total_number_of_sequences(2, 4));\nconsole.log(get_total_number_of_sequences(4, 2));\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  let count = 0;\n  const helper = (curr: number, prev: number): void => {\n    if (curr === n) {\n      count++;\n      return;\n    }\n    for (let i = prev * 2; i <= m; i++) {\n      helper(curr + 1, i);\n    }\n  };\n  helper(0, 1);\n  return count;\n}\n",
    "    let dp: number[] = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 2 * i; j <= m && j <= n; j++) {\n            dp[j] += dp[j - i];\n        }\n    }\n    return dp[n];\n}\n",
    "  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences_helper(m, n - 1, i);\n  }\n  return total;\n}\n",
    "    if (n === 0) return 1;\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  if (n === 1) {\n    return m;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i - 1, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[j][i] += dp[k][i - 1];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[i][n];\n    }\n    return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push([]);\n        for (let j = 0; j <= n; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[k][i] += dp[j][i - 1];\n            }\n        }\n    }\n    let sum = 0;\n    for (let i = 1; i <= m; i++) {\n        sum += dp[i][n];\n    }\n    return sum;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push([]);\n        for (let j = 0; j <= m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[0][i] = 1;\n    }\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= m; i++) {\n        dp.push(new Array(n + 1).fill(0));\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[i][1] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= m; k++) {\n                dp[j][i] += dp[k][i - 1];\n            }\n        }\n    }\n    let res = 0;\n    for (let i = 1; i <= m; i++) {\n        res += dp[i][n];\n    }\n    return res;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let result = 0;\n    for (let i = 2; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return result;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push(new Array(m + 1).fill(0));\n    }\n    for (let i = 1; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 1; i <= m; i++) {\n        result += get_total_number_of_sequences_helper(m, n, i);\n    }\n    return result;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push([]);\n        for (let j = 0; j <= m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 1; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "  let total = 0;\n  for (let i = 1; i <= m; i++) {\n    total += get_number_of_sequences(m, n, i);\n  }\n  return total;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    let total = 0;\n    for (let i = 2; i <= m; i++) {\n        total += get_total_number_of_sequences(i, n - 1);\n    }\n    return total;\n}\n",
    "  let dp: number[][] = new Array(n + 1);\n  for (let i = 0; i < dp.length; i++) {\n    dp[i] = new Array(m + 1).fill(0);\n  }\n  for (let i = 0; i <= m; i++) {\n    dp[1][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 2; j <= m; j++) {\n      for (let k = 2 * j; k <= j && k <= m; k++) {\n        dp[i][j] += dp[i - 1][k];\n      }\n    }\n  }\n  let result: number = 0;\n  for (let i = 1; i <= m; i++) {\n    result += dp[n][i];\n  }\n  return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp.push([]);\n        for (let j = 0; j <= m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i <= m; i++) {\n        dp[1][i] = 1;\n    }\n    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j <= m; j++) {\n            for (let k = 2 * j; k <= j; k++) {\n                dp[i][j] += dp[i - 1][k];\n            }\n        }\n    }\n    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += dp[n][i];\n    }\n    return result;\n}\n",
    "    let count = 0;\n    for (let i = 2; i <= m; i++) {\n        let current = i;\n        let prev = i / 2;\n        let seq = [prev, current];\n        while (current <= m) {\n            current = current * 2;\n            prev = prev * 2;\n            seq.push(current);\n        }\n        if (seq.length === n) {\n            count++;\n        }\n    }\n    return count;\n}\n",
    "  if (n === 0) return 1;\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n",
    "  if (n === 0) {\n    return 1;\n  }\n  let total = 0;\n  for (let i = 2; i <= m; i++) {\n    total += get_total_number_of_sequences(i, n - 1);\n  }\n  return total;\n}\n"
  ]
}