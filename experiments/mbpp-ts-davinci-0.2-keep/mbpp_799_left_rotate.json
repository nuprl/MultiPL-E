{
  "name": "mbpp_799_left_rotate",
  "language": "ts",
  "prompt": "//Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate(n: number, d: number): number {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = left_rotate;\n  assert.deepEqual(candidate(16, 2),64);\n  assert.deepEqual(candidate(10, 2),40);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(99, 3),792);\n  assert.deepEqual(candidate(1, 3),8);\n  assert.deepEqual(candidate(5, 3),40);\n  assert.deepEqual(candidate(29, 3),232);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(5, 2));\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(5, 2));\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(1, 2));\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(10, 2));\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(1, 1));\nconsole.log(left_rotate(1, 2));\nconsole.log(left_rotate(1, 3));\nconsole.log(left_rotate(1, 4));\nconsole.log(left_rotate(1, 5));\nconsole.log(left_rotate(1, 6));\nconsole.log(left_rotate(1, 7));\nconsole.log(left_rotate(1, 8));\nconsole.log(left_rotate(1, 9));\nconsole.log(left_rotate(1, 10));\nconsole.log(left_rotate(1, 11));\nconsole.log(left_rotate(1, 12));\nconsole.log(left_rotate(1, 13));\nconsole.log(left_rotate(1, 14));\nconsole.log(left_rotate(1, 15));\nconsole.log(left_rotate(1, 16));\nconsole.log(left_rotate(1, 17));\nconsole.log(left_rotate(1, 18));\nconsole.log(left_rotate(1, 19));\nconsole.log(left_rotate(1, 20));\nconsole.log(left_rotate(1, 21));\nconsole.log(left_rotate(1, 22));\nconsole.log(left_rotate(1, 23));\nconsole.log(left_rotate(1, 24));\nconsole.log(left_rotate(1, 25));\nconsole.log(left_rotate(1, 26));\nconsole.log(left_rotate(1, 27));\nconsole.log(left_rotate(1, 28));\nconsole.log(left_rotate(1, 29));\nconsole.log(left_rotate(1, 30));\nconsole.log(left_rotate(1, 31));\nconsole.log(left_rotate(1, 32));\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    let x = (n << d) | (n >> (32 - d));\n    return x;\n}\n\nconsole.log(left_rotate(5, 2));\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n\nconsole.log(left_rotate(5, 2));\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >>> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "  return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return ((n << d) | (n >> (32 - d)));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n",
    "    return (n << d) | (n >> (32 - d));\n}\n"
  ]
}