{
  "name": "mbpp_431_common_element",
  "language": "ts",
  "prompt": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    list1.forEach(element => {\n        if (list2.indexOf(element) !== -1) {\n            common = true;\n        }\n    });\n    return common;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpphkg4n6g.js:15:12)\n    at Object.<anonymous> (/tmp/tmpphkg4n6g.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n        break;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp08tknd39.js:19:12)\n    at Object.<anonymous> (/tmp/tmp08tknd39.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  list1.forEach(element => {\n    if (list2.includes(element)) {\n      common = true;\n    }\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  list1.forEach((element: any) => {\n    list2.forEach((element2: any) => {\n      if (element === element2) {\n        result = true;\n      }\n    });\n  });\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "undefined\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123766,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4], [5, 6, 7, 8]));\nconsole.log(common_element([1, 2, 3, 4], [5, 6, 7, 8, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123766,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  if (list1.length === 0 || list2.length === 0) {\n    return undefined;\n  }\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp9y498_ox.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9y498_ox.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    list1.forEach(element => {\n        if (list2.includes(element)) {\n            common = true;\n        }\n    });\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpwpsski2j.js:17:12)\n    at Object.<anonymous> (/tmp/tmpwpsski2j.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\nconsole.log(common_element([1, 2, 3], [1, 2, 4]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      } else {\n        common = false;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [1, 2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc7myz8yt.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc7myz8yt.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpt0ydt3md.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt0ydt3md.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [1, 2, 4]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpgtushyeq.js:19:12)\n    at Object.<anonymous> (/tmp/tmpgtushyeq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i: number = 0; i < list1.length; i++) {\n    for (let j: number = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  list1.forEach(element => {\n    list2.forEach(element2 => {\n      if (element === element2) {\n        common = true;\n      }\n    });\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [1, 2, 4]));\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpxf9o5bhq.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxf9o5bhq.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n        return common;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123766,
      "stdout": "../../../../tmp/tmp7ua5d3uc.ts(15,28): error TS2304: Cannot find name 'list1'.\n../../../../tmp/tmp7ua5d3uc.ts(15,35): error TS2304: Cannot find name 'list2'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  if (list1.length === 0 || list2.length === 0) {\n    return undefined;\n  }\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp9y498_ox.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9y498_ox.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  list1.forEach((element) => {\n    if (list2.includes(element)) {\n      common = true;\n    }\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n                break;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp4zz3irr7.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4zz3irr7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpt0ydt3md.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt0ydt3md.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    list1.forEach(element => {\n        list2.forEach(element2 => {\n            if (element === element2) {\n                common = true;\n            }\n        });\n    });\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpi8egbrn7.js:19:12)\n    at Object.<anonymous> (/tmp/tmpi8egbrn7.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element(list1, list2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "../../../../tmp/tmpq3xqcn_u.ts(14,28): error TS2304: Cannot find name 'list1'.\n../../../../tmp/tmpq3xqcn_u.ts(14,35): error TS2304: Cannot find name 'list2'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpt0ydt3md.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt0ydt3md.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i: number = 0; i < list1.length; i++) {\n    for (let j: number = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmphlpfccho.js:19:12)\n    at Object.<anonymous> (/tmp/tmphlpfccho.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  list1.forEach((element: any) => {\n    list2.forEach((element2: any) => {\n      if (element === element2) {\n        common = true;\n      }\n    });\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpuz1omjf2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpuz1omjf2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  list1.forEach(element => {\n    if (list2.includes(element)) {\n      result = true;\n    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean | undefined;\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i: number = 0; i < list1.length; i++) {\n    for (let j: number = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmphlpfccho.js:19:12)\n    at Object.<anonymous> (/tmp/tmphlpfccho.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123766,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  list1.forEach(element => {\n    if (list2.includes(element)) {\n      common = true;\n    }\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n                break;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp4zz3irr7.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4zz3irr7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n        return common;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmps_3a7a62.js:20:12)\n    at Object.<anonymous> (/tmp/tmps_3a7a62.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i: number = 0; i < list1.length; i++) {\n        for (let j: number = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpt0ydt3md.js:19:12)\n    at Object.<anonymous> (/tmp/tmpt0ydt3md.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  list1.forEach((element) => {\n    if (list2.includes(element)) {\n      common = true;\n    }\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i: number = 0; i < list1.length; i++) {\n    for (let j: number = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmphlpfccho.js:19:12)\n    at Object.<anonymous> (/tmp/tmphlpfccho.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let result: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        result = true;\n        break;\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i: number = 0; i < list1.length; i++) {\n    for (let j: number = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpy6wdfqz3.js:17:12)\n    at Object.<anonymous> (/tmp/tmpy6wdfqz3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\nconsole.log(common_element([1, 2, 3], [4, 5, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "false\ntrue\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmph55ilezt.js:20:12)\n    at Object.<anonymous> (/tmp/tmph55ilezt.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmptm6wwuvr.js:19:12)\n    at Object.<anonymous> (/tmp/tmptm6wwuvr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmptm6wwuvr.js:19:12)\n    at Object.<anonymous> (/tmp/tmptm6wwuvr.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n        break;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let result: boolean | undefined;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "false\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp5u_arg7s.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5u_arg7s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  list1.forEach(element => {\n    if (list2.includes(element)) {\n      common = true;\n    }\n  });\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123766,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  if (list1.length === 0 || list2.length === 0) {\n    return undefined;\n  }\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp9y498_ox.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9y498_ox.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpl2yc2eyk.js:17:12)\n    at Object.<anonymous> (/tmp/tmpl2yc2eyk.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n        break;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean | undefined;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp08tknd39.js:19:12)\n    at Object.<anonymous> (/tmp/tmp08tknd39.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp08tknd39.js:19:12)\n    at Object.<anonymous> (/tmp/tmp08tknd39.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp08tknd39.js:19:12)\n    at Object.<anonymous> (/tmp/tmp08tknd39.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3], [4, 5, 6]));\nconsole.log(common_element([1, 2, 3], [1, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "undefined\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp08tknd39.js:19:12)\n    at Object.<anonymous> (/tmp/tmp08tknd39.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  if (list1.length === 0 || list2.length === 0) {\n    return undefined;\n  }\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp9y498_ox.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9y498_ox.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i: number = 0; i < list1.length; i++) {\n    for (let j: number = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmphlpfccho.js:19:12)\n    at Object.<anonymous> (/tmp/tmphlpfccho.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  let common: boolean = false;\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        common = true;\n      }\n    }\n  }\n  return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpdmslb2ij.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdmslb2ij.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    let common: boolean = false;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                common = true;\n            }\n        }\n    }\n    return common;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510574,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp08tknd39.js:19:12)\n    at Object.<anonymous> (/tmp/tmp08tknd39.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1665510573,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return undefined;\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123769,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element(list1: any, list2: any): boolean | undefined {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                return true;\n            }\n        }\n    }\n}\n\nconsole.log(common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\nconsole.log(common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = common_element;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);\n}\n\ntest();",
      "timestamp": 1666123767,
      "stdout": "true\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}