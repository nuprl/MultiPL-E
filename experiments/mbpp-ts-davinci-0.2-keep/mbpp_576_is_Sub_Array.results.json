{
  "name": "mbpp_576_is_Sub_Array",
  "language": "ts",
  "prompt": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 4, 6, 8];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdugxmc0_.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdugxmc0_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 1; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i: number = 0;\n    var j: number = 0;\n    var flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "false\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu96f7f5j.js:30:12)\n    at Object.<anonymous> (/tmp/tmpu96f7f5j.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag: boolean = false;\n    for (var i = 0; i < A.length; i++) {\n        for (var j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar arr1: number[] = [1, 2, 3, 4, 5];\nvar arr2: number[] = [1, 2, 3];\nvar result: boolean = is_Sub_Array(arr1, arr2);\nconsole.log(\"Is array 2 a sub array of array 1: \" + result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "Is array 2 a sub array of array 1: false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9195czdr.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9195czdr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var C = A.concat(B);\n    var D = B.concat(A);\n    if (C.length == D.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkyog1t0v.js:18:12)\n    at Object.<anonymous> (/tmp/tmpkyog1t0v.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag = false;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (var j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n                if (j == B.length - 1) {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar H = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar I = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar J = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar K = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar M = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar O = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar P = [1, 2, 3, 4, 5, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "../../../../tmp/tmpa7g8_2s1.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "false\ntrue\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4s2l20_2.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4s2l20_2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    let j: number = 0;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            flag = true;\n            j++;\n        } else {\n            flag = false;\n            j = 0;\n        }\n        if (j == B.length) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr1blgr41.js:28:12)\n    at Object.<anonymous> (/tmp/tmpr1blgr41.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n        if (flag == true) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzbqnhdyi.js:26:12)\n    at Object.<anonymous> (/tmp/tmpzbqnhdyi.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = 1;\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < B.length; i++) {\n        if (A.indexOf(B[i]) == -1) {\n            flag = false;\n            break;\n        }\n        else {\n            flag = true;\n        }\n    }\n    return flag;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptavguomb.js:25:12)\n    at Object.<anonymous> (/tmp/tmptavguomb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg56ivlnh.js:27:12)\n    at Object.<anonymous> (/tmp/tmpg56ivlnh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                flag = true;\n            }\n        }\n        if (flag) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "../../../../tmp/tmpqtzmnhkp.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpqtzmnhkp.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\ntrue\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag = false;\n    var j = 0;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            flag = true;\n            j++;\n        }\n        else {\n            flag = false;\n            j = 0;\n        }\n        if (j == B.length) {\n            break;\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 3, 4];\nvar C = [2, 4, 12];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbksrzl61.js:30:12)\n    at Object.<anonymous> (/tmp/tmpbksrzl61.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "false\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n        if (j == B.length) {\n            flag = 1;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0, j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_99y4dqw.js:22:12)\n    at Object.<anonymous> (/tmp/tmp_99y4dqw.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "false\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg4spzyad.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg4spzyad.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar D = [1, 2, 3, 4, 5, 16, 17, 18, 19, 20];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "false\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconsole.log(\"A is subarray of B : \" + is_Sub_Array(A, B));\nconsole.log(\"A is subarray of C : \" + is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "A is subarray of B : false\nA is subarray of C : false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag = false;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (var j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n        if (flag) {\n            return true;\n        }\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = 1;\n        }\n        else {\n            i++;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3];\nlet C = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqly8805m.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqly8805m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] == B[j]) {\n                    flag = true;\n                }\n                else {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag == true) {\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            result = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    result = false;\n                    break;\n                }\n            }\n        }\n        if (result) {\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 1; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [2, 3, 4];\nlet C = [2, 4, 3];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = 1;\n        }\n        else {\n            j++;\n            flag = 0;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "../../../../tmp/tmp8w0o4zgo.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmp8w0o4zgo.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpj8djn6o4.js:27:12)\n    at Object.<anonymous> (/tmp/tmpj8djn6o4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\nlet E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\nlet F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50];\nlet G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "../../../../tmp/tmp2z6_cmrs.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmprs49iwn2.js:27:12)\n    at Object.<anonymous> (/tmp/tmprs49iwn2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i: number = 0;\n    var j: number = 0;\n    var flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A: number[] = [1, 2, 3, 4, 5];\nvar B: number[] = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpaedyajly.js:27:12)\n    at Object.<anonymous> (/tmp/tmpaedyajly.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "../../../../tmp/tmpcwmrn21v.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    result = false;\n                    break;\n                }\n                else {\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwoenjq1.js:26:12)\n    at Object.<anonymous> (/tmp/tmptwoenjq1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3], [1, 2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result: boolean = false;\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            else {\n                j = 0;\n            }\n            if (j == A.length) {\n                result = true;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0, j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var C = A.concat(B);\n    var D = B.concat(A);\n    if (C.length != D.length) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmspflcmz.js:18:12)\n    at Object.<anonymous> (/tmp/tmpmspflcmz.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            flag = true;\n            for (j = 0; j < B.length && flag; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                }\n            }\n            if (flag) {\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            else {\n                j = 0;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "../../../../tmp/tmpsfp3hqz1.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < B.length; k++) {\n                    if (A[i + k] == B[j + k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                        break;\n                    }\n                }\n            }\n            if (flag == true) {\n                break;\n            }\n        }\n        if (flag == true) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "../../../../tmp/tmp_yqqskbq.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp_yqqskbq.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j = 0;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        if (j == B.length) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = 1;\n        }\n        else {\n            j++;\n            flag = 0;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 4];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(arr1, arr2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbk1b1_1y.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbk1b1_1y.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "../../../../tmp/tmp75a83shc.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp75a83shc.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            else {\n                j = 0;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n                if (j == B.length - 1) {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B: number[] = [2, 3, 4];\nlet C: number[] = [2, 4, 6];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5];\nvar D = [1, 2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124115,
      "stdout": "false\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag: boolean = true;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] != B[i]) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < B.length; k++) {\n                    if (A[i + k] == B[j + k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag == true) {\n                    break;\n                }\n            }\n        }\n        if (flag == true) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] == B[j]) {\n                    flag = true;\n                }\n                else {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxquuqt98.js:26:12)\n    at Object.<anonymous> (/tmp/tmpxquuqt98.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag) {\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag = false;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (var j = 1; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmi461awo.js:23:12)\n    at Object.<anonymous> (/tmp/tmpmi461awo.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    result = false;\n                    break;\n                }\n                result = true;\n            }\n        }\n        if (result) {\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpiz2wl1ch.js:23:12)\n    at Object.<anonymous> (/tmp/tmpiz2wl1ch.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                k = i;\n                flag = true;\n                break;\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    if (flag) {\n        for (i = k; i < A.length; i++) {\n            if (A[i] != B[j]) {\n                return false;\n            }\n            j++;\n        }\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp66qc7e2w.js:23:12)\n    at Object.<anonymous> (/tmp/tmp66qc7e2w.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "false\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg8tswr3n.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg8tswr3n.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 3, 4, 5];\nlet D: number[] = [1, 2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "false\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp99rq39jp.js:27:12)\n    at Object.<anonymous> (/tmp/tmp99rq39jp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl379cfvd.js:16:12)\n    at Object.<anonymous> (/tmp/tmpl379cfvd.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j = 0;\n    for (let i = 0; i < B.length; i++) {\n        if (A[j] == B[i]) {\n            j++;\n        }\n        if (j == A.length) {\n            return true;\n        }\n    }\n    return false;\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu_unm3hw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpu_unm3hw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 4, 6, 8, 10];\nvar C = [2, 4, 6, 8, 10, 12, 14];\nconsole.log(\"Is B a sub array of A: \" + is_Sub_Array(A, B));\nconsole.log(\"Is C a sub array of A: \" + is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "Is B a sub array of A: true\nIs C a sub array of A: false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < B.length; i++) {\n        if (A[0] == B[i]) {\n            flag = true;\n            for (let j = 0; j < A.length; j++) {\n                if (A[j] != B[i + j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpowrae9pe.js:21:12)\n    at Object.<anonymous> (/tmp/tmpowrae9pe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124118,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124118,
      "stdout": "../../../../tmp/tmpq4al51bw.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124118,
      "stdout": "../../../../tmp/tmpngb_2obs.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpngb_2obs.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124118,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpizativ4i.js:25:12)\n    at Object.<anonymous> (/tmp/tmpizativ4i.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i: number = 0, j: number = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B: number[] = [2, 3, 4, 5];\nlet C: number[] = [2, 4, 16, 5];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    if (A.length > B.length) {\n        return false;\n    }\n    for (let i = 0; i < B.length; i++) {\n        if (A[0] == B[i]) {\n            let j = 1;\n            while (j < A.length) {\n                if (A[j] != B[i + j]) {\n                    break;\n                }\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "../../../../tmp/tmpx12ji7v_.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpx12ji7v_.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < B.length; i++) {\n        if (A[0] == B[i]) {\n            flag = true;\n            for (let j = 1; j < A.length; j++) {\n                if (A[j] != B[i + j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length < B.length) {\n        return false;\n    }\n    for (let i: number = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(is_Sub_Array([1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "../../../../tmp/tmpsm2s597_.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf261zt96.js:27:12)\n    at Object.<anonymous> (/tmp/tmpf261zt96.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124110,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5634d5ft.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5634d5ft.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] == B[j]) {\n                    flag = true;\n                }\n                else {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnmae3ejm.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnmae3ejm.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\nfalse\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuw4_akcz.js:27:12)\n    at Object.<anonymous> (/tmp/tmpuw4_akcz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    result = false;\n                    break;\n                }\n                result = true;\n            }\n        }\n        if (result) {\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "../../../../tmp/tmp0k7l_byl.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp0k7l_byl.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3], [1, 2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "true\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq69idm0h.js:18:12)\n    at Object.<anonymous> (/tmp/tmpq69idm0h.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n        if (j == B.length) {\n            flag = 1;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124120,
      "stdout": "../../../../tmp/tmpds3l74ew.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpds3l74ew.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length < B.length) {\n        return false;\n    }\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqgd0ehps.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqgd0ehps.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < B.length; i++) {\n        if (A.indexOf(B[i]) == -1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 7];\n\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfr1o3sav.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfr1o3sav.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 1, 5];\nlet B: number[] = [1, 5, 6, 4, 1, 2, 3, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "false\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyll7mjp4.js:30:12)\n    at Object.<anonymous> (/tmp/tmpyll7mjp4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < B.length; i++) {\n        if (A[0] == B[i]) {\n            for (let j = 0; j < A.length; j++) {\n                if (A[j] != B[i + j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmps5_ri4c6.js:23:12)\n    at Object.<anonymous> (/tmp/tmps5_ri4c6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i: number = 0, j: number = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    if (A.length == 0) {\n        return true;\n    }\n    if (B.length == 0) {\n        return false;\n    }\n    if (A[0] == B[0]) {\n        return is_Sub_Array(A.slice(1), B.slice(1));\n    }\n    return is_Sub_Array(A, B.slice(1));\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "../../../../tmp/tmps9mgajgp.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmps9mgajgp.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124121,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcuwh9c53.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcuwh9c53.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp56k5lppi.js:27:12)\n    at Object.<anonymous> (/tmp/tmp56k5lppi.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] == B[j]) {\n                    flag = true;\n                } else {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0icsqas0.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0icsqas0.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < B.length; i++) {\n        if (A[0] == B[i]) {\n            flag = true;\n            for (let j = 0; j < A.length; j++) {\n                if (A[j] != B[i + j]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (flag == true) {\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    let j: number = 0;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n            if (j == B.length) {\n                flag = true;\n                break;\n            }\n        }\n        else {\n            j = 0;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 4, 6, 8];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i: number = 0;\n    var j: number = 0;\n    var flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "false\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "../../../../tmp/tmpf41s17jf.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpf41s17jf.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < B.length; i++) {\n        if (A[0] == B[i]) {\n            flag = true;\n            for (let j = 1; j < A.length; j++) {\n                if (A[j] != B[i + j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let isSubArray: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n                if (j == B.length - 1) {\n                    isSubArray = true;\n                }\n            }\n        }\n    }\n    return isSubArray;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B: number[] = [2, 3, 4, 5];\nlet C: number[] = [2, 4, 6, 8, 10];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number;\n    for (let i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length && B[j] === A[i + j]; j++);\n        if (j === B.length)\n            return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result = true;\n    for (let i = 0; i < B.length; i++) {\n        if (A.indexOf(B[i]) == -1) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_zop7ndi.js:17:12)\n    at Object.<anonymous> (/tmp/tmp_zop7ndi.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124123,
      "stdout": "false\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result: boolean = false;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                result = true;\n                break;\n            }\n            else {\n                result = false;\n            }\n        }\n    }\n    return result;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124123,
      "stdout": "false\ntrue\ntrue\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptqoy0nkp.js:28:12)\n    at Object.<anonymous> (/tmp/tmptqoy0nkp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz8sncbbg.js:27:12)\n    at Object.<anonymous> (/tmp/tmpz8sncbbg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var flag = false;\n    for (var i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (var j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nvar H = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nvar I = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nvar J = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\nvar K = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\nvar M = [1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124123,
      "stdout": "../../../../tmp/tmp655cqvan.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var C = A.concat(B);\n    var D = B.concat(A);\n    if (C.sort().join(',') === D.sort().join(',')) {\n        return true;\n    }\n    return false;\n}\nconsole.log(is_Sub_Array([1, 2, 3], [2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "true\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8ahdtu6l.js:15:12)\n    at Object.<anonymous> (/tmp/tmp8ahdtu6l.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx8r7q36j.js:25:12)\n    at Object.<anonymous> (/tmp/tmpx8r7q36j.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < B.length; i++) {\n        if (A.indexOf(B[i]) == -1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9pda3gqy.js:17:12)\n    at Object.<anonymous> (/tmp/tmp9pda3gqy.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                flag = true;\n            }\n        }\n    }\n    return flag;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "../../../../tmp/tmpzaj3nd63.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpzaj3nd63.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n        if (j == B.length) {\n            flag = 1;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    break;\n                }\n                if (j == B.length - 1) {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "../../../../tmp/tmp72an_y5u.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmp72an_y5u.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result = false;\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        result = true;\n    }\n    return result;\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 4, 6, 8];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124124,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (B[j] == A[i + j]) {\n                    flag = true;\n                }\n                else {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_oy5cgtg.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_oy5cgtg.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "false\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = true;\n    for (let i = 0; i < B.length; i++) {\n        if (A.indexOf(B[i]) == -1) {\n            flag = false;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 3, 4, 5, 6];\n\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2aiq612u.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2aiq612u.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i: number = 0;\n    var j: number = 0;\n    var flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                k++;\n            }\n        }\n    }\n    if (k == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0t_mxuql.js:27:12)\n    at Object.<anonymous> (/tmp/tmp0t_mxuql.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "../../../../tmp/tmp1v07w8zw.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp1v07w8zw.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4rg5wz7q.js:23:12)\n    at Object.<anonymous> (/tmp/tmp4rg5wz7q.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124126,
      "stdout": "../../../../tmp/tmppknlnlam.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var C = A.concat(B);\n    var D = B.concat(A);\n    var flag = 0;\n    for (var i = 0; i < C.length; i++) {\n        if (C[i] != D[i]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3];\nvar C = [1, 2, 3, 4, 5];\nvar D = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124126,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0, j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124126,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124126,
      "stdout": "../../../../tmp/tmp9uv9c9om.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nvar C = [1, 2, 7];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "true\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmps4a1bt43.js:27:12)\n    at Object.<anonymous> (/tmp/tmps4a1bt43.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0, j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu58ye_zu.js:36:12)\n    at Object.<anonymous> (/tmp/tmpu58ye_zu.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nlet E: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet F: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nlet G: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nlet H: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nlet I: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet J: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\nlet K: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "../../../../tmp/tmp671f6i7w.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length < B.length) {\n        return false;\n    }\n    else {\n        for (let i: number = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            else {\n                j = 0;\n            }\n        }\n        if (j == B.length) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B: number[] = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5634d5ft.js:22:12)\n    at Object.<anonymous> (/tmp/tmp5634d5ft.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            flag = true;\n            for (let j = 1; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if (flag) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B: number[] = [2, 4, 6, 8, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (flag == 0) {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\ntrue\ntrue\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpux26y14s.js:26:12)\n    at Object.<anonymous> (/tmp/tmpux26y14s.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510663,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdugxmc0_.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdugxmc0_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    flag = false;\n                    break;\n                }\n                else {\n                    flag = true;\n                }\n            }\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj9f4ok2g.js:26:12)\n    at Object.<anonymous> (/tmp/tmpj9f4ok2g.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124127,
      "stdout": "../../../../tmp/tmp8gywf0u5.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmp8gywf0u5.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j = 0;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n        }\n        else {\n            j = 0;\n        }\n        if (j == B.length) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = 1;\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\ntrue\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = 1;\n        }\n        else {\n            j++;\n            flag = 0;\n        }\n    }\n    if (flag == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] == B[0]) {\n            for (let j = 0; j < B.length; j++) {\n                if (A[i + j] != B[j]) {\n                    result = false;\n                    break;\n                }\n                result = true;\n            }\n        }\n        if (result) {\n            break;\n        }\n    }\n    return result;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124128,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 1, 5];\nlet B: number[] = [1, 5, 6, 4, 1, 2, 3, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124129,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let j: number = 0;\n    if (A.length <= B.length) {\n        for (let i = 0; i < B.length; i++) {\n            if (A[j] == B[i]) {\n                j++;\n            }\n            if (j == A.length) {\n                return true;\n            }\n        }\n        return false;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 1, 5];\nlet B: number[] = [1, 1, 5, 6, 4, 1, 2, 3, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124129,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124129,
      "stdout": "false\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}